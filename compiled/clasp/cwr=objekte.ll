; ModuleID = '/Users/karstenpoeck/lisp/coke/program/cwr=objekte.lisp'
source_filename = "/Users/karstenpoeck/lisp/coke/program/cwr=objekte.lisp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%0 = type { i8*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }
%1 = type { %2, %0*, %"class.gctools::smart_ptr", i32, %"class.gctools::GCArray_moveable.7" }
%2 = type { %"class.core::Closure_O", %"class.gctools::smart_ptr", %3, i64, i64, i64, i64 }
%3 = type { %4* }
%4 = type { %"class.core::General_O", %"class.gctools::smart_ptr.1", %5, %"class.gctools::smart_ptr", %"class.gctools::smart_ptr", %"class.gctools::smart_ptr", %"class.gctools::smart_ptr", i64, i8, i8, %"class.gctools::smart_ptr" }
%5 = type { %"class.core::T_O" }
%"class.core::Closure_O" = type { %"class.core::NamedFunction_O" }
%"class.core::NamedFunction_O" = type { %"class.core::Function_O", %"class.gctools::smart_ptr" }
%"class.core::Function_O" = type { %"class.core::General_O", %"struct.std::__1::atomic" }
%"class.core::General_O" = type { i32 (...)** }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { { %"class.core::T_O"*, i64 } (%"class.core::T_O"*, i64, %"class.core::T_O"*, %"class.core::T_O"*, %"class.core::T_O"*, %"class.core::T_O"*, ...)* }
%"class.core::T_O" = type { i8 }
%"class.gctools::smart_ptr.1" = type { %"class.core::SimpleString_O"* }
%"class.core::SimpleString_O" = type { %"class.core::AbstractSimpleVector_O" }
%"class.core::AbstractSimpleVector_O" = type { %"class.core::Array_O" }
%"class.core::Array_O" = type { %"class.core::General_O", [0 x i64] }
%"class.gctools::smart_ptr" = type { %"class.core::T_O"* }
%"class.gctools::GCArray_moveable.7" = type { i64, [0 x %"class.gctools::smart_ptr"] }

@":::global-str-/Users/karstenpoeck/lisp/coke/program/cwr=objekte.lisp" = private unnamed_addr constant [55 x i8] c"/Users/karstenpoeck/lisp/coke/program/cwr=objekte.lisp\00"
@source-file-info-handle = internal global i32 -1
@constants-table = internal global { i8*, i8*, i64 } undef
@"cwr=objekte.lisp^1^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^1^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^1^TOP-COMPILE-FILE" = private unnamed_addr constant [36 x i8] c"cwr=objekte.lisp^1^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^69^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^69^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^69^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^69^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^70^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^70^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^70^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^70^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^71^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^71^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^71^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^71^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^72^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^72^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^72^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^72^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^73^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^73^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^73^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^73^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^74^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^74^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^74^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^74^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^75^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^75^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^75^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^75^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^76^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^76^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^76^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^76^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^77^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^77^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^77^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^77^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^78^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^78^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^78^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^78^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^79^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^79^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^79^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^79^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^80^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^80^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^80^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^80^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^82^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^82^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^82^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^82^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^91^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^91^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 71, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^91^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^91^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^99^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^99^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 127, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^99^TOP-COMPILE-FILE" = private unnamed_addr constant [37 x i8] c"cwr=objekte.lisp^99^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^106^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^106^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 135, i64 141, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^106^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^106^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^110^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^110^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=AUFRUF^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=AUFRUF^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 154, i64 162, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^110^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^110^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^118^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^118^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 142, i64 198, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^118^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^118^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^135^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^135^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 213, i64 217, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^135^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^135^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^141^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^141^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=INIT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=INIT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 229, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^141^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^141^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^147^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^147^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=UMSETZEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=UMSETZEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 188, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^147^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^147^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^155^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^155^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 243, i64 249, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^155^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^155^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^161^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^161^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 145, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^161^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^161^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^164^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^164^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=FALL_LADEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=FALL_LADEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 264, i64 268, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^164^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^164^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^179^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^179^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 276, i64 12, i64 12, i64 0, i64 1, i64 0 }
@":::global-str-LAMBDA^COMMON-LISP^FN^^" = private unnamed_addr constant [24 x i8] c"LAMBDA^COMMON-LISP^FN^^\00"
@"LAMBDA^COMMON-LISP^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 281, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^179^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^179^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^185^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^185^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 293, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.1^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.1", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 296, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^185^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^185^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^194^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^194^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 176, i64 12, i64 303, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^194^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^194^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^199^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^199^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 305, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^199^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^199^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^202^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^202^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 336, i64 342, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^202^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^202^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^237^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^237^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 147, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^237^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^237^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^241^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^241^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 357, i64 369, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.2^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.2", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^241^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^241^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^251^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^251^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 408, i64 416, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.3^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.3", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.4^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.4", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.5^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.5", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.6^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.6", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^251^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^251^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^279^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^279^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 422, i64 428, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^279^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^279^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^285^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^285^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 417, i64 445, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^285^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^285^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^304^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^304^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 457, i64 463, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^304^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^304^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^312^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^312^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 448, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.7^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.7", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 472, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^312^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^312^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^327^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^327^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"MY-LOAD^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"MY-LOAD^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 482, i64 488, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.8^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.8", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.9^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.9", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.10^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.10", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.11^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.11", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^327^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^327^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^350^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^350^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 496, i64 500, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.12^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.12", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.13^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.13", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.14^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.14", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^350^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^350^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^360^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^360^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 512, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^360^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^360^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^385^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^385^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 518, i64 12, i64 521, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^385^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^385^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^393^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^393^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 182, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^393^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^393^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^401^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^401^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 537, i64 543, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^401^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^401^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^406^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^406^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 489, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^406^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^406^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^415^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^415^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 505, i64 555, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^415^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^415^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^428^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^428^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 561, i64 567, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^428^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^428^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^444^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^444^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 569, i64 573, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^444^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^444^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^448^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^448^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 575, i64 581, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^448^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^448^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^457^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^457^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 583, i64 589, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^457^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^457^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^460^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^460^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 591, i64 595, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^460^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^460^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^469^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^469^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 599, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^469^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^469^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^473^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^473^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 596, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^473^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^473^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^476^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^476^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 617, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^476^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^476^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^481^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^481^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 466, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^481^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^481^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^485^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^485^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 273, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.15^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.15", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 626, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^485^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^485^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^492^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^492^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 630, i64 634, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^492^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^492^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^531^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^531^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 636, i64 640, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^531^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^531^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^535^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^535^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 680, i64 685, i64 684, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.16^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.16", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 686, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.17^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.17", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 687, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^535^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^535^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^550^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^550^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 691, i64 696, i64 695, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.18^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.18", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 697, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^550^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^550^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^559^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^559^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 703, i64 707, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.19^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.19", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 708, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^559^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^559^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^577^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^577^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 712, i64 716, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^577^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^577^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^583^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^583^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@":::global-str-CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [46 x i8] c"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^\00"
@"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 740, i64 752, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.20^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.20", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.21^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.21", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.22^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.22", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 759, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^583^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^583^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^608^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^608^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 763, i64 767, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^608^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^608^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^614^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^614^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 773, i64 779, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.23^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.23", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 780, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^614^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^614^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^622^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^622^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 782, i64 786, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^622^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^622^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^628^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^628^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 788, i64 794, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.24^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.24", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 795, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^628^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^628^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^633^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^633^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 724, i64 799, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^633^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^633^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^637^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^637^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 803, i64 807, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^637^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^637^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^644^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^644^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 809, i64 813, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^644^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^644^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^650^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^650^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 817, i64 821, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^650^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^650^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^656^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^656^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 823, i64 827, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^656^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^656^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^662^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^662^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 829, i64 833, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^662^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^662^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^667^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^667^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 837, i64 842, i64 841, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.25^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.25", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 843, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^667^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^667^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^679^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^679^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 834, i64 847, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^679^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^679^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^684^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^684^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 849, i64 853, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^684^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^684^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^690^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^690^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 857, i64 861, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^690^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^690^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^694^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^694^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 863, i64 867, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^694^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^694^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^698^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^698^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 875, i64 879, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.26^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.26", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 880, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^698^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^698^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^705^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^705^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 882, i64 888, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^705^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^705^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^709^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^709^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 894, i64 900, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^709^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^709^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^721^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^721^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 760, i64 904, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^721^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^721^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^725^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^725^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 906, i64 910, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^725^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^725^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^731^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^731^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 914, i64 918, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^731^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^731^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^739^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^739^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 922, i64 926, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^739^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^739^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^745^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^745^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 928, i64 932, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^745^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^745^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^748^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^748^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 934, i64 940, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^748^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^748^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^751^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^751^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 944, i64 960, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^751^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^751^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^754^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^754^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 962, i64 968, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^754^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^754^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^757^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^757^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 970, i64 978, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^757^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^757^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^761^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^761^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 984, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^761^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^761^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^766^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^766^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 990, i64 996, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^766^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^766^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^770^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^770^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 998, i64 1004, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^770^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^770^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^775^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^775^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1006, i64 1010, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^775^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^775^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^780^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^780^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1016, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^780^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^780^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^786^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^786^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1026, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^786^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^786^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^797^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^797^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1034, i64 1040, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^797^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^797^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^802^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^802^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1044, i64 1050, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^802^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^802^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^814^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^814^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1052, i64 1078, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^814^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^814^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^823^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^823^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1088, i64 1092, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^823^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^823^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^829^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^829^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1094, i64 1098, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^829^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^829^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^833^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^833^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1166, i64 1180, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.27^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.27", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 1181, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.28^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.28", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 1208, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.30^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.30", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 1220, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.31^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.31", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 1236, i64 12, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.32^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.32", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 279, i64 1242, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^833^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^833^TOP-COMPILE-FILE\00"
@"cwr=objekte.lisp^851^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"cwr=objekte.lisp^851^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 14, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"CWR-STATISTIK^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"CWR-STATISTIK^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 1269, i64 12, i64 12, i64 0, i64 1, i64 0 }
@"str-cwr=objekte.lisp^851^TOP-COMPILE-FILE" = private unnamed_addr constant [38 x i8] c"cwr=objekte.lisp^851^TOP-COMPILE-FILE\00"
@"str-*MAKE-SPECIAL" = private unnamed_addr constant [14 x i8] c"*MAKE-SPECIAL\00"
@str-CORE = private unnamed_addr constant [5 x i8] c"CORE\00"
@str-CWR_CONSTRAINT_DEBUG = private unnamed_addr constant [21 x i8] c"CWR_CONSTRAINT_DEBUG\00"
@str-COMMON-LISP-USER = private unnamed_addr constant [17 x i8] c"COMMON-LISP-USER\00"
@str-BOUNDP = private unnamed_addr constant [7 x i8] c"BOUNDP\00"
@str-COMMON-LISP = private unnamed_addr constant [12 x i8] c"COMMON-LISP\00"
@str-TOP-LEVEL = private unnamed_addr constant [10 x i8] c"TOP-LEVEL\00"
@str-CWR_VORSCHLAG_DEBUG = private unnamed_addr constant [20 x i8] c"CWR_VORSCHLAG_DEBUG\00"
@str-CWR_FEHLER_DEBUG = private unnamed_addr constant [17 x i8] c"CWR_FEHLER_DEBUG\00"
@str-CWR_AUSGABE_DEBUG = private unnamed_addr constant [18 x i8] c"CWR_AUSGABE_DEBUG\00"
@str-CWR_KNAPP_DEBUG = private unnamed_addr constant [16 x i8] c"CWR_KNAPP_DEBUG\00"
@str-CWR_INTERAKTIV = private unnamed_addr constant [15 x i8] c"CWR_INTERAKTIV\00"
@"str-CWR=ABARBEITUNG_DEBUG" = private unnamed_addr constant [22 x i8] c"CWR=ABARBEITUNG_DEBUG\00"
@"str-CWR=UEBERSETZEN_DEBUG" = private unnamed_addr constant [22 x i8] c"CWR=UEBERSETZEN_DEBUG\00"
@str-CWR_TRICKFILM = private unnamed_addr constant [14 x i8] c"CWR_TRICKFILM\00"
@str-CWR_FUNKTIONEN_NACHLADEN = private unnamed_addr constant [25 x i8] c"CWR_FUNKTIONEN_NACHLADEN\00"
@str-CWR_ZEITMESSUNG_DEBUG = private unnamed_addr constant [22 x i8] c"CWR_ZEITMESSUNG_DEBUG\00"
@str-CWR_STATISTIK_DEBUG = private unnamed_addr constant [20 x i8] c"CWR_STATISTIK_DEBUG\00"
@str-CWR_NICHT_TESTEN = private unnamed_addr constant [17 x i8] c"CWR_NICHT_TESTEN\00"
@str-CWR_STATISTIK = private unnamed_addr constant [14 x i8] c"CWR_STATISTIK\00"
@"str-MAKE-CWR=STATISTIK_TYP" = private unnamed_addr constant [23 x i8] c"MAKE-CWR=STATISTIK_TYP\00"
@str-ANZ_VORSCHLAGSZUSTAENDE = private unnamed_addr constant [24 x i8] c"ANZ_VORSCHLAGSZUSTAENDE\00"
@str-KEYWORD = private unnamed_addr constant [8 x i8] c"KEYWORD\00"
@str-ANZKORREKTURZUSTAENDE = private unnamed_addr constant [22 x i8] c"ANZKORREKTURZUSTAENDE\00"
@str-ANZCONSTRAINTSGETESTET = private unnamed_addr constant [23 x i8] c"ANZCONSTRAINTSGETESTET\00"
@str-FDEFINITION = private unnamed_addr constant [12 x i8] c"FDEFINITION\00"
@str-FUNCTION = private unnamed_addr constant [9 x i8] c"FUNCTION\00"
@str-SYMBOL = private unnamed_addr constant [7 x i8] c"SYMBOL\00"
@str-SYMBOL-FUNCTION = private unnamed_addr constant [16 x i8] c"SYMBOL-FUNCTION\00"
@str-ERROR = private unnamed_addr constant [6 x i8] c"ERROR\00"
@str-TYPE-ERROR = private unnamed_addr constant [11 x i8] c"TYPE-ERROR\00"
@str-DATUM = private unnamed_addr constant [6 x i8] c"DATUM\00"
@str-EXPECTED-TYPE = private unnamed_addr constant [14 x i8] c"EXPECTED-TYPE\00"
@str-OR = private unnamed_addr constant [3 x i8] c"OR\00"
@"str-CWR=STATISTIK_RUECKSETZEN" = private unnamed_addr constant [26 x i8] c"CWR=STATISTIK_RUECKSETZEN\00"
@str-SETF-LAMBDA-LIST = private unnamed_addr constant [17 x i8] c"SETF-LAMBDA-LIST\00"
@str-SET-SOURCE-INFO = private unnamed_addr constant [16 x i8] c"SET-SOURCE-INFO\00"
@str-CURRENT-SOURCE-FILE = private unnamed_addr constant [20 x i8] c"CURRENT-SOURCE-FILE\00"
@"str-*CURRENT-FORM-LINENO*" = private unnamed_addr constant [22 x i8] c"*CURRENT-FORM-LINENO*\00"
@str-COMPILER = private unnamed_addr constant [9 x i8] c"COMPILER\00"
@str-BACKQUOTE-APPEND = private unnamed_addr constant [17 x i8] c"BACKQUOTE-APPEND\00"
@str-LIST = private unnamed_addr constant [5 x i8] c"LIST\00"
@str-VORSCHLAG = private unnamed_addr constant [10 x i8] c"VORSCHLAG\00"
@str-CONSTRAINT = private unnamed_addr constant [11 x i8] c"CONSTRAINT\00"
@str-HEILMITTEL = private unnamed_addr constant [11 x i8] c"HEILMITTEL\00"
@str-RELATIONEN = private unnamed_addr constant [11 x i8] c"RELATIONEN\00"
@str-UEBERWACHEN = private unnamed_addr constant [12 x i8] c"UEBERWACHEN\00"
@str-INVERS = private unnamed_addr constant [7 x i8] c"INVERS\00"
@str-WERT_SETZEN = private unnamed_addr constant [12 x i8] c"WERT_SETZEN\00"
@str-WERT_SETZEN_LOKAL = private unnamed_addr constant [18 x i8] c"WERT_SETZEN_LOKAL\00"
@str-WERT_ZURUECKZIEHEN = private unnamed_addr constant [19 x i8] c"WERT_ZURUECKZIEHEN\00"
@str-WERT_ZURUECK_LOKAL = private unnamed_addr constant [19 x i8] c"WERT_ZURUECK_LOKAL\00"
@str-PARAMETER_BEKANNT = private unnamed_addr constant [18 x i8] c"PARAMETER_BEKANNT\00"
@str-PARAMETER_UNBEKANNT = private unnamed_addr constant [20 x i8] c"PARAMETER_UNBEKANNT\00"
@str-AGENDA_LESEN = private unnamed_addr constant [13 x i8] c"AGENDA_LESEN\00"
@str-DATEIEN = private unnamed_addr constant [8 x i8] c"DATEIEN\00"
@str-VERZEICHNIS = private unnamed_addr constant [12 x i8] c"VERZEICHNIS\00"
@str-ABLAUF_BEARBEITUNG = private unnamed_addr constant [19 x i8] c"ABLAUF_BEARBEITUNG\00"
@str-WERTE_BEREICH = private unnamed_addr constant [14 x i8] c"WERTE_BEREICH\00"
@str-WERT_SETZEN_OHNE_SPEICHERN = private unnamed_addr constant [27 x i8] c"WERT_SETZEN_OHNE_SPEICHERN\00"
@str-WERT_SETZEN_LOKAL_OHNE_SPEICHERN = private unnamed_addr constant [33 x i8] c"WERT_SETZEN_LOKAL_OHNE_SPEICHERN\00"
@"str-CWR=COKE_STANDARD_SLOTS" = private unnamed_addr constant [24 x i8] c"CWR=COKE_STANDARD_SLOTS\00"
@str-SET-DIFFERENCE = private unnamed_addr constant [15 x i8] c"SET-DIFFERENCE\00"
@"str-YAS=BENUTZER_SLOTS" = private unnamed_addr constant [19 x i8] c"YAS=BENUTZER_SLOTS\00"
@"str-CWR=BENUTZER_SLOTS" = private unnamed_addr constant [19 x i8] c"CWR=BENUTZER_SLOTS\00"
@str-OBJEKT = private unnamed_addr constant [7 x i8] c"OBJEKT\00"
@"str-CWR=NUR_WB_LADEN" = private unnamed_addr constant [17 x i8] c"CWR=NUR_WB_LADEN\00"
@"str-Wissensbasen;" = private unnamed_addr constant [14 x i8] c"Wissensbasen;\00"
@"str-CWR=DIALOG-SCHLIESSEN" = private unnamed_addr constant [22 x i8] c"CWR=DIALOG-SCHLIESSEN\00"
@str-CWR-DATEIEN_LADEN = private unnamed_addr constant [18 x i8] c"CWR-DATEIEN_LADEN\00"
@"str-ZWO=AUSWERTUNG_DER_MENUES" = private unnamed_addr constant [26 x i8] c"ZWO=AUSWERTUNG_DER_MENUES\00"
@"str-ZWE=ALLES_UEBERSETZEN" = private unnamed_addr constant [22 x i8] c"ZWE=ALLES_UEBERSETZEN\00"
@"str-CWR=AUFRUF" = private unnamed_addr constant [11 x i8] c"CWR=AUFRUF\00"
@"str-&OPTIONAL" = private unnamed_addr constant [10 x i8] c"&OPTIONAL\00"
@str-WAS = private unnamed_addr constant [4 x i8] c"WAS\00"
@"str-instanzen;" = private unnamed_addr constant [11 x i8] c"instanzen;\00"
@"str-B=ORDNER-P" = private unnamed_addr constant [11 x i8] c"B=ORDNER-P\00"
@str-CHOOSE-FILE-DIALOG = private unnamed_addr constant [19 x i8] c"CHOOSE-FILE-DIALOG\00"
@str-BUTTON-STRING = private unnamed_addr constant [14 x i8] c"BUTTON-STRING\00"
@"str-COKE=S" = private unnamed_addr constant [7 x i8] c"COKE=S\00"
@str-LADEN = private unnamed_addr constant [6 x i8] c"LADEN\00"
@str-DIRECTORY = private unnamed_addr constant [10 x i8] c"DIRECTORY\00"
@"str-CWR=BENUTZER_INSTANZEN_LOESCHEN" = private unnamed_addr constant [32 x i8] c"CWR=BENUTZER_INSTANZEN_LOESCHEN\00"
@"str-YAS=ALLES_LOESCHEN" = private unnamed_addr constant [19 x i8] c"YAS=ALLES_LOESCHEN\00"
@"str-ZER=ZERTEILEN" = private unnamed_addr constant [14 x i8] c"ZER=ZERTEILEN\00"
@"str-CWR=NEUE_INVERSE" = private unnamed_addr constant [17 x i8] c"CWR=NEUE_INVERSE\00"
@str-YAS_LETZTE_DATEI_INSTANZEN = private unnamed_addr constant [27 x i8] c"YAS_LETZTE_DATEI_INSTANZEN\00"
@str-YAS_LETZTE_DATEI = private unnamed_addr constant [17 x i8] c"YAS_LETZTE_DATEI\00"
@"str-CWR=UMSETZEN" = private unnamed_addr constant [13 x i8] c"CWR=UMSETZEN\00"
@str-ALLES_LOESCHEN = private unnamed_addr constant [15 x i8] c"ALLES_LOESCHEN\00"
@str-ORDNER = private unnamed_addr constant [7 x i8] c"ORDNER\00"
@"str-YAS=LESE_WERT" = private unnamed_addr constant [14 x i8] c"YAS=LESE_WERT\00"
@str-ZU_OBJEKT = private unnamed_addr constant [10 x i8] c"ZU_OBJEKT\00"
@str-CONS = private unnamed_addr constant [5 x i8] c"CONS\00"
@str-EQ-INCOMPARABLE = private unnamed_addr constant [16 x i8] c"EQ-INCOMPARABLE\00"
@str-CLASP-CLEAVIR = private unnamed_addr constant [14 x i8] c"CLASP-CLEAVIR\00"
@str-EQL-UNDERLYING = private unnamed_addr constant [15 x i8] c"EQL-UNDERLYING\00"
@"str-CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG" = private unnamed_addr constant [32 x i8] c"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG\00"
@"str-YAS=HAT_OBJEKT_SLOT_P" = private unnamed_addr constant [22 x i8] c"YAS=HAT_OBJEKT_SLOT_P\00"
@str-ZU_ATTRIBUT = private unnamed_addr constant [12 x i8] c"ZU_ATTRIBUT\00"
@"str-YAS=NEUER_SLOT" = private unnamed_addr constant [15 x i8] c"YAS=NEUER_SLOT\00"
@str-INFORMANT = private unnamed_addr constant [10 x i8] c"INFORMANT\00"
@str-EINGABE = private unnamed_addr constant [8 x i8] c"EINGABE\00"
@"str-CWR=INIT" = private unnamed_addr constant [9 x i8] c"CWR=INIT\00"
@"str-YAS=ALLE" = private unnamed_addr constant [9 x i8] c"YAS=ALLE\00"
@"str-YAS=SCHREIBE_WERT" = private unnamed_addr constant [18 x i8] c"YAS=SCHREIBE_WERT\00"
@str-F-VERBALISIEREN = private unnamed_addr constant [16 x i8] c"F-VERBALISIEREN\00"
@"str-YAS=TUE_METHODE" = private unnamed_addr constant [16 x i8] c"YAS=TUE_METHODE\00"
@"str-CWR=VERBALISIERE-OBJEKT" = private unnamed_addr constant [24 x i8] c"CWR=VERBALISIERE-OBJEKT\00"
@str-WER = private unnamed_addr constant [4 x i8] c"WER\00"
@"str-KOB=ALLE_DIALOGE_SCHLIESSEN" = private unnamed_addr constant [28 x i8] c"KOB=ALLE_DIALOGE_SCHLIESSEN\00"
@str-JA = private unnamed_addr constant [3 x i8] c"JA\00"
@"str-B=JA-NEIN" = private unnamed_addr constant [10 x i8] c"B=JA-NEIN\00"
@"str-Wollen Sie wirklich die bestehende Wissensbasis ueberschreiben? Wissen Sie was Sie da tun?" = private unnamed_addr constant [91 x i8] c"Wollen Sie wirklich die bestehende Wissensbasis ueberschreiben? Wissen Sie was Sie da tun?\00"
@"str-Wissensbasiszustaende;" = private unnamed_addr constant [23 x i8] c"Wissensbasiszustaende;\00"
@str-LOAD = private unnamed_addr constant [5 x i8] c"LOAD\00"
@"str-CWR=FALL_LADEN" = private unnamed_addr constant [15 x i8] c"CWR=FALL_LADEN\00"
@"str-YAS=SPEICHER_ALLE_OBJEKTE" = private unnamed_addr constant [26 x i8] c"YAS=SPEICHER_ALLE_OBJEKTE\00"
@str-AUSNAHMEBEDINGUNG = private unnamed_addr constant [18 x i8] c"AUSNAHMEBEDINGUNG\00"
@"str-CWR=BENUTZER_KLASSEN" = private unnamed_addr constant [21 x i8] c"CWR=BENUTZER_KLASSEN\00"
@"str-CWR=SPEICHERE_OBERE_1/2-EBENE" = private unnamed_addr constant [30 x i8] c"CWR=SPEICHERE_OBERE_1/2-EBENE\00"
@str-LAMBDA = private unnamed_addr constant [7 x i8] c"LAMBDA\00"
@str-F-NICHT_SPEICHERN = private unnamed_addr constant [18 x i8] c"F-NICHT_SPEICHERN\00"
@"str-YAS=EINE_KLASSE_P" = private unnamed_addr constant [18 x i8] c"YAS=EINE_KLASSE_P\00"
@"str-YAS=DER_VATER" = private unnamed_addr constant [14 x i8] c"YAS=DER_VATER\00"
@str-ART = private unnamed_addr constant [4 x i8] c"ART\00"
@str-INSTANZEN = private unnamed_addr constant [10 x i8] c"INSTANZEN\00"
@"str-CWR=SPEICHERE_UNTERE_1/2-EBENE" = private unnamed_addr constant [31 x i8] c"CWR=SPEICHERE_UNTERE_1/2-EBENE\00"
@"str-YAS=LOESCHE_ALLE_KINDER" = private unnamed_addr constant [24 x i8] c"YAS=LOESCHE_ALLE_KINDER\00"
@str-SET-DOCUMENTATION = private unnamed_addr constant [18 x i8] c"SET-DOCUMENTATION\00"
@"str-Loesche alle benutzerdefinierten Instanzen" = private unnamed_addr constant [43 x i8] c"Loesche alle benutzerdefinierten Instanzen\00"
@"str-CWR=WISSENSBASIZUSTAND-SICHERN" = private unnamed_addr constant [31 x i8] c"CWR=WISSENSBASIZUSTAND-SICHERN\00"
@str-VECTOR = private unnamed_addr constant [7 x i8] c"VECTOR\00"
@str-NULL = private unnamed_addr constant [5 x i8] c"NULL\00"
@str-ETYPECASE-ERROR = private unnamed_addr constant [16 x i8] c"ETYPECASE-ERROR\00"
@str-FIXNUM = private unnamed_addr constant [7 x i8] c"FIXNUM\00"
@str-SINGLE-FLOAT = private unnamed_addr constant [13 x i8] c"SINGLE-FLOAT\00"
@str-DOUBLE-FLOAT = private unnamed_addr constant [13 x i8] c"DOUBLE-FLOAT\00"
@str-CONVERT-OVERFLOW-RESULT-TO-BIGNUM = private unnamed_addr constant [34 x i8] c"CONVERT-OVERFLOW-RESULT-TO-BIGNUM\00"
@"str-TWO-ARG-+" = private unnamed_addr constant [10 x i8] c"TWO-ARG-+\00"
@str-CHAR = private unnamed_addr constant [5 x i8] c"CHAR\00"
@str-TWO-ARG-- = private unnamed_addr constant [10 x i8] c"TWO-ARG--\00"
@"str-CHAR=" = private unnamed_addr constant [6 x i8] c"CHAR=\00"
@"str-B=KONKATENIERE-NACH-STRING" = private unnamed_addr constant [27 x i8] c"B=KONKATENIERE-NACH-STRING\00"
@str-CWR-WIRKLICHER-ORDNER-MACHEN = private unnamed_addr constant [29 x i8] c"CWR-WIRKLICHER-ORDNER-MACHEN\00"
@str-ARRAY-RANK = private unnamed_addr constant [11 x i8] c"ARRAY-RANK\00"
@str-PRINT = private unnamed_addr constant [6 x i8] c"PRINT\00"
@"str-Hilfsdateien nachladen" = private unnamed_addr constant [23 x i8] c"Hilfsdateien nachladen\00"
@"str-YAS=EIN_OBJEKT_P" = private unnamed_addr constant [17 x i8] c"YAS=EIN_OBJEKT_P\00"
@str-UNBEKANNT = private unnamed_addr constant [10 x i8] c"UNBEKANNT\00"
@str-CALL-WITH-VARIABLE-BOUND = private unnamed_addr constant [25 x i8] c"CALL-WITH-VARIABLE-BOUND\00"
@str-CLEAVIR-PRIMOP = private unnamed_addr constant [15 x i8] c"CLEAVIR-PRIMOP\00"
@str-CWR-WERT-SETZEN = private unnamed_addr constant [16 x i8] c"CWR-WERT-SETZEN\00"
@str-INSTANZ = private unnamed_addr constant [8 x i8] c"INSTANZ\00"
@str-ATTRIBUT = private unnamed_addr constant [9 x i8] c"ATTRIBUT\00"
@str-WERT = private unnamed_addr constant [5 x i8] c"WERT\00"
@str-PROBE-FILE = private unnamed_addr constant [11 x i8] c"PROBE-FILE\00"
@str-DELETE-FILE = private unnamed_addr constant [12 x i8] c"DELETE-FILE\00"
@str-OPEN = private unnamed_addr constant [5 x i8] c"OPEN\00"
@str-IF-DOES-NOT-EXIST = private unnamed_addr constant [18 x i8] c"IF-DOES-NOT-EXIST\00"
@str-CREATE = private unnamed_addr constant [7 x i8] c"CREATE\00"
@str-DIRECTION = private unnamed_addr constant [10 x i8] c"DIRECTION\00"
@str-OUTPUT = private unnamed_addr constant [7 x i8] c"OUTPUT\00"
@str-FUNWIND-PROTECT = private unnamed_addr constant [16 x i8] c"FUNWIND-PROTECT\00"
@str-MULTIPLE-VALUE-PROG1-FUNCTION = private unnamed_addr constant [30 x i8] c"MULTIPLE-VALUE-PROG1-FUNCTION\00"
@str-PRO-AGENDEN_DEFINIEREN = private unnamed_addr constant [23 x i8] c"PRO-AGENDEN_DEFINIEREN\00"
@"str-$BERECHNUNG" = private unnamed_addr constant [12 x i8] c"$BERECHNUNG\00"
@"str-$LISP" = private unnamed_addr constant [6 x i8] c"$LISP\00"
@"str-PRO=BESTIMME_AKTUELLES_METAOBJEKT" = private unnamed_addr constant [34 x i8] c"PRO=BESTIMME_AKTUELLES_METAOBJEKT\00"
@str-QUOTE = private unnamed_addr constant [6 x i8] c"QUOTE\00"
@"str-YAS=LESE_INFORMANT" = private unnamed_addr constant [19 x i8] c"YAS=LESE_INFORMANT\00"
@"str-$AUSGABE" = private unnamed_addr constant [9 x i8] c"$AUSGABE\00"
@str-CLOSE = private unnamed_addr constant [6 x i8] c"CLOSE\00"
@str-ABORT = private unnamed_addr constant [6 x i8] c"ABORT\00"
@"str-CWR=SICHER_ERGEBNIS" = private unnamed_addr constant [20 x i8] c"CWR=SICHER_ERGEBNIS\00"
@str-DATEI_NAME = private unnamed_addr constant [11 x i8] c"DATEI_NAME\00"
@str-BEFEHLSLISTE = private unnamed_addr constant [13 x i8] c"BEFEHLSLISTE\00"
@"str-CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1" = private unnamed_addr constant [36 x i8] c"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1\00"
@str-LISTP = private unnamed_addr constant [6 x i8] c"LISTP\00"
@"str-CWR=ANALYSE_GLOBALKONTROLLE_LISTE" = private unnamed_addr constant [34 x i8] c"CWR=ANALYSE_GLOBALKONTROLLE_LISTE\00"
@str-LISTE = private unnamed_addr constant [6 x i8] c"LISTE\00"
@"str-$BERECHNE" = private unnamed_addr constant [10 x i8] c"$BERECHNE\00"
@"str-$SUCHEN" = private unnamed_addr constant [8 x i8] c"$SUCHEN\00"
@"str-$GANZE_BERECHNUNG" = private unnamed_addr constant [18 x i8] c"$GANZE_BERECHNUNG\00"
@"str-$EXAKT" = private unnamed_addr constant [7 x i8] c"$EXAKT\00"
@"str-$INTERAKTION" = private unnamed_addr constant [13 x i8] c"$INTERAKTION\00"
@"str-$INTERAKTIONSFENSTER_SCHLIESSEN" = private unnamed_addr constant [32 x i8] c"$INTERAKTIONSFENSTER_SCHLIESSEN\00"
@str-REMOVE-DUPLICATES = private unnamed_addr constant [18 x i8] c"REMOVE-DUPLICATES\00"
@"str-CWR=ANALYSIERERE-STEUERUNGSOBJEKT" = private unnamed_addr constant [34 x i8] c"CWR=ANALYSIERERE-STEUERUNGSOBJEKT\00"
@str-ZUORDNUNGS_PROBLEM = private unnamed_addr constant [19 x i8] c"ZUORDNUNGS_PROBLEM\00"
@str-TEST = private unnamed_addr constant [5 x i8] c"TEST\00"
@str-EQUAL = private unnamed_addr constant [6 x i8] c"EQUAL\00"
@"str-CWR=SPEICHERE_FALL" = private unnamed_addr constant [19 x i8] c"CWR=SPEICHERE_FALL\00"
@str-DATEI = private unnamed_addr constant [6 x i8] c"DATEI\00"
@str-MACROCODE = private unnamed_addr constant [10 x i8] c"MACROCODE\00"
@"str-CWR=ABLAUBSTEUERUNG_WURZEL" = private unnamed_addr constant [27 x i8] c"CWR=ABLAUBSTEUERUNG_WURZEL\00"
@str-REVERSE = private unnamed_addr constant [8 x i8] c"REVERSE\00"
@str-INPUT = private unnamed_addr constant [6 x i8] c"INPUT\00"
@str-READ = private unnamed_addr constant [5 x i8] c"READ\00"
@str-ENDE = private unnamed_addr constant [5 x i8] c"ENDE\00"
@str-EVAL = private unnamed_addr constant [5 x i8] c"EVAL\00"
@str-MY-LOAD = private unnamed_addr constant [8 x i8] c"MY-LOAD\00"
@str-FILENAME = private unnamed_addr constant [9 x i8] c"FILENAME\00"
@"str-CWR=DYNAMISCHE_ATTRIBUTE_INIT" = private unnamed_addr constant [30 x i8] c"CWR=DYNAMISCHE_ATTRIBUTE_INIT\00"
@str-DO-TIME = private unnamed_addr constant [8 x i8] c"DO-TIME\00"
@str-PRO-STATISTIK-INITIALISIEREN = private unnamed_addr constant [29 x i8] c"PRO-STATISTIK-INITIALISIEREN\00"
@"str-CWR=LADE_ES_ES_LOKAL" = private unnamed_addr constant [21 x i8] c"CWR=LADE_ES_ES_LOKAL\00"
@"str-YAS=ALLE_OBJEKTE" = private unnamed_addr constant [17 x i8] c"YAS=ALLE_OBJEKTE\00"
@"str-YAS=ALLE_SLOTS" = private unnamed_addr constant [15 x i8] c"YAS=ALLE_SLOTS\00"
@"str-CWR=HOLE_INVERSES_ATTRIBUT" = private unnamed_addr constant [27 x i8] c"CWR=HOLE_INVERSES_ATTRIBUT\00"
@str-ATOM = private unnamed_addr constant [5 x i8] c"ATOM\00"
@"str-YAS=SCHREIBE_ZUSAETZLICHEN_WERT" = private unnamed_addr constant [32 x i8] c"YAS=SCHREIBE_ZUSAETZLICHEN_WERT\00"
@str-CWR-SETZE_INVERSE = private unnamed_addr constant [18 x i8] c"CWR-SETZE_INVERSE\00"
@"str-YAS=LOESCHE_WERT" = private unnamed_addr constant [17 x i8] c"YAS=LOESCHE_WERT\00"
@str-CWR-LOESCHE_INVERSE = private unnamed_addr constant [20 x i8] c"CWR-LOESCHE_INVERSE\00"
@"str-loesche alle slots deren informant invers ist" = private unnamed_addr constant [46 x i8] c"loesche alle slots deren informant invers ist\00"
@"str-KOB=AUSGABE_NACHRICHT" = private unnamed_addr constant [22 x i8] c"KOB=AUSGABE_NACHRICHT\00"
@str-VERZEIGERUNGEN = private unnamed_addr constant [15 x i8] c"VERZEIGERUNGEN\00"
@"str-KOB=SCHLIESSE_AUSGABE_FENSTER" = private unnamed_addr constant [30 x i8] c"KOB=SCHLIESSE_AUSGABE_FENSTER\00"
@str-PROGRAMM = private unnamed_addr constant [9 x i8] c"PROGRAMM\00"
@str-PROPAGIERT = private unnamed_addr constant [11 x i8] c"PROPAGIERT\00"
@str-BENUTZER = private unnamed_addr constant [9 x i8] c"BENUTZER\00"
@str-CWR-EIN_DYNAMISCHER_INFORMANT = private unnamed_addr constant [30 x i8] c"CWR-EIN_DYNAMISCHER_INFORMANT\00"
@str-INFO = private unnamed_addr constant [5 x i8] c"INFO\00"
@str-ALT = private unnamed_addr constant [4 x i8] c"ALT\00"
@str-GETF = private unnamed_addr constant [5 x i8] c"GETF\00"
@str-SLOT = private unnamed_addr constant [5 x i8] c"SLOT\00"
@str-PUT-F = private unnamed_addr constant [6 x i8] c"PUT-F\00"
@str-REM-F = private unnamed_addr constant [6 x i8] c"REM-F\00"
@"str-CWR=SETZE_INVERSES_ATTRIBUT" = private unnamed_addr constant [28 x i8] c"CWR=SETZE_INVERSES_ATTRIBUT\00"
@str-NAME = private unnamed_addr constant [5 x i8] c"NAME\00"
@"str-CWR=HOLE_RELATIONEN_ATTRIBUTE" = private unnamed_addr constant [30 x i8] c"CWR=HOLE_RELATIONEN_ATTRIBUTE\00"
@"str-CWR=SETZE_RELATIONEN_ATTRIBUTE" = private unnamed_addr constant [31 x i8] c"CWR=SETZE_RELATIONEN_ATTRIBUTE\00"
@str-ATTRIBUT_LISTE = private unnamed_addr constant [15 x i8] c"ATTRIBUT_LISTE\00"
@"str-CWR=LESE_PRIORITAET" = private unnamed_addr constant [20 x i8] c"CWR=LESE_PRIORITAET\00"
@str-PARTNER = private unnamed_addr constant [8 x i8] c"PARTNER\00"
@"str-CWR=SCHREIBE_PRIORITAET" = private unnamed_addr constant [24 x i8] c"CWR=SCHREIBE_PRIORITAET\00"
@"str-CWR=DIE_WURZEL" = private unnamed_addr constant [15 x i8] c"CWR=DIE_WURZEL\00"
@"str-CWR=DIE_KLASSEN" = private unnamed_addr constant [16 x i8] c"CWR=DIE_KLASSEN\00"
@str-META = private unnamed_addr constant [5 x i8] c"META\00"
@str-KINDER = private unnamed_addr constant [7 x i8] c"KINDER\00"
@str-BENUTZER_MENUE = private unnamed_addr constant [15 x i8] c"BENUTZER_MENUE\00"
@str-ABLAUFKONTROLLE = private unnamed_addr constant [16 x i8] c"ABLAUFKONTROLLE\00"
@str-STARTKORREKTUROBJEKTE = private unnamed_addr constant [22 x i8] c"STARTKORREKTUROBJEKTE\00"
@str-METAKORREKTUROBJEKTE = private unnamed_addr constant [21 x i8] c"METAKORREKTUROBJEKTE\00"
@"str-CWR=SYSTEM_KLASSEN" = private unnamed_addr constant [19 x i8] c"CWR=SYSTEM_KLASSEN\00"
@str-REMOVE-IF = private unnamed_addr constant [10 x i8] c"REMOVE-IF\00"
@str-KLASSE = private unnamed_addr constant [7 x i8] c"KLASSE\00"
@"str-CWR=SETZE_WERTE_BEREICH" = private unnamed_addr constant [24 x i8] c"CWR=SETZE_WERTE_BEREICH\00"
@"str-CWR=LESE_WERTE_BEREICH" = private unnamed_addr constant [23 x i8] c"CWR=LESE_WERTE_BEREICH\00"
@str-JA_NEIN = private unnamed_addr constant [8 x i8] c"JA_NEIN\00"
@str-ZAHL = private unnamed_addr constant [5 x i8] c"ZAHL\00"
@str-BOOLESCH = private unnamed_addr constant [9 x i8] c"BOOLESCH\00"
@str-TEXT = private unnamed_addr constant [5 x i8] c"TEXT\00"
@str-HILFSATTRIBUT = private unnamed_addr constant [14 x i8] c"HILFSATTRIBUT\00"
@str-FARBE = private unnamed_addr constant [6 x i8] c"FARBE\00"
@"str-ZAHL<" = private unnamed_addr constant [6 x i8] c"ZAHL<\00"
@str-KLASSEN_LISTE = private unnamed_addr constant [14 x i8] c"KLASSEN_LISTE\00"
@str-PRIORITAET = private unnamed_addr constant [11 x i8] c"PRIORITAET\00"
@str-ZUORDNUNGSATTRIBUT = private unnamed_addr constant [19 x i8] c"ZUORDNUNGSATTRIBUT\00"
@str-INVERSES_ZUORDNUNGSATTRIBUT = private unnamed_addr constant [28 x i8] c"INVERSES_ZUORDNUNGSATTRIBUT\00"
@str-CERROR = private unnamed_addr constant [7 x i8] c"CERROR\00"
@str- = private unnamed_addr constant [1 x i8] zeroinitializer
@"str-unbekannter wertebereich ~A" = private unnamed_addr constant [28 x i8] c"unbekannter wertebereich ~A\00"
@str-MAKE-SEQ-ITERATOR = private unnamed_addr constant [18 x i8] c"MAKE-SEQ-ITERATOR\00"
@str-SEQ-ITERATOR-REF = private unnamed_addr constant [17 x i8] c"SEQ-ITERATOR-REF\00"
@str-SEQ-ITERATOR-NEXT = private unnamed_addr constant [18 x i8] c"SEQ-ITERATOR-NEXT\00"
@str-SEQ-ITERATOR-ENDP = private unnamed_addr constant [18 x i8] c"SEQ-ITERATOR-ENDP\00"
@"str-CWR=HAT_KLASSE_?_ATTRIBUT" = private unnamed_addr constant [26 x i8] c"CWR=HAT_KLASSE_?_ATTRIBUT\00"
@"str-Hat die KLasse ein Attribut mit dem Wertebereich" = private unnamed_addr constant [49 x i8] c"Hat die KLasse ein Attribut mit dem Wertebereich\00"
@str-REMOVE-IF-NOT = private unnamed_addr constant [14 x i8] c"REMOVE-IF-NOT\00"
@"str-CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT" = private unnamed_addr constant [32 x i8] c"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT\00"
@"str-Alle KLassen, die ine Attribut vom diesem Wertebereich haben" = private unnamed_addr constant [61 x i8] c"Alle KLassen, die ine Attribut vom diesem Wertebereich haben\00"
@"str-CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH" = private unnamed_addr constant [39 x i8] c"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH\00"
@"str-CWR=WERTEBEREICH-EINGEBBAR-P" = private unnamed_addr constant [29 x i8] c"CWR=WERTEBEREICH-EINGEBBAR-P\00"
@str-GET-INTERNAL-RUN-TIME = private unnamed_addr constant [22 x i8] c"GET-INTERNAL-RUN-TIME\00"
@str-PRO-MERKE = private unnamed_addr constant [10 x i8] c"PRO-MERKE\00"
@str-VOR_VORSCHLAGSBERECHNUNG = private unnamed_addr constant [25 x i8] c"VOR_VORSCHLAGSBERECHNUNG\00"
@"str-CWR=HOLE_VORSCHLAEGE" = private unnamed_addr constant [21 x i8] c"CWR=HOLE_VORSCHLAEGE\00"
@str-AUSGESCHALTET_P = private unnamed_addr constant [16 x i8] c"AUSGESCHALTET_P\00"
@str-CODE = private unnamed_addr constant [5 x i8] c"CODE\00"
@str-NREVERSE = private unnamed_addr constant [9 x i8] c"NREVERSE\00"
@str-STABLE-SORT = private unnamed_addr constant [12 x i8] c"STABLE-SORT\00"
@"str->" = private unnamed_addr constant [2 x i8] c">\00"
@str-KEY = private unnamed_addr constant [4 x i8] c"KEY\00"
@"str-CWR=FUERE_VORSCHLAG_AUS" = private unnamed_addr constant [24 x i8] c"CWR=FUERE_VORSCHLAG_AUS\00"
@"str-&KEY" = private unnamed_addr constant [5 x i8] c"&KEY\00"
@str-VOR_VORSCHLAGSBERECHNEN_FUNKTION = private unnamed_addr constant [33 x i8] c"VOR_VORSCHLAGSBERECHNEN_FUNKTION\00"
@str-VORSCHLAG_SEKUNDAERSCHLUESSEL = private unnamed_addr constant [30 x i8] c"VORSCHLAG_SEKUNDAERSCHLUESSEL\00"
@str-NUMBER = private unnamed_addr constant [7 x i8] c"NUMBER\00"
@str-ALLOW-OTHER-KEYS = private unnamed_addr constant [17 x i8] c"ALLOW-OTHER-KEYS\00"
@"str-CWR=HOLE_UEBERWACHUNG" = private unnamed_addr constant [22 x i8] c"CWR=HOLE_UEBERWACHUNG\00"
@"str-CWR=FUERE_UEBERWACHUNG_AUS" = private unnamed_addr constant [27 x i8] c"CWR=FUERE_UEBERWACHUNG_AUS\00"
@str-MAPCAR = private unnamed_addr constant [7 x i8] c"MAPCAR\00"
@str-ERSETZEN = private unnamed_addr constant [9 x i8] c"ERSETZEN\00"
@"str-CWR=FUERE_HEILMITTEL_AUS" = private unnamed_addr constant [25 x i8] c"CWR=FUERE_HEILMITTEL_AUS\00"
@str-ALTER_WERT = private unnamed_addr constant [11 x i8] c"ALTER_WERT\00"
@"str-CWR=FUERE_CONSTRAINT_AUS" = private unnamed_addr constant [25 x i8] c"CWR=FUERE_CONSTRAINT_AUS\00"
@"str-CWR=HOLE_AKTIVE_VORSCHLAEGE" = private unnamed_addr constant [28 x i8] c"CWR=HOLE_AKTIVE_VORSCHLAEGE\00"
@str-PARAMETER = private unnamed_addr constant [10 x i8] c"PARAMETER\00"
@str-SICHERN = private unnamed_addr constant [8 x i8] c"SICHERN\00"
@"str-CWR=SETZE_VORSCHLAEGE" = private unnamed_addr constant [22 x i8] c"CWR=SETZE_VORSCHLAEGE\00"
@"str-CWR=SETZE-EINEN-VORSCHLAG" = private unnamed_addr constant [26 x i8] c"CWR=SETZE-EINEN-VORSCHLAG\00"
@str-DELETE = private unnamed_addr constant [7 x i8] c"DELETE\00"
@"str-CWR=LOESCHE-EINEN-VORSCHLAG" = private unnamed_addr constant [28 x i8] c"CWR=LOESCHE-EINEN-VORSCHLAG\00"
@"str-CWR=SETZE-EIN-CONSTRAINT" = private unnamed_addr constant [25 x i8] c"CWR=SETZE-EIN-CONSTRAINT\00"
@"str-CWR=LOESCHE-EIN-CONSTRAINT" = private unnamed_addr constant [27 x i8] c"CWR=LOESCHE-EIN-CONSTRAINT\00"
@"str-CWR=HOLE-POTENTIELLE-CONSTRAINTS" = private unnamed_addr constant [33 x i8] c"CWR=HOLE-POTENTIELLE-CONSTRAINTS\00"
@"str-CWR=HOLE_CONSTRAINT_LISTE" = private unnamed_addr constant [26 x i8] c"CWR=HOLE_CONSTRAINT_LISTE\00"
@"str-Nur die, die auch wirklich aktiv sind" = private unnamed_addr constant [38 x i8] c"Nur die, die auch wirklich aktiv sind\00"
@"str-CWR=SETZE_CONSTRAINT_LISTE" = private unnamed_addr constant [27 x i8] c"CWR=SETZE_CONSTRAINT_LISTE\00"
@str-FAKTOR = private unnamed_addr constant [7 x i8] c"FAKTOR\00"
@"str-CWR=HOLE_CONSTRAINT_FAKTOR" = private unnamed_addr constant [27 x i8] c"CWR=HOLE_CONSTRAINT_FAKTOR\00"
@"str-CWR=HOLE_HEILMITTEL" = private unnamed_addr constant [20 x i8] c"CWR=HOLE_HEILMITTEL\00"
@str-COPY-LIST = private unnamed_addr constant [10 x i8] c"COPY-LIST\00"
@"str-<" = private unnamed_addr constant [2 x i8] c"<\00"
@str-KOSTEN = private unnamed_addr constant [7 x i8] c"KOSTEN\00"
@"str-CWR=HOLE_HEILMITTEL_SORTIERT" = private unnamed_addr constant [29 x i8] c"CWR=HOLE_HEILMITTEL_SORTIERT\00"
@"str-CWR=SCHREIBE_HEILMITTEL" = private unnamed_addr constant [24 x i8] c"CWR=SCHREIBE_HEILMITTEL\00"
@str-HEILMITTELS = private unnamed_addr constant [12 x i8] c"HEILMITTELS\00"
@"str-YAS=NEUE_INSTANZ" = private unnamed_addr constant [17 x i8] c"YAS=NEUE_INSTANZ\00"
@str-APPEND = private unnamed_addr constant [7 x i8] c"APPEND\00"
@"str-CWR=NEUES_HEILMITTEL" = private unnamed_addr constant [21 x i8] c"CWR=NEUES_HEILMITTEL\00"
@str-ZU_CONSTRAINT_LISTE = private unnamed_addr constant [20 x i8] c"ZU_CONSTRAINT_LISTE\00"
@"str-CWR=SETZE_UEBERWACHUNG" = private unnamed_addr constant [23 x i8] c"CWR=SETZE_UEBERWACHUNG\00"
@str-BEWERTUNG = private unnamed_addr constant [10 x i8] c"BEWERTUNG\00"
@"str-CWR=HOLE_CONSTRAINT_BEWERTUNG" = private unnamed_addr constant [30 x i8] c"CWR=HOLE_CONSTRAINT_BEWERTUNG\00"
@str-MAKE-CWR-TESTCONSTRAINT = private unnamed_addr constant [24 x i8] c"MAKE-CWR-TESTCONSTRAINT\00"
@"str-CWR=CONSTRAINT_ERZEUGEN" = private unnamed_addr constant [24 x i8] c"CWR=CONSTRAINT_ERZEUGEN\00"
@"str-CWR=CONSTRAINT_FREIGEBEN" = private unnamed_addr constant [25 x i8] c"CWR=CONSTRAINT_FREIGEBEN\00"
@"str-CWR=CONSTRAINTS_FREIGEBEN" = private unnamed_addr constant [26 x i8] c"CWR=CONSTRAINTS_FREIGEBEN\00"
@str-CONSTRAINTS = private unnamed_addr constant [12 x i8] c"CONSTRAINTS\00"
@str-INSTANCE-REF = private unnamed_addr constant [13 x i8] c"INSTANCE-REF\00"
@"str-CWR=CONSTRAINT-CONSTRAINT" = private unnamed_addr constant [26 x i8] c"CWR=CONSTRAINT-CONSTRAINT\00"
@str-CLASS-OF = private unnamed_addr constant [9 x i8] c"CLASS-OF\00"
@str-CWR-TESTCONSTRAINT = private unnamed_addr constant [19 x i8] c"CWR-TESTCONSTRAINT\00"
@str-FIND-CLASS = private unnamed_addr constant [11 x i8] c"FIND-CLASS\00"
@str-SUBCLASSP = private unnamed_addr constant [10 x i8] c"SUBCLASSP\00"
@str-AND = private unnamed_addr constant [4 x i8] c"AND\00"
@"str-CWR=CONSTRAINT-OBJEKT" = private unnamed_addr constant [22 x i8] c"CWR=CONSTRAINT-OBJEKT\00"
@"str-CWR=TESTCONSTRAINT-EQUAL" = private unnamed_addr constant [25 x i8] c"CWR=TESTCONSTRAINT-EQUAL\00"
@str-CONSTRAINT1 = private unnamed_addr constant [12 x i8] c"CONSTRAINT1\00"
@str-CONSTRAINT2 = private unnamed_addr constant [12 x i8] c"CONSTRAINT2\00"
@"str-AGE=AGENDA" = private unnamed_addr constant [11 x i8] c"AGE=AGENDA\00"
@"str-AGE=AGENDA_LOESCHEN" = private unnamed_addr constant [20 x i8] c"AGE=AGENDA_LOESCHEN\00"
@"str-CWR=CONSTRAINTSAGENDA_LOESCHEN" = private unnamed_addr constant [31 x i8] c"CWR=CONSTRAINTSAGENDA_LOESCHEN\00"
@"str-AGE=AGENDA_VORNE_NEU_ZUFUEGEN" = private unnamed_addr constant [30 x i8] c"AGE=AGENDA_VORNE_NEU_ZUFUEGEN\00"
@"str-CWR=TESTCONSTRAINT_VERMERKEN" = private unnamed_addr constant [29 x i8] c"CWR=TESTCONSTRAINT_VERMERKEN\00"
@str-TESTCONSTRAINT = private unnamed_addr constant [15 x i8] c"TESTCONSTRAINT\00"
@"str-CWR=TESTCONSTRAINTS_VERMERKEN" = private unnamed_addr constant [30 x i8] c"CWR=TESTCONSTRAINTS_VERMERKEN\00"
@str-TESTCONSTRAINTS = private unnamed_addr constant [16 x i8] c"TESTCONSTRAINTS\00"
@"str-CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P" = private unnamed_addr constant [37 x i8] c"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P\00"
@str-AGE-AGENDA_P = private unnamed_addr constant [13 x i8] c"AGE-AGENDA_P\00"
@"str-AGE=AGENDA_NEU" = private unnamed_addr constant [15 x i8] c"AGE=AGENDA_NEU\00"
@"str-CWR=CONSTRAINTSAGENDA_INITIALISIEREN" = private unnamed_addr constant [37 x i8] c"CWR=CONSTRAINTSAGENDA_INITIALISIEREN\00"
@str-INSTANCE-SET = private unnamed_addr constant [13 x i8] c"INSTANCE-SET\00"
@"str-AGE=AGENDA_LESEN" = private unnamed_addr constant [17 x i8] c"AGE=AGENDA_LESEN\00"
@"str-AGE=AGENDA_LEER" = private unnamed_addr constant [16 x i8] c"AGE=AGENDA_LEER\00"
@"str-CWR=CONSTRAINTS_ABARBEITEN" = private unnamed_addr constant [27 x i8] c"CWR=CONSTRAINTS_ABARBEITEN\00"
@"str-CWR=STATISTIK_TYP" = private unnamed_addr constant [18 x i8] c"CWR=STATISTIK_TYP\00"
@"str-CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN" = private unnamed_addr constant [45 x i8] c"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN\00"
@str-MAKE-CWR-CONSTRAINT = private unnamed_addr constant [20 x i8] c"MAKE-CWR-CONSTRAINT\00"
@str-CWR-VERLETZTES-CONSTRAINT-ERZEUGEN = private unnamed_addr constant [35 x i8] c"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN\00"
@str-ANZAHL = private unnamed_addr constant [7 x i8] c"ANZAHL\00"
@str-CWR-VERLETZTES-CONSTRAINTS-EQUAL = private unnamed_addr constant [33 x i8] c"CWR-VERLETZTES-CONSTRAINTS-EQUAL\00"
@str-C1 = private unnamed_addr constant [3 x i8] c"C1\00"
@str-C2 = private unnamed_addr constant [3 x i8] c"C2\00"
@str-CWR-CONSTRAINT = private unnamed_addr constant [15 x i8] c"CWR-CONSTRAINT\00"
@str-BEI = private unnamed_addr constant [4 x i8] c"BEI\00"
@str-UNTER = private unnamed_addr constant [6 x i8] c"UNTER\00"
@"str-AGE=AGENDA_VORNE_ZUFUEGEN" = private unnamed_addr constant [26 x i8] c"AGE=AGENDA_VORNE_ZUFUEGEN\00"
@str-VERLETZT = private unnamed_addr constant [9 x i8] c"VERLETZT\00"
@"str-CWR=MELDE_CONSTRAINT" = private unnamed_addr constant [21 x i8] c"CWR=MELDE_CONSTRAINT\00"
@"str-CWR=VERBALISIERE-CONSTRAINT-FAKTOR" = private unnamed_addr constant [35 x i8] c"CWR=VERBALISIERE-CONSTRAINT-FAKTOR\00"
@str-FORMAT-ERROR = private unnamed_addr constant [13 x i8] c"FORMAT-ERROR\00"
@str-COMPLAINT = private unnamed_addr constant [10 x i8] c"COMPLAINT\00"
@"str-Required argument missing" = private unnamed_addr constant [26 x i8] c"Required argument missing\00"
@str-CONTROL-STRING = private unnamed_addr constant [15 x i8] c"CONTROL-STRING\00"
@"str-~A ~A ~A ~A" = private unnamed_addr constant [12 x i8] c"~A ~A ~A ~A\00"
@str-OFFSET = private unnamed_addr constant [7 x i8] c"OFFSET\00"
@str-PRINC = private unnamed_addr constant [6 x i8] c"PRINC\00"
@str-WRITE-STRING = private unnamed_addr constant [13 x i8] c"WRITE-STRING\00"
@"str- " = private unnamed_addr constant [2 x i8] c" \00"
@str-STRINGP = private unnamed_addr constant [8 x i8] c"STRINGP\00"
@str-MAKE-STRING-OUTPUT-STREAM-FROM-STRING = private unnamed_addr constant [38 x i8] c"MAKE-STRING-OUTPUT-STREAM-FROM-STRING\00"
@str-MAKE-STRING-OUTPUT-STREAM = private unnamed_addr constant [26 x i8] c"MAKE-STRING-OUTPUT-STREAM\00"
@str-GET-OUTPUT-STREAM-STRING = private unnamed_addr constant [25 x i8] c"GET-OUTPUT-STREAM-STRING\00"
@"str-*STANDARD-OUTPUT*" = private unnamed_addr constant [18 x i8] c"*STANDARD-OUTPUT*\00"
@"str-~7d ~5a ~a" = private unnamed_addr constant [11 x i8] c"~7d ~5a ~a\00"
@str-FORMAT-PRINT-INTEGER = private unnamed_addr constant [21 x i8] c"FORMAT-PRINT-INTEGER\00"
@str-FORMAT-PRINC = private unnamed_addr constant [13 x i8] c"FORMAT-PRINC\00"
@str-PRO-BEWERTE_CONSTRAINTS = private unnamed_addr constant [24 x i8] c"PRO-BEWERTE_CONSTRAINTS\00"
@"str-~ax" = private unnamed_addr constant [4 x i8] c"~ax\00"
@str-x = private unnamed_addr constant [2 x i8] c"x\00"
@"str-CWR=VERBALISIERE_CONSTRAINT" = private unnamed_addr constant [28 x i8] c"CWR=VERBALISIERE_CONSTRAINT\00"
@str-QUADRUPEL = private unnamed_addr constant [10 x i8] c"QUADRUPEL\00"
@str-STREAM = private unnamed_addr constant [7 x i8] c"STREAM\00"
@str-FORMAT-ARG-111260 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111260\00"
@str-FORMAT-ARG-111261 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111261\00"
@str-FORMAT-ARG-111262 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111262\00"
@str-FORMAT-ARG-111263 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111263\00"
@"str-&REST" = private unnamed_addr constant [6 x i8] c"&REST\00"
@str-ARGS = private unnamed_addr constant [5 x i8] c"ARGS\00"
@str-FORMAT-ARG-111363 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111363\00"
@str-FORMAT-ARG-111304 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111304\00"
@str-FORMAT-ARG-111283 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111283\00"
@str-FORMAT-ARG-111284 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111284\00"
@str-FORMAT-ARG-111285 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111285\00"
@str-FORMAT-ARG-111324 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111324\00"
@str-FORMAT-ARG-111344 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-111344\00"
@str-SYSTEM = private unnamed_addr constant [7 x i8] c"SYSTEM\00"
@str-ERERBT = private unnamed_addr constant [7 x i8] c"ERERBT\00"
@str-LOESCHEN = private unnamed_addr constant [9 x i8] c"LOESCHEN\00"
@str-INSGESAMT = private unnamed_addr constant [10 x i8] c"INSGESAMT\00"
@str-ATTRIBUTE = private unnamed_addr constant [10 x i8] c"ATTRIBUTE\00"
@str-OBJEKTEN = private unnamed_addr constant [9 x i8] c"OBJEKTEN\00"
@str-DYNAMISCH = private unnamed_addr constant [10 x i8] c"DYNAMISCH\00"
@str-NICHT = private unnamed_addr constant [6 x i8] c"NICHT\00"
@str-STATISCH = private unnamed_addr constant [9 x i8] c"STATISCH\00"
@str-CWR-STATISTIK = private unnamed_addr constant [14 x i8] c"CWR-STATISTIK\00"
@CONTAB4224 = internal global [1272 x {}*] undef
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 10, void ()* @CLASP-CTOR, i8* null }]

; Function Attrs: uwtable
define internal void @RUN-ALL() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !9 {
entry:
  tail call void @cc_initialize_gcroots_in_module({ i8*, i8*, i64 }* nonnull @constants-table, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), i64 1272, {}* null)
  tail call void @ltvc_assign_source_file_info_handle(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @":::global-str-/Users/karstenpoeck/lisp/coke/program/cwr=objekte.lisp", i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @":::global-str-/Users/karstenpoeck/lisp/coke/program/cwr=objekte.lisp", i64 0, i64 0), i64 0, i32 1, i32* nonnull @source-file-info-handle)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.65)
  ret void
}

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #1

; Function Attrs: nounwind
declare void @ltvc_assign_source_file_info_handle(i8*, i8*, i64, i32, i32*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^1^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !13 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^1^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %tag4, %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 4), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = insertvalue { {}*, i64 } undef, {}* %11, 0
  %13 = insertvalue { {}*, i64 } %12, i64 1, 1
  ret { {}*, i64 } %13

tag4:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 4), align 16
  call void @cc_setSymbolValue({}* %14, {}* %24)
  br label %tag2

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 4), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 4), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102117.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102117.0, %24
  br i1 %26, label %tag2, label %tag4
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

; Function Attrs: nounwind
declare void @cc_pop_InvocationHistoryFrame({}*, <{ i8*, { i32, i32, i8*, i8* }, i64 }>*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @cc_push_InvocationHistoryFrame({}*, <{ i8*, { i32, i32, i8*, i8* }, i64 }>*, { i32, i32, i8*, i8* }*, i64) local_unnamed_addr #1

declare {}* @cc_safe_fdefinition({}*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @cc_setSymbolValue({}*, {}*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^69^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !23 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^69^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 16), align 16
  call void @cc_setSymbolValue({}* %11, {}* %24)
  br label %tag3

tag3:                                             ; preds = %tag2, %normal-dest23
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 16), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 16), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 16), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102133.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102133.0, %24
  br i1 %26, label %tag3, label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^70^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !24 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^70^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 18), align 16
  call void @cc_setSymbolValue({}* %11, {}* %24)
  br label %tag3

tag3:                                             ; preds = %tag2, %normal-dest23
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 18), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 18), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 18), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102149.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102149.0, %24
  br i1 %26, label %tag3, label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^71^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !25 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^71^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 20), align 16
  call void @cc_setSymbolValue({}* %11, {}* %.val)
  br label %tag4

tag4:                                             ; preds = %tag2, %normal-dest23
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 20), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 20), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 20), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102165.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102165.0, %24
  br i1 %26, label %tag4, label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^72^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !26 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^72^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 22), align 16
  call void @cc_setSymbolValue({}* %11, {}* %24)
  br label %tag4

tag4:                                             ; preds = %normal-dest23, %tag1
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 22), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 22), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 22), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102181.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102181.0, %24
  br i1 %26, label %tag4, label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^73^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !27 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^73^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 24), align 16
  call void @cc_setSymbolValue({}* %11, {}* %24)
  br label %tag2

tag2:                                             ; preds = %normal-dest23, %tag
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 24), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 24), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 24), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102197.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102197.0, %24
  br i1 %26, label %tag2, label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^74^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !28 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^74^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest23, %tag2
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 26), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = insertvalue { {}*, i64 } undef, {}* %11, 0
  %13 = insertvalue { {}*, i64 } %12, i64 1, 1
  ret { {}*, i64 } %13

tag2:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 26), align 16
  call void @cc_setSymbolValue({}* %14, {}* %24)
  br label %tag1

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 26), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 26), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102213.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102213.0, %24
  br i1 %26, label %tag1, label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^75^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !29 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^75^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest23, %tag2
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 28), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = insertvalue { {}*, i64 } undef, {}* %11, 0
  %13 = insertvalue { {}*, i64 } %12, i64 1, 1
  ret { {}*, i64 } %13

tag2:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 28), align 16
  call void @cc_setSymbolValue({}* %14, {}* %24)
  br label %tag

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 28), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 28), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102229.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102229.0, %24
  br i1 %26, label %tag, label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^76^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !30 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^76^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %tag4, %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 30), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = insertvalue { {}*, i64 } undef, {}* %11, 0
  %13 = insertvalue { {}*, i64 } %12, i64 1, 1
  ret { {}*, i64 } %13

tag4:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 30), align 16
  call void @cc_setSymbolValue({}* %14, {}* %24)
  br label %tag2

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 30), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 30), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102245.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102245.0, %24
  br i1 %26, label %tag2, label %tag4
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^77^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !31 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^77^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %tag4, %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 32), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = insertvalue { {}*, i64 } undef, {}* %11, 0
  %13 = insertvalue { {}*, i64 } %12, i64 1, 1
  ret { {}*, i64 } %13

tag4:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 32), align 16
  call void @cc_setSymbolValue({}* %14, {}* %.val)
  br label %tag1

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 32), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 32), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102261.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102261.0, %24
  br i1 %26, label %tag1, label %tag4
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^78^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !32 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^78^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 34), align 16
  call void @cc_setSymbolValue({}* %11, {}* %.val)
  br label %tag4

tag4:                                             ; preds = %normal-dest23, %tag1
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 34), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 34), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 34), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102277.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102277.0, %24
  br i1 %26, label %tag4, label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^79^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !33 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^79^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %tag3, %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 36), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = insertvalue { {}*, i64 } undef, {}* %11, 0
  %13 = insertvalue { {}*, i64 } %12, i64 1, 1
  ret { {}*, i64 } %13

tag3:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 36), align 16
  call void @cc_setSymbolValue({}* %14, {}* %.val)
  br label %tag

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 36), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 36), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102293.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102293.0, %24
  br i1 %26, label %tag, label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^80^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !34 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^80^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest23
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 38), align 16
  call void @cc_setSymbolValue({}* %11, {}* %24)
  br label %tag3

tag3:                                             ; preds = %normal-dest23, %tag
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 38), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 38), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %18, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 8), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 38), align 16
  %ptrtoint17 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt33 = extractvalue { {}*, i64 } %23, 0
  %.elt35 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt35, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt33
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102309.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G102309.0, %24
  br i1 %26, label %tag3, label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^82^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !35 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^82^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 0), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 40), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 1, {}* %14, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 40), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %17 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %18 = insertvalue { {}*, i64 } %17, i64 1, 1
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^91^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !36 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^91^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest76, %normal-dest26, %header-check-br
  %G102343.0 = phi {}* [ %18, %header-check-br ], [ %G102343.1, %normal-dest26 ], [ %G102343.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 71), align 8
  %ptrtoint29 = ptrtoint {}* %G102343.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G102343.0, i64 2, {}* %"closure->CWR=STATISTIK_RUECKSETZEN", {}* %11, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 71), align 8
  %"closure->CWR=STATISTIK_RUECKSETZEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 2512, i64 91, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt101 = extractvalue { {}*, i64 } %24, 0
  %.elt103 = extractvalue { {}*, i64 } %24, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102343.1 = select i1 %cond82, {}* %25, {}* %.elt101
  br label %tag3

normal-dest35:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint42 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %27, i64 2, {}* %"closure->CWR=STATISTIK_RUECKSETZEN", {}* %28, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 77), align 8
  %ptrtoint55 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %31, i64 2, {}* %"closure->CWR=STATISTIK_RUECKSETZEN", {}* %32, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %34, {}* inttoptr (i64 364 to {}*))
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 71), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %36 = insertvalue { {}*, i64 } undef, {}* %35, 0
  %37 = insertvalue { {}*, i64 } %36, i64 1, 1
  ret { {}*, i64 } %37

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 68), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102343.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !37 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 42), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 44), align 16
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 48), align 16
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 50), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 6, {}* %14, {}* null, {}* %15, {}* null, {}* %16, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt14 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt14, 0
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102327.0 = select i1 %cond, {}* %18, {}* %.elt
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 40), align 16
  call void @cc_setSymbolValue({}* %19, {}* %G102327.0)
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %20 = insertvalue { {}*, i64 } undef, {}* %G102327.0, 0
  %21 = insertvalue { {}*, i64 } %20, i64 1, 1
  ret { {}*, i64 } %21
}

declare {}* @cc_enclose({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) local_unnamed_addr #3

declare {}* @cc_safe_setfdefinition({}*) local_unnamed_addr #3

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^99^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !38 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^99^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G102389.0 = phi {}* [ %18, %header-check-br ], [ %G102389.1, %normal-dest63 ], [ %G102389.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 127), align 8
  %ptrtoint13 = ptrtoint {}* %G102389.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G102389.0, i64 2, {}* %"closure->CWR=COKE_STANDARD_SLOTS", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests54, %normal-dest56, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 127), align 8
  %"closure->CWR=COKE_STANDARD_SLOTS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 2720, i64 99, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br46

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=COKE_STANDARD_SLOTS", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 129), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=COKE_STANDARD_SLOTS", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 396 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 127), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag2

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %tag2
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 126), align 16
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102389.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag

normal-dest69:                                    ; preds = %maybe-more-tests54
  %ptrtoint70 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102389.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !39 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest259, %normal-dest252, %normal-dest245, %normal-dest238, %normal-dest231, %normal-dest224, %normal-dest217, %normal-dest210, %normal-dest203, %normal-dest196, %normal-dest189, %normal-dest182, %normal-dest175, %normal-dest168, %normal-dest161, %normal-dest154, %normal-dest147, %normal-dest140, %normal-dest133, %normal-dest126, %normal-dest119, %normal-dest112, %normal-dest105, %normal-dest98, %normal-dest91, %normal-dest84, %normal-dest77, %normal-dest70, %normal-dest63, %normal-dest56, %normal-dest49, %normal-dest42, %normal-dest35, %normal-dest28, %normal-dest21, %normal-dest14, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 1, {}* %16, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt291 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt291, 0
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102408.0 = select i1 %cond, {}* %18, {}* %.elt
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest10
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint15 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %20, i64 1, {}* %21, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest14
  %.elt293 = extractvalue { {}*, i64 } %22, 0
  %.elt295 = extractvalue { {}*, i64 } %22, 1
  %cond272 = icmp eq i64 %.elt295, 0
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102409.0 = select i1 %cond272, {}* %23, {}* %.elt293
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 1, {}* %26, {}* null, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %.elt297 = extractvalue { {}*, i64 } %27, 0
  %.elt299 = extractvalue { {}*, i64 } %27, 1
  %cond273 = icmp eq i64 %.elt299, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102410.0 = select i1 %cond273, {}* %28, {}* %.elt297
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest35
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 94), align 16
  %ptrtoint43 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %30, i64 1, {}* %31, {}* null, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %normal-dest42
  %.elt301 = extractvalue { {}*, i64 } %32, 0
  %.elt303 = extractvalue { {}*, i64 } %32, 1
  %cond274 = icmp eq i64 %.elt303, 0
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102411.0 = select i1 %cond274, {}* %33, {}* %.elt301
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %normal-dest49
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 96), align 16
  %ptrtoint57 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %35, i64 1, {}* %36, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt305 = extractvalue { {}*, i64 } %37, 0
  %.elt307 = extractvalue { {}*, i64 } %37, 1
  %cond275 = icmp eq i64 %.elt307, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102412.0 = select i1 %cond275, {}* %38, {}* %.elt305
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest70 unwind label %cleanup-lpad

normal-dest70:                                    ; preds = %normal-dest63
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint71 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint72 = add i64 %ptrtoint71, 7
  %entry-point-addr73 = inttoptr i64 %entry-point-addr-uint72 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point74 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr73, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point74({}* %40, i64 1, {}* %41, {}* null, {}* null, {}* null)
          to label %normal-dest77 unwind label %cleanup-lpad

normal-dest77:                                    ; preds = %normal-dest70
  %.elt309 = extractvalue { {}*, i64 } %42, 0
  %.elt311 = extractvalue { {}*, i64 } %42, 1
  %cond276 = icmp eq i64 %.elt311, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102413.0 = select i1 %cond276, {}* %43, {}* %.elt309
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest84 unwind label %cleanup-lpad

normal-dest84:                                    ; preds = %normal-dest77
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 100), align 16
  %ptrtoint85 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint86 = add i64 %ptrtoint85, 7
  %entry-point-addr87 = inttoptr i64 %entry-point-addr-uint86 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point88 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr87, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point88({}* %45, i64 1, {}* %46, {}* null, {}* null, {}* null)
          to label %normal-dest91 unwind label %cleanup-lpad

normal-dest91:                                    ; preds = %normal-dest84
  %.elt313 = extractvalue { {}*, i64 } %47, 0
  %.elt315 = extractvalue { {}*, i64 } %47, 1
  %cond277 = icmp eq i64 %.elt315, 0
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102414.0 = select i1 %cond277, {}* %48, {}* %.elt313
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest98 unwind label %cleanup-lpad

normal-dest98:                                    ; preds = %normal-dest91
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 102), align 16
  %ptrtoint99 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint100 = add i64 %ptrtoint99, 7
  %entry-point-addr101 = inttoptr i64 %entry-point-addr-uint100 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point102 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr101, align 8
  %52 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point102({}* %50, i64 1, {}* %51, {}* null, {}* null, {}* null)
          to label %normal-dest105 unwind label %cleanup-lpad

normal-dest105:                                   ; preds = %normal-dest98
  %.elt317 = extractvalue { {}*, i64 } %52, 0
  %.elt319 = extractvalue { {}*, i64 } %52, 1
  %cond278 = icmp eq i64 %.elt319, 0
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102415.0 = select i1 %cond278, {}* %53, {}* %.elt317
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest112 unwind label %cleanup-lpad

normal-dest112:                                   ; preds = %normal-dest105
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 104), align 16
  %ptrtoint113 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint114 = add i64 %ptrtoint113, 7
  %entry-point-addr115 = inttoptr i64 %entry-point-addr-uint114 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point116 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr115, align 8
  %57 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point116({}* %55, i64 1, {}* %56, {}* null, {}* null, {}* null)
          to label %normal-dest119 unwind label %cleanup-lpad

normal-dest119:                                   ; preds = %normal-dest112
  %.elt321 = extractvalue { {}*, i64 } %57, 0
  %.elt323 = extractvalue { {}*, i64 } %57, 1
  %cond279 = icmp eq i64 %.elt323, 0
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102416.0 = select i1 %cond279, {}* %58, {}* %.elt321
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest126 unwind label %cleanup-lpad

normal-dest126:                                   ; preds = %normal-dest119
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 106), align 16
  %ptrtoint127 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint128 = add i64 %ptrtoint127, 7
  %entry-point-addr129 = inttoptr i64 %entry-point-addr-uint128 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point130 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr129, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point130({}* %60, i64 1, {}* %61, {}* null, {}* null, {}* null)
          to label %normal-dest133 unwind label %cleanup-lpad

normal-dest133:                                   ; preds = %normal-dest126
  %.elt325 = extractvalue { {}*, i64 } %62, 0
  %.elt327 = extractvalue { {}*, i64 } %62, 1
  %cond280 = icmp eq i64 %.elt327, 0
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102417.0 = select i1 %cond280, {}* %63, {}* %.elt325
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest140 unwind label %cleanup-lpad

normal-dest140:                                   ; preds = %normal-dest133
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 108), align 16
  %ptrtoint141 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint142 = add i64 %ptrtoint141, 7
  %entry-point-addr143 = inttoptr i64 %entry-point-addr-uint142 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point144 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr143, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point144({}* %65, i64 1, {}* %66, {}* null, {}* null, {}* null)
          to label %normal-dest147 unwind label %cleanup-lpad

normal-dest147:                                   ; preds = %normal-dest140
  %.elt329 = extractvalue { {}*, i64 } %67, 0
  %.elt331 = extractvalue { {}*, i64 } %67, 1
  %cond281 = icmp eq i64 %.elt331, 0
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102418.0 = select i1 %cond281, {}* %68, {}* %.elt329
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest154 unwind label %cleanup-lpad

normal-dest154:                                   ; preds = %normal-dest147
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 110), align 16
  %ptrtoint155 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint156 = add i64 %ptrtoint155, 7
  %entry-point-addr157 = inttoptr i64 %entry-point-addr-uint156 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point158 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr157, align 8
  %72 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point158({}* %70, i64 1, {}* %71, {}* null, {}* null, {}* null)
          to label %normal-dest161 unwind label %cleanup-lpad

normal-dest161:                                   ; preds = %normal-dest154
  %.elt333 = extractvalue { {}*, i64 } %72, 0
  %.elt335 = extractvalue { {}*, i64 } %72, 1
  %cond282 = icmp eq i64 %.elt335, 0
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102419.0 = select i1 %cond282, {}* %73, {}* %.elt333
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %75 = invoke {}* @cc_safe_fdefinition({}* %74)
          to label %normal-dest168 unwind label %cleanup-lpad

normal-dest168:                                   ; preds = %normal-dest161
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 112), align 16
  %ptrtoint169 = ptrtoint {}* %75 to i64
  %entry-point-addr-uint170 = add i64 %ptrtoint169, 7
  %entry-point-addr171 = inttoptr i64 %entry-point-addr-uint170 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point172 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr171, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point172({}* %75, i64 1, {}* %76, {}* null, {}* null, {}* null)
          to label %normal-dest175 unwind label %cleanup-lpad

normal-dest175:                                   ; preds = %normal-dest168
  %.elt337 = extractvalue { {}*, i64 } %77, 0
  %.elt339 = extractvalue { {}*, i64 } %77, 1
  %cond283 = icmp eq i64 %.elt339, 0
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102420.0 = select i1 %cond283, {}* %78, {}* %.elt337
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %80 = invoke {}* @cc_safe_fdefinition({}* %79)
          to label %normal-dest182 unwind label %cleanup-lpad

normal-dest182:                                   ; preds = %normal-dest175
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 114), align 16
  %ptrtoint183 = ptrtoint {}* %80 to i64
  %entry-point-addr-uint184 = add i64 %ptrtoint183, 7
  %entry-point-addr185 = inttoptr i64 %entry-point-addr-uint184 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point186 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr185, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point186({}* %80, i64 1, {}* %81, {}* null, {}* null, {}* null)
          to label %normal-dest189 unwind label %cleanup-lpad

normal-dest189:                                   ; preds = %normal-dest182
  %.elt341 = extractvalue { {}*, i64 } %82, 0
  %.elt343 = extractvalue { {}*, i64 } %82, 1
  %cond284 = icmp eq i64 %.elt343, 0
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102421.0 = select i1 %cond284, {}* %83, {}* %.elt341
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %85 = invoke {}* @cc_safe_fdefinition({}* %84)
          to label %normal-dest196 unwind label %cleanup-lpad

normal-dest196:                                   ; preds = %normal-dest189
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 116), align 16
  %ptrtoint197 = ptrtoint {}* %85 to i64
  %entry-point-addr-uint198 = add i64 %ptrtoint197, 7
  %entry-point-addr199 = inttoptr i64 %entry-point-addr-uint198 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point200 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr199, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point200({}* %85, i64 1, {}* %86, {}* null, {}* null, {}* null)
          to label %normal-dest203 unwind label %cleanup-lpad

normal-dest203:                                   ; preds = %normal-dest196
  %.elt345 = extractvalue { {}*, i64 } %87, 0
  %.elt347 = extractvalue { {}*, i64 } %87, 1
  %cond285 = icmp eq i64 %.elt347, 0
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102422.0 = select i1 %cond285, {}* %88, {}* %.elt345
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest210 unwind label %cleanup-lpad

normal-dest210:                                   ; preds = %normal-dest203
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 118), align 16
  %ptrtoint211 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint212 = add i64 %ptrtoint211, 7
  %entry-point-addr213 = inttoptr i64 %entry-point-addr-uint212 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point214 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr213, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point214({}* %90, i64 1, {}* %91, {}* null, {}* null, {}* null)
          to label %normal-dest217 unwind label %cleanup-lpad

normal-dest217:                                   ; preds = %normal-dest210
  %.elt349 = extractvalue { {}*, i64 } %92, 0
  %.elt351 = extractvalue { {}*, i64 } %92, 1
  %cond286 = icmp eq i64 %.elt351, 0
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102423.0 = select i1 %cond286, {}* %93, {}* %.elt349
  %94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %95 = invoke {}* @cc_safe_fdefinition({}* %94)
          to label %normal-dest224 unwind label %cleanup-lpad

normal-dest224:                                   ; preds = %normal-dest217
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  %ptrtoint225 = ptrtoint {}* %95 to i64
  %entry-point-addr-uint226 = add i64 %ptrtoint225, 7
  %entry-point-addr227 = inttoptr i64 %entry-point-addr-uint226 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point228 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr227, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point228({}* %95, i64 1, {}* %96, {}* null, {}* null, {}* null)
          to label %normal-dest231 unwind label %cleanup-lpad

normal-dest231:                                   ; preds = %normal-dest224
  %.elt353 = extractvalue { {}*, i64 } %97, 0
  %.elt355 = extractvalue { {}*, i64 } %97, 1
  %cond287 = icmp eq i64 %.elt355, 0
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102424.0 = select i1 %cond287, {}* %98, {}* %.elt353
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %100 = invoke {}* @cc_safe_fdefinition({}* %99)
          to label %normal-dest238 unwind label %cleanup-lpad

normal-dest238:                                   ; preds = %normal-dest231
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 122), align 16
  %ptrtoint239 = ptrtoint {}* %100 to i64
  %entry-point-addr-uint240 = add i64 %ptrtoint239, 7
  %entry-point-addr241 = inttoptr i64 %entry-point-addr-uint240 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point242 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr241, align 8
  %102 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point242({}* %100, i64 1, {}* %101, {}* null, {}* null, {}* null)
          to label %normal-dest245 unwind label %cleanup-lpad

normal-dest245:                                   ; preds = %normal-dest238
  %.elt357 = extractvalue { {}*, i64 } %102, 0
  %.elt359 = extractvalue { {}*, i64 } %102, 1
  %cond288 = icmp eq i64 %.elt359, 0
  %103 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102425.0 = select i1 %cond288, {}* %103, {}* %.elt357
  %104 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %105 = invoke {}* @cc_safe_fdefinition({}* %104)
          to label %normal-dest252 unwind label %cleanup-lpad

normal-dest252:                                   ; preds = %normal-dest245
  %106 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 124), align 16
  %ptrtoint253 = ptrtoint {}* %105 to i64
  %entry-point-addr-uint254 = add i64 %ptrtoint253, 7
  %entry-point-addr255 = inttoptr i64 %entry-point-addr-uint254 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point256 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr255, align 8
  %107 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point256({}* %105, i64 1, {}* %106, {}* null, {}* null, {}* null)
          to label %normal-dest259 unwind label %cleanup-lpad

normal-dest259:                                   ; preds = %normal-dest252
  %.elt361 = extractvalue { {}*, i64 } %107, 0
  %.elt363 = extractvalue { {}*, i64 } %107, 1
  %cond289 = icmp eq i64 %.elt363, 0
  %108 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102426.0 = select i1 %cond289, {}* %108, {}* %.elt361
  %ptrtoint265 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint266 = add i64 %ptrtoint265, 7
  %entry-point-addr267 = inttoptr i64 %entry-point-addr-uint266 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point268 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr267, align 8
  %109 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point268({}* %13, i64 20, {}* %G102408.0, {}* %G102409.0, {}* %G102410.0, {}* %G102411.0, {}* %G102412.0, {}* %G102413.0, {}* %G102414.0, {}* %G102415.0, {}* %G102416.0, {}* %G102417.0, {}* %G102418.0, {}* %G102419.0, {}* %G102420.0, {}* %G102421.0, {}* %G102422.0, {}* %G102423.0, {}* %G102424.0, {}* %G102425.0, {}* %G102426.0, {}* %108)
          to label %normal-dest271 unwind label %cleanup-lpad

normal-dest271:                                   ; preds = %normal-dest259
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %109
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^106^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !40 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^106^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G102503.0 = phi {}* [ %18, %header-check-br ], [ %G102503.1, %normal-dest54 ], [ %G102503.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 135), align 8
  %ptrtoint13 = ptrtoint {}* %G102503.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G102503.0, i64 2, {}* %"closure->CWR=BENUTZER_SLOTS", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest47, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 135), align 8
  %"closure->CWR=BENUTZER_SLOTS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3118, i64 106, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br59

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 137), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=BENUTZER_SLOTS", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 140), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=BENUTZER_SLOTS", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 424 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 135), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag2
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 134), align 16
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102503.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag1

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag2

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102503.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !41 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc48 unwind label %cleanup-lpad

.noexc48:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest21, %normal-dest14, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 130), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 132), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %16, 0
  %.elt36 = extractvalue { {}*, i64 } %16, 1
  %cond = icmp eq i64 %.elt36, 0
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102522.0 = select i1 %cond, {}* %17, {}* %.elt
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 127), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest10
  %ptrtoint15 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %19, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest14
  %.elt38 = extractvalue { {}*, i64 } %20, 0
  %.elt40 = extractvalue { {}*, i64 } %20, 1
  %cond34 = icmp eq i64 %.elt40, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102523.0 = select i1 %cond34, {}* %21, {}* %.elt38
  %ptrtoint27 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint28 = add i64 %ptrtoint27, 7
  %entry-point-addr29 = inttoptr i64 %entry-point-addr-uint28 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point30 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr29, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point30({}* %13, i64 2, {}* %G102522.0, {}* %G102523.0, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest21
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^110^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !42 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^110^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G102548.0 = phi {}* [ %18, %header-check-br ], [ %G102548.1, %normal-dest17 ], [ %G102548.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 154), align 16
  %ptrtoint43 = ptrtoint {}* %G102548.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G102548.0, i64 2, {}* %"closure->CWR=AUFRUF", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %maybe-more-tests42, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 154), align 16
  %"closure->CWR=AUFRUF" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=AUFRUF^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=AUFRUF^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3250, i64 110, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 153), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102548.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

normal-dest21:                                    ; preds = %maybe-more-tests42
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102548.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 156), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=AUFRUF", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 161), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=AUFRUF", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 440 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 154), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=AUFRUF^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !43 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  switch i64 %nargs, label %13 [
    i64 1, label %case-opt1-bb
    i64 0, label %req-bb
  ]

cleanup-lpad:                                     ; preds = %13, %normal-dest52, %mvn-final50, %normal-dest39, %mvn-final37, %normal-dest26, %mvn-final24, %normal-dest13, %mvn-final, %normal-dest6, %req-bb
  %10 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %10

req-bb:                                           ; preds = %entry, %case-opt1-bb
  %G102532.0 = phi {}* [ %14, %case-opt1-bb ], [ %9, %entry ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 142), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest6 unwind label %cleanup-lpad

; <label>:13:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=AUFRUF^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %13
  unreachable

case-opt1-bb:                                     ; preds = %entry
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %req-bb

normal-dest6:                                     ; preds = %req-bb
  %15 = icmp eq {}* %G102532.0, %9
  %was.0 = select i1 %15, {}* %9, {}* %farg0
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 144), align 16
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 3, {}* %was.0, {}* %16, {}* %17, {}* null)
          to label %mvn-final unwind label %cleanup-lpad

mvn-final:                                        ; preds = %normal-dest6
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 145), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %mvn-final
  %ptrtoint14 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint15 = add i64 %ptrtoint14, 7
  %entry-point-addr16 = inttoptr i64 %entry-point-addr-uint15 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point17 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr16, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point17({}* %20, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %mvn-final24 unwind label %cleanup-lpad

mvn-final24:                                      ; preds = %normal-dest13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 147), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %mvn-final24
  %ptrtoint27 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint28 = add i64 %ptrtoint27, 7
  %entry-point-addr29 = inttoptr i64 %entry-point-addr-uint28 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point30 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr29, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point30({}* %23, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %mvn-final37 unwind label %cleanup-lpad

mvn-final37:                                      ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 149), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %mvn-final37
  %ptrtoint40 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint41 = add i64 %ptrtoint40, 7
  %entry-point-addr42 = inttoptr i64 %entry-point-addr-uint41 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point43 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr42, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point43({}* %26, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %mvn-final50 unwind label %cleanup-lpad

mvn-final50:                                      ; preds = %normal-dest39
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 151), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %mvn-final50
  %ptrtoint53 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint54 = add i64 %ptrtoint53, 7
  %entry-point-addr55 = inttoptr i64 %entry-point-addr-uint54 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point56 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr55, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point56({}* %29, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest52
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %30
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^118^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !44 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^118^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G102603.0 = phi {}* [ %18, %header-check-br ], [ %G102603.1, %normal-dest17 ], [ %G102603.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 142), align 16
  %ptrtoint34 = ptrtoint {}* %G102603.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G102603.0, i64 2, {}* %"closure->CWR=NUR_WB_LADEN", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %tag2, %normal-dest13, %maybe-more-tests81, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 142), align 16
  %"closure->CWR=NUR_WB_LADEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3444, i64 118, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br73

normal-dest13:                                    ; preds = %maybe-more-tests81
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102603.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag3

normal-dest21:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 190), align 16
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt84 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt84, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102603.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 191), align 8
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=NUR_WB_LADEN", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 197), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=NUR_WB_LADEN", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 472 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 142), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag2

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !45 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %10 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  switch i64 %nargs, label %case-opt0-bb [
    i64 1, label %req-bb
    i64 2, label %case-opt2-bb
    i64 3, label %case-opt3-bb
  ]

tag4:                                             ; preds = %normal-dest65, %normal-dest37, %req-bb
  %11 = phi {}* [ %10, %req-bb ], [ %44, %normal-dest37 ], [ %52, %normal-dest65 ]
  %WAS.0 = phi {}* [ %was.0, %req-bb ], [ %WAS.1, %normal-dest37 ], [ %WAS.2, %normal-dest65 ]
  %12 = icmp eq {}* %alles_loeschen.0, %11
  br i1 %12, label %tag17, label %tag13

tag6:                                             ; preds = %normal-dest101
  %13 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest23 unwind label %cleanup-lpad

tag7:                                             ; preds = %normal-dest101
  %14 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest44 unwind label %cleanup-lpad

tag8:                                             ; preds = %normal-dest143
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 184), align 16
  call void @cc_setSymbolValue({}* %15, {}* %WAS.0)
  br label %tag9

tag9:                                             ; preds = %tag15, %tag8
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 188), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest72 unwind label %cleanup-lpad

tag13:                                            ; preds = %tag4
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 178), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest81 unwind label %cleanup-lpad

tag14:                                            ; preds = %req-bb
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 164), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest94 unwind label %cleanup-lpad

tag15:                                            ; preds = %normal-dest143
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 186), align 16
  call void @cc_setSymbolValue({}* %22, {}* %WAS.0)
  br label %tag9

tag17:                                            ; preds = %tag4
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 176), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest110 unwind label %cleanup-lpad

tag18:                                            ; preds = %normal-dest81, %normal-dest110
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 180), align 16
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest123 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %35, %normal-dest136, %normal-dest130, %normal-dest123, %tag18, %normal-dest110, %tag17, %normal-dest94, %tag14, %normal-dest81, %tag13, %normal-dest72, %tag9, %normal-dest53, %normal-dest46, %normal-dest44, %tag7, %normal-dest28, %normal-dest25, %normal-dest23, %tag6
  %27 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %27

req-bb:                                           ; preds = %case-opt0-bb, %entry, %case-opt3-bb, %case-opt2-bb
  %G102585.0 = phi {}* [ %9, %case-opt3-bb ], [ %10, %case-opt2-bb ], [ %10, %entry ], [ %10, %case-opt0-bb ]
  %G102586.0 = phi {}* [ %9, %case-opt3-bb ], [ %9, %case-opt2-bb ], [ %10, %entry ], [ %10, %case-opt0-bb ]
  %G102587.0 = phi {}* [ %9, %case-opt3-bb ], [ %9, %case-opt2-bb ], [ %9, %entry ], [ %10, %case-opt0-bb ]
  %28 = icmp eq {}* %G102587.0, %10
  %was.0 = select i1 %28, {}* %10, {}* %farg0
  %29 = icmp eq {}* %G102586.0, %10
  %alles_loeschen.0 = select i1 %29, {}* %10, {}* %farg1
  %30 = icmp eq {}* %G102585.0, %10
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 163), align 8
  %.farg2 = select i1 %30, {}* %31, {}* %farg2
  %32 = icmp eq {}* %was.0, %10
  %G102661.0 = select i1 %32, {}* %9, {}* %10
  %33 = icmp eq {}* %G102661.0, %10
  br i1 %33, label %tag4, label %tag14

case-opt0-bb:                                     ; preds = %entry
  %34 = icmp ugt i64 %nargs, 3
  br i1 %34, label %35, label %req-bb

; <label>:35:                                     ; preds = %case-opt0-bb
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %35
  unreachable

case-opt2-bb:                                     ; preds = %entry
  br label %req-bb

case-opt3-bb:                                     ; preds = %entry
  br label %req-bb

normal-dest23:                                    ; preds = %tag6
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 168), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 170), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest23
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 172), align 16
  %ptrtoint = ptrtoint {}* %38 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %38, i64 1, {}* %39, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %.elt155 = extractvalue { {}*, i64 } %40, 0
  %.elt157 = extractvalue { {}*, i64 } %40, 1
  %cond148 = icmp eq i64 %.elt157, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102649.0 = select i1 %cond148, {}* %41, {}* %.elt155
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 174), align 16
  %ptrtoint31 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %13, i64 4, {}* %36, {}* %G102649.0, {}* %42, {}* %.farg2)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest28
  %.elt159 = extractvalue { {}*, i64 } %43, 0
  %.elt161 = extractvalue { {}*, i64 } %43, 1
  %cond149 = icmp eq i64 %.elt161, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %WAS.1 = select i1 %cond149, {}* %44, {}* %.elt159
  br label %tag4

normal-dest44:                                    ; preds = %tag7
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 168), align 16
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 170), align 16
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest44
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 172), align 16
  %ptrtoint47 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %47, i64 1, {}* %48, {}* null, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %.elt186 = extractvalue { {}*, i64 } %49, 0
  %.elt188 = extractvalue { {}*, i64 } %49, 1
  %cond150 = icmp eq i64 %.elt188, 0
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102642.0 = select i1 %cond150, {}* %50, {}* %.elt186
  %ptrtoint59 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %14, i64 2, {}* %45, {}* %G102642.0, {}* null, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest53
  %.elt190 = extractvalue { {}*, i64 } %51, 0
  %.elt192 = extractvalue { {}*, i64 } %51, 1
  %cond151 = icmp eq i64 %.elt192, 0
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %WAS.2 = select i1 %cond151, {}* %52, {}* %.elt190
  br label %tag4

normal-dest72:                                    ; preds = %tag9
  %ptrtoint73 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint74 = add i64 %ptrtoint73, 7
  %entry-point-addr75 = inttoptr i64 %entry-point-addr-uint74 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point76 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr75, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point76({}* %17, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest79 unwind label %cleanup-lpad

normal-dest79:                                    ; preds = %normal-dest72
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %53

normal-dest81:                                    ; preds = %tag13
  %ptrtoint82 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %54 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %19, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %tag18 unwind label %cleanup-lpad

normal-dest94:                                    ; preds = %tag14
  %ptrtoint95 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint96 = add i64 %ptrtoint95, 7
  %entry-point-addr97 = inttoptr i64 %entry-point-addr-uint96 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point98 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr97, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point98({}* %21, i64 1, {}* %.farg2, {}* null, {}* null, {}* null)
          to label %normal-dest101 unwind label %cleanup-lpad

normal-dest101:                                   ; preds = %normal-dest94
  %.elt = extractvalue { {}*, i64 } %55, 0
  %.elt153 = extractvalue { {}*, i64 } %55, 1
  %cond = icmp eq i64 %.elt153, 0
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102656.0 = select i1 %cond, {}* %56, {}* %.elt
  %57 = icmp eq {}* %G102656.0, %56
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 166), align 16
  br i1 %57, label %tag7, label %tag6

normal-dest110:                                   ; preds = %tag17
  %ptrtoint111 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint112 = add i64 %ptrtoint111, 7
  %entry-point-addr113 = inttoptr i64 %entry-point-addr-uint112 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point114 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr113, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point114({}* %24, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %tag18 unwind label %cleanup-lpad

normal-dest123:                                   ; preds = %tag18
  %ptrtoint124 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint125 = add i64 %ptrtoint124, 7
  %entry-point-addr126 = inttoptr i64 %entry-point-addr-uint125 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point127 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr126, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point127({}* %26, i64 1, {}* %WAS.0, {}* null, {}* null, {}* null)
          to label %normal-dest130 unwind label %cleanup-lpad

normal-dest130:                                   ; preds = %normal-dest123
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 182), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest136 unwind label %cleanup-lpad

normal-dest136:                                   ; preds = %normal-dest130
  %ptrtoint137 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint138 = add i64 %ptrtoint137, 7
  %entry-point-addr139 = inttoptr i64 %entry-point-addr-uint138 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point140 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr139, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point140({}* %62, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest143 unwind label %cleanup-lpad

normal-dest143:                                   ; preds = %normal-dest136
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %65 = icmp eq {}* %alles_loeschen.0, %64
  br i1 %65, label %tag8, label %tag15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^135^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !46 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^135^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G102700.0 = phi {}* [ %18, %header-check-br ], [ %G102700.1, %normal-dest17 ], [ %G102700.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 213), align 8
  %ptrtoint29 = ptrtoint {}* %G102700.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G102700.0, i64 2, {}* %"closure->CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 213), align 8
  %"closure->CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3996, i64 135, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 212), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102700.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 215), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 216), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 540 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 213), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102700.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !47 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc523 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc523:                                        ; preds = %10
  unreachable

tag:                                              ; preds = %tag89
  %11 = add i64 %58, 5
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8
  br label %tag86

tag1:                                             ; preds = %tag66, %tag6, %normal-dest309, %tag63
  %return-value.sroa.26.0 = phi i64 [ %.elt477, %normal-dest309 ], [ 1, %tag63 ], [ 1, %tag6 ], [ 1, %tag66 ]
  %return-value.sroa.0.0 = phi i64 [ %170, %normal-dest309 ], [ %55, %tag63 ], [ %66, %tag6 ], [ %61, %tag66 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %14 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %15 = insertvalue { {}*, i64 } undef, {}* %14, 0
  %16 = insertvalue { {}*, i64 } %15, i64 %return-value.sroa.26.0, 1
  ret { {}*, i64 } %16

tag6:                                             ; preds = %tag36
  %17 = icmp eq {}* %LISTE.0, %67
  %G102783.0 = select i1 %17, {}* %.val548, {}* %.val549611
  %18 = icmp eq {}* %G102783.0, %67
  br i1 %18, label %tag65, label %tag1

tag13:                                            ; preds = %tag110
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest159 unwind label %cleanup-lpad.loopexit

tag14:                                            ; preds = %tag16
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest174 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag16:                                            ; preds = %tag89
  %23 = icmp eq {}* %LISTE.0, %87
  %.val552 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102766.0 = select i1 %23, {}* %.val552, {}* %.val553616
  %24 = icmp eq {}* %G102766.0, %87
  %25 = ptrtoint {}* %.val553616 to i64
  br i1 %24, label %tag14, label %tag86

tag21:                                            ; preds = %tag83
  %26 = add i64 %78, -3
  %27 = inttoptr i64 %26 to {}**
  %28 = load {}*, {}** %27, align 8
  br label %tag79

tag24:                                            ; preds = %tag66
  br i1 %consp-test300, label %tag25, label %tag85

tag25:                                            ; preds = %tag24
  %29 = add i64 %58, 5
  %30 = inttoptr i64 %29 to {}**
  %31 = load {}*, {}** %30, align 8
  br label %tag83

tag28:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %32 = ptrtoint {}* %.in497 to i64
  %single-float-tag-only = and i64 %32, 7
  %fixnum-tag-only271495 = and i64 %32, 3
  %fixnump-test272 = icmp ne i64 %fixnum-tag-only271495, 0
  %test394 = icmp eq i64 %single-float-tag-only, 1
  %or.cond534 = and i1 %fixnump-test272, %test394
  br i1 %or.cond534, label %header-check-br391, label %tag113

tag29:                                            ; preds = %tag86
  %33 = add i64 %86, 5
  %34 = inttoptr i64 %33 to {}**
  %35 = load {}*, {}** %34, align 8
  br label %tag64.backedge

tag31:                                            ; preds = %tag42
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest210 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag36:                                            ; preds = %tag96
  %.val548 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102791.0 = select i1 %consp-test300, {}* %.val548, {}* %.val549611
  %38 = icmp eq {}* %G102791.0, %67
  br i1 %38, label %tag6, label %tag63

tag37:                                            ; preds = %tag75
  %39 = add i64 %50, -3
  %40 = inttoptr i64 %39 to {}**
  %41 = load {}*, {}** %40, align 8
  br label %tag117

tag39:                                            ; preds = %tag92
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest232 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag42:                                            ; preds = %tag83
  %44 = icmp eq {}* %x206.0, %.val557
  %G102865.0 = select i1 %44, {}* %.val556, {}* %.val557
  %45 = icmp eq {}* %G102865.0, %.val557
  br i1 %45, label %tag31, label %tag79

tag44:                                            ; preds = %tag117
  br i1 %brmerge, label %tag113, label %header-check-br

tag51:                                            ; preds = %tag51.preheader, %tag113
  %46 = phi i64 [ %102, %tag113 ], [ %70, %tag51.preheader ]
  %47 = phi i64 [ %101, %tag113 ], [ %71, %tag51.preheader ]
  %.val549603 = phi {}* [ %.val549611613, %tag113 ], [ %.val549604, %tag51.preheader ]
  %G102852.0 = phi {}* [ %.val542, %tag113 ], [ %.val542576, %tag51.preheader ]
  %48 = phi i1 [ %107, %tag113 ], [ %74, %tag51.preheader ]
  %49 = phi {}* [ %100, %tag113 ], [ %72, %tag51.preheader ]
  %"%SUBLIST102678.1579" = phi {}* [ %105, %tag113 ], [ %"%SUBLIST102678.0", %tag51.preheader ]
  %50 = ptrtoint {}* %"%SUBLIST102678.1579" to i64
  %tag-only269464 = and i64 %50, 7
  %consp-test270 = icmp eq i64 %tag-only269464, 3
  br i1 %consp-test270, label %tag75, label %tag90

tag62:                                            ; preds = %header-check-br391, %header-check-br391, %header-check-br391, %header-check-br391
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest284 unwind label %cleanup-lpad.loopexit

tag63:                                            ; preds = %tag36
  %53 = add i64 %58, -3
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54, align 8
  br label %tag1

tag64:                                            ; preds = %tag64.backedge, %normal-dest140
  %56 = phi i64 [ %128, %normal-dest140 ], [ %.be, %tag64.backedge ]
  %57 = phi i64 [ %128, %normal-dest140 ], [ %.be819, %tag64.backedge ]
  %.val549607 = phi {}* [ %126, %normal-dest140 ], [ %.val549607.be, %tag64.backedge ]
  %.val535 = phi {}* [ %126, %normal-dest140 ], [ %.val535.be, %tag64.backedge ]
  %LISTE.0 = phi {}* [ %G102674.0, %normal-dest140 ], [ %LISTE.0.be, %tag64.backedge ]
  %58 = ptrtoint {}* %LISTE.0 to i64
  %tag-only299461 = and i64 %58, 7
  %consp-test300 = icmp eq i64 %tag-only299461, 3
  br i1 %consp-test300, label %tag66, label %tag112

tag65:                                            ; preds = %tag6
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest302 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag66:                                            ; preds = %tag112, %tag64, %normal-dest440
  %61 = phi i64 [ %194, %normal-dest440 ], [ %56, %tag64 ], [ %56, %tag112 ]
  %62 = phi i64 [ %194, %normal-dest440 ], [ %57, %tag64 ], [ %57, %tag112 ]
  %.val549606 = phi {}* [ %193, %normal-dest440 ], [ %.val549607, %tag64 ], [ %.val549607, %tag112 ]
  %.val539 = phi {}* [ %193, %normal-dest440 ], [ %.val535, %tag64 ], [ %.val535, %tag112 ]
  %object.0 = phi {}* [ %object.1, %normal-dest440 ], [ %.val535, %tag64 ], [ %.val, %tag112 ]
  %63 = icmp eq {}* %object.0, %.val539
  %.val536 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102720.0 = select i1 %63, {}* %.val536, {}* %.val539
  %64 = icmp eq {}* %G102720.0, %.val539
  br i1 %64, label %tag1, label %tag24

tag74:                                            ; preds = %tag117, %normal-dest291
  %65 = phi i64 [ %164, %normal-dest291 ], [ %109, %tag117 ]
  %66 = phi i64 [ %164, %normal-dest291 ], [ %110, %tag117 ]
  %.val549611 = phi {}* [ %163, %normal-dest291 ], [ %.val549602, %tag117 ]
  %67 = phi {}* [ %163, %normal-dest291 ], [ %.val547, %tag117 ]
  %G102823.0 = phi {}* [ %G102823.1, %normal-dest291 ], [ %111, %tag117 ]
  %68 = icmp eq {}* %G102823.0, %67
  br i1 %68, label %tag74.tag113_crit_edge, label %tag96

tag74.tag113_crit_edge:                           ; preds = %tag74
  %.val542.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag113

tag75:                                            ; preds = %tag51
  %69 = icmp eq {}* %G102852.0, %49
  br i1 %69, label %tag110, label %tag37

tag79:                                            ; preds = %tag42, %normal-dest217, %tag21
  %70 = phi i64 [ %76, %tag21 ], [ %154, %normal-dest217 ], [ %76, %tag42 ]
  %71 = phi i64 [ %77, %tag21 ], [ %154, %normal-dest217 ], [ %77, %tag42 ]
  %.val549604 = phi {}* [ %.val549605, %tag21 ], [ %153, %normal-dest217 ], [ %.val549605, %tag42 ]
  %.val542576 = phi {}* [ %.val556, %tag21 ], [ %.val542576.pre, %normal-dest217 ], [ %.val556, %tag42 ]
  %72 = phi {}* [ %.val557, %tag21 ], [ %153, %normal-dest217 ], [ %.val557, %tag42 ]
  %"%SUBLIST102678.0" = phi {}* [ %28, %tag21 ], [ %"%SUBLIST102678.2", %normal-dest217 ], [ %.val557, %tag42 ]
  %73 = icmp eq {}* %"%SUBLIST102678.0", %72
  %object261.0577 = select i1 %73, {}* %.val542576, {}* %72
  %74 = icmp eq {}* %object261.0577, %72
  %G102798.0578 = select i1 %74, {}* %.val542576, {}* %72
  %75 = icmp eq {}* %G102798.0578, %72
  br i1 %75, label %tag89, label %tag51.preheader

tag51.preheader:                                  ; preds = %tag79
  br label %tag51

tag83:                                            ; preds = %tag85, %normal-dest378, %tag25
  %76 = phi i64 [ %61, %tag25 ], [ %182, %normal-dest378 ], [ %61, %tag85 ]
  %77 = phi i64 [ %62, %tag25 ], [ %182, %normal-dest378 ], [ %62, %tag85 ]
  %.val549605 = phi {}* [ %.val549606, %tag25 ], [ %181, %normal-dest378 ], [ %.val549606, %tag85 ]
  %.val557 = phi {}* [ %.val539, %tag25 ], [ %181, %normal-dest378 ], [ %.val539, %tag85 ]
  %.val556 = phi {}* [ %.val536, %tag25 ], [ %.val540.pre, %normal-dest378 ], [ %.val536, %tag85 ]
  %x206.0 = phi {}* [ %31, %tag25 ], [ %x206.1, %normal-dest378 ], [ %.val539, %tag85 ]
  %78 = ptrtoint {}* %x206.0 to i64
  %tag-only333463 = and i64 %78, 7
  %consp-test334 = icmp eq i64 %tag-only333463, 3
  %G102872.0 = select i1 %consp-test334, {}* %.val556, {}* %.val557
  %79 = icmp eq {}* %G102872.0, %.val557
  br i1 %79, label %tag42, label %tag21

tag85:                                            ; preds = %tag24
  %80 = icmp eq {}* %LISTE.0, %.val539
  %G102885.0 = select i1 %80, {}* %.val536, {}* %.val539
  %81 = icmp eq {}* %G102885.0, %.val539
  br i1 %81, label %tag103, label %tag83

tag86:                                            ; preds = %tag16, %normal-dest181, %tag
  %82 = phi i64 [ %89, %tag ], [ %147, %normal-dest181 ], [ %89, %tag16 ]
  %83 = phi i64 [ %88, %tag ], [ %147, %normal-dest181 ], [ %25, %tag16 ]
  %84 = phi {}* [ %.val553616, %tag ], [ %146, %normal-dest181 ], [ %.val553616, %tag16 ]
  %85 = phi {}* [ %87, %tag ], [ %146, %normal-dest181 ], [ %.val553616, %tag16 ]
  %x.0 = phi {}* [ %13, %tag ], [ %x.1, %normal-dest181 ], [ %87, %tag16 ]
  %86 = ptrtoint {}* %x.0 to i64
  %tag-only341479 = and i64 %86, 7
  %consp-test342 = icmp eq i64 %tag-only341479, 3
  br i1 %consp-test342, label %tag29, label %tag92

tag89:                                            ; preds = %tag113, %tag79, %tag96
  %87 = phi {}* [ %"%SUBLIST102678.1579", %tag96 ], [ %72, %tag79 ], [ %100, %tag113 ]
  %.val553616 = phi {}* [ %.val549611, %tag96 ], [ %.val549604, %tag79 ], [ %.val549611613, %tag113 ]
  %88 = phi i64 [ %66, %tag96 ], [ %71, %tag79 ], [ %101, %tag113 ]
  %89 = phi i64 [ %65, %tag96 ], [ %70, %tag79 ], [ %102, %tag113 ]
  br i1 %consp-test300, label %tag, label %tag16

tag90:                                            ; preds = %tag51
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %91 = invoke {}* @cc_safe_fdefinition({}* %90)
          to label %normal-dest349 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag92:                                            ; preds = %tag86
  %92 = icmp eq {}* %x.0, %84
  %.val554 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102750.0 = select i1 %92, {}* %.val554, {}* %84
  %93 = icmp eq {}* %G102750.0, %84
  %94 = ptrtoint {}* %84 to i64
  br i1 %93, label %tag39, label %tag64.backedge

tag64.backedge:                                   ; preds = %tag92, %normal-dest239, %tag29
  %.be = phi i64 [ %82, %tag29 ], [ %161, %normal-dest239 ], [ %82, %tag92 ]
  %.be819 = phi i64 [ %83, %tag29 ], [ %161, %normal-dest239 ], [ %94, %tag92 ]
  %.val549607.be = phi {}* [ %84, %tag29 ], [ %160, %normal-dest239 ], [ %84, %tag92 ]
  %.val535.be = phi {}* [ %85, %tag29 ], [ %160, %normal-dest239 ], [ %84, %tag92 ]
  %LISTE.0.be = phi {}* [ %35, %tag29 ], [ %G102684.1, %normal-dest239 ], [ %84, %tag92 ]
  br label %tag64

tag96:                                            ; preds = %tag74
  %95 = icmp eq {}* %"%SUBLIST102678.1579", %67
  br i1 %95, label %tag89, label %tag36

tag103:                                           ; preds = %tag85
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %97 = invoke {}* @cc_safe_fdefinition({}* %96)
          to label %normal-dest371 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag110:                                           ; preds = %tag75
  br i1 %48, label %tag13, label %tag117

tag112:                                           ; preds = %tag64
  %98 = icmp eq {}* %LISTE.0, %.val535
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102733.0 = select i1 %98, {}* %.val, {}* %.val535
  %99 = icmp eq {}* %G102733.0, %.val535
  br i1 %99, label %tag120, label %tag66

tag113:                                           ; preds = %tag74.tag113_crit_edge, %header-check-br391, %header-check-br, %tag28, %tag44
  %.val542 = phi {}* [ %.val542.pre, %tag74.tag113_crit_edge ], [ %111, %tag44 ], [ %111, %tag28 ], [ %111, %header-check-br ], [ %111, %header-check-br391 ]
  %100 = phi {}* [ %67, %tag74.tag113_crit_edge ], [ %.val547, %tag44 ], [ %.val547, %tag28 ], [ %.val547, %header-check-br ], [ %.val547, %header-check-br391 ]
  %.val549611613 = phi {}* [ %.val549611, %tag74.tag113_crit_edge ], [ %.val549602, %tag44 ], [ %.val549602, %tag28 ], [ %.val549602, %header-check-br ], [ %.val549602, %header-check-br391 ]
  %101 = phi i64 [ %66, %tag74.tag113_crit_edge ], [ %110, %tag44 ], [ %110, %tag28 ], [ %110, %header-check-br ], [ %110, %header-check-br391 ]
  %102 = phi i64 [ %65, %tag74.tag113_crit_edge ], [ %109, %tag44 ], [ %109, %tag28 ], [ %109, %header-check-br ], [ %109, %header-check-br391 ]
  %103 = add i64 %50, 5
  %104 = inttoptr i64 %103 to {}**
  %105 = load {}*, {}** %104, align 8
  %106 = icmp eq {}* %105, %100
  %object261.0 = select i1 %106, {}* %.val542, {}* %100
  %107 = icmp eq {}* %object261.0, %100
  %G102798.0 = select i1 %107, {}* %.val542, {}* %100
  %108 = icmp eq {}* %G102798.0, %100
  br i1 %108, label %tag89, label %tag51

tag117:                                           ; preds = %tag110, %normal-dest167, %tag37
  %109 = phi i64 [ %46, %tag37 ], [ %140, %normal-dest167 ], [ %46, %tag110 ]
  %110 = phi i64 [ %47, %tag37 ], [ %140, %normal-dest167 ], [ %47, %tag110 ]
  %.val549602 = phi {}* [ %.val549603, %tag37 ], [ %139, %normal-dest167 ], [ %.val549603, %tag110 ]
  %.val547 = phi {}* [ %49, %tag37 ], [ %139, %normal-dest167 ], [ %G102852.0, %tag110 ]
  %111 = phi {}* [ %G102852.0, %tag37 ], [ %.val546.pre, %normal-dest167 ], [ %G102852.0, %tag110 ]
  %.in497 = phi {}* [ %41, %tag37 ], [ %.in, %normal-dest167 ], [ %G102852.0, %tag110 ]
  %112 = bitcast {}* %.in497 to i8*
  %113 = icmp eq {}* %.in497, %farg0
  %G102832.0 = select i1 %113, {}* %111, {}* %.val547
  %114 = icmp eq {}* %G102832.0, %.val547
  br i1 %114, label %tag44, label %tag74

tag120:                                           ; preds = %tag112
  %115 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %116 = invoke {}* @cc_safe_fdefinition({}* %115)
          to label %normal-dest433 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag13, %normal-dest159, %tag62, %normal-dest284
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest433, %tag120, %normal-dest371, %tag103, %normal-dest232, %tag39, %normal-dest210, %tag31, %normal-dest174, %tag14
  %lpad.loopexit558 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %9, %tag90, %normal-dest302, %tag65, %normal-dest349, %normal-dest131, %normal-dest128, %normal-dest126, %normal-dest
  %lpad.loopexit.split-lp559 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit558, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp559, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %117 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %118 = invoke {}* @cc_safe_fdefinition({}* %117)
          to label %normal-dest126 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest126:                                   ; preds = %normal-dest
  %119 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %120 = invoke {}* @cc_safe_fdefinition({}* %119)
          to label %normal-dest128 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest128:                                   ; preds = %normal-dest126
  %121 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 202), align 16
  %ptrtoint = ptrtoint {}* %120 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %122 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %120, i64 2, {}* %farg0, {}* %121, {}* null, {}* null)
          to label %normal-dest131 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest131:                                   ; preds = %normal-dest128
  %.elt = extractvalue { {}*, i64 } %122, 0
  %.elt456 = extractvalue { {}*, i64 } %122, 1
  %cond = icmp eq i64 %.elt456, 0
  %123 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102893.0 = select i1 %cond, {}* %123, {}* %.elt
  %124 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint134 = ptrtoint {}* %118 to i64
  %entry-point-addr-uint135 = add i64 %ptrtoint134, 7
  %entry-point-addr136 = inttoptr i64 %entry-point-addr-uint135 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point137 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr136, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point137({}* %118, i64 2, {}* %G102893.0, {}* %124, {}* null, {}* null)
          to label %normal-dest140 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest140:                                   ; preds = %normal-dest131
  %.elt458 = extractvalue { {}*, i64 } %125, 0
  %.elt460 = extractvalue { {}*, i64 } %125, 1
  %cond446 = icmp eq i64 %.elt460, 0
  %126 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102674.0 = select i1 %cond446, {}* %126, {}* %.elt458
  %127 = ptrtoint {}* %farg0 to i64
  %single-float-tag-only252 = and i64 %127, 7
  %fixnum-tag-only418493 = and i64 %127, 3
  %fixnump-test419 = icmp eq i64 %fixnum-tag-only418493, 0
  %test = icmp ne i64 %single-float-tag-only252, 1
  %irc-bit-cast149 = bitcast {}* %farg0 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast149, i64 -9
  %irc-bit-cast150 = bitcast i8* %gep to i64*
  %128 = ptrtoint {}* %126 to i64
  %brmerge = or i1 %test, %fixnump-test419
  br label %tag64

header-check-br:                                  ; preds = %tag44
  %129 = load i64, i64* %irc-bit-cast150, align 8
  %130 = add i64 %129, -1309
  %131 = lshr i64 %130, 3
  %132 = shl i64 %130, 61
  %133 = or i64 %131, %132
  switch i64 %133, label %tag113 [
    i64 2, label %tag28
    i64 4, label %tag28
    i64 5, label %tag28
    i64 0, label %tag28
  ]

normal-dest159:                                   ; preds = %tag13
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %135 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %136 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %137 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint161 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint162 = add i64 %ptrtoint161, 7
  %entry-point-addr163 = inttoptr i64 %entry-point-addr-uint162 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point164 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr163, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point164({}* %20, i64 5, {}* %134, {}* %135, {}* %"%SUBLIST102678.1579", {}* %136, {}* %137)
          to label %normal-dest167 unwind label %cleanup-lpad.loopexit

normal-dest167:                                   ; preds = %normal-dest159
  %.elt503 = extractvalue { {}*, i64 } %138, 0
  %.elt505 = extractvalue { {}*, i64 } %138, 1
  %cond451 = icmp eq i64 %.elt505, 0
  %139 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond451, {}* %139, {}* %.elt503
  %.val546.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %140 = ptrtoint {}* %139 to i64
  br label %tag117

normal-dest174:                                   ; preds = %tag14
  %141 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %143 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint175 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint176 = add i64 %ptrtoint175, 7
  %entry-point-addr177 = inttoptr i64 %entry-point-addr-uint176 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point178 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr177, align 8
  %145 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point178({}* %22, i64 5, {}* %141, {}* %142, {}* %LISTE.0, {}* %143, {}* %144)
          to label %normal-dest181 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest181:                                   ; preds = %normal-dest174
  %.elt485 = extractvalue { {}*, i64 } %145, 0
  %.elt487 = extractvalue { {}*, i64 } %145, 1
  %cond448 = icmp eq i64 %.elt487, 0
  %146 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x.1 = select i1 %cond448, {}* %146, {}* %.elt485
  %147 = ptrtoint {}* %146 to i64
  br label %tag86

normal-dest210:                                   ; preds = %tag31
  %148 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %149 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %151 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint211 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint212 = add i64 %ptrtoint211, 7
  %entry-point-addr213 = inttoptr i64 %entry-point-addr-uint212 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point214 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr213, align 8
  %152 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point214({}* %37, i64 5, {}* %148, {}* %149, {}* %x206.0, {}* %150, {}* %151)
          to label %normal-dest217 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest217:                                   ; preds = %normal-dest210
  %.elt507 = extractvalue { {}*, i64 } %152, 0
  %.elt509 = extractvalue { {}*, i64 } %152, 1
  %cond452 = icmp eq i64 %.elt509, 0
  %153 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%SUBLIST102678.2" = select i1 %cond452, {}* %153, {}* %.elt507
  %.val542576.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %154 = ptrtoint {}* %153 to i64
  br label %tag79

normal-dest232:                                   ; preds = %tag39
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %156 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %157 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %158 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint233 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint234 = add i64 %ptrtoint233, 7
  %entry-point-addr235 = inttoptr i64 %entry-point-addr-uint234 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point236 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr235, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point236({}* %43, i64 5, {}* %155, {}* %156, {}* %x.0, {}* %157, {}* %158)
          to label %normal-dest239 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest239:                                   ; preds = %normal-dest232
  %.elt481 = extractvalue { {}*, i64 } %159, 0
  %.elt483 = extractvalue { {}*, i64 } %159, 1
  %cond447 = icmp eq i64 %.elt483, 0
  %160 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102684.1 = select i1 %cond447, {}* %160, {}* %.elt481
  %161 = ptrtoint {}* %160 to i64
  br label %tag64.backedge

normal-dest260:                                   ; preds = %normal-dest349
  call void @unreachableError()
  unreachable

normal-dest284:                                   ; preds = %tag62
  %ptrtoint285 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint286 = add i64 %ptrtoint285, 7
  %entry-point-addr287 = inttoptr i64 %entry-point-addr-uint286 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point288 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr287, align 8
  %162 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point288({}* %52, i64 2, {}* nonnull %farg0, {}* nonnull %.in497, {}* null, {}* null)
          to label %normal-dest291 unwind label %cleanup-lpad.loopexit

normal-dest291:                                   ; preds = %normal-dest284
  %.elt499 = extractvalue { {}*, i64 } %162, 0
  %.elt501 = extractvalue { {}*, i64 } %162, 1
  %cond450 = icmp eq i64 %.elt501, 0
  %163 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102823.1 = select i1 %cond450, {}* %163, {}* %.elt499
  %164 = ptrtoint {}* %163 to i64
  br label %tag74

normal-dest302:                                   ; preds = %tag65
  %165 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %166 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %167 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %168 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint303 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint304 = add i64 %ptrtoint303, 7
  %entry-point-addr305 = inttoptr i64 %entry-point-addr-uint304 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point306 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr305, align 8
  %169 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point306({}* %60, i64 5, {}* %165, {}* %166, {}* %LISTE.0, {}* %167, {}* %168)
          to label %normal-dest309 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest309:                                   ; preds = %normal-dest302
  %.elt475 = extractvalue { {}*, i64 } %169, 0
  %170 = ptrtoint {}* %.elt475 to i64
  %.elt477 = extractvalue { {}*, i64 } %169, 1
  br label %tag1

normal-dest349:                                   ; preds = %tag90
  %171 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %172 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %173 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %174 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint254 = ptrtoint {}* %91 to i64
  %entry-point-addr-uint255 = add i64 %ptrtoint254, 7
  %entry-point-addr256 = inttoptr i64 %entry-point-addr-uint255 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point257 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr256, align 8
  %175 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point257({}* %91, i64 5, {}* %171, {}* %172, {}* %"%SUBLIST102678.1579", {}* %173, {}* %174)
          to label %normal-dest260 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest371:                                   ; preds = %tag103
  %176 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %177 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %178 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %179 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint372 = ptrtoint {}* %97 to i64
  %entry-point-addr-uint373 = add i64 %ptrtoint372, 7
  %entry-point-addr374 = inttoptr i64 %entry-point-addr-uint373 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point375 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr374, align 8
  %180 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point375({}* %97, i64 5, {}* %176, {}* %177, {}* %LISTE.0, {}* %178, {}* %179)
          to label %normal-dest378 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest378:                                   ; preds = %normal-dest371
  %.elt511 = extractvalue { {}*, i64 } %180, 0
  %.elt513 = extractvalue { {}*, i64 } %180, 1
  %cond453 = icmp eq i64 %.elt513, 0
  %181 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x206.1 = select i1 %cond453, {}* %181, {}* %.elt511
  %.val540.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %182 = ptrtoint {}* %181 to i64
  br label %tag83

header-check-br391:                               ; preds = %tag28
  %gep396 = getelementptr inbounds i8, i8* %112, i64 -9
  %irc-bit-cast397 = bitcast i8* %gep396 to i64*
  %183 = load i64, i64* %irc-bit-cast397, align 8
  %184 = add i64 %183, -1309
  %185 = lshr i64 %184, 3
  %186 = shl i64 %184, 61
  %187 = or i64 %185, %186
  switch i64 %187, label %tag113 [
    i64 2, label %tag62
    i64 4, label %tag62
    i64 5, label %tag62
    i64 0, label %tag62
  ]

normal-dest433:                                   ; preds = %tag120
  %188 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %189 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %190 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %191 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint434 = ptrtoint {}* %116 to i64
  %entry-point-addr-uint435 = add i64 %ptrtoint434, 7
  %entry-point-addr436 = inttoptr i64 %entry-point-addr-uint435 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point437 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr436, align 8
  %192 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point437({}* %116, i64 5, {}* %188, {}* %189, {}* %LISTE.0, {}* %190, {}* %191)
          to label %normal-dest440 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest440:                                   ; preds = %normal-dest433
  %.elt515 = extractvalue { {}*, i64 } %192, 0
  %.elt517 = extractvalue { {}*, i64 } %192, 1
  %cond454 = icmp eq i64 %.elt517, 0
  %193 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.1 = select i1 %cond454, {}* %193, {}* %.elt515
  %194 = ptrtoint {}* %193 to i64
  br label %tag66
}

; Function Attrs: nounwind
declare void @unreachableError() local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^141^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !48 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^141^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G102923.0 = phi {}* [ %18, %header-check-br ], [ %G102923.1, %normal-dest54 ], [ %G102923.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 229), align 8
  %ptrtoint13 = ptrtoint {}* %G102923.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G102923.0, i64 2, {}* %"closure->CWR=INIT", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest47, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 229), align 8
  %"closure->CWR=INIT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=INIT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=INIT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4222, i64 141, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br73

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=INIT", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 231), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=INIT", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 564 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 229), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag2
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 228), align 16
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102923.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102923.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag2

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=INIT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !49 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=INIT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 222), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest17 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest13, %normal-dest24
  %return-value.sroa.5.0 = phi i64 [ %.elt32, %normal-dest24 ], [ 1, %normal-dest13 ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt30, %normal-dest24 ], [ %21, %normal-dest13 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %14 = insertvalue { {}*, i64 } %13, i64 %return-value.sroa.5.0, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest17, %tag, %normal-dest10, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 218), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 220), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 2, {}* %18, {}* %19, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest10
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt28 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt28, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %21, {}* %.elt
  %22 = icmp eq {}* %object.0, %21
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G102949.0 = select i1 %22, {}* %.val, {}* %21
  %23 = icmp eq {}* %G102949.0, %21
  br i1 %23, label %tag5, label %tag

normal-dest17:                                    ; preds = %tag
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 220), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint18 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint19 = add i64 %ptrtoint18, 7
  %entry-point-addr20 = inttoptr i64 %entry-point-addr-uint19 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point21 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr20, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point21({}* %12, i64 5, {}* %24, {}* %25, {}* %26, {}* %27, {}* %28)
          to label %normal-dest24 unwind label %cleanup-lpad

normal-dest24:                                    ; preds = %normal-dest17
  %.elt30 = extractvalue { {}*, i64 } %29, 0
  %.elt32 = extractvalue { {}*, i64 } %29, 1
  br label %tag5
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^147^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !50 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^147^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G102977.0 = phi {}* [ %18, %header-check-br ], [ %G102977.1, %normal-dest17 ], [ %G102977.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 188), align 16
  %ptrtoint34 = ptrtoint {}* %G102977.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G102977.0, i64 2, {}* %"closure->CWR=UMSETZEN", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag2, %normal-dest21, %maybe-more-tests81, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 188), align 16
  %"closure->CWR=UMSETZEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=UMSETZEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=UMSETZEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4398, i64 147, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br73

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 236), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102977.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest21:                                    ; preds = %maybe-more-tests81
  %ptrtoint22 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G102977.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag2

normal-dest40:                                    ; preds = %tag2
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=UMSETZEN", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 237), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=UMSETZEN", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 588 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 188), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=UMSETZEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !51 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=UMSETZEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest87, %normal-dest132
  br i1 %consp-test56, label %tag13, label %tag18

tag3:                                             ; preds = %tag3.preheader, %tag2.backedge
  %.val179 = phi {}* [ %16, %tag2.backedge ], [ %42, %tag3.preheader ]
  %"%DOLIST-VAR.0184" = phi {}* [ %"%DOLIST-VAR.0.be", %tag2.backedge ], [ %"%DOLIST-VAR.1", %tag3.preheader ]
  %11 = ptrtoint {}* %"%DOLIST-VAR.0184" to i64
  %tag-only55148 = and i64 %11, 7
  %consp-test56 = icmp eq i64 %tag-only55148, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103050.0 = select i1 %consp-test56, {}* %.val, {}* %.val179
  %12 = icmp eq {}* %G103050.0, %.val179
  br i1 %12, label %tag12, label %tag4

tag4:                                             ; preds = %tag3
  %13 = add i64 %11, -3
  %14 = inttoptr i64 %13 to {}**
  %15 = load {}*, {}** %14, align 8
  br label %tag23

tag2.backedge:                                    ; preds = %tag13, %normal-dest118
  %16 = phi {}* [ %.pre, %tag13 ], [ %63, %normal-dest118 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %25, %tag13 ], [ %"%DOLIST-VAR.2", %normal-dest118 ]
  %17 = icmp eq {}* %"%DOLIST-VAR.0.be", %16
  br i1 %17, label %tag7, label %tag3

tag7:                                             ; preds = %tag18, %tag2.backedge, %normal-dest44
  %18 = phi {}* [ %42, %normal-dest44 ], [ %16, %tag2.backedge ], [ %28, %tag18 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %19 = insertvalue { {}*, i64 } undef, {}* %18, 0
  %20 = insertvalue { {}*, i64 } %19, i64 1, 1
  ret { {}*, i64 } %20

tag12:                                            ; preds = %tag3
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest64 unwind label %cleanup-lpad.loopexit

tag13:                                            ; preds = %tag
  %23 = add i64 %11, 5
  %24 = inttoptr i64 %23 to {}**
  %25 = load {}*, {}** %24, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag2.backedge

tag16:                                            ; preds = %normal-dest132
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit

tag18:                                            ; preds = %tag
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %29 = icmp eq {}* %"%DOLIST-VAR.0184", %28
  %.val182 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103008.0 = select i1 %29, {}* %.val182, {}* %28
  %30 = icmp eq {}* %G103008.0, %28
  br i1 %30, label %tag21, label %tag7

tag21:                                            ; preds = %tag18
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest111 unwind label %cleanup-lpad.loopexit

tag23:                                            ; preds = %normal-dest71, %tag4
  %VORSCHLAG.0 = phi {}* [ %15, %tag4 ], [ %VORSCHLAG.1, %normal-dest71 ]
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest125 unwind label %cleanup-lpad.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag12, %normal-dest64, %tag16, %normal-dest78, %normal-dest80, %normal-dest87, %tag21, %normal-dest111, %tag23, %normal-dest125
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest30, %normal-dest33, %normal-dest37, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 229), align 8
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest30 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest30:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %36 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %36, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest33:                                    ; preds = %normal-dest30
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 232), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest37 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest37:                                    ; preds = %normal-dest33
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint38 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint39 = add i64 %ptrtoint38, 7
  %entry-point-addr40 = inttoptr i64 %entry-point-addr-uint39 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point41 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr40, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point41({}* %39, i64 1, {}* %40, {}* null, {}* null, {}* null)
          to label %normal-dest44 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest44:                                    ; preds = %normal-dest37
  %.elt145 = extractvalue { {}*, i64 } %41, 0
  %.elt147 = extractvalue { {}*, i64 } %41, 1
  %cond = icmp eq i64 %.elt147, 0
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %42, {}* %.elt145
  %43 = icmp eq {}* %"%DOLIST-VAR.1", %42
  br i1 %43, label %tag7, label %tag3.preheader

tag3.preheader:                                   ; preds = %normal-dest44
  br label %tag3

normal-dest64:                                    ; preds = %tag12
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint65 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint66 = add i64 %ptrtoint65, 7
  %entry-point-addr67 = inttoptr i64 %entry-point-addr-uint66 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point68 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr67, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point68({}* %22, i64 5, {}* %44, {}* %45, {}* %"%DOLIST-VAR.0184", {}* %46, {}* %47)
          to label %normal-dest71 unwind label %cleanup-lpad.loopexit

normal-dest71:                                    ; preds = %normal-dest64
  %.elt167 = extractvalue { {}*, i64 } %48, 0
  %.elt169 = extractvalue { {}*, i64 } %48, 1
  %cond141 = icmp eq i64 %.elt169, 0
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %VORSCHLAG.1 = select i1 %cond141, {}* %49, {}* %.elt167
  br label %tag23

normal-dest78:                                    ; preds = %tag16
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 220), align 16
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 213), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest80 unwind label %cleanup-lpad.loopexit

normal-dest80:                                    ; preds = %normal-dest78
  %ptrtoint81 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint82 = add i64 %ptrtoint81, 7
  %entry-point-addr83 = inttoptr i64 %entry-point-addr-uint82 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point84 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr83, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point84({}* %52, i64 1, {}* %VORSCHLAG.0, {}* null, {}* null, {}* null)
          to label %normal-dest87 unwind label %cleanup-lpad.loopexit

normal-dest87:                                    ; preds = %normal-dest80
  %.elt154 = extractvalue { {}*, i64 } %53, 0
  %.elt156 = extractvalue { {}*, i64 } %53, 1
  %cond139 = icmp eq i64 %.elt156, 0
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103018.0 = select i1 %cond139, {}* %54, {}* %.elt154
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint93 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint94 = add i64 %ptrtoint93, 7
  %entry-point-addr95 = inttoptr i64 %entry-point-addr-uint94 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point96 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr95, align 8
  %57 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point96({}* %27, i64 5, {}* %VORSCHLAG.0, {}* %50, {}* %G103018.0, {}* %55, {}* %56)
          to label %tag unwind label %cleanup-lpad.loopexit

normal-dest111:                                   ; preds = %tag21
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint112 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint113 = add i64 %ptrtoint112, 7
  %entry-point-addr114 = inttoptr i64 %entry-point-addr-uint113 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point115 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr114, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point115({}* %32, i64 5, {}* %58, {}* %59, {}* %"%DOLIST-VAR.0184", {}* %60, {}* %61)
          to label %normal-dest118 unwind label %cleanup-lpad.loopexit

normal-dest118:                                   ; preds = %normal-dest111
  %.elt163 = extractvalue { {}*, i64 } %62, 0
  %.elt165 = extractvalue { {}*, i64 } %62, 1
  %cond140 = icmp eq i64 %.elt165, 0
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond140, {}* %63, {}* %.elt163
  br label %tag2.backedge

normal-dest125:                                   ; preds = %tag23
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 220), align 16
  %ptrtoint126 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint127 = add i64 %ptrtoint126, 7
  %entry-point-addr128 = inttoptr i64 %entry-point-addr-uint127 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point129 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr128, align 8
  %65 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point129({}* %34, i64 2, {}* %VORSCHLAG.0, {}* %64, {}* null, {}* null)
          to label %normal-dest132 unwind label %cleanup-lpad.loopexit

normal-dest132:                                   ; preds = %normal-dest125
  %.elt150 = extractvalue { {}*, i64 } %65, 0
  %.elt152 = extractvalue { {}*, i64 } %65, 1
  %cond138 = icmp eq i64 %.elt152, 0
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond138, {}* %66, {}* %.elt150
  %67 = icmp eq {}* %object.0, %66
  %.val180 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103025.0 = select i1 %67, {}* %.val180, {}* %66
  %68 = icmp eq {}* %G103025.0, %66
  br i1 %68, label %tag, label %tag16
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^155^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !52 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^155^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G103076.0 = phi {}* [ %18, %header-check-br ], [ %G103076.1, %normal-dest17 ], [ %G103076.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 243), align 8
  %ptrtoint43 = ptrtoint {}* %G103076.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G103076.0, i64 2, {}* %"closure->CWR=VERBALISIERE-OBJEKT", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %tag2, %normal-dest13, %maybe-more-tests42, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 243), align 8
  %"closure->CWR=VERBALISIERE-OBJEKT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4693, i64 155, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %maybe-more-tests42
  %ptrtoint14 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103076.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

normal-dest21:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 242), align 16
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt84 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt84, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103076.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag2

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 245), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=VERBALISIERE-OBJEKT", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 248), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=VERBALISIERE-OBJEKT", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 620 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 243), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !53 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc33 unwind label %cleanup-lpad

.noexc33:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %normal-dest23
  %return-value.sroa.5.0 = phi i64 [ %.elt29, %normal-dest23 ], [ 1, %normal-dest10 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt27, %normal-dest23 ], [ %farg0, %normal-dest10 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %14 = insertvalue { {}*, i64 } %13, i64 %return-value.sroa.5.0, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest16, %tag1, %normal-dest7, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 238), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 2, {}* %farg0, {}* %18, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt25 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt25, 0
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103100.0 = select i1 %cond, {}* %20, {}* %.elt
  %21 = icmp eq {}* %G103100.0, %20
  br i1 %21, label %tag2, label %tag1

normal-dest16:                                    ; preds = %tag1
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 238), align 16
  %ptrtoint17 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %12, i64 3, {}* %farg0, {}* %22, {}* %farg0, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt27 = extractvalue { {}*, i64 } %23, 0
  %.elt29 = extractvalue { {}*, i64 } %23, 1
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^161^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !54 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^161^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G103123.0 = phi {}* [ %18, %header-check-br ], [ %G103123.1, %normal-dest54 ], [ %G103123.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 145), align 8
  %ptrtoint13 = ptrtoint {}* %G103123.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G103123.0, i64 2, {}* %"closure->CWR=DIALOG-SCHLIESSEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest47, %maybe-more-tests67, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 145), align 8
  %"closure->CWR=DIALOG-SCHLIESSEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4827, i64 161, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=DIALOG-SCHLIESSEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 253), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=DIALOG-SCHLIESSEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 644 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 145), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %maybe-more-tests67
  %ptrtoint48 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %37, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt101 = extractvalue { {}*, i64 } %33, 0
  %.elt103 = extractvalue { {}*, i64 } %33, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103123.1 = select i1 %cond82, {}* %34, {}* %.elt101
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %35 = icmp ult i64 %.off106, 5
  br i1 %35, label %maybe-more-tests67, label %tag4

maybe-more-tests67:                               ; preds = %header-check-br59
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 252), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103123.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !55 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 250), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^164^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !56 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^164^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G103161.0 = phi {}* [ %18, %header-check-br ], [ %G103161.1, %normal-dest54 ], [ %G103161.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 264), align 16
  %ptrtoint13 = ptrtoint {}* %G103161.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G103161.0, i64 2, {}* %"closure->CWR=FALL_LADEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest47, %tag1, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 264), align 16
  %"closure->CWR=FALL_LADEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=FALL_LADEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FALL_LADEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4896, i64 164, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br73

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 266), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=FALL_LADEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 267), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=FALL_LADEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 656 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 264), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag1
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 263), align 8
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103161.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103161.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=FALL_LADEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !57 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  switch i64 %nargs, label %27 [
    i64 1, label %case-opt1-bb
    i64 0, label %req-bb
  ]

tag:                                              ; preds = %normal-dest44
  %10 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 164), align 16
  %11 = invoke {}* @cc_safe_fdefinition({}* %10)
          to label %normal-dest17 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest44
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 260), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest24 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest92, %normal-dest83
  %return-value.sroa.19.0 = phi i64 [ %.elt209, %normal-dest83 ], [ 1, %normal-dest92 ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt207, %normal-dest83 ], [ %47, %normal-dest92 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %14 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %15 = insertvalue { {}*, i64 } %14, i64 %return-value.sroa.19.0, 1
  ret { {}*, i64 } %15

tag6:                                             ; preds = %normal-dest92
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 178), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest37 unwind label %cleanup-lpad

tag8:                                             ; preds = %normal-dest24, %normal-dest163, %normal-dest122
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 147), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest50 unwind label %cleanup-lpad

tag10:                                            ; preds = %normal-dest20
  %20 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest99 unwind label %cleanup-lpad

tag11:                                            ; preds = %normal-dest20
  %21 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest140 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %27, %normal-dest163, %normal-dest151, %normal-dest144, %normal-dest142, %normal-dest140, %tag11, %normal-dest122, %normal-dest110, %normal-dest103, %normal-dest101, %normal-dest99, %tag10, %normal-dest85, %req-bb, %normal-dest76, %normal-dest70, %normal-dest63, %normal-dest57, %normal-dest50, %tag8, %normal-dest37, %tag6, %normal-dest24, %tag3, %normal-dest17, %tag
  %22 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %22

req-bb:                                           ; preds = %entry, %case-opt1-bb
  %G103145.0 = phi {}* [ %28, %case-opt1-bb ], [ %9, %entry ]
  %23 = icmp eq {}* %G103145.0, %9
  %was.0 = select i1 %23, {}* %9, {}* %farg0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 254), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 256), align 16
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest85 unwind label %cleanup-lpad

; <label>:27:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FALL_LADEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %27
  unreachable

case-opt1-bb:                                     ; preds = %entry
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %req-bb

normal-dest17:                                    ; preds = %tag
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 259), align 8
  %ptrtoint = ptrtoint {}* %11 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %11, i64 1, {}* %29, {}* null, {}* null, {}* null)
          to label %normal-dest20 unwind label %cleanup-lpad

normal-dest20:                                    ; preds = %normal-dest17
  %.elt214 = extractvalue { {}*, i64 } %30, 0
  %.elt216 = extractvalue { {}*, i64 } %30, 1
  %cond183 = icmp eq i64 %.elt216, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103208.0 = select i1 %cond183, {}* %31, {}* %.elt214
  %32 = icmp eq {}* %G103208.0, %31
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 260), align 16
  br i1 %32, label %tag10, label %tag11

normal-dest24:                                    ; preds = %tag3
  %ptrtoint25 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint26 = add i64 %ptrtoint25, 7
  %entry-point-addr27 = inttoptr i64 %entry-point-addr-uint26 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point28 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr27, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point28({}* %13, i64 1, {}* %was.0, {}* null, {}* null, {}* null)
          to label %tag8 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %tag6
  %ptrtoint38 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint39 = add i64 %ptrtoint38, 7
  %entry-point-addr40 = inttoptr i64 %entry-point-addr-uint39 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point41 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr40, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point41({}* %17, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest44 unwind label %cleanup-lpad

normal-dest44:                                    ; preds = %normal-dest37
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %37 = icmp eq {}* %was.0, %36
  br i1 %37, label %tag, label %tag3

normal-dest50:                                    ; preds = %tag8
  %ptrtoint51 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint52 = add i64 %ptrtoint51, 7
  %entry-point-addr53 = inttoptr i64 %entry-point-addr-uint52 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point54 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr53, align 8
  %38 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point54({}* %19, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest57 unwind label %cleanup-lpad

normal-dest57:                                    ; preds = %normal-dest50
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 149), align 8
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest57
  %ptrtoint64 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint65 = add i64 %ptrtoint64, 7
  %entry-point-addr66 = inttoptr i64 %entry-point-addr-uint65 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point67 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr66, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point67({}* %40, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest70 unwind label %cleanup-lpad

normal-dest70:                                    ; preds = %normal-dest63
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 151), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest70
  %ptrtoint77 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint78 = add i64 %ptrtoint77, 7
  %entry-point-addr79 = inttoptr i64 %entry-point-addr-uint78 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point80 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr79, align 8
  %44 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point80({}* %43, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest83 unwind label %cleanup-lpad

normal-dest83:                                    ; preds = %normal-dest76
  %.elt207 = extractvalue { {}*, i64 } %44, 0
  %.elt209 = extractvalue { {}*, i64 } %44, 1
  br label %tag4

normal-dest85:                                    ; preds = %req-bb
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 258), align 16
  %ptrtoint86 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint87 = add i64 %ptrtoint86, 7
  %entry-point-addr88 = inttoptr i64 %entry-point-addr-uint87 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point89 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr88, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point89({}* %26, i64 1, {}* %45, {}* null, {}* null, {}* null)
          to label %normal-dest92 unwind label %cleanup-lpad

normal-dest92:                                    ; preds = %normal-dest85
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt189 = extractvalue { {}*, i64 } %46, 1
  %cond182 = icmp eq i64 %.elt189, 0
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y.0 = select i1 %cond182, {}* %47, {}* %.elt
  %48 = icmp eq {}* %24, %y.0
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103220.0 = select i1 %48, {}* %.val, {}* %47
  %49 = icmp eq {}* %G103220.0, %47
  br i1 %49, label %tag4, label %tag6

normal-dest99:                                    ; preds = %tag10
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 166), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest101 unwind label %cleanup-lpad

normal-dest101:                                   ; preds = %normal-dest99
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 168), align 16
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 170), align 16
  %54 = invoke {}* @cc_safe_fdefinition({}* %53)
          to label %normal-dest103 unwind label %cleanup-lpad

normal-dest103:                                   ; preds = %normal-dest101
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 172), align 16
  %ptrtoint104 = ptrtoint {}* %54 to i64
  %entry-point-addr-uint105 = add i64 %ptrtoint104, 7
  %entry-point-addr106 = inttoptr i64 %entry-point-addr-uint105 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point107 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr106, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point107({}* %54, i64 1, {}* %55, {}* null, {}* null, {}* null)
          to label %normal-dest110 unwind label %cleanup-lpad

normal-dest110:                                   ; preds = %normal-dest103
  %.elt230 = extractvalue { {}*, i64 } %56, 0
  %.elt232 = extractvalue { {}*, i64 } %56, 1
  %cond186 = icmp eq i64 %.elt232, 0
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103190.0 = select i1 %cond186, {}* %57, {}* %.elt230
  %ptrtoint116 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint117 = add i64 %ptrtoint116, 7
  %entry-point-addr118 = inttoptr i64 %entry-point-addr-uint117 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point119 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr118, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point119({}* %51, i64 2, {}* %52, {}* %G103190.0, {}* null, {}* null)
          to label %normal-dest122 unwind label %cleanup-lpad

normal-dest122:                                   ; preds = %normal-dest110
  %.elt234 = extractvalue { {}*, i64 } %58, 0
  %.elt236 = extractvalue { {}*, i64 } %58, 1
  %cond187 = icmp eq i64 %.elt236, 0
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103187.0 = select i1 %cond187, {}* %59, {}* %.elt234
  %ptrtoint128 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint129 = add i64 %ptrtoint128, 7
  %entry-point-addr130 = inttoptr i64 %entry-point-addr-uint129 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point131 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr130, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point131({}* %20, i64 1, {}* %G103187.0, {}* null, {}* null, {}* null)
          to label %tag8 unwind label %cleanup-lpad

normal-dest140:                                   ; preds = %tag11
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 166), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest142 unwind label %cleanup-lpad

normal-dest142:                                   ; preds = %normal-dest140
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 168), align 16
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 170), align 16
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest144 unwind label %cleanup-lpad

normal-dest144:                                   ; preds = %normal-dest142
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 172), align 16
  %ptrtoint145 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint146 = add i64 %ptrtoint145, 7
  %entry-point-addr147 = inttoptr i64 %entry-point-addr-uint146 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point148 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr147, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point148({}* %65, i64 1, {}* %66, {}* null, {}* null, {}* null)
          to label %normal-dest151 unwind label %cleanup-lpad

normal-dest151:                                   ; preds = %normal-dest144
  %.elt218 = extractvalue { {}*, i64 } %67, 0
  %.elt220 = extractvalue { {}*, i64 } %67, 1
  %cond184 = icmp eq i64 %.elt220, 0
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103200.0 = select i1 %cond184, {}* %68, {}* %.elt218
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 174), align 16
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 262), align 16
  %ptrtoint157 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint158 = add i64 %ptrtoint157, 7
  %entry-point-addr159 = inttoptr i64 %entry-point-addr-uint158 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point160 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr159, align 8
  %71 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point160({}* %62, i64 4, {}* %63, {}* %G103200.0, {}* %69, {}* %70)
          to label %normal-dest163 unwind label %cleanup-lpad

normal-dest163:                                   ; preds = %normal-dest151
  %.elt222 = extractvalue { {}*, i64 } %71, 0
  %.elt224 = extractvalue { {}*, i64 } %71, 1
  %cond185 = icmp eq i64 %.elt224, 0
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103197.0 = select i1 %cond185, {}* %72, {}* %.elt222
  %ptrtoint169 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint170 = add i64 %ptrtoint169, 7
  %entry-point-addr171 = inttoptr i64 %entry-point-addr-uint170 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point172 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr171, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point172({}* %21, i64 1, {}* %G103197.0, {}* null, {}* null, {}* null)
          to label %tag8 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^179^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !58 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^179^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G103254.0 = phi {}* [ %18, %header-check-br ], [ %G103254.1, %normal-dest63 ], [ %G103254.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 276), align 16
  %ptrtoint13 = ptrtoint {}* %G103254.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G103254.0, i64 2, {}* %"closure->CWR=SPEICHERE_OBERE_1/2-EBENE", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests54, %normal-dest56, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 276), align 16
  %"closure->CWR=SPEICHERE_OBERE_1/2-EBENE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5491, i64 179, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br46

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=SPEICHERE_OBERE_1/2-EBENE", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 278), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=SPEICHERE_OBERE_1/2-EBENE", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 716 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 276), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag2

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %tag2
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 275), align 8
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103254.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag

normal-dest69:                                    ; preds = %maybe-more-tests54
  %ptrtoint70 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103254.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !59 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest6, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 269), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 271), align 8
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %15, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5491, i64 179, i64 0, i64 0)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %14, {}* %"closure->LAMBDA", {}* null, {}* null)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %16
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !60 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^^DESC" to %0*)) #7
          to label %.noexc257 unwind label %cleanup-lpad.loopexit.split-lp

.noexc257:                                        ; preds = %10
  unreachable

tag10:                                            ; preds = %tag10.lr.ph, %tag58
  %G103336.0 = phi {}* [ %.val270, %tag10.lr.ph ], [ %.val, %tag58 ]
  %11 = phi i1 [ %50, %tag10.lr.ph ], [ %36, %tag58 ]
  %12 = phi {}* [ %48, %tag10.lr.ph ], [ %31, %tag58 ]
  %"%SUBLIST103233.0273" = phi {}* [ %"%SUBLIST103233.1", %tag10.lr.ph ], [ %34, %tag58 ]
  %13 = ptrtoint {}* %"%SUBLIST103233.0273" to i64
  %tag-only83229 = and i64 %13, 7
  %consp-test = icmp eq i64 %tag-only83229, 3
  br i1 %consp-test, label %tag27, label %tag12

tag12:                                            ; preds = %tag10
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest99 unwind label %cleanup-lpad.loopexit.split-lp

tag16:                                            ; preds = %tag20, %normal-dest126
  %16 = phi {}* [ %65, %normal-dest126 ], [ %.val267, %tag20 ]
  %G103307.0 = phi {}* [ %G103307.1, %normal-dest126 ], [ %18, %tag20 ]
  %17 = icmp eq {}* %G103307.0, %16
  br i1 %17, label %tag16.tag58_crit_edge, label %tag16.tag60.loopexit_crit_edge

tag16.tag58_crit_edge:                            ; preds = %tag16
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag58

tag16.tag60.loopexit_crit_edge:                   ; preds = %tag16
  %.pre.pre = load i64, i64* bitcast ({}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13) to i64*), align 8
  br label %tag60

tag20:                                            ; preds = %tag47, %normal-dest214, %tag37
  %.val267 = phi {}* [ %12, %tag37 ], [ %76, %normal-dest214 ], [ %G103336.0, %tag47 ]
  %18 = phi {}* [ %G103336.0, %tag37 ], [ %.val266.pre, %normal-dest214 ], [ %G103336.0, %tag47 ]
  %.in247 = phi {}* [ %27, %tag37 ], [ %.in, %normal-dest214 ], [ %G103336.0, %tag47 ]
  %19 = bitcast {}* %.in247 to i8*
  %20 = icmp eq {}* %.in247, %farg0
  %G103316.0 = select i1 %20, {}* %18, {}* %.val267
  %21 = icmp eq {}* %G103316.0, %.val267
  br i1 %21, label %tag25, label %tag16

tag23:                                            ; preds = %header-check-br199, %header-check-br199, %header-check-br199, %header-check-br199
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest119 unwind label %cleanup-lpad.loopexit

tag25:                                            ; preds = %tag20
  br i1 %brmerge, label %tag58, label %header-check-br

tag27:                                            ; preds = %tag10
  %24 = icmp eq {}* %G103336.0, %12
  br i1 %24, label %tag47, label %tag37

tag37:                                            ; preds = %tag27
  %25 = add i64 %13, -3
  %26 = inttoptr i64 %25 to {}**
  %27 = load {}*, {}** %26, align 8
  br label %tag20

tag42:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %28 = ptrtoint {}* %.in247 to i64
  %single-float-tag-only169 = and i64 %28, 7
  %fixnum-tag-only245 = and i64 %28, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only245, 0
  %test202 = icmp eq i64 %single-float-tag-only169, 1
  %or.cond262 = and i1 %fixnump-test, %test202
  br i1 %or.cond262, label %header-check-br199, label %tag58

tag47:                                            ; preds = %tag27
  br i1 %11, label %tag57, label %tag20

tag57:                                            ; preds = %tag47
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest207 unwind label %cleanup-lpad.loopexit

tag58:                                            ; preds = %tag16.tag58_crit_edge, %header-check-br, %header-check-br199, %tag25, %tag42
  %.val = phi {}* [ %.val.pre, %tag16.tag58_crit_edge ], [ %18, %tag42 ], [ %18, %tag25 ], [ %18, %header-check-br199 ], [ %18, %header-check-br ]
  %31 = phi {}* [ %16, %tag16.tag58_crit_edge ], [ %.val267, %tag42 ], [ %.val267, %tag25 ], [ %.val267, %header-check-br199 ], [ %.val267, %header-check-br ]
  %32 = add i64 %13, 5
  %33 = inttoptr i64 %32 to {}**
  %34 = load {}*, {}** %33, align 8
  %35 = icmp eq {}* %34, %31
  %object.0 = select i1 %35, {}* %.val, {}* %31
  %36 = icmp eq {}* %object.0, %31
  %G103282.0 = select i1 %36, {}* %.val, {}* %31
  %37 = icmp eq {}* %G103282.0, %31
  br i1 %37, label %tag60.loopexit, label %tag10

tag60.loopexit:                                   ; preds = %tag58
  %38 = ptrtoint {}* %.val to i64
  br label %tag60

tag60:                                            ; preds = %tag60.loopexit, %tag16.tag60.loopexit_crit_edge, %normal-dest70
  %39 = phi i64 [ %52, %normal-dest70 ], [ %.pre.pre, %tag16.tag60.loopexit_crit_edge ], [ %38, %tag60.loopexit ]
  %40 = phi {}* [ %48, %normal-dest70 ], [ %16, %tag16.tag60.loopexit_crit_edge ], [ %31, %tag60.loopexit ]
  %object102.0 = phi {}* [ %48, %normal-dest70 ], [ %"%SUBLIST103233.0273", %tag16.tag60.loopexit_crit_edge ], [ %31, %tag60.loopexit ]
  %41 = icmp eq {}* %object102.0, %40
  %.cast = ptrtoint {}* %40 to i64
  %.sink = select i1 %41, i64 %39, i64 %.cast
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = inttoptr i64 %.sink to {}*
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

cleanup-lpad.loopexit:                            ; preds = %tag23, %normal-dest119, %tag57, %normal-dest207
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest67, %tag12, %normal-dest99, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 273), align 8
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest67 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest67:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %46 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %46, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest70 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest70:                                    ; preds = %normal-dest67
  %.elt = extractvalue { {}*, i64 } %47, 0
  %.elt228 = extractvalue { {}*, i64 } %47, 1
  %cond = icmp eq i64 %.elt228, 0
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%SUBLIST103233.1" = select i1 %cond, {}* %48, {}* %.elt
  %49 = icmp eq {}* %"%SUBLIST103233.1", %48
  %.val270 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0271 = select i1 %49, {}* %.val270, {}* %48
  %50 = icmp eq {}* %object.0271, %48
  %G103282.0272 = select i1 %50, {}* %.val270, {}* %48
  %51 = icmp eq {}* %G103282.0272, %48
  %52 = ptrtoint {}* %.val270 to i64
  br i1 %51, label %tag60, label %tag10.lr.ph

tag10.lr.ph:                                      ; preds = %normal-dest70
  %53 = ptrtoint {}* %farg0 to i64
  %single-float-tag-only = and i64 %53, 7
  %fixnum-tag-only221243 = and i64 %53, 3
  %fixnump-test222 = icmp eq i64 %fixnum-tag-only221243, 0
  %test = icmp ne i64 %single-float-tag-only, 1
  %irc-bit-cast74 = bitcast {}* %farg0 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast74, i64 -9
  %irc-bit-cast75 = bitcast i8* %gep to i64*
  %brmerge = or i1 %test, %fixnump-test222
  br label %tag10

header-check-br:                                  ; preds = %tag25
  %54 = load i64, i64* %irc-bit-cast75, align 8
  %55 = add i64 %54, -1309
  %56 = lshr i64 %55, 3
  %57 = shl i64 %55, 61
  %58 = or i64 %56, %57
  switch i64 %58, label %tag58 [
    i64 2, label %tag42
    i64 4, label %tag42
    i64 5, label %tag42
    i64 0, label %tag42
  ]

normal-dest99:                                    ; preds = %tag12
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint162 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint163 = add i64 %ptrtoint162, 7
  %entry-point-addr164 = inttoptr i64 %entry-point-addr-uint163 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point165 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr164, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point165({}* %15, i64 5, {}* %59, {}* %60, {}* %"%SUBLIST103233.0273", {}* %61, {}* %62)
          to label %normal-dest168 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest119:                                   ; preds = %tag23
  %ptrtoint120 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint121 = add i64 %ptrtoint120, 7
  %entry-point-addr122 = inttoptr i64 %entry-point-addr-uint121 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point123 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr122, align 8
  %64 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point123({}* %23, i64 2, {}* nonnull %farg0, {}* nonnull %.in247, {}* null, {}* null)
          to label %normal-dest126 unwind label %cleanup-lpad.loopexit

normal-dest126:                                   ; preds = %normal-dest119
  %.elt249 = extractvalue { {}*, i64 } %64, 0
  %.elt251 = extractvalue { {}*, i64 } %64, 1
  %cond225 = icmp eq i64 %.elt251, 0
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103307.1 = select i1 %cond225, {}* %65, {}* %.elt249
  br label %tag16

normal-dest168:                                   ; preds = %normal-dest99
  call void @unreachableError()
  unreachable

header-check-br199:                               ; preds = %tag42
  %gep204 = getelementptr inbounds i8, i8* %19, i64 -9
  %irc-bit-cast205 = bitcast i8* %gep204 to i64*
  %66 = load i64, i64* %irc-bit-cast205, align 8
  %67 = add i64 %66, -1309
  %68 = lshr i64 %67, 3
  %69 = shl i64 %67, 61
  %70 = or i64 %68, %69
  switch i64 %70, label %tag58 [
    i64 2, label %tag23
    i64 4, label %tag23
    i64 5, label %tag23
    i64 0, label %tag23
  ]

normal-dest207:                                   ; preds = %tag57
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint208 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint209 = add i64 %ptrtoint208, 7
  %entry-point-addr210 = inttoptr i64 %entry-point-addr-uint209 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point211 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr210, align 8
  %75 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point211({}* %30, i64 5, {}* %71, {}* %72, {}* %"%SUBLIST103233.0273", {}* %73, {}* %74)
          to label %normal-dest214 unwind label %cleanup-lpad.loopexit

normal-dest214:                                   ; preds = %normal-dest207
  %.elt253 = extractvalue { {}*, i64 } %75, 0
  %.elt255 = extractvalue { {}*, i64 } %75, 1
  %cond226 = icmp eq i64 %.elt255, 0
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond226, {}* %76, {}* %.elt253
  %.val266.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag20
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^185^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !61 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^185^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G103375.0 = phi {}* [ %18, %header-check-br ], [ %G103375.1, %normal-dest63 ], [ %G103375.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 293), align 8
  %ptrtoint13 = ptrtoint {}* %G103375.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G103375.0, i64 2, {}* %"closure->CWR=SPEICHERE_UNTERE_1/2-EBENE", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest56, %maybe-more-tests54, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 293), align 8
  %"closure->CWR=SPEICHERE_UNTERE_1/2-EBENE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5664, i64 185, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br46

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=SPEICHERE_UNTERE_1/2-EBENE", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 295), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=SPEICHERE_UNTERE_1/2-EBENE", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 740 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 293), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag4

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %maybe-more-tests54
  %ptrtoint57 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103375.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 292), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103375.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !62 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest6, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 269), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 282), align 16
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %15, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.1", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.1^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5664, i64 185, i64 0, i64 0)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 288), align 16
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 290), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 4, {}* %14, {}* %"closure->LAMBDA", {}* %16, {}* %17)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.1"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !63 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.1^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.1^DESC" to %0*)) #7
          to label %.noexc300 unwind label %cleanup-lpad.loopexit.split-lp

.noexc300:                                        ; preds = %10
  unreachable

tag12:                                            ; preds = %tag33
  br i1 %48, label %tag29, label %tag38

tag15:                                            ; preds = %tag25
  %fixnum-tag-only104287 = and i64 %13, 3
  %fixnump-test105 = icmp ne i64 %fixnum-tag-only104287, 0
  %test = icmp eq i64 %single-float-tag-only122, 1
  %or.cond = and i1 %fixnump-test105, %test
  br i1 %or.cond, label %header-check-br, label %tag34

tag17:                                            ; preds = %normal-dest72
  %11 = ptrtoint {}* %G103352.0 to i64
  br label %tag28

tag24:                                            ; preds = %tag55
  %12 = icmp eq {}* %"%SUBLIST103354.0318", %43
  %.pre = load i64, i64* bitcast ({}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13) to i64*), align 8
  %.pre..lcssa351 = select i1 %12, i64 %.pre, i64 %42
  br label %tag28

tag25:                                            ; preds = %header-check-br151, %header-check-br151, %header-check-br151, %header-check-br151
  %13 = ptrtoint {}* %.in290 to i64
  %single-float-tag-only122 = and i64 %13, 7
  %14 = icmp eq i64 %single-float-tag-only122, 6
  br i1 %14, label %tag34, label %tag15

tag28:                                            ; preds = %tag34, %tag24, %normal-dest227, %tag17
  %return-value.sroa.0.0 = phi i64 [ %11, %tag17 ], [ %90, %normal-dest227 ], [ %.pre..lcssa351, %tag24 ], [ %21, %tag34 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %15 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %16 = insertvalue { {}*, i64 } undef, {}* %15, 0
  %17 = insertvalue { {}*, i64 } %16, i64 1, 1
  ret { {}*, i64 } %17

tag29:                                            ; preds = %tag12
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest124 unwind label %cleanup-lpad.loopexit

tag33:                                            ; preds = %tag62
  %20 = icmp eq {}* %G103459.0, %49
  br i1 %20, label %tag12, label %tag63

tag34:                                            ; preds = %tag55.tag34_crit_edge, %header-check-br151, %header-check-br, %tag59, %tag15, %tag25
  %21 = phi i64 [ %45, %tag55.tag34_crit_edge ], [ %30, %tag25 ], [ %30, %tag15 ], [ %30, %tag59 ], [ %30, %header-check-br ], [ %30, %header-check-br151 ]
  %.val = phi {}* [ %.val.pre, %tag55.tag34_crit_edge ], [ %32, %tag25 ], [ %32, %tag15 ], [ %32, %tag59 ], [ %32, %header-check-br ], [ %32, %header-check-br151 ]
  %22 = phi {}* [ %43, %tag55.tag34_crit_edge ], [ %.val312, %tag25 ], [ %.val312, %tag15 ], [ %.val312, %tag59 ], [ %.val312, %header-check-br ], [ %.val312, %header-check-br151 ]
  %23 = phi i64 [ %42, %tag55.tag34_crit_edge ], [ %31, %tag25 ], [ %31, %tag15 ], [ %31, %tag59 ], [ %31, %header-check-br ], [ %31, %header-check-br151 ]
  %24 = add i64 %50, 5
  %25 = inttoptr i64 %24 to {}**
  %26 = load {}*, {}** %25, align 8
  %27 = icmp eq {}* %26, %22
  %object.0 = select i1 %27, {}* %.val, {}* %22
  %28 = icmp eq {}* %object.0, %22
  %G103405.0 = select i1 %28, {}* %.val, {}* %22
  %29 = icmp eq {}* %G103405.0, %22
  br i1 %29, label %tag28, label %tag62

tag38:                                            ; preds = %tag12, %normal-dest131, %tag63
  %30 = phi i64 [ %46, %tag63 ], [ %71, %normal-dest131 ], [ %46, %tag12 ]
  %31 = phi i64 [ %47, %tag63 ], [ %70, %normal-dest131 ], [ %47, %tag12 ]
  %.val312 = phi {}* [ %49, %tag63 ], [ %69, %normal-dest131 ], [ %G103459.0, %tag12 ]
  %32 = phi {}* [ %G103459.0, %tag63 ], [ %.val311.pre, %normal-dest131 ], [ %G103459.0, %tag12 ]
  %.in290 = phi {}* [ %53, %tag63 ], [ %.in289, %normal-dest131 ], [ %G103459.0, %tag12 ]
  %33 = bitcast {}* %.in290 to i8*
  %34 = icmp eq {}* %.in, %.in290
  %G103439.0 = select i1 %34, {}* %32, {}* %.val312
  %35 = icmp eq {}* %G103439.0, %.val312
  br i1 %35, label %tag59, label %tag55

tag41:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest172 unwind label %cleanup-lpad.loopexit

tag50:                                            ; preds = %normal-dest72
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 286), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest206 unwind label %cleanup-lpad.loopexit.split-lp

tag51:                                            ; preds = %tag62
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest234 unwind label %cleanup-lpad.loopexit.split-lp

tag55:                                            ; preds = %tag38, %normal-dest179
  %42 = phi i64 [ %79, %normal-dest179 ], [ %31, %tag38 ]
  %43 = phi {}* [ %78, %normal-dest179 ], [ %.val312, %tag38 ]
  %G103430.0 = phi {}* [ %G103430.1, %normal-dest179 ], [ %32, %tag38 ]
  %44 = icmp eq {}* %G103430.0, %43
  br i1 %44, label %tag55.tag34_crit_edge, label %tag24

tag55.tag34_crit_edge:                            ; preds = %tag55
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %45 = ptrtoint {}* %.val.pre to i64
  br label %tag34

tag59:                                            ; preds = %tag38
  br i1 %or.cond307, label %header-check-br151, label %tag34

tag62:                                            ; preds = %tag62.lr.ph, %tag34
  %46 = phi i64 [ %90, %tag62.lr.ph ], [ %21, %tag34 ]
  %47 = phi i64 [ %91, %tag62.lr.ph ], [ %23, %tag34 ]
  %G103459.0 = phi {}* [ %.val315, %tag62.lr.ph ], [ %.val, %tag34 ]
  %48 = phi i1 [ %88, %tag62.lr.ph ], [ %28, %tag34 ]
  %49 = phi {}* [ %86, %tag62.lr.ph ], [ %22, %tag34 ]
  %"%SUBLIST103354.0318" = phi {}* [ %"%SUBLIST103354.2", %tag62.lr.ph ], [ %26, %tag34 ]
  %50 = ptrtoint {}* %"%SUBLIST103354.0318" to i64
  %tag-only247274 = and i64 %50, 7
  %consp-test248 = icmp eq i64 %tag-only247274, 3
  br i1 %consp-test248, label %tag33, label %tag51

tag63:                                            ; preds = %tag33
  %51 = add i64 %50, -3
  %52 = inttoptr i64 %51 to {}**
  %53 = load {}*, {}** %52, align 8
  br label %tag38

cleanup-lpad.loopexit:                            ; preds = %tag29, %normal-dest124, %tag41, %normal-dest172
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest69, %normal-dest234, %tag50, %normal-dest206, %normal-dest213, %normal-dest220, %tag51, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 284), align 16
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest69 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest69:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %55 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %55, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest72 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest72:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %56, 0
  %.elt262 = extractvalue { {}*, i64 } %56, 1
  %cond = icmp eq i64 %.elt262, 0
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103352.0 = select i1 %cond, {}* %57, {}* %.elt
  %58 = icmp eq {}* %G103352.0, %57
  br i1 %58, label %tag50, label %tag17

header-check-br:                                  ; preds = %tag15
  %gep = getelementptr inbounds i8, i8* %33, i64 -9
  %irc-bit-cast77 = bitcast i8* %gep to i64*
  %59 = load i64, i64* %irc-bit-cast77, align 8
  %60 = add i64 %59, -1309
  %61 = lshr i64 %60, 3
  %62 = shl i64 %60, 61
  %63 = or i64 %61, %62
  switch i64 %63, label %tag34 [
    i64 2, label %tag41
    i64 4, label %tag41
    i64 5, label %tag41
    i64 0, label %tag41
  ]

normal-dest124:                                   ; preds = %tag29
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %67 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint125 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint126 = add i64 %ptrtoint125, 7
  %entry-point-addr127 = inttoptr i64 %entry-point-addr-uint126 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point128 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr127, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point128({}* %19, i64 5, {}* %64, {}* %65, {}* %"%SUBLIST103354.0318", {}* %66, {}* %67)
          to label %normal-dest131 unwind label %cleanup-lpad.loopexit

normal-dest131:                                   ; preds = %normal-dest124
  %.elt296 = extractvalue { {}*, i64 } %68, 0
  %.elt298 = extractvalue { {}*, i64 } %68, 1
  %cond260 = icmp eq i64 %.elt298, 0
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in289 = select i1 %cond260, {}* %69, {}* %.elt296
  %.val311.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %70 = ptrtoint {}* %69 to i64
  %71 = ptrtoint {}* %.val311.pre to i64
  br label %tag38

header-check-br151:                               ; preds = %tag59
  %72 = load i64, i64* %irc-bit-cast157, align 8
  %73 = add i64 %72, -1309
  %74 = lshr i64 %73, 3
  %75 = shl i64 %73, 61
  %76 = or i64 %74, %75
  switch i64 %76, label %tag34 [
    i64 2, label %tag25
    i64 4, label %tag25
    i64 5, label %tag25
    i64 0, label %tag25
  ]

normal-dest172:                                   ; preds = %tag41
  %ptrtoint173 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint174 = add i64 %ptrtoint173, 7
  %entry-point-addr175 = inttoptr i64 %entry-point-addr-uint174 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point176 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr175, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point176({}* %37, i64 2, {}* nonnull %.in, {}* nonnull %.in290, {}* null, {}* null)
          to label %normal-dest179 unwind label %cleanup-lpad.loopexit

normal-dest179:                                   ; preds = %normal-dest172
  %.elt292 = extractvalue { {}*, i64 } %77, 0
  %.elt294 = extractvalue { {}*, i64 } %77, 1
  %cond259 = icmp eq i64 %.elt294, 0
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103430.1 = select i1 %cond259, {}* %78, {}* %.elt292
  %79 = ptrtoint {}* %78 to i64
  br label %tag55

normal-dest191:                                   ; preds = %normal-dest234
  call void @unreachableError()
  unreachable

normal-dest206:                                   ; preds = %tag50
  %ptrtoint207 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint208 = add i64 %ptrtoint207, 7
  %entry-point-addr209 = inttoptr i64 %entry-point-addr-uint208 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point210 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr209, align 8
  %80 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point210({}* %39, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest213 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest213:                                   ; preds = %normal-dest206
  %.elt267 = extractvalue { {}*, i64 } %80, 0
  %.elt269 = extractvalue { {}*, i64 } %80, 1
  %cond256 = icmp eq i64 %.elt269, 0
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond256, {}* %81, {}* %.elt267
  %82 = bitcast {}* %.in to i8*
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 273), align 8
  %84 = invoke {}* @cc_safe_fdefinition({}* %83)
          to label %normal-dest220 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest220:                                   ; preds = %normal-dest213
  %ptrtoint221 = ptrtoint {}* %84 to i64
  %entry-point-addr-uint222 = add i64 %ptrtoint221, 7
  %entry-point-addr223 = inttoptr i64 %entry-point-addr-uint222 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point224 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr223, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point224({}* %84, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest227 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest227:                                   ; preds = %normal-dest220
  %.elt271 = extractvalue { {}*, i64 } %85, 0
  %.elt273 = extractvalue { {}*, i64 } %85, 1
  %cond257 = icmp eq i64 %.elt273, 0
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%SUBLIST103354.2" = select i1 %cond257, {}* %86, {}* %.elt271
  %87 = icmp eq {}* %"%SUBLIST103354.2", %86
  %.val315 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0316 = select i1 %87, {}* %.val315, {}* %86
  %88 = icmp eq {}* %object.0316, %86
  %G103405.0317 = select i1 %88, {}* %.val315, {}* %86
  %89 = icmp eq {}* %G103405.0317, %86
  %90 = ptrtoint {}* %.val315 to i64
  br i1 %89, label %tag28, label %tag62.lr.ph

tag62.lr.ph:                                      ; preds = %normal-dest227
  %91 = ptrtoint {}* %86 to i64
  %92 = ptrtoint {}* %.in to i64
  %single-float-tag-only246 = and i64 %92, 7
  %fixnum-tag-only285 = and i64 %92, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only285, 0
  %test154 = icmp eq i64 %single-float-tag-only246, 1
  %or.cond307 = and i1 %fixnump-test, %test154
  %gep156 = getelementptr inbounds i8, i8* %82, i64 -9
  %irc-bit-cast157 = bitcast i8* %gep156 to i64*
  br label %tag62

normal-dest234:                                   ; preds = %tag51
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %95 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint185 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint186 = add i64 %ptrtoint185, 7
  %entry-point-addr187 = inttoptr i64 %entry-point-addr-uint186 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point188 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr187, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point188({}* %41, i64 5, {}* %93, {}* %94, {}* %"%SUBLIST103354.0318", {}* %95, {}* %96)
          to label %normal-dest191 unwind label %cleanup-lpad.loopexit.split-lp
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^194^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !64 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^194^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest89, %normal-dest67, %header-check-br
  %G103505.0 = phi {}* [ %18, %header-check-br ], [ %G103505.1, %normal-dest67 ], [ %G103505.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 176), align 16
  %ptrtoint13 = ptrtoint {}* %G103505.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G103505.0, i64 2, {}* %"closure->CWR=BENUTZER_INSTANZEN_LOESCHEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br72
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest60 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests80, %normal-dest60, %tag1, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 176), align 16
  %"closure->CWR=BENUTZER_INSTANZEN_LOESCHEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5924, i64 194, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br72

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=BENUTZER_INSTANZEN_LOESCHEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 300), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=BENUTZER_INSTANZEN_LOESCHEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 301), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 176), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 303), align 8
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 776 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 176), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %tag1
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 299), align 8
  %ptrtoint61 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %14, i64 5, {}* %39, {}* %40, {}* %18, {}* %41, {}* %42)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt = extractvalue { {}*, i64 } %43, 0
  %.elt97 = extractvalue { {}*, i64 } %43, 1
  %cond = icmp eq i64 %.elt97, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103505.1 = select i1 %cond, {}* %44, {}* %.elt
  br label %tag

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %45 = icmp ult i64 %.off123, 5
  br i1 %45, label %maybe-more-tests80, label %tag1

maybe-more-tests80:                               ; preds = %header-check-br72
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %maybe-more-tests80
  %ptrtoint83 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %47, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103505.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !65 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %tag.preheader, %tag9.backedge
  %.val116 = phi {}* [ %18, %tag9.backedge ], [ %36, %tag.preheader ]
  %"%DOLIST-VAR.0119" = phi {}* [ %"%DOLIST-VAR.0.be", %tag9.backedge ], [ %"%DOLIST-VAR.1", %tag.preheader ]
  %11 = ptrtoint {}* %"%DOLIST-VAR.0119" to i64
  %tag-only96 = and i64 %11, 7
  %consp-test = icmp eq i64 %tag-only96, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103562.0 = select i1 %consp-test, {}* %.val, {}* %.val116
  %12 = icmp eq {}* %G103562.0, %.val116
  br i1 %12, label %tag10, label %tag20

tag2:                                             ; preds = %normal-dest74, %tag20
  %KLASSE.0 = phi {}* [ %32, %tag20 ], [ %KLASSE.1, %normal-dest74 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 297), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest36 unwind label %cleanup-lpad.loopexit

tag3:                                             ; preds = %normal-dest43
  %15 = add i64 %11, 5
  %16 = inttoptr i64 %15 to {}**
  %17 = load {}*, {}** %16, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag9.backedge

tag9.backedge:                                    ; preds = %tag3, %normal-dest60
  %18 = phi {}* [ %.pre, %tag3 ], [ %44, %normal-dest60 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %17, %tag3 ], [ %"%DOLIST-VAR.2", %normal-dest60 ]
  %19 = icmp eq {}* %"%DOLIST-VAR.0.be", %18
  br i1 %19, label %tag17, label %tag

tag4:                                             ; preds = %tag13
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest53 unwind label %cleanup-lpad.loopexit

tag10:                                            ; preds = %tag
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest67 unwind label %cleanup-lpad.loopexit

tag13:                                            ; preds = %normal-dest43
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %25 = icmp eq {}* %"%DOLIST-VAR.0119", %24
  %.val117 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103536.0 = select i1 %25, {}* %.val117, {}* %24
  %26 = icmp eq {}* %G103536.0, %24
  br i1 %26, label %tag4, label %tag17

tag17:                                            ; preds = %tag9.backedge, %tag13, %normal-dest28
  %27 = phi {}* [ %36, %normal-dest28 ], [ %18, %tag9.backedge ], [ %24, %tag13 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %28 = insertvalue { {}*, i64 } undef, {}* %27, 0
  %29 = insertvalue { {}*, i64 } %28, i64 1, 1
  ret { {}*, i64 } %29

tag20:                                            ; preds = %tag
  %30 = add i64 %11, -3
  %31 = inttoptr i64 %30 to {}**
  %32 = load {}*, {}** %31, align 8
  br label %tag2

cleanup-lpad.loopexit:                            ; preds = %tag2, %normal-dest36, %tag4, %normal-dest53, %tag10, %normal-dest67
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest25, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 273), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest25 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest25:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %34 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %34, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest28:                                    ; preds = %normal-dest25
  %.elt = extractvalue { {}*, i64 } %35, 0
  %.elt95 = extractvalue { {}*, i64 } %35, 1
  %cond = icmp eq i64 %.elt95, 0
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %36, {}* %.elt
  %37 = icmp eq {}* %"%DOLIST-VAR.1", %36
  br i1 %37, label %tag17, label %tag.preheader

tag.preheader:                                    ; preds = %normal-dest28
  br label %tag

normal-dest36:                                    ; preds = %tag2
  %ptrtoint37 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint38 = add i64 %ptrtoint37, 7
  %entry-point-addr39 = inttoptr i64 %entry-point-addr-uint38 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point40 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr39, align 8
  %38 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point40({}* %14, i64 1, {}* %KLASSE.0, {}* null, {}* null, {}* null)
          to label %normal-dest43 unwind label %cleanup-lpad.loopexit

normal-dest43:                                    ; preds = %normal-dest36
  br i1 %consp-test, label %tag3, label %tag13

normal-dest53:                                    ; preds = %tag4
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint54 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint55 = add i64 %ptrtoint54, 7
  %entry-point-addr56 = inttoptr i64 %entry-point-addr-uint55 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point57 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr56, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point57({}* %21, i64 5, {}* %39, {}* %40, {}* %"%DOLIST-VAR.0119", {}* %41, {}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad.loopexit

normal-dest60:                                    ; preds = %normal-dest53
  %.elt103 = extractvalue { {}*, i64 } %43, 0
  %.elt105 = extractvalue { {}*, i64 } %43, 1
  %cond92 = icmp eq i64 %.elt105, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond92, {}* %44, {}* %.elt103
  br label %tag9.backedge

normal-dest67:                                    ; preds = %tag10
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint68 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %23, i64 5, {}* %45, {}* %46, {}* %"%DOLIST-VAR.0119", {}* %47, {}* %48)
          to label %normal-dest74 unwind label %cleanup-lpad.loopexit

normal-dest74:                                    ; preds = %normal-dest67
  %.elt107 = extractvalue { {}*, i64 } %49, 0
  %.elt109 = extractvalue { {}*, i64 } %49, 1
  %cond93 = icmp eq i64 %.elt109, 0
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %KLASSE.1 = select i1 %cond93, {}* %50, {}* %.elt107
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^199^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !66 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^199^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G103585.0 = phi {}* [ %18, %header-check-br ], [ %G103585.1, %normal-dest17 ], [ %G103585.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 305), align 8
  %ptrtoint34 = ptrtoint {}* %G103585.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G103585.0, i64 2, {}* %"closure->CWR=WISSENSBASIZUSTAND-SICHERN", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %maybe-more-tests81, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 305), align 8
  %"closure->CWR=WISSENSBASIZUSTAND-SICHERN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 6100, i64 199, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br73

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 304), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103585.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

normal-dest21:                                    ; preds = %maybe-more-tests81
  %ptrtoint22 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103585.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=WISSENSBASIZUSTAND-SICHERN", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 307), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=WISSENSBASIZUSTAND-SICHERN", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 796 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 305), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !67 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 269), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^202^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !68 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^202^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G103630.0 = phi {}* [ %18, %header-check-br ], [ %G103630.1, %normal-dest17 ], [ %G103630.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 336), align 16
  %ptrtoint34 = ptrtoint {}* %G103630.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G103630.0, i64 2, {}* %"closure->CWR-WIRKLICHER-ORDNER-MACHEN", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %tag2, %normal-dest13, %maybe-more-tests81, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 336), align 16
  %"closure->CWR-WIRKLICHER-ORDNER-MACHEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 6176, i64 202, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br73

normal-dest13:                                    ; preds = %maybe-more-tests81
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103630.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag3

normal-dest21:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 335), align 8
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt84 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt84, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103630.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 338), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR-WIRKLICHER-ORDNER-MACHEN", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 339), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR-WIRKLICHER-ORDNER-MACHEN", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 916 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 336), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag2

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !69 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc470 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc470:                                        ; preds = %10
  unreachable

tag48.outer:                                      ; preds = %tag48.outer.backedge, %tag48.outer.preheader
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag48.outer.preheader ], [ %LENGTH.0.ph.be, %tag48.outer.backedge ]
  %SEQUENCE.0.ph = phi {}* [ %farg0, %tag48.outer.preheader ], [ %G2095854.0, %tag48.outer.backedge ]
  %11 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only225404 = and i64 %11, 7
  %consp-test226 = icmp eq i64 %tag-only225404, 3
  %12 = add i64 %11, 5
  %13 = inttoptr i64 %12 to {}**
  br label %tag48

tag5:                                             ; preds = %tag41, %normal-dest123, %tag92
  %G103614.0 = phi {}* [ %66, %tag92 ], [ %G103614.1, %normal-dest123 ], [ %G103702.0, %tag41 ]
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 331), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest103 unwind label %cleanup-lpad.loopexit

tag9:                                             ; preds = %tag41
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest115 unwind label %cleanup-lpad.loopexit

tag10:                                            ; preds = %tag91
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 312), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest130 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag22:                                            ; preds = %tag60
  %20 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only406 = and i64 %20, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only406, 0
  br i1 %fixnump-test, label %tag78, label %tag77

tag28:                                            ; preds = %tag28.preheader, %tag86
  %G103702.0 = phi {}* [ %.val488, %tag86 ], [ %.val488506, %tag28.preheader ]
  %21 = phi i1 [ %59, %tag86 ], [ %100, %tag28.preheader ]
  %22 = phi {}* [ %77, %tag86 ], [ %98, %tag28.preheader ]
  %"%SUBLIST103609.0509" = phi {}* [ %"%SUBLIST103609.0", %tag86 ], [ %"%SUBLIST103609.0505", %tag28.preheader ]
  %23 = ptrtoint {}* %"%SUBLIST103609.0509" to i64
  %tag-only180422 = and i64 %23, 7
  %consp-test181 = icmp eq i64 %tag-only180422, 3
  br i1 %consp-test181, label %tag93, label %tag75

tag29:                                            ; preds = %tag86, %normal-dest278, %tag34
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 333), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest183 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag30:                                            ; preds = %tag48
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %27 = icmp eq {}* %SEQUENCE.0.ph, %26
  %.val482 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103794.0 = select i1 %27, {}* %.val482, {}* %26
  %28 = icmp eq {}* %G103794.0, %26
  br i1 %28, label %tag95, label %tag60

tag34:                                            ; preds = %normal-dest106
  %29 = icmp eq {}* %"%SUBLIST103609.0509", %77
  br i1 %29, label %tag29, label %tag67

tag35:                                            ; preds = %tag48
  %30 = load {}*, {}** %13, align 8
  %.val485.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag60

tag40:                                            ; preds = %normal-dest252
  %31 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %95, i64 4)
  %result = extractvalue { i64, i1 } %31, 0
  %overflow = extractvalue { i64, i1 } %31, 1
  %32 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag96, label %tag61

tag41:                                            ; preds = %tag93
  br i1 %21, label %tag9, label %tag5

tag48:                                            ; preds = %normal-dest258, %tag48.outer
  br i1 %consp-test226, label %tag35, label %tag30

tag56:                                            ; preds = %tag98, %normal-dest137, %tag91, %tag72
  %G103607.0 = phi {}* [ %49, %tag72 ], [ null, %tag91 ], [ %G103607.1, %normal-dest137 ], [ %LENGTH.0.ph, %tag98 ]
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 326), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest252 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag59:                                            ; preds = %tag98
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 312), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest258 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag60:                                            ; preds = %tag30, %normal-dest373, %tag35
  %.val487 = phi {}* [ %.val485.pre, %tag35 ], [ %120, %normal-dest373 ], [ %26, %tag30 ]
  %G2095854.0 = phi {}* [ %30, %tag35 ], [ %G2095854.1, %normal-dest373 ], [ %26, %tag30 ]
  %37 = ptrtoint {}* %G2095854.0 to i64
  %tag-only270405 = and i64 %37, 7
  %consp-test271 = icmp eq i64 %tag-only270405, 3
  %.val484 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G103782.0 = select i1 %consp-test271, {}* %.val484, {}* %.val487
  %38 = icmp eq {}* %G103782.0, %.val487
  br i1 %38, label %tag98, label %tag22

tag61:                                            ; preds = %normal-dest387, %normal-dest308, %tag40
  %G103708.0 = phi {}* [ %32, %tag40 ], [ %G103708.1, %normal-dest308 ], [ %G103708.2, %normal-dest387 ]
  %ptrtoint272 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint273 = add i64 %ptrtoint272, 7
  %entry-point-addr274 = inttoptr i64 %entry-point-addr-uint273 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point275 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr274, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point275({}* %34, i64 2, {}* %farg0, {}* %G103708.0, {}* null, {}* null)
          to label %normal-dest278 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag65:                                            ; preds = %tag78
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest287 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag66:                                            ; preds = %normal-dest252
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 328), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest301 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag67:                                            ; preds = %tag34, %normal-dest190
  %return-value.sroa.27.0 = phi i64 [ %.elt438, %normal-dest190 ], [ 1, %tag34 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt436, %normal-dest190 ], [ %farg0, %tag34 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %44 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %45 = insertvalue { {}*, i64 } %44, i64 %return-value.sroa.27.0, 1
  ret { {}*, i64 } %45

tag72:                                            ; preds = %tag90
  %46 = add i64 %74, 7
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47, align 8
  %"tag fixnum" = shl nuw i64 %48, 2
  %49 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag56

tag75:                                            ; preds = %tag28
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest316 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag77:                                            ; preds = %tag22
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest318 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag78:                                            ; preds = %tag22
  %54 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %20, i64 4)
  %result228 = extractvalue { i64, i1 } %54, 0
  %overflow229 = extractvalue { i64, i1 } %54, 1
  %55 = inttoptr i64 %result228 to {}*
  br i1 %overflow229, label %tag65, label %tag48.outer.backedge

tag48.outer.backedge:                             ; preds = %tag78, %normal-dest294, %normal-dest325
  %LENGTH.0.ph.be = phi {}* [ %LENGTH.2, %normal-dest325 ], [ %LENGTH.1, %normal-dest294 ], [ %55, %tag78 ]
  br label %tag48.outer

tag83:                                            ; preds = %normal-dest
  %test342 = icmp eq i64 %tag-only403, 1
  br i1 %test342, label %header-check-br339, label %tag91

tag86:                                            ; preds = %normal-dest106
  %56 = add i64 %23, 5
  %57 = inttoptr i64 %56 to {}**
  %"%SUBLIST103609.0" = load {}*, {}** %57, align 8
  %58 = icmp eq {}* %"%SUBLIST103609.0", %77
  %.val488 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0 = select i1 %58, {}* %.val488, {}* %77
  %59 = icmp eq {}* %object.0, %77
  %G103656.0 = select i1 %59, {}* %.val488, {}* %77
  %60 = icmp eq {}* %G103656.0, %77
  br i1 %60, label %tag29, label %tag28

tag90:                                            ; preds = %normal-dest238, %header-check-br339
  %.val493 = phi {}* [ %.val481, %header-check-br339 ], [ %93, %normal-dest238 ]
  %G103745.0 = phi {}* [ %.val, %header-check-br339 ], [ %G103745.0.pre.pre, %normal-dest238 ]
  %61 = icmp eq {}* %G103745.0, %.val493
  br i1 %61, label %tag91, label %tag72

tag91:                                            ; preds = %normal-dest238, %tag83, %header-check-br205, %tag90
  %.val492 = phi {}* [ %.val493, %tag90 ], [ %.val, %tag83 ], [ %.val, %header-check-br205 ], [ %G103745.0.pre.pre, %normal-dest238 ]
  %.val493520 = phi {}* [ %.val493, %tag90 ], [ %.val481, %tag83 ], [ %.val481, %header-check-br205 ], [ %93, %normal-dest238 ]
  %62 = icmp eq {}* %.val493520, %farg0
  %G103741.0 = select i1 %62, {}* %.val492, {}* %.val493520
  %63 = icmp eq {}* %G103741.0, %.val493520
  br i1 %63, label %tag10, label %tag56

tag92:                                            ; preds = %tag93
  %64 = add i64 %23, -3
  %65 = inttoptr i64 %64 to {}**
  %66 = load {}*, {}** %65, align 8
  br label %tag5

tag93:                                            ; preds = %tag28
  %67 = icmp eq {}* %G103702.0, %22
  br i1 %67, label %tag41, label %tag92

tag95:                                            ; preds = %tag30
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %69 = invoke {}* @cc_safe_fdefinition({}* %68)
          to label %normal-dest366 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag96:                                            ; preds = %tag40
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %71 = invoke {}* @cc_safe_fdefinition({}* %70)
          to label %normal-dest380 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag98:                                            ; preds = %tag60
  %72 = icmp eq {}* %G2095854.0, %.val487
  %G103753.0 = select i1 %72, {}* %.val484, {}* %.val487
  %73 = icmp eq {}* %G103753.0, %.val487
  br i1 %73, label %tag59, label %tag56

cleanup-lpad.loopexit:                            ; preds = %tag5, %normal-dest103, %tag9, %normal-dest115
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit: ; preds = %tag59, %normal-dest258, %tag95, %normal-dest366
  %lpad.loopexit498 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp: ; preds = %tag65, %normal-dest287, %tag77, %normal-dest318
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %9, %normal-dest380, %tag96, %normal-dest316, %tag75, %normal-dest301, %tag66, %tag61, %tag56, %normal-dest231, %maybe-more-tests, %normal-dest183, %tag29, %normal-dest130, %tag10
  %lpad.loopexit.split-lp496 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp496, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ], [ %lpad.loopexit498, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %74 = ptrtoint {}* %farg0 to i64
  %tag-only403 = and i64 %74, 7
  %consp-test = icmp eq i64 %tag-only403, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %.val481 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103801.0 = select i1 %consp-test, {}* %.val, {}* %.val481
  %75 = icmp eq {}* %G103801.0, %.val481
  br i1 %75, label %tag83, label %tag48.outer.preheader

tag48.outer.preheader:                            ; preds = %normal-dest
  br label %tag48.outer

normal-dest103:                                   ; preds = %tag5
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %76 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 2, {}* %G103611.0, {}* %G103614.0, {}* null, {}* null)
          to label %normal-dest106 unwind label %cleanup-lpad.loopexit

normal-dest106:                                   ; preds = %normal-dest103
  %.elt429 = extractvalue { {}*, i64 } %76, 0
  %.elt431 = extractvalue { {}*, i64 } %76, 1
  %cond396 = icmp eq i64 %.elt431, 0
  %77 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103681.0 = select i1 %cond396, {}* %77, {}* %.elt429
  %78 = icmp eq {}* %G103681.0, %77
  br i1 %78, label %tag86, label %tag34

normal-dest115:                                   ; preds = %tag9
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint117 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint118 = add i64 %ptrtoint117, 7
  %entry-point-addr119 = inttoptr i64 %entry-point-addr-uint118 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point120 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr119, align 8
  %83 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point120({}* %17, i64 5, {}* %79, {}* %80, {}* %"%SUBLIST103609.0509", {}* %81, {}* %82)
          to label %normal-dest123 unwind label %cleanup-lpad.loopexit

normal-dest123:                                   ; preds = %normal-dest115
  %.elt445 = extractvalue { {}*, i64 } %83, 0
  %.elt447 = extractvalue { {}*, i64 } %83, 1
  %cond398 = icmp eq i64 %.elt447, 0
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103614.1 = select i1 %cond398, {}* %84, {}* %.elt445
  br label %tag5

normal-dest130:                                   ; preds = %tag10
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 314), align 16
  %ptrtoint131 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint132 = add i64 %ptrtoint131, 7
  %entry-point-addr133 = inttoptr i64 %entry-point-addr-uint132 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point134 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr133, align 8
  %86 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point134({}* %19, i64 2, {}* %farg0, {}* %85, {}* null, {}* null)
          to label %normal-dest137 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest137:                                   ; preds = %normal-dest130
  %.elt461 = extractvalue { {}*, i64 } %86, 0
  %.elt463 = extractvalue { {}*, i64 } %86, 1
  %cond401 = icmp eq i64 %.elt463, 0
  %87 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103607.1 = select i1 %cond401, {}* %87, {}* %.elt461
  br label %tag56

normal-dest183:                                   ; preds = %tag29
  %ptrtoint184 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint185 = add i64 %ptrtoint184, 7
  %entry-point-addr186 = inttoptr i64 %entry-point-addr-uint185 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point187 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr186, align 8
  %88 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point187({}* %25, i64 2, {}* %farg0, {}* inttoptr (i64 466 to {}*), {}* null, {}* null)
          to label %normal-dest190 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest190:                                   ; preds = %normal-dest183
  %.elt436 = extractvalue { {}*, i64 } %88, 0
  %.elt438 = extractvalue { {}*, i64 } %88, 1
  br label %tag67

header-check-br205:                               ; preds = %header-check-br339
  %.off494 = add i64 %113, -1153
  %89 = icmp ult i64 %.off494, 149
  br i1 %89, label %maybe-more-tests, label %tag91

maybe-more-tests:                                 ; preds = %header-check-br205
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 340), align 16
  %91 = invoke {}* @cc_safe_fdefinition({}* %90)
          to label %normal-dest231 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest231:                                   ; preds = %maybe-more-tests
  %ptrtoint232 = ptrtoint {}* %91 to i64
  %entry-point-addr-uint233 = add i64 %ptrtoint232, 7
  %entry-point-addr234 = inttoptr i64 %entry-point-addr-uint233 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point235 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr234, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point235({}* %91, i64 1, {}* nonnull %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest238 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest238:                                   ; preds = %normal-dest231
  %.elt465 = extractvalue { {}*, i64 } %92, 0
  %.elt467 = extractvalue { {}*, i64 } %92, 1
  %cond402 = icmp eq i64 %.elt467, 0
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103806.0 = select i1 %cond402, {}* %93, {}* %.elt465
  %94 = icmp eq {}* %G103806.0, inttoptr (i64 4 to {}*)
  %G103745.0.pre.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br i1 %94, label %tag90, label %tag91

normal-dest252:                                   ; preds = %tag56
  %95 = ptrtoint {}* %G103607.0 to i64
  %fixnum-tag-only255413 = and i64 %95, 3
  %fixnump-test256 = icmp eq i64 %fixnum-tag-only255413, 0
  br i1 %fixnump-test256, label %tag40, label %tag66

normal-dest258:                                   ; preds = %tag59
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 315), align 8
  %ptrtoint259 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint260 = add i64 %ptrtoint259, 7
  %entry-point-addr261 = inttoptr i64 %entry-point-addr-uint260 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point262 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr261, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point262({}* %36, i64 2, {}* %G2095854.0, {}* %96, {}* null, {}* null)
          to label %tag48 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

normal-dest278:                                   ; preds = %tag61
  %.elt419 = extractvalue { {}*, i64 } %39, 0
  %.elt421 = extractvalue { {}*, i64 } %39, 1
  %cond395 = icmp eq i64 %.elt421, 0
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103611.0 = select i1 %cond395, {}* %98, {}* %.elt419
  %"%SUBLIST103609.0505" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 330), align 16
  %99 = icmp eq {}* %"%SUBLIST103609.0505", %98
  %.val488506 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0507 = select i1 %99, {}* %.val488506, {}* %98
  %100 = icmp eq {}* %object.0507, %98
  %G103656.0508 = select i1 %100, {}* %.val488506, {}* %98
  %101 = icmp eq {}* %G103656.0508, %98
  br i1 %101, label %tag29, label %tag28.preheader

tag28.preheader:                                  ; preds = %normal-dest278
  br label %tag28

normal-dest287:                                   ; preds = %tag65
  %ptrtoint288 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint289 = add i64 %ptrtoint288, 7
  %entry-point-addr290 = inttoptr i64 %entry-point-addr-uint289 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point291 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr290, align 8
  %102 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point291({}* %41, i64 1, {}* %55, {}* null, {}* null, {}* null)
          to label %normal-dest294 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest294:                                   ; preds = %normal-dest287
  %.elt410 = extractvalue { {}*, i64 } %102, 0
  %.elt412 = extractvalue { {}*, i64 } %102, 1
  %cond393 = icmp eq i64 %.elt412, 0
  %103 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %LENGTH.1 = select i1 %cond393, {}* %103, {}* %.elt410
  br label %tag48.outer.backedge

normal-dest301:                                   ; preds = %tag66
  %ptrtoint302 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint303 = add i64 %ptrtoint302, 7
  %entry-point-addr304 = inttoptr i64 %entry-point-addr-uint303 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point305 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr304, align 8
  %104 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point305({}* %43, i64 2, {}* %G103607.0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest308 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest308:                                   ; preds = %normal-dest301
  %.elt415 = extractvalue { {}*, i64 } %104, 0
  %.elt417 = extractvalue { {}*, i64 } %104, 1
  %cond394 = icmp eq i64 %.elt417, 0
  %105 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103708.1 = select i1 %cond394, {}* %105, {}* %.elt415
  br label %tag61

normal-dest316:                                   ; preds = %tag75
  %106 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %107 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %108 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %109 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint358 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint359 = add i64 %ptrtoint358, 7
  %entry-point-addr360 = inttoptr i64 %entry-point-addr-uint359 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point361 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr360, align 8
  %110 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point361({}* %51, i64 5, {}* %106, {}* %107, {}* %"%SUBLIST103609.0509", {}* %108, {}* %109)
          to label %normal-dest364 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest318:                                   ; preds = %tag77
  %ptrtoint319 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint320 = add i64 %ptrtoint319, 7
  %entry-point-addr321 = inttoptr i64 %entry-point-addr-uint320 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point322 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr321, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point322({}* %53, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest325 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest325:                                   ; preds = %normal-dest318
  %.elt = extractvalue { {}*, i64 } %111, 0
  %.elt408 = extractvalue { {}*, i64 } %111, 1
  %cond = icmp eq i64 %.elt408, 0
  %112 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %LENGTH.2 = select i1 %cond, {}* %112, {}* %.elt
  br label %tag48.outer.backedge

header-check-br339:                               ; preds = %tag83
  %irc-bit-cast343 = bitcast {}* %farg0 to i8*
  %gep344 = getelementptr inbounds i8, i8* %irc-bit-cast343, i64 -9
  %irc-bit-cast345 = bitcast i8* %gep344 to i64*
  %113 = load i64, i64* %irc-bit-cast345, align 8
  %.off = add i64 %113, -1081
  %114 = icmp ult i64 %.off, 69
  br i1 %114, label %tag90, label %header-check-br205

normal-dest364:                                   ; preds = %normal-dest316
  call void @unreachableError()
  unreachable

normal-dest366:                                   ; preds = %tag95
  %115 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %117 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint367 = ptrtoint {}* %69 to i64
  %entry-point-addr-uint368 = add i64 %ptrtoint367, 7
  %entry-point-addr369 = inttoptr i64 %entry-point-addr-uint368 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point370 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr369, align 8
  %119 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point370({}* %69, i64 5, {}* %115, {}* %116, {}* %SEQUENCE.0.ph, {}* %117, {}* %118)
          to label %normal-dest373 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

normal-dest373:                                   ; preds = %normal-dest366
  %.elt457 = extractvalue { {}*, i64 } %119, 0
  %.elt459 = extractvalue { {}*, i64 } %119, 1
  %cond400 = icmp eq i64 %.elt459, 0
  %120 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G2095854.1 = select i1 %cond400, {}* %120, {}* %.elt457
  br label %tag60

normal-dest380:                                   ; preds = %tag96
  %ptrtoint381 = ptrtoint {}* %71 to i64
  %entry-point-addr-uint382 = add i64 %ptrtoint381, 7
  %entry-point-addr383 = inttoptr i64 %entry-point-addr-uint382 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point384 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr383, align 8
  %121 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point384({}* %71, i64 1, {}* %32, {}* null, {}* null, {}* null)
          to label %normal-dest387 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest387:                                   ; preds = %normal-dest380
  %.elt449 = extractvalue { {}*, i64 } %121, 0
  %.elt451 = extractvalue { {}*, i64 } %121, 1
  %cond399 = icmp eq i64 %.elt451, 0
  %122 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103708.2 = select i1 %cond399, {}* %122, {}* %.elt449
  br label %tag61
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #4

declare double @from_object_double({}*) local_unnamed_addr #3

declare {}* @to_object_double(double) local_unnamed_addr #3

declare float @from_object_float({}*) local_unnamed_addr #3

declare {}* @to_object_float(float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^237^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !70 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^237^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G103835.0 = phi {}* [ %18, %header-check-br ], [ %G103835.1, %normal-dest26 ], [ %G103835.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 147), align 8
  %ptrtoint43 = ptrtoint {}* %G103835.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G103835.0, i64 2, {}* %"closure->CWR-DATEIEN_LADEN", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 147), align 8
  %"closure->CWR-DATEIEN_LADEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7295, i64 237, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt101 = extractvalue { {}*, i64 } %24, 0
  %.elt103 = extractvalue { {}*, i64 } %24, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103835.1 = select i1 %cond82, {}* %25, {}* %.elt101
  br label %tag4

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 346), align 16
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103835.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR-DATEIEN_LADEN", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 347), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR-DATEIEN_LADEN", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 952 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 147), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !71 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 345), align 8
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 1, {}* %14, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^241^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !72 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^241^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G103874.0 = phi {}* [ %18, %header-check-br ], [ %G103874.1, %normal-dest63 ], [ %G103874.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 357), align 8
  %ptrtoint22 = ptrtoint {}* %G103874.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G103874.0, i64 2, {}* %"closure->CWR-WERT-SETZEN", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest56, %maybe-more-tests21, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 357), align 8
  %"closure->CWR-WERT-SETZEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7373, i64 241, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 359), align 8
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR-WERT-SETZEN", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 368), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR-WERT-SETZEN", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 964 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 357), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %maybe-more-tests21
  %ptrtoint57 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103874.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag1

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 356), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103874.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !73 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure92 = alloca [144 x i8], align 1
  %stack-allocated-closure92.sub = getelementptr inbounds [144 x i8], [144 x i8]* %stack-allocated-closure92, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 4
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 4
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc119 unwind label %cleanup-lpad

.noexc119:                                        ; preds = %13
  unreachable

tag:                                              ; preds = %normal-dest21
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 352), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest25 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest21
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest38 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest25, %normal-dest76
  %.sink118 = phi { {}*, i64 } [ %50, %normal-dest76 ], [ %35, %normal-dest25 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %.sink118

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest76, %normal-dest64, %normal-dest56, %normal-dest49, %normal-dest42, %normal-dest40, %normal-dest38, %tag1, %normal-dest25, %tag, %normal-dest17, %normal-dest10, %normal-dest9, %normal-dest8, %normal-dest7, %normal-dest
  %19 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %19

normal-dest:                                      ; preds = %11
  %20 = invoke {}* @cc_makeCell()
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %21 = invoke {}* @cc_makeCell()
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest7
  %22 = invoke {}* @cc_makeCell()
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest8
  %23 = invoke {}* @cc_makeCell()
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  call void @cc_writeCell({}* %20, {}* %farg0)
  call void @cc_writeCell({}* %21, {}* %farg1)
  call void @cc_writeCell({}* %22, {}* %farg2)
  call void @cc_writeCell({}* %23, {}* %farg3)
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 348), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest10
  %26 = ptrtoint {}* %20 to i64
  %27 = add i64 %26, -3
  %28 = inttoptr i64 %27 to {}**
  %29 = load {}*, {}** %28, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* %29, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest17
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt94 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt94, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103921.0 = select i1 %cond, {}* %31, {}* %.elt
  %32 = icmp eq {}* %G103921.0, %31
  br i1 %32, label %tag1, label %tag

normal-dest25:                                    ; preds = %tag
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 38), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure92.sub, {}* %34, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.2", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.2^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7373, i64 241, i64 0, i64 4, {}* %23, {}* %22, {}* %21, {}* %20)
  %ptrtoint30 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint31 = add i64 %ptrtoint30, 7
  %entry-point-addr32 = inttoptr i64 %entry-point-addr-uint31 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point33 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr32, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point33({}* %16, i64 3, {}* %33, {}* %14, {}* %"closure->LAMBDA", {}* null)
          to label %tag2 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %tag1
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest38
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest40
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 350), align 16
  %ptrtoint43 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %39, i64 1, {}* %40, {}* null, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %normal-dest42
  %.elt103 = extractvalue { {}*, i64 } %41, 0
  %.elt105 = extractvalue { {}*, i64 } %41, 1
  %cond89 = icmp eq i64 %.elt105, 0
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103895.0 = select i1 %cond89, {}* %42, {}* %.elt103
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %normal-dest49
  %45 = load {}*, {}** %28, align 8, !tbaa !74
  %ptrtoint58 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint59 = add i64 %ptrtoint58, 7
  %entry-point-addr60 = inttoptr i64 %entry-point-addr-uint59 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point61 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr60, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point61({}* %44, i64 1, {}* %45, {}* null, {}* null, {}* null)
          to label %normal-dest64 unwind label %cleanup-lpad

normal-dest64:                                    ; preds = %normal-dest56
  %.elt107 = extractvalue { {}*, i64 } %46, 0
  %.elt109 = extractvalue { {}*, i64 } %46, 1
  %cond90 = icmp eq i64 %.elt109, 0
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103896.0 = select i1 %cond90, {}* %47, {}* %.elt107
  %ptrtoint70 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %37, i64 3, {}* %G103895.0, {}* %G103896.0, {}* %47, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest64
  %.elt111 = extractvalue { {}*, i64 } %48, 0
  %.elt113 = extractvalue { {}*, i64 } %48, 1
  %cond91 = icmp eq i64 %.elt113, 0
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103893.0 = select i1 %cond91, {}* %49, {}* %.elt111
  %ptrtoint82 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %50 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %18, i64 1, {}* %G103893.0, {}* null, {}* null, {}* null)
          to label %tag2 unwind label %cleanup-lpad
}

declare {}* @cc_makeCell() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @cc_writeCell({}*, {}*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.2"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !76 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.2^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest8, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 3, i32 0
  %16 = bitcast %"class.core::T_O"** %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !74
  %18 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 2, i32 0
  %19 = bitcast %"class.core::T_O"** %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !74
  %21 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 1, i32 0
  %22 = bitcast %"class.core::T_O"** %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !74
  %24 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %25 = bitcast %"class.core::T_O"** %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !74
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest
  %29 = add i64 %17, -3
  %30 = inttoptr i64 %29 to {}**
  %31 = load {}*, {}** %30, align 8, !tbaa !74
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 100), align 16
  %33 = add i64 %20, -3
  %34 = inttoptr i64 %33 to {}**
  %35 = load {}*, {}** %34, align 8, !tbaa !74
  %36 = add i64 %23, -3
  %37 = inttoptr i64 %36 to %"class.gctools::smart_ptr"*
  %38 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %37, i64 0, i32 0
  %39 = load %"class.core::T_O"*, %"class.core::T_O"** %38, align 8, !tbaa !74
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %41 = add i64 %26, -3
  %42 = inttoptr i64 %41 to %"class.gctools::smart_ptr"*
  %43 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %42, i64 0, i32 0
  %44 = load %"class.core::T_O"*, %"class.core::T_O"** %43, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %28 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %28, i64 7, {}* %31, {}* %32, {}* %31, {}* %35, %"class.core::T_O"* %39, {}* %40, %"class.core::T_O"* %44)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %45
}

; Function Attrs: nounwind
declare {}* @cc_stack_enclose(i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^251^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !77 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^251^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G103971.0 = phi {}* [ %18, %header-check-br ], [ %G103971.1, %normal-dest17 ], [ %G103971.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 408), align 16
  %ptrtoint34 = ptrtoint {}* %G103971.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G103971.0, i64 2, {}* %"closure->CWR=SICHER_ERGEBNIS", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %maybe-more-tests81, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 408), align 16
  %"closure->CWR=SICHER_ERGEBNIS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7722, i64 251, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br73

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 407), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103971.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

normal-dest21:                                    ; preds = %maybe-more-tests81
  %ptrtoint22 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103971.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 410), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=SICHER_ERGEBNIS", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 415), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=SICHER_ERGEBNIS", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 1004 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 408), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !78 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure58 = alloca [128 x i8], align 1
  %stack-allocated-closure3559 = alloca [120 x i8], align 1
  %stack-allocated-closure3559.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure3559, i64 0, i64 0
  %stack-allocated-closure58.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure58, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc77 unwind label %cleanup-lpad

.noexc77:                                         ; preds = %13
  unreachable

tag:                                              ; preds = %normal-dest45, %normal-dest11
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 374), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest15 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest11
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 372), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest45 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest45, %tag1, %normal-dest31, %normal-dest22, %normal-dest15, %tag, %normal-dest8, %normal-dest7, %normal-dest6, %normal-dest
  %18 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %18

normal-dest:                                      ; preds = %11
  %19 = invoke {}* @cc_makeCell()
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest
  %20 = invoke {}* @cc_makeCell()
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest6
  call void @cc_writeCell({}* %20, {}* %farg1)
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 370), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %22 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %22, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest8
  %.elt = extractvalue { {}*, i64 } %23, 0
  %.elt61 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt61, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104400.0 = select i1 %cond, {}* %24, {}* %.elt
  %25 = icmp eq {}* %G104400.0, %24
  br i1 %25, label %tag, label %tag1

normal-dest15:                                    ; preds = %tag
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 376), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 378), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 380), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 382), align 16
  %ptrtoint16 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint17 = add i64 %ptrtoint16, 7
  %entry-point-addr18 = inttoptr i64 %entry-point-addr-uint17 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point19 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr18, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point19({}* %15, i64 5, {}* %farg0, {}* %26, {}* %27, {}* %28, {}* %29)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %normal-dest15
  %.elt67 = extractvalue { {}*, i64 } %30, 0
  %.elt69 = extractvalue { {}*, i64 } %30, 1
  %cond57 = icmp eq i64 %.elt69, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103947.0 = select i1 %cond57, {}* %31, {}* %.elt67
  call void @cc_writeCell({}* %19, {}* %G103947.0)
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 384), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest22
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure58.sub, {}* %34, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.3", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.3^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7722, i64 251, i64 0, i64 2, {}* %20, {}* %19)
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA36" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure3559.sub, {}* %35, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.6", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.6^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7722, i64 251, i64 0, i64 1, {}* %19)
  %ptrtoint37 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint38 = add i64 %ptrtoint37, 7
  %entry-point-addr39 = inttoptr i64 %entry-point-addr-uint38 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point40 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr39, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point40({}* %33, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA36", {}* null, {}* null)
          to label %normal-dest43 unwind label %cleanup-lpad

normal-dest43:                                    ; preds = %normal-dest31
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %36

normal-dest45:                                    ; preds = %tag1
  %ptrtoint46 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %17, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %tag unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.3"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !79 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure14 = alloca [128 x i8], align 1
  %stack-allocated-closure915 = alloca [120 x i8], align 1
  %stack-allocated-closure915.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure915, i64 0, i64 0
  %stack-allocated-closure14.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure14, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.3^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest6, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 1, i32 0
  %16 = load %"class.core::T_O"*, %"class.core::T_O"** %15, align 8, !tbaa !74
  %17 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %18 = load %"class.core::T_O"*, %"class.core::T_O"** %17, align 8, !tbaa !74
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 386), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure14.sub, {}* %21, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.4", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.4^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7722, i64 251, i64 0, i64 2, %"class.core::T_O"* %18, %"class.core::T_O"* %16)
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA10" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure915.sub, {}* %22, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.5", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.5^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7722, i64 251, i64 0, i64 1, %"class.core::T_O"* %16)
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA10", {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.4"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !80 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.4^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %tag55
  br i1 %consp-test212, label %tag26, label %tag117

tag2:                                             ; preds = %normal-dest860, %tag142
  %INSTANZ.0 = phi {}* [ %120, %tag142 ], [ %INSTANZ.1, %normal-dest860 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest168 unwind label %cleanup-lpad.loopexit

tag10:                                            ; preds = %tag24
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest181 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag11:                                            ; preds = %tag117, %normal-dest949, %tag26
  %.val1541 = phi {}* [ %.val1543, %tag26 ], [ %354, %normal-dest949 ], [ %.val1543, %tag117 ]
  %x195.0 = phi {}* [ %30, %tag26 ], [ %x195.1, %normal-dest949 ], [ %.val1543, %tag117 ]
  %15 = ptrtoint {}* %x195.0 to i64
  %tag-only1991222 = and i64 %15, 7
  %consp-test200 = icmp eq i64 %tag-only1991222, 3
  %.val1524 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104310.0 = select i1 %consp-test200, {}* %.val1524, {}* %.val1541
  %16 = icmp eq {}* %G104310.0, %.val1541
  br i1 %16, label %tag119, label %tag78

tag14:                                            ; preds = %normal-dest189, %tag61
  %.val1545 = phi {}* [ %.val1517, %tag61 ], [ %157, %normal-dest189 ]
  %.val1544 = phi {}* [ %.val, %tag61 ], [ %.val1518.pre, %normal-dest189 ]
  %BEFEHL.0 = phi {}* [ %49, %tag61 ], [ %BEFEHL.1, %normal-dest189 ]
  %17 = ptrtoint {}* %BEFEHL.0 to i64
  %tag-only2111220 = and i64 %17, 7
  %consp-test212 = icmp eq i64 %tag-only2111220, 3
  %G104360.0 = select i1 %consp-test212, {}* %.val1544, {}* %.val1545
  %18 = icmp eq {}* %G104360.0, %.val1545
  br i1 %18, label %tag90, label %tag79

tag15:                                            ; preds = %tag100, %tag115.backedge, %normal-dest161
  %19 = phi {}* [ %146, %normal-dest161 ], [ %61, %tag115.backedge ], [ %91, %tag100 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %20 = insertvalue { {}*, i64 } undef, {}* %19, 0
  %21 = insertvalue { {}*, i64 } %20, i64 1, 1
  ret { {}*, i64 } %21

tag17:                                            ; preds = %tag88
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest216 unwind label %cleanup-lpad.loopexit

tag21:                                            ; preds = %tag119
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest234 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag24:                                            ; preds = %tag24.preheader, %tag115.backedge
  %.val1517 = phi {}* [ %61, %tag115.backedge ], [ %147, %tag24.preheader ]
  %"%DOLIST-VAR.01550" = phi {}* [ %"%DOLIST-VAR.0.be", %tag115.backedge ], [ %146, %tag24.preheader ]
  %26 = ptrtoint {}* %"%DOLIST-VAR.01550" to i64
  %tag-only2541219 = and i64 %26, 7
  %consp-test255 = icmp eq i64 %tag-only2541219, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104380.0 = select i1 %consp-test255, {}* %.val, {}* %.val1517
  %27 = icmp eq {}* %G104380.0, %.val1517
  br i1 %27, label %tag10, label %tag61

tag26:                                            ; preds = %tag
  %28 = add i64 %17, 5
  %29 = inttoptr i64 %28 to {}**
  %30 = load {}*, {}** %29, align 8
  br label %tag11

tag30:                                            ; preds = %tag55.tag30_crit_edge, %header-check-br729, %header-check-br781, %tag57, %tag77, %tag130
  %.val1542 = phi {}* [ %.val1542.pre, %tag55.tag30_crit_edge ], [ %53, %tag130 ], [ %53, %tag77 ], [ %53, %tag57 ], [ %53, %header-check-br781 ], [ %53, %header-check-br729 ]
  %.val15431558 = phi {}* [ %.val1543, %tag55.tag30_crit_edge ], [ %.val1521, %tag130 ], [ %.val1521, %tag77 ], [ %.val1521, %tag57 ], [ %.val1521, %header-check-br781 ], [ %.val1521, %header-check-br729 ]
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 393), align 8
  %32 = icmp eq {}* %.in1427, %31
  %G104046.0 = select i1 %32, {}* %.val1542, {}* %.val15431558
  %33 = icmp eq {}* %G104046.0, %.val15431558
  br i1 %33, label %tag60, label %tag32

tag31:                                            ; preds = %tag151, %normal-dest1018, %tag74
  %G103953.0 = phi {}* [ %60, %tag74 ], [ %G103953.1, %normal-dest1018 ], [ %.val1539, %tag151 ]
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest265 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag32:                                            ; preds = %tag30, %normal-dest1032
  %36 = phi {}* [ %370, %normal-dest1032 ], [ %.val15431558, %tag30 ]
  %G104037.0 = phi {}* [ %G104037.1, %normal-dest1032 ], [ %.val1542, %tag30 ]
  %37 = icmp eq {}* %G104037.0, %36
  br i1 %37, label %tag145, label %tag81

tag40:                                            ; preds = %normal-dest175
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest436 unwind label %cleanup-lpad.loopexit

tag46:                                            ; preds = %tag119, %normal-dest241, %tag78
  %40 = phi {}* [ %.val1541, %tag78 ], [ %171, %normal-dest241 ], [ %.val1541, %tag119 ]
  %G103952.0 = phi {}* [ %65, %tag78 ], [ %G103952.1, %normal-dest241 ], [ %.val1541, %tag119 ]
  br i1 %consp-test212, label %tag104, label %tag92

tag50:                                            ; preds = %header-check-br756, %header-check-br756, %header-check-br756, %header-check-br756
  %41 = ptrtoint {}* %31 to i64
  %single-float-tag-only763 = and i64 %41, 7
  %fixnum-tag-only2471428 = and i64 %41, 3
  %fixnump-test248 = icmp ne i64 %fixnum-tag-only2471428, 0
  %test799 = icmp eq i64 %single-float-tag-only763, 1
  %or.cond1516 = and i1 %fixnump-test248, %test799
  br i1 %or.cond1516, label %header-check-br796, label %tag145

tag55:                                            ; preds = %tag72, %normal-dest978
  %.val1543 = phi {}* [ %362, %normal-dest978 ], [ %.val1521, %tag72 ]
  %G104330.0 = phi {}* [ %G104330.1, %normal-dest978 ], [ %53, %tag72 ]
  %42 = icmp eq {}* %G104330.0, %.val1543
  br i1 %42, label %tag55.tag30_crit_edge, label %tag

tag55.tag30_crit_edge:                            ; preds = %tag55
  %.val1542.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag30

tag57:                                            ; preds = %tag72
  %43 = ptrtoint {}* %.in1427 to i64
  %single-float-tag-only780 = and i64 %43, 7
  %44 = icmp eq i64 %single-float-tag-only780, 6
  br i1 %44, label %tag30, label %tag77

tag60:                                            ; preds = %tag30
  %45 = ptrtoint {}* %.in1427 to i64
  %single-float-tag-only788 = and i64 %45, 7
  %46 = icmp eq i64 %single-float-tag-only788, 6
  br i1 %46, label %tag145, label %tag96

tag61:                                            ; preds = %tag24
  %47 = add i64 %26, -3
  %48 = inttoptr i64 %47 to {}**
  %49 = load {}*, {}** %48, align 8
  br label %tag14

tag67:                                            ; preds = %tag71
  %50 = add i64 %105, 5
  %51 = inttoptr i64 %50 to {}**
  %52 = load {}*, {}** %51, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag139.backedge

tag71:                                            ; preds = %normal-dest711, %normal-dest175
  br i1 %consp-test990, label %tag67, label %tag88

tag72:                                            ; preds = %tag90, %normal-dest1054, %tag79
  %.val1521 = phi {}* [ %.val1545, %tag79 ], [ %376, %normal-dest1054 ], [ %.val1545, %tag90 ]
  %53 = phi {}* [ %.val1544, %tag79 ], [ %.val1520.pre, %normal-dest1054 ], [ %.val1544, %tag90 ]
  %.in1427 = phi {}* [ %68, %tag79 ], [ %.in, %normal-dest1054 ], [ %.val1545, %tag90 ]
  %54 = bitcast {}* %.in1427 to i8*
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 391), align 8
  %56 = icmp eq {}* %.in1427, %55
  %G104339.0 = select i1 %56, {}* %53, {}* %.val1521
  %57 = icmp eq {}* %G104339.0, %.val1521
  br i1 %57, label %tag57, label %tag55

tag74:                                            ; preds = %tag84
  %58 = add i64 %78, -3
  %59 = inttoptr i64 %58 to {}**
  %60 = load {}*, {}** %59, align 8
  br label %tag31

tag115.backedge:                                  ; preds = %normal-dest927, %tag144
  %61 = phi {}* [ %.pre1557, %tag144 ], [ %348, %normal-dest927 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %125, %tag144 ], [ %"%DOLIST-VAR.1", %normal-dest927 ]
  %62 = icmp eq {}* %"%DOLIST-VAR.0.be", %61
  br i1 %62, label %tag15, label %tag24

tag77:                                            ; preds = %tag57
  %fixnum-tag-only8291434 = and i64 %43, 3
  %fixnump-test830 = icmp ne i64 %fixnum-tag-only8291434, 0
  %test732 = icmp eq i64 %single-float-tag-only780, 1
  %or.cond1512 = and i1 %fixnump-test830, %test732
  br i1 %or.cond1512, label %header-check-br729, label %tag30

tag78:                                            ; preds = %tag11
  %63 = add i64 %15, -3
  %64 = inttoptr i64 %63 to {}**
  %65 = load {}*, {}** %64, align 8
  br label %tag46

tag79:                                            ; preds = %tag14
  %66 = add i64 %17, -3
  %67 = inttoptr i64 %66 to {}**
  %68 = load {}*, {}** %67, align 8
  br label %tag72

tag80:                                            ; preds = %tag107
  %69 = icmp eq {}* %x803.0, %97
  %.val1528 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104271.0 = select i1 %69, {}* %.val1528, {}* %97
  %70 = icmp eq {}* %G104271.0, %97
  br i1 %70, label %tag112, label %tag84

tag81:                                            ; preds = %tag32
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest839 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag82:                                            ; preds = %tag114
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %74 = invoke {}* @cc_safe_fdefinition({}* %73)
          to label %normal-dest853 unwind label %cleanup-lpad.loopexit

tag83:                                            ; preds = %tag107
  %75 = add i64 %98, 5
  %76 = inttoptr i64 %75 to {}**
  %77 = load {}*, {}** %76, align 8
  br label %tag84

tag84:                                            ; preds = %tag80, %normal-dest964, %tag83
  %.val1539 = phi {}* [ %97, %tag83 ], [ %360, %normal-dest964 ], [ %97, %tag80 ]
  %x432.0 = phi {}* [ %77, %tag83 ], [ %x432.1, %normal-dest964 ], [ %97, %tag80 ]
  %78 = ptrtoint {}* %x432.0 to i64
  %tag-only8681225 = and i64 %78, 7
  %consp-test869 = icmp eq i64 %tag-only8681225, 3
  %.val1530 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104258.0 = select i1 %consp-test869, {}* %.val1530, {}* %.val1539
  %79 = icmp eq {}* %G104258.0, %.val1539
  br i1 %79, label %tag151, label %tag74

tag88:                                            ; preds = %tag71
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %81 = icmp eq {}* %"%DOLIST-VAR225.01549", %80
  %.val1534 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104086.0 = select i1 %81, {}* %.val1534, {}* %80
  %82 = icmp eq {}* %G104086.0, %80
  br i1 %82, label %tag17, label %tag143

tag90:                                            ; preds = %tag14
  %83 = icmp eq {}* %BEFEHL.0, %.val1545
  %G104353.0 = select i1 %83, {}* %.val1544, {}* %.val1545
  %84 = icmp eq {}* %G104353.0, %.val1545
  br i1 %84, label %tag134, label %tag72

tag92:                                            ; preds = %tag46
  %85 = icmp eq {}* %BEFEHL.0, %40
  %.val1526 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104287.0 = select i1 %85, {}* %.val1526, {}* %40
  %86 = icmp eq {}* %G104287.0, %40
  br i1 %86, label %tag97, label %tag107

tag96:                                            ; preds = %tag60
  %fixnum-tag-only9021425 = and i64 %45, 3
  %fixnump-test903 = icmp ne i64 %fixnum-tag-only9021425, 0
  %test759 = icmp eq i64 %single-float-tag-only788, 1
  %or.cond1513 = and i1 %fixnump-test903, %test759
  br i1 %or.cond1513, label %header-check-br756, label %tag145

tag97:                                            ; preds = %tag92
  %87 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %88 = invoke {}* @cc_safe_fdefinition({}* %87)
          to label %normal-dest905 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag99:                                            ; preds = %tag100
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest919 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag100:                                           ; preds = %tag145
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %92 = icmp eq {}* %"%DOLIST-VAR.01550", %91
  %.val1536 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104026.0 = select i1 %92, {}* %.val1536, {}* %91
  %93 = icmp eq {}* %G104026.0, %91
  br i1 %93, label %tag99, label %tag15

tag104:                                           ; preds = %tag46
  %94 = add i64 %17, 5
  %95 = inttoptr i64 %94 to {}**
  %96 = load {}*, {}** %95, align 8
  br label %tag107

tag107:                                           ; preds = %tag92, %normal-dest912, %tag104
  %97 = phi {}* [ %40, %tag104 ], [ %342, %normal-dest912 ], [ %40, %tag92 ]
  %x803.0 = phi {}* [ %96, %tag104 ], [ %x803.1, %normal-dest912 ], [ %40, %tag92 ]
  %98 = ptrtoint {}* %x803.0 to i64
  %tag-only9391224 = and i64 %98, 7
  %consp-test940 = icmp eq i64 %tag-only9391224, 3
  br i1 %consp-test940, label %tag83, label %tag80

tag108:                                           ; preds = %tag117
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %100 = invoke {}* @cc_safe_fdefinition({}* %99)
          to label %normal-dest942 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag112:                                           ; preds = %tag80
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %102 = invoke {}* @cc_safe_fdefinition({}* %101)
          to label %normal-dest957 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag113:                                           ; preds = %header-check-br781, %header-check-br781, %header-check-br781, %header-check-br781
  %103 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %104 = invoke {}* @cc_safe_fdefinition({}* %103)
          to label %normal-dest971 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag114:                                           ; preds = %tag114.preheader, %tag139.backedge
  %.val1533 = phi {}* [ %164, %tag139.backedge ], [ %220, %tag114.preheader ]
  %"%DOLIST-VAR225.01549" = phi {}* [ %"%DOLIST-VAR225.0.be", %tag139.backedge ], [ %"%DOLIST-VAR225.2", %tag114.preheader ]
  %105 = ptrtoint {}* %"%DOLIST-VAR225.01549" to i64
  %tag-only9891274 = and i64 %105, 7
  %consp-test990 = icmp eq i64 %tag-only9891274, 3
  %.val1532 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104194.0 = select i1 %consp-test990, {}* %.val1532, {}* %.val1533
  %106 = icmp eq {}* %G104194.0, %.val1533
  br i1 %106, label %tag82, label %tag142

tag117:                                           ; preds = %tag
  %107 = icmp eq {}* %BEFEHL.0, %.val1543
  %.val1522 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104323.0 = select i1 %107, {}* %.val1522, {}* %.val1543
  %108 = icmp eq {}* %G104323.0, %.val1543
  br i1 %108, label %tag108, label %tag11

tag119:                                           ; preds = %tag11
  %109 = icmp eq {}* %x195.0, %.val1541
  %G104303.0 = select i1 %109, {}* %.val1524, {}* %.val1541
  %110 = icmp eq {}* %G104303.0, %.val1541
  br i1 %110, label %tag21, label %tag46

tag127:                                           ; preds = %tag151
  %111 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %112 = invoke {}* @cc_safe_fdefinition({}* %111)
          to label %normal-dest1011 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag129:                                           ; preds = %header-check-br796, %header-check-br796, %header-check-br796, %header-check-br796
  %113 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %114 = invoke {}* @cc_safe_fdefinition({}* %113)
          to label %normal-dest1025 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag130:                                           ; preds = %header-check-br729, %header-check-br729, %header-check-br729, %header-check-br729
  %115 = ptrtoint {}* %55 to i64
  %single-float-tag-only1038 = and i64 %115, 7
  %fixnum-tag-only7771436 = and i64 %115, 3
  %fixnump-test778 = icmp ne i64 %fixnum-tag-only7771436, 0
  %test784 = icmp eq i64 %single-float-tag-only1038, 1
  %or.cond1515 = and i1 %fixnump-test778, %test784
  br i1 %or.cond1515, label %header-check-br781, label %tag30

tag134:                                           ; preds = %tag90
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %117 = invoke {}* @cc_safe_fdefinition({}* %116)
          to label %normal-dest1047 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag142:                                           ; preds = %tag114
  %118 = add i64 %105, -3
  %119 = inttoptr i64 %118 to {}**
  %120 = load {}*, {}** %119, align 8
  br label %tag2

tag143:                                           ; preds = %tag88, %tag139.backedge, %normal-dest426
  %121 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %122 = invoke {}* @cc_safe_fdefinition({}* %121)
          to label %normal-dest1075 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag144:                                           ; preds = %tag145
  %123 = add i64 %26, 5
  %124 = inttoptr i64 %123 to {}**
  %125 = load {}*, {}** %124, align 8
  %.pre1557 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag115.backedge

tag145:                                           ; preds = %header-check-br756, %header-check-br796, %tag60, %tag96, %tag50, %normal-dest1140, %normal-dest839, %tag32
  br i1 %consp-test255, label %tag144, label %tag100

tag151:                                           ; preds = %tag84
  %126 = icmp eq {}* %x432.0, %.val1539
  %G104251.0 = select i1 %126, {}* %.val1530, {}* %.val1539
  %127 = icmp eq {}* %G104251.0, %.val1539
  br i1 %127, label %tag127, label %tag31

cleanup-lpad.loopexit:                            ; preds = %tag2, %normal-dest168, %tag17, %normal-dest216, %tag40, %normal-dest436, %normal-dest438, %normal-dest440, %normal-dest447, %normal-dest454, %normal-dest456, %normal-dest458, %normal-dest465, %normal-dest472, %normal-dest479, %normal-dest491, %normal-dest503, %normal-dest510, %normal-dest512, %normal-dest514, %normal-dest521, %normal-dest528, %normal-dest535, %normal-dest547, %normal-dest559, %normal-dest566, %normal-dest568, %normal-dest570, %normal-dest577, %normal-dest584, %normal-dest586, %normal-dest593, %normal-dest605, %normal-dest617, %normal-dest629, %normal-dest636, %normal-dest638, %normal-dest640, %normal-dest647, %normal-dest654, %normal-dest656, %normal-dest663, %normal-dest675, %normal-dest687, %normal-dest699, %normal-dest711, %tag82, %normal-dest853
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest1140, %normal-dest1128, %normal-dest1121, %normal-dest1114, %normal-dest1107, %normal-dest1100, %normal-dest1093, %normal-dest1086, %normal-dest1079, %normal-dest1077, %normal-dest1075, %tag143, %normal-dest1047, %tag134, %normal-dest1025, %tag129, %normal-dest1011, %tag127, %normal-dest971, %tag113, %normal-dest957, %tag112, %normal-dest942, %tag108, %normal-dest919, %tag99, %normal-dest905, %tag97, %normal-dest839, %tag81, %normal-dest419, %normal-dest413, %normal-dest400, %normal-dest388, %normal-dest376, %normal-dest364, %normal-dest357, %normal-dest350, %normal-dest343, %normal-dest341, %normal-dest339, %normal-dest332, %normal-dest320, %normal-dest308, %normal-dest301, %normal-dest294, %normal-dest287, %normal-dest285, %normal-dest283, %normal-dest276, %normal-dest269, %normal-dest267, %normal-dest265, %tag31, %normal-dest234, %tag21, %normal-dest181, %tag10
  %lpad.loopexit1546 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %normal-dest158, %normal-dest
  %lpad.loopexit.split-lp1547 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit1546, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp1547, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %128 = ptrtoint {}* %closure-ptr to i64
  %129 = and i64 %128, -8
  %130 = inttoptr i64 %129 to %1*
  %131 = getelementptr inbounds %1, %1* %130, i64 0, i32 4, i32 1, i64 1, i32 0
  %132 = bitcast %"class.core::T_O"** %131 to i64*
  %133 = load i64, i64* %132, align 8, !tbaa !74
  %134 = getelementptr inbounds %1, %1* %130, i64 0, i32 4, i32 1, i64 0, i32 0
  %135 = bitcast %"class.core::T_O"** %134 to i64*
  %136 = load i64, i64* %135, align 8, !tbaa !74
  %137 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %138 = invoke {}* @cc_safe_fdefinition({}* %137)
          to label %normal-dest158 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest158:                                   ; preds = %normal-dest
  %139 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 388), align 16
  %140 = add i64 %133, -3
  %141 = inttoptr i64 %140 to {}**
  %142 = load {}*, {}** %141, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %138 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %143 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %138, i64 2, {}* %139, {}* %142, {}* null, {}* null)
          to label %normal-dest161 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest161:                                   ; preds = %normal-dest158
  %144 = add i64 %136, -3
  %145 = inttoptr i64 %144 to {}**
  %146 = load {}*, {}** %145, align 8, !tbaa !74
  %147 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %148 = icmp eq {}* %146, %147
  br i1 %148, label %tag15, label %tag24.preheader

tag24.preheader:                                  ; preds = %normal-dest161
  br label %tag24

normal-dest168:                                   ; preds = %tag2
  %ptrtoint169 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint170 = add i64 %ptrtoint169, 7
  %entry-point-addr171 = inttoptr i64 %entry-point-addr-uint170 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point172 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr171, align 8
  %149 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point172({}* %12, i64 2, {}* %INSTANZ.0, {}* %G103953.0, {}* null, {}* null)
          to label %normal-dest175 unwind label %cleanup-lpad.loopexit

normal-dest175:                                   ; preds = %normal-dest168
  %.elt1276 = extractvalue { {}*, i64 } %149, 0
  %.elt1278 = extractvalue { {}*, i64 } %149, 1
  %cond1179 = icmp eq i64 %.elt1278, 0
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104172.0 = select i1 %cond1179, {}* %150, {}* %.elt1276
  %151 = icmp eq {}* %G104172.0, %150
  br i1 %151, label %tag71, label %tag40

normal-dest181:                                   ; preds = %tag10
  %152 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %153 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %154 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint183 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint184 = add i64 %ptrtoint183, 7
  %entry-point-addr185 = inttoptr i64 %entry-point-addr-uint184 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point186 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr185, align 8
  %156 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point186({}* %14, i64 5, {}* %152, {}* %153, {}* %"%DOLIST-VAR.01550", {}* %154, {}* %155)
          to label %normal-dest189 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest189:                                   ; preds = %normal-dest181
  %.elt1447 = extractvalue { {}*, i64 } %156, 0
  %.elt1449 = extractvalue { {}*, i64 } %156, 1
  %cond1216 = icmp eq i64 %.elt1449, 0
  %157 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %BEFEHL.1 = select i1 %cond1216, {}* %157, {}* %.elt1447
  %.val1518.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag14

normal-dest216:                                   ; preds = %tag17
  %158 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %159 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %160 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %161 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint218 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint219 = add i64 %ptrtoint218, 7
  %entry-point-addr220 = inttoptr i64 %entry-point-addr-uint219 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point221 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr220, align 8
  %162 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point221({}* %23, i64 5, {}* %158, {}* %159, {}* %"%DOLIST-VAR225.01549", {}* %160, {}* %161)
          to label %normal-dest224 unwind label %cleanup-lpad.loopexit

normal-dest224:                                   ; preds = %normal-dest216
  %.elt1365 = extractvalue { {}*, i64 } %162, 0
  %.elt1367 = extractvalue { {}*, i64 } %162, 1
  %cond1200 = icmp eq i64 %.elt1367, 0
  %163 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR225.1" = select i1 %cond1200, {}* %163, {}* %.elt1365
  br label %tag139.backedge

tag139.backedge:                                  ; preds = %normal-dest224, %tag67
  %164 = phi {}* [ %.pre, %tag67 ], [ %163, %normal-dest224 ]
  %"%DOLIST-VAR225.0.be" = phi {}* [ %52, %tag67 ], [ %"%DOLIST-VAR225.1", %normal-dest224 ]
  %165 = icmp eq {}* %"%DOLIST-VAR225.0.be", %164
  br i1 %165, label %tag143, label %tag114

normal-dest234:                                   ; preds = %tag21
  %166 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %167 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %168 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %169 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint235 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint236 = add i64 %ptrtoint235, 7
  %entry-point-addr237 = inttoptr i64 %entry-point-addr-uint236 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point238 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr237, align 8
  %170 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point238({}* %25, i64 5, {}* %166, {}* %167, {}* %x195.0, {}* %168, {}* %169)
          to label %normal-dest241 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest241:                                   ; preds = %normal-dest234
  %.elt1414 = extractvalue { {}*, i64 } %170, 0
  %.elt1416 = extractvalue { {}*, i64 } %170, 1
  %cond1211 = icmp eq i64 %.elt1416, 0
  %171 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103952.1 = select i1 %cond1211, {}* %171, {}* %.elt1414
  br label %tag46

normal-dest265:                                   ; preds = %tag31
  %172 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %173 = invoke {}* @cc_safe_fdefinition({}* %172)
          to label %normal-dest267 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest267:                                   ; preds = %normal-dest265
  %174 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %175 = invoke {}* @cc_safe_fdefinition({}* %174)
          to label %normal-dest269 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest269:                                   ; preds = %normal-dest267
  %176 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 395), align 8
  %ptrtoint270 = ptrtoint {}* %175 to i64
  %entry-point-addr-uint271 = add i64 %ptrtoint270, 7
  %entry-point-addr272 = inttoptr i64 %entry-point-addr-uint271 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point273 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr272, align 8
  %177 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point273({}* %175, i64 1, {}* %176, {}* null, {}* null, {}* null)
          to label %normal-dest276 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest276:                                   ; preds = %normal-dest269
  %.elt1227 = extractvalue { {}*, i64 } %177, 0
  %.elt1229 = extractvalue { {}*, i64 } %177, 1
  %cond = icmp eq i64 %.elt1229, 0
  %178 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104205.0 = select i1 %cond, {}* %178, {}* %.elt1227
  %179 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %180 = invoke {}* @cc_safe_fdefinition({}* %179)
          to label %normal-dest283 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest283:                                   ; preds = %normal-dest276
  %181 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %182 = invoke {}* @cc_safe_fdefinition({}* %181)
          to label %normal-dest285 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest285:                                   ; preds = %normal-dest283
  %183 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %184 = invoke {}* @cc_safe_fdefinition({}* %183)
          to label %normal-dest287 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest287:                                   ; preds = %normal-dest285
  %185 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %ptrtoint288 = ptrtoint {}* %184 to i64
  %entry-point-addr-uint289 = add i64 %ptrtoint288, 7
  %entry-point-addr290 = inttoptr i64 %entry-point-addr-uint289 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point291 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr290, align 8
  %186 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point291({}* %184, i64 1, {}* %185, {}* null, {}* null, {}* null)
          to label %normal-dest294 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest294:                                   ; preds = %normal-dest287
  %.elt1231 = extractvalue { {}*, i64 } %186, 0
  %.elt1233 = extractvalue { {}*, i64 } %186, 1
  %cond1169 = icmp eq i64 %.elt1233, 0
  %187 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104226.0 = select i1 %cond1169, {}* %187, {}* %.elt1231
  %188 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %189 = invoke {}* @cc_safe_fdefinition({}* %188)
          to label %normal-dest301 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest301:                                   ; preds = %normal-dest294
  %ptrtoint302 = ptrtoint {}* %189 to i64
  %entry-point-addr-uint303 = add i64 %ptrtoint302, 7
  %entry-point-addr304 = inttoptr i64 %entry-point-addr-uint303 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point305 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr304, align 8
  %190 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point305({}* %189, i64 1, {}* %G103952.0, {}* null, {}* null, {}* null)
          to label %normal-dest308 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest308:                                   ; preds = %normal-dest301
  %.elt1235 = extractvalue { {}*, i64 } %190, 0
  %.elt1237 = extractvalue { {}*, i64 } %190, 1
  %cond1170 = icmp eq i64 %.elt1237, 0
  %191 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104227.0 = select i1 %cond1170, {}* %191, {}* %.elt1235
  %ptrtoint314 = ptrtoint {}* %182 to i64
  %entry-point-addr-uint315 = add i64 %ptrtoint314, 7
  %entry-point-addr316 = inttoptr i64 %entry-point-addr-uint315 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point317 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr316, align 8
  %192 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point317({}* %182, i64 3, {}* %G104226.0, {}* %G104227.0, {}* %191, {}* null)
          to label %normal-dest320 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest320:                                   ; preds = %normal-dest308
  %.elt1239 = extractvalue { {}*, i64 } %192, 0
  %.elt1241 = extractvalue { {}*, i64 } %192, 1
  %cond1171 = icmp eq i64 %.elt1241, 0
  %193 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104224.0 = select i1 %cond1171, {}* %193, {}* %.elt1239
  %ptrtoint326 = ptrtoint {}* %180 to i64
  %entry-point-addr-uint327 = add i64 %ptrtoint326, 7
  %entry-point-addr328 = inttoptr i64 %entry-point-addr-uint327 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point329 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr328, align 8
  %194 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point329({}* %180, i64 1, {}* %G104224.0, {}* null, {}* null, {}* null)
          to label %normal-dest332 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest332:                                   ; preds = %normal-dest320
  %.elt1243 = extractvalue { {}*, i64 } %194, 0
  %.elt1245 = extractvalue { {}*, i64 } %194, 1
  %cond1172 = icmp eq i64 %.elt1245, 0
  %195 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104206.0 = select i1 %cond1172, {}* %195, {}* %.elt1243
  %196 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %197 = invoke {}* @cc_safe_fdefinition({}* %196)
          to label %normal-dest339 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest339:                                   ; preds = %normal-dest332
  %198 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %199 = invoke {}* @cc_safe_fdefinition({}* %198)
          to label %normal-dest341 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest341:                                   ; preds = %normal-dest339
  %200 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %201 = invoke {}* @cc_safe_fdefinition({}* %200)
          to label %normal-dest343 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest343:                                   ; preds = %normal-dest341
  %202 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %ptrtoint344 = ptrtoint {}* %201 to i64
  %entry-point-addr-uint345 = add i64 %ptrtoint344, 7
  %entry-point-addr346 = inttoptr i64 %entry-point-addr-uint345 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point347 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr346, align 8
  %203 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point347({}* %201, i64 1, {}* %202, {}* null, {}* null, {}* null)
          to label %normal-dest350 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest350:                                   ; preds = %normal-dest343
  %.elt1247 = extractvalue { {}*, i64 } %203, 0
  %.elt1249 = extractvalue { {}*, i64 } %203, 1
  %cond1173 = icmp eq i64 %.elt1249, 0
  %204 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104212.0 = select i1 %cond1173, {}* %204, {}* %.elt1247
  %205 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %206 = invoke {}* @cc_safe_fdefinition({}* %205)
          to label %normal-dest357 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest357:                                   ; preds = %normal-dest350
  %ptrtoint358 = ptrtoint {}* %206 to i64
  %entry-point-addr-uint359 = add i64 %ptrtoint358, 7
  %entry-point-addr360 = inttoptr i64 %entry-point-addr-uint359 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point361 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr360, align 8
  %207 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point361({}* %206, i64 1, {}* %G103953.0, {}* null, {}* null, {}* null)
          to label %normal-dest364 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest364:                                   ; preds = %normal-dest357
  %.elt1251 = extractvalue { {}*, i64 } %207, 0
  %.elt1253 = extractvalue { {}*, i64 } %207, 1
  %cond1174 = icmp eq i64 %.elt1253, 0
  %208 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104213.0 = select i1 %cond1174, {}* %208, {}* %.elt1251
  %ptrtoint370 = ptrtoint {}* %199 to i64
  %entry-point-addr-uint371 = add i64 %ptrtoint370, 7
  %entry-point-addr372 = inttoptr i64 %entry-point-addr-uint371 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point373 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr372, align 8
  %209 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point373({}* %199, i64 3, {}* %G104212.0, {}* %G104213.0, {}* %208, {}* null)
          to label %normal-dest376 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest376:                                   ; preds = %normal-dest364
  %.elt1255 = extractvalue { {}*, i64 } %209, 0
  %.elt1257 = extractvalue { {}*, i64 } %209, 1
  %cond1175 = icmp eq i64 %.elt1257, 0
  %210 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104210.0 = select i1 %cond1175, {}* %210, {}* %.elt1255
  %ptrtoint382 = ptrtoint {}* %197 to i64
  %entry-point-addr-uint383 = add i64 %ptrtoint382, 7
  %entry-point-addr384 = inttoptr i64 %entry-point-addr-uint383 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point385 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr384, align 8
  %211 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point385({}* %197, i64 1, {}* %G104210.0, {}* null, {}* null, {}* null)
          to label %normal-dest388 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest388:                                   ; preds = %normal-dest376
  %.elt1259 = extractvalue { {}*, i64 } %211, 0
  %.elt1261 = extractvalue { {}*, i64 } %211, 1
  %cond1176 = icmp eq i64 %.elt1261, 0
  %212 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104207.0 = select i1 %cond1176, {}* %212, {}* %.elt1259
  %ptrtoint394 = ptrtoint {}* %173 to i64
  %entry-point-addr-uint395 = add i64 %ptrtoint394, 7
  %entry-point-addr396 = inttoptr i64 %entry-point-addr-uint395 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point397 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr396, align 8
  %213 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point397({}* %173, i64 4, {}* %G104205.0, {}* %G104206.0, {}* %G104207.0, {}* %212)
          to label %normal-dest400 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest400:                                   ; preds = %normal-dest388
  %.elt1263 = extractvalue { {}*, i64 } %213, 0
  %.elt1265 = extractvalue { {}*, i64 } %213, 1
  %cond1177 = icmp eq i64 %.elt1265, 0
  %214 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104202.0 = select i1 %cond1177, {}* %214, {}* %.elt1263
  %215 = load {}*, {}** %141, align 8, !tbaa !74
  %ptrtoint407 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint408 = add i64 %ptrtoint407, 7
  %entry-point-addr409 = inttoptr i64 %entry-point-addr-uint408 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point410 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr409, align 8
  %216 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point410({}* %35, i64 2, {}* %G104202.0, {}* %215, {}* null, {}* null)
          to label %normal-dest413 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest413:                                   ; preds = %normal-dest400
  %217 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 232), align 16
  %218 = invoke {}* @cc_safe_fdefinition({}* %217)
          to label %normal-dest419 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest419:                                   ; preds = %normal-dest413
  %ptrtoint420 = ptrtoint {}* %218 to i64
  %entry-point-addr-uint421 = add i64 %ptrtoint420, 7
  %entry-point-addr422 = inttoptr i64 %entry-point-addr-uint421 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point423 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr422, align 8
  %219 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point423({}* %218, i64 1, {}* %G103952.0, {}* null, {}* null, {}* null)
          to label %normal-dest426 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest426:                                   ; preds = %normal-dest419
  %.elt1271 = extractvalue { {}*, i64 } %219, 0
  %.elt1273 = extractvalue { {}*, i64 } %219, 1
  %cond1178 = icmp eq i64 %.elt1273, 0
  %220 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR225.2" = select i1 %cond1178, {}* %220, {}* %.elt1271
  %221 = icmp eq {}* %"%DOLIST-VAR225.2", %220
  br i1 %221, label %tag143, label %tag114.preheader

tag114.preheader:                                 ; preds = %normal-dest426
  br label %tag114

normal-dest436:                                   ; preds = %tag40
  %222 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %223 = invoke {}* @cc_safe_fdefinition({}* %222)
          to label %normal-dest438 unwind label %cleanup-lpad.loopexit

normal-dest438:                                   ; preds = %normal-dest436
  %224 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %225 = invoke {}* @cc_safe_fdefinition({}* %224)
          to label %normal-dest440 unwind label %cleanup-lpad.loopexit

normal-dest440:                                   ; preds = %normal-dest438
  %226 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 357), align 8
  %ptrtoint441 = ptrtoint {}* %225 to i64
  %entry-point-addr-uint442 = add i64 %ptrtoint441, 7
  %entry-point-addr443 = inttoptr i64 %entry-point-addr-uint442 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point444 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr443, align 8
  %227 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point444({}* %225, i64 1, {}* %226, {}* null, {}* null, {}* null)
          to label %normal-dest447 unwind label %cleanup-lpad.loopexit

normal-dest447:                                   ; preds = %normal-dest440
  %.elt1280 = extractvalue { {}*, i64 } %227, 0
  %.elt1282 = extractvalue { {}*, i64 } %227, 1
  %cond1180 = icmp eq i64 %.elt1282, 0
  %228 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104097.0 = select i1 %cond1180, {}* %228, {}* %.elt1280
  %229 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %230 = invoke {}* @cc_safe_fdefinition({}* %229)
          to label %normal-dest454 unwind label %cleanup-lpad.loopexit

normal-dest454:                                   ; preds = %normal-dest447
  %231 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %232 = invoke {}* @cc_safe_fdefinition({}* %231)
          to label %normal-dest456 unwind label %cleanup-lpad.loopexit

normal-dest456:                                   ; preds = %normal-dest454
  %233 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %234 = invoke {}* @cc_safe_fdefinition({}* %233)
          to label %normal-dest458 unwind label %cleanup-lpad.loopexit

normal-dest458:                                   ; preds = %normal-dest456
  %235 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %ptrtoint459 = ptrtoint {}* %234 to i64
  %entry-point-addr-uint460 = add i64 %ptrtoint459, 7
  %entry-point-addr461 = inttoptr i64 %entry-point-addr-uint460 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point462 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr461, align 8
  %236 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point462({}* %234, i64 1, {}* %235, {}* null, {}* null, {}* null)
          to label %normal-dest465 unwind label %cleanup-lpad.loopexit

normal-dest465:                                   ; preds = %normal-dest458
  %.elt1284 = extractvalue { {}*, i64 } %236, 0
  %.elt1286 = extractvalue { {}*, i64 } %236, 1
  %cond1181 = icmp eq i64 %.elt1286, 0
  %237 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104156.0 = select i1 %cond1181, {}* %237, {}* %.elt1284
  %238 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %239 = invoke {}* @cc_safe_fdefinition({}* %238)
          to label %normal-dest472 unwind label %cleanup-lpad.loopexit

normal-dest472:                                   ; preds = %normal-dest465
  %ptrtoint473 = ptrtoint {}* %239 to i64
  %entry-point-addr-uint474 = add i64 %ptrtoint473, 7
  %entry-point-addr475 = inttoptr i64 %entry-point-addr-uint474 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point476 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr475, align 8
  %240 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point476({}* %239, i64 1, {}* %INSTANZ.0, {}* null, {}* null, {}* null)
          to label %normal-dest479 unwind label %cleanup-lpad.loopexit

normal-dest479:                                   ; preds = %normal-dest472
  %.elt1288 = extractvalue { {}*, i64 } %240, 0
  %.elt1290 = extractvalue { {}*, i64 } %240, 1
  %cond1182 = icmp eq i64 %.elt1290, 0
  %241 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104157.0 = select i1 %cond1182, {}* %241, {}* %.elt1288
  %ptrtoint485 = ptrtoint {}* %232 to i64
  %entry-point-addr-uint486 = add i64 %ptrtoint485, 7
  %entry-point-addr487 = inttoptr i64 %entry-point-addr-uint486 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point488 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr487, align 8
  %242 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point488({}* %232, i64 3, {}* %G104156.0, {}* %G104157.0, {}* %241, {}* null)
          to label %normal-dest491 unwind label %cleanup-lpad.loopexit

normal-dest491:                                   ; preds = %normal-dest479
  %.elt1292 = extractvalue { {}*, i64 } %242, 0
  %.elt1294 = extractvalue { {}*, i64 } %242, 1
  %cond1183 = icmp eq i64 %.elt1294, 0
  %243 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104154.0 = select i1 %cond1183, {}* %243, {}* %.elt1292
  %ptrtoint497 = ptrtoint {}* %230 to i64
  %entry-point-addr-uint498 = add i64 %ptrtoint497, 7
  %entry-point-addr499 = inttoptr i64 %entry-point-addr-uint498 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point500 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr499, align 8
  %244 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point500({}* %230, i64 1, {}* %G104154.0, {}* null, {}* null, {}* null)
          to label %normal-dest503 unwind label %cleanup-lpad.loopexit

normal-dest503:                                   ; preds = %normal-dest491
  %.elt1296 = extractvalue { {}*, i64 } %244, 0
  %.elt1298 = extractvalue { {}*, i64 } %244, 1
  %cond1184 = icmp eq i64 %.elt1298, 0
  %245 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104098.0 = select i1 %cond1184, {}* %245, {}* %.elt1296
  %246 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %247 = invoke {}* @cc_safe_fdefinition({}* %246)
          to label %normal-dest510 unwind label %cleanup-lpad.loopexit

normal-dest510:                                   ; preds = %normal-dest503
  %248 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %249 = invoke {}* @cc_safe_fdefinition({}* %248)
          to label %normal-dest512 unwind label %cleanup-lpad.loopexit

normal-dest512:                                   ; preds = %normal-dest510
  %250 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %251 = invoke {}* @cc_safe_fdefinition({}* %250)
          to label %normal-dest514 unwind label %cleanup-lpad.loopexit

normal-dest514:                                   ; preds = %normal-dest512
  %252 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %ptrtoint515 = ptrtoint {}* %251 to i64
  %entry-point-addr-uint516 = add i64 %ptrtoint515, 7
  %entry-point-addr517 = inttoptr i64 %entry-point-addr-uint516 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point518 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr517, align 8
  %253 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point518({}* %251, i64 1, {}* %252, {}* null, {}* null, {}* null)
          to label %normal-dest521 unwind label %cleanup-lpad.loopexit

normal-dest521:                                   ; preds = %normal-dest514
  %.elt1300 = extractvalue { {}*, i64 } %253, 0
  %.elt1302 = extractvalue { {}*, i64 } %253, 1
  %cond1185 = icmp eq i64 %.elt1302, 0
  %254 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104142.0 = select i1 %cond1185, {}* %254, {}* %.elt1300
  %255 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %256 = invoke {}* @cc_safe_fdefinition({}* %255)
          to label %normal-dest528 unwind label %cleanup-lpad.loopexit

normal-dest528:                                   ; preds = %normal-dest521
  %ptrtoint529 = ptrtoint {}* %256 to i64
  %entry-point-addr-uint530 = add i64 %ptrtoint529, 7
  %entry-point-addr531 = inttoptr i64 %entry-point-addr-uint530 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point532 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr531, align 8
  %257 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point532({}* %256, i64 1, {}* %G103953.0, {}* null, {}* null, {}* null)
          to label %normal-dest535 unwind label %cleanup-lpad.loopexit

normal-dest535:                                   ; preds = %normal-dest528
  %.elt1304 = extractvalue { {}*, i64 } %257, 0
  %.elt1306 = extractvalue { {}*, i64 } %257, 1
  %cond1186 = icmp eq i64 %.elt1306, 0
  %258 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104143.0 = select i1 %cond1186, {}* %258, {}* %.elt1304
  %ptrtoint541 = ptrtoint {}* %249 to i64
  %entry-point-addr-uint542 = add i64 %ptrtoint541, 7
  %entry-point-addr543 = inttoptr i64 %entry-point-addr-uint542 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point544 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr543, align 8
  %259 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point544({}* %249, i64 3, {}* %G104142.0, {}* %G104143.0, {}* %258, {}* null)
          to label %normal-dest547 unwind label %cleanup-lpad.loopexit

normal-dest547:                                   ; preds = %normal-dest535
  %.elt1308 = extractvalue { {}*, i64 } %259, 0
  %.elt1310 = extractvalue { {}*, i64 } %259, 1
  %cond1187 = icmp eq i64 %.elt1310, 0
  %260 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104140.0 = select i1 %cond1187, {}* %260, {}* %.elt1308
  %ptrtoint553 = ptrtoint {}* %247 to i64
  %entry-point-addr-uint554 = add i64 %ptrtoint553, 7
  %entry-point-addr555 = inttoptr i64 %entry-point-addr-uint554 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point556 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr555, align 8
  %261 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point556({}* %247, i64 1, {}* %G104140.0, {}* null, {}* null, {}* null)
          to label %normal-dest559 unwind label %cleanup-lpad.loopexit

normal-dest559:                                   ; preds = %normal-dest547
  %.elt1312 = extractvalue { {}*, i64 } %261, 0
  %.elt1314 = extractvalue { {}*, i64 } %261, 1
  %cond1188 = icmp eq i64 %.elt1314, 0
  %262 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104099.0 = select i1 %cond1188, {}* %262, {}* %.elt1312
  %263 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %264 = invoke {}* @cc_safe_fdefinition({}* %263)
          to label %normal-dest566 unwind label %cleanup-lpad.loopexit

normal-dest566:                                   ; preds = %normal-dest559
  %265 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %266 = invoke {}* @cc_safe_fdefinition({}* %265)
          to label %normal-dest568 unwind label %cleanup-lpad.loopexit

normal-dest568:                                   ; preds = %normal-dest566
  %267 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %268 = invoke {}* @cc_safe_fdefinition({}* %267)
          to label %normal-dest570 unwind label %cleanup-lpad.loopexit

normal-dest570:                                   ; preds = %normal-dest568
  %269 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %ptrtoint571 = ptrtoint {}* %268 to i64
  %entry-point-addr-uint572 = add i64 %ptrtoint571, 7
  %entry-point-addr573 = inttoptr i64 %entry-point-addr-uint572 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point574 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr573, align 8
  %270 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point574({}* %268, i64 1, {}* %269, {}* null, {}* null, {}* null)
          to label %normal-dest577 unwind label %cleanup-lpad.loopexit

normal-dest577:                                   ; preds = %normal-dest570
  %.elt1316 = extractvalue { {}*, i64 } %270, 0
  %.elt1318 = extractvalue { {}*, i64 } %270, 1
  %cond1189 = icmp eq i64 %.elt1318, 0
  %271 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104124.0 = select i1 %cond1189, {}* %271, {}* %.elt1316
  %272 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %273 = invoke {}* @cc_safe_fdefinition({}* %272)
          to label %normal-dest584 unwind label %cleanup-lpad.loopexit

normal-dest584:                                   ; preds = %normal-dest577
  %274 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %275 = invoke {}* @cc_safe_fdefinition({}* %274)
          to label %normal-dest586 unwind label %cleanup-lpad.loopexit

normal-dest586:                                   ; preds = %normal-dest584
  %ptrtoint587 = ptrtoint {}* %275 to i64
  %entry-point-addr-uint588 = add i64 %ptrtoint587, 7
  %entry-point-addr589 = inttoptr i64 %entry-point-addr-uint588 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point590 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr589, align 8
  %276 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point590({}* %275, i64 2, {}* %INSTANZ.0, {}* %G103953.0, {}* null, {}* null)
          to label %normal-dest593 unwind label %cleanup-lpad.loopexit

normal-dest593:                                   ; preds = %normal-dest586
  %.elt1320 = extractvalue { {}*, i64 } %276, 0
  %.elt1322 = extractvalue { {}*, i64 } %276, 1
  %cond1190 = icmp eq i64 %.elt1322, 0
  %277 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104128.0 = select i1 %cond1190, {}* %277, {}* %.elt1320
  %ptrtoint599 = ptrtoint {}* %273 to i64
  %entry-point-addr-uint600 = add i64 %ptrtoint599, 7
  %entry-point-addr601 = inttoptr i64 %entry-point-addr-uint600 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point602 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr601, align 8
  %278 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point602({}* %273, i64 1, {}* %G104128.0, {}* null, {}* null, {}* null)
          to label %normal-dest605 unwind label %cleanup-lpad.loopexit

normal-dest605:                                   ; preds = %normal-dest593
  %.elt1324 = extractvalue { {}*, i64 } %278, 0
  %.elt1326 = extractvalue { {}*, i64 } %278, 1
  %cond1191 = icmp eq i64 %.elt1326, 0
  %279 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104125.0 = select i1 %cond1191, {}* %279, {}* %.elt1324
  %ptrtoint611 = ptrtoint {}* %266 to i64
  %entry-point-addr-uint612 = add i64 %ptrtoint611, 7
  %entry-point-addr613 = inttoptr i64 %entry-point-addr-uint612 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point614 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr613, align 8
  %280 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point614({}* %266, i64 3, {}* %G104124.0, {}* %G104125.0, {}* %279, {}* null)
          to label %normal-dest617 unwind label %cleanup-lpad.loopexit

normal-dest617:                                   ; preds = %normal-dest605
  %.elt1328 = extractvalue { {}*, i64 } %280, 0
  %.elt1330 = extractvalue { {}*, i64 } %280, 1
  %cond1192 = icmp eq i64 %.elt1330, 0
  %281 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104122.0 = select i1 %cond1192, {}* %281, {}* %.elt1328
  %ptrtoint623 = ptrtoint {}* %264 to i64
  %entry-point-addr-uint624 = add i64 %ptrtoint623, 7
  %entry-point-addr625 = inttoptr i64 %entry-point-addr-uint624 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point626 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr625, align 8
  %282 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point626({}* %264, i64 1, {}* %G104122.0, {}* null, {}* null, {}* null)
          to label %normal-dest629 unwind label %cleanup-lpad.loopexit

normal-dest629:                                   ; preds = %normal-dest617
  %.elt1332 = extractvalue { {}*, i64 } %282, 0
  %.elt1334 = extractvalue { {}*, i64 } %282, 1
  %cond1193 = icmp eq i64 %.elt1334, 0
  %283 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104100.0 = select i1 %cond1193, {}* %283, {}* %.elt1332
  %284 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %285 = invoke {}* @cc_safe_fdefinition({}* %284)
          to label %normal-dest636 unwind label %cleanup-lpad.loopexit

normal-dest636:                                   ; preds = %normal-dest629
  %286 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %287 = invoke {}* @cc_safe_fdefinition({}* %286)
          to label %normal-dest638 unwind label %cleanup-lpad.loopexit

normal-dest638:                                   ; preds = %normal-dest636
  %288 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %289 = invoke {}* @cc_safe_fdefinition({}* %288)
          to label %normal-dest640 unwind label %cleanup-lpad.loopexit

normal-dest640:                                   ; preds = %normal-dest638
  %290 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %ptrtoint641 = ptrtoint {}* %289 to i64
  %entry-point-addr-uint642 = add i64 %ptrtoint641, 7
  %entry-point-addr643 = inttoptr i64 %entry-point-addr-uint642 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point644 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr643, align 8
  %291 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point644({}* %289, i64 1, {}* %290, {}* null, {}* null, {}* null)
          to label %normal-dest647 unwind label %cleanup-lpad.loopexit

normal-dest647:                                   ; preds = %normal-dest640
  %.elt1336 = extractvalue { {}*, i64 } %291, 0
  %.elt1338 = extractvalue { {}*, i64 } %291, 1
  %cond1194 = icmp eq i64 %.elt1338, 0
  %292 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104106.0 = select i1 %cond1194, {}* %292, {}* %.elt1336
  %293 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %294 = invoke {}* @cc_safe_fdefinition({}* %293)
          to label %normal-dest654 unwind label %cleanup-lpad.loopexit

normal-dest654:                                   ; preds = %normal-dest647
  %295 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %296 = invoke {}* @cc_safe_fdefinition({}* %295)
          to label %normal-dest656 unwind label %cleanup-lpad.loopexit

normal-dest656:                                   ; preds = %normal-dest654
  %ptrtoint657 = ptrtoint {}* %296 to i64
  %entry-point-addr-uint658 = add i64 %ptrtoint657, 7
  %entry-point-addr659 = inttoptr i64 %entry-point-addr-uint658 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point660 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr659, align 8
  %297 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point660({}* %296, i64 2, {}* %INSTANZ.0, {}* %G103953.0, {}* null, {}* null)
          to label %normal-dest663 unwind label %cleanup-lpad.loopexit

normal-dest663:                                   ; preds = %normal-dest656
  %.elt1340 = extractvalue { {}*, i64 } %297, 0
  %.elt1342 = extractvalue { {}*, i64 } %297, 1
  %cond1195 = icmp eq i64 %.elt1342, 0
  %298 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104110.0 = select i1 %cond1195, {}* %298, {}* %.elt1340
  %ptrtoint669 = ptrtoint {}* %294 to i64
  %entry-point-addr-uint670 = add i64 %ptrtoint669, 7
  %entry-point-addr671 = inttoptr i64 %entry-point-addr-uint670 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point672 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr671, align 8
  %299 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point672({}* %294, i64 1, {}* %G104110.0, {}* null, {}* null, {}* null)
          to label %normal-dest675 unwind label %cleanup-lpad.loopexit

normal-dest675:                                   ; preds = %normal-dest663
  %.elt1344 = extractvalue { {}*, i64 } %299, 0
  %.elt1346 = extractvalue { {}*, i64 } %299, 1
  %cond1196 = icmp eq i64 %.elt1346, 0
  %300 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104107.0 = select i1 %cond1196, {}* %300, {}* %.elt1344
  %ptrtoint681 = ptrtoint {}* %287 to i64
  %entry-point-addr-uint682 = add i64 %ptrtoint681, 7
  %entry-point-addr683 = inttoptr i64 %entry-point-addr-uint682 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point684 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr683, align 8
  %301 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point684({}* %287, i64 3, {}* %G104106.0, {}* %G104107.0, {}* %300, {}* null)
          to label %normal-dest687 unwind label %cleanup-lpad.loopexit

normal-dest687:                                   ; preds = %normal-dest675
  %.elt1348 = extractvalue { {}*, i64 } %301, 0
  %.elt1350 = extractvalue { {}*, i64 } %301, 1
  %cond1197 = icmp eq i64 %.elt1350, 0
  %302 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104104.0 = select i1 %cond1197, {}* %302, {}* %.elt1348
  %ptrtoint693 = ptrtoint {}* %285 to i64
  %entry-point-addr-uint694 = add i64 %ptrtoint693, 7
  %entry-point-addr695 = inttoptr i64 %entry-point-addr-uint694 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point696 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr695, align 8
  %303 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point696({}* %285, i64 1, {}* %G104104.0, {}* null, {}* null, {}* null)
          to label %normal-dest699 unwind label %cleanup-lpad.loopexit

normal-dest699:                                   ; preds = %normal-dest687
  %.elt1352 = extractvalue { {}*, i64 } %303, 0
  %.elt1354 = extractvalue { {}*, i64 } %303, 1
  %cond1198 = icmp eq i64 %.elt1354, 0
  %304 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104101.0 = select i1 %cond1198, {}* %304, {}* %.elt1352
  %ptrtoint705 = ptrtoint {}* %223 to i64
  %entry-point-addr-uint706 = add i64 %ptrtoint705, 7
  %entry-point-addr707 = inttoptr i64 %entry-point-addr-uint706 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point708 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr707, align 8
  %305 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point708({}* %223, i64 6, {}* %G104097.0, {}* %G104098.0, {}* %G104099.0, {}* %G104100.0, {}* %G104101.0, {}* %304)
          to label %normal-dest711 unwind label %cleanup-lpad.loopexit

normal-dest711:                                   ; preds = %normal-dest699
  %.elt1356 = extractvalue { {}*, i64 } %305, 0
  %.elt1358 = extractvalue { {}*, i64 } %305, 1
  %cond1199 = icmp eq i64 %.elt1358, 0
  %306 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104094.0 = select i1 %cond1199, {}* %306, {}* %.elt1356
  %307 = load {}*, {}** %141, align 8, !tbaa !74
  %ptrtoint718 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint719 = add i64 %ptrtoint718, 7
  %entry-point-addr720 = inttoptr i64 %entry-point-addr-uint719 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point721 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr720, align 8
  %308 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point721({}* %39, i64 2, {}* %G104094.0, {}* %307, {}* null, {}* null)
          to label %tag71 unwind label %cleanup-lpad.loopexit

header-check-br729:                               ; preds = %tag77
  %gep734 = getelementptr inbounds i8, i8* %54, i64 -9
  %irc-bit-cast735 = bitcast i8* %gep734 to i64*
  %309 = load i64, i64* %irc-bit-cast735, align 8
  %310 = add i64 %309, -1309
  %311 = lshr i64 %310, 3
  %312 = shl i64 %310, 61
  %313 = or i64 %311, %312
  switch i64 %313, label %tag30 [
    i64 2, label %tag130
    i64 4, label %tag130
    i64 5, label %tag130
    i64 0, label %tag130
  ]

header-check-br756:                               ; preds = %tag96
  %gep761 = getelementptr inbounds i8, i8* %54, i64 -9
  %irc-bit-cast762 = bitcast i8* %gep761 to i64*
  %314 = load i64, i64* %irc-bit-cast762, align 8
  %315 = add i64 %314, -1309
  %316 = lshr i64 %315, 3
  %317 = shl i64 %315, 61
  %318 = or i64 %316, %317
  switch i64 %318, label %tag145 [
    i64 2, label %tag50
    i64 4, label %tag50
    i64 5, label %tag50
    i64 0, label %tag50
  ]

header-check-br781:                               ; preds = %tag130
  %irc-bit-cast785 = bitcast {}* %55 to i8*
  %gep786 = getelementptr inbounds i8, i8* %irc-bit-cast785, i64 -9
  %irc-bit-cast787 = bitcast i8* %gep786 to i64*
  %319 = load i64, i64* %irc-bit-cast787, align 8
  %320 = add i64 %319, -1309
  %321 = lshr i64 %320, 3
  %322 = shl i64 %320, 61
  %323 = or i64 %321, %322
  switch i64 %323, label %tag30 [
    i64 2, label %tag113
    i64 4, label %tag113
    i64 5, label %tag113
    i64 0, label %tag113
  ]

header-check-br796:                               ; preds = %tag50
  %irc-bit-cast800 = bitcast {}* %31 to i8*
  %gep801 = getelementptr inbounds i8, i8* %irc-bit-cast800, i64 -9
  %irc-bit-cast802 = bitcast i8* %gep801 to i64*
  %324 = load i64, i64* %irc-bit-cast802, align 8
  %325 = add i64 %324, -1309
  %326 = lshr i64 %325, 3
  %327 = shl i64 %325, 61
  %328 = or i64 %326, %327
  switch i64 %328, label %tag145 [
    i64 2, label %tag129
    i64 4, label %tag129
    i64 5, label %tag129
    i64 0, label %tag129
  ]

normal-dest839:                                   ; preds = %tag81
  %329 = load {}*, {}** %141, align 8, !tbaa !74
  %ptrtoint841 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint842 = add i64 %ptrtoint841, 7
  %entry-point-addr843 = inttoptr i64 %entry-point-addr-uint842 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point844 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr843, align 8
  %330 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point844({}* %72, i64 2, {}* %BEFEHL.0, {}* %329, {}* null, {}* null)
          to label %tag145 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest853:                                   ; preds = %tag82
  %331 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %332 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %333 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %334 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint854 = ptrtoint {}* %74 to i64
  %entry-point-addr-uint855 = add i64 %ptrtoint854, 7
  %entry-point-addr856 = inttoptr i64 %entry-point-addr-uint855 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point857 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr856, align 8
  %335 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point857({}* %74, i64 5, {}* %331, {}* %332, {}* %"%DOLIST-VAR225.01549", {}* %333, {}* %334)
          to label %normal-dest860 unwind label %cleanup-lpad.loopexit

normal-dest860:                                   ; preds = %normal-dest853
  %.elt1369 = extractvalue { {}*, i64 } %335, 0
  %.elt1371 = extractvalue { {}*, i64 } %335, 1
  %cond1201 = icmp eq i64 %.elt1371, 0
  %336 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %INSTANZ.1 = select i1 %cond1201, {}* %336, {}* %.elt1369
  br label %tag2

normal-dest905:                                   ; preds = %tag97
  %337 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %338 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %339 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %340 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint906 = ptrtoint {}* %88 to i64
  %entry-point-addr-uint907 = add i64 %ptrtoint906, 7
  %entry-point-addr908 = inttoptr i64 %entry-point-addr-uint907 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point909 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr908, align 8
  %341 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point909({}* %88, i64 5, {}* %337, {}* %338, {}* %BEFEHL.0, {}* %339, {}* %340)
          to label %normal-dest912 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest912:                                   ; preds = %normal-dest905
  %.elt1410 = extractvalue { {}*, i64 } %341, 0
  %.elt1412 = extractvalue { {}*, i64 } %341, 1
  %cond1210 = icmp eq i64 %.elt1412, 0
  %342 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x803.1 = select i1 %cond1210, {}* %342, {}* %.elt1410
  br label %tag107

normal-dest919:                                   ; preds = %tag99
  %343 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %344 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %345 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %346 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint921 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint922 = add i64 %ptrtoint921, 7
  %entry-point-addr923 = inttoptr i64 %entry-point-addr-uint922 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point924 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr923, align 8
  %347 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point924({}* %90, i64 5, {}* %343, {}* %344, {}* %"%DOLIST-VAR.01550", {}* %345, {}* %346)
          to label %normal-dest927 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest927:                                   ; preds = %normal-dest919
  %.elt1398 = extractvalue { {}*, i64 } %347, 0
  %.elt1400 = extractvalue { {}*, i64 } %347, 1
  %cond1207 = icmp eq i64 %.elt1400, 0
  %348 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond1207, {}* %348, {}* %.elt1398
  br label %tag115.backedge

normal-dest942:                                   ; preds = %tag108
  %349 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %350 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %351 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %352 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint943 = ptrtoint {}* %100 to i64
  %entry-point-addr-uint944 = add i64 %ptrtoint943, 7
  %entry-point-addr945 = inttoptr i64 %entry-point-addr-uint944 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point946 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr945, align 8
  %353 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point946({}* %100, i64 5, {}* %349, {}* %350, {}* %BEFEHL.0, {}* %351, {}* %352)
          to label %normal-dest949 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest949:                                   ; preds = %normal-dest942
  %.elt1418 = extractvalue { {}*, i64 } %353, 0
  %.elt1420 = extractvalue { {}*, i64 } %353, 1
  %cond1212 = icmp eq i64 %.elt1420, 0
  %354 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x195.1 = select i1 %cond1212, {}* %354, {}* %.elt1418
  br label %tag11

normal-dest957:                                   ; preds = %tag112
  %355 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %356 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %357 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %358 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint958 = ptrtoint {}* %102 to i64
  %entry-point-addr-uint959 = add i64 %ptrtoint958, 7
  %entry-point-addr960 = inttoptr i64 %entry-point-addr-uint959 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point961 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr960, align 8
  %359 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point961({}* %102, i64 5, {}* %355, {}* %356, {}* %x803.0, {}* %357, {}* %358)
          to label %normal-dest964 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest964:                                   ; preds = %normal-dest957
  %.elt1406 = extractvalue { {}*, i64 } %359, 0
  %.elt1408 = extractvalue { {}*, i64 } %359, 1
  %cond1209 = icmp eq i64 %.elt1408, 0
  %360 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x432.1 = select i1 %cond1209, {}* %360, {}* %.elt1406
  br label %tag84

normal-dest971:                                   ; preds = %tag113
  %ptrtoint972 = ptrtoint {}* %104 to i64
  %entry-point-addr-uint973 = add i64 %ptrtoint972, 7
  %entry-point-addr974 = inttoptr i64 %entry-point-addr-uint973 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point975 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr974, align 8
  %361 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point975({}* %104, i64 2, {}* nonnull %.in1427, {}* nonnull %55, {}* null, {}* null)
          to label %normal-dest978 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest978:                                   ; preds = %normal-dest971
  %.elt1439 = extractvalue { {}*, i64 } %361, 0
  %.elt1441 = extractvalue { {}*, i64 } %361, 1
  %cond1214 = icmp eq i64 %.elt1441, 0
  %362 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104330.1 = select i1 %cond1214, {}* %362, {}* %.elt1439
  br label %tag55

normal-dest1011:                                  ; preds = %tag127
  %363 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %364 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %365 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %366 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1012 = ptrtoint {}* %112 to i64
  %entry-point-addr-uint1013 = add i64 %ptrtoint1012, 7
  %entry-point-addr1014 = inttoptr i64 %entry-point-addr-uint1013 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1015 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1014, align 8
  %367 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1015({}* %112, i64 5, {}* %363, {}* %364, {}* %x432.0, {}* %365, {}* %366)
          to label %normal-dest1018 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1018:                                  ; preds = %normal-dest1011
  %.elt1402 = extractvalue { {}*, i64 } %367, 0
  %.elt1404 = extractvalue { {}*, i64 } %367, 1
  %cond1208 = icmp eq i64 %.elt1404, 0
  %368 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G103953.1 = select i1 %cond1208, {}* %368, {}* %.elt1402
  br label %tag31

normal-dest1025:                                  ; preds = %tag129
  %ptrtoint1026 = ptrtoint {}* %114 to i64
  %entry-point-addr-uint1027 = add i64 %ptrtoint1026, 7
  %entry-point-addr1028 = inttoptr i64 %entry-point-addr-uint1027 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1029 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1028, align 8
  %369 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1029({}* %114, i64 2, {}* nonnull %.in1427, {}* nonnull %31, {}* null, {}* null)
          to label %normal-dest1032 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1032:                                  ; preds = %normal-dest1025
  %.elt1431 = extractvalue { {}*, i64 } %369, 0
  %.elt1433 = extractvalue { {}*, i64 } %369, 1
  %cond1213 = icmp eq i64 %.elt1433, 0
  %370 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104037.1 = select i1 %cond1213, {}* %370, {}* %.elt1431
  br label %tag32

normal-dest1047:                                  ; preds = %tag134
  %371 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %372 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %373 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %374 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1048 = ptrtoint {}* %117 to i64
  %entry-point-addr-uint1049 = add i64 %ptrtoint1048, 7
  %entry-point-addr1050 = inttoptr i64 %entry-point-addr-uint1049 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1051 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1050, align 8
  %375 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1051({}* %117, i64 5, {}* %371, {}* %372, {}* %BEFEHL.0, {}* %373, {}* %374)
          to label %normal-dest1054 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1054:                                  ; preds = %normal-dest1047
  %.elt1443 = extractvalue { {}*, i64 } %375, 0
  %.elt1445 = extractvalue { {}*, i64 } %375, 1
  %cond1215 = icmp eq i64 %.elt1445, 0
  %376 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond1215, {}* %376, {}* %.elt1443
  %.val1520.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag72

normal-dest1075:                                  ; preds = %tag143
  %377 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %378 = invoke {}* @cc_safe_fdefinition({}* %377)
          to label %normal-dest1077 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1077:                                  ; preds = %normal-dest1075
  %379 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %380 = invoke {}* @cc_safe_fdefinition({}* %379)
          to label %normal-dest1079 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1079:                                  ; preds = %normal-dest1077
  %381 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 401), align 8
  %ptrtoint1080 = ptrtoint {}* %380 to i64
  %entry-point-addr-uint1081 = add i64 %ptrtoint1080, 7
  %entry-point-addr1082 = inttoptr i64 %entry-point-addr-uint1081 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1083 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1082, align 8
  %382 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1083({}* %380, i64 1, {}* %381, {}* null, {}* null, {}* null)
          to label %normal-dest1086 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1086:                                  ; preds = %normal-dest1079
  %.elt1373 = extractvalue { {}*, i64 } %382, 0
  %.elt1375 = extractvalue { {}*, i64 } %382, 1
  %cond1202 = icmp eq i64 %.elt1375, 0
  %383 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104055.0 = select i1 %cond1202, {}* %383, {}* %.elt1373
  %384 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %385 = invoke {}* @cc_safe_fdefinition({}* %384)
          to label %normal-dest1093 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1093:                                  ; preds = %normal-dest1086
  %ptrtoint1094 = ptrtoint {}* %385 to i64
  %entry-point-addr-uint1095 = add i64 %ptrtoint1094, 7
  %entry-point-addr1096 = inttoptr i64 %entry-point-addr-uint1095 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1097 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1096, align 8
  %386 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1097({}* %385, i64 1, {}* %G103953.0, {}* null, {}* null, {}* null)
          to label %normal-dest1100 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1100:                                  ; preds = %normal-dest1093
  %.elt1377 = extractvalue { {}*, i64 } %386, 0
  %.elt1379 = extractvalue { {}*, i64 } %386, 1
  %cond1203 = icmp eq i64 %.elt1379, 0
  %387 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104056.0 = select i1 %cond1203, {}* %387, {}* %.elt1377
  %388 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %389 = invoke {}* @cc_safe_fdefinition({}* %388)
          to label %normal-dest1107 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1107:                                  ; preds = %normal-dest1100
  %390 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint1108 = ptrtoint {}* %389 to i64
  %entry-point-addr-uint1109 = add i64 %ptrtoint1108, 7
  %entry-point-addr1110 = inttoptr i64 %entry-point-addr-uint1109 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1111 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1110, align 8
  %391 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1111({}* %389, i64 1, {}* %390, {}* null, {}* null, {}* null)
          to label %normal-dest1114 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1114:                                  ; preds = %normal-dest1107
  %.elt1381 = extractvalue { {}*, i64 } %391, 0
  %.elt1383 = extractvalue { {}*, i64 } %391, 1
  %cond1204 = icmp eq i64 %.elt1383, 0
  %392 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104057.0 = select i1 %cond1204, {}* %392, {}* %.elt1381
  %393 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %394 = invoke {}* @cc_safe_fdefinition({}* %393)
          to label %normal-dest1121 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1121:                                  ; preds = %normal-dest1114
  %ptrtoint1122 = ptrtoint {}* %394 to i64
  %entry-point-addr-uint1123 = add i64 %ptrtoint1122, 7
  %entry-point-addr1124 = inttoptr i64 %entry-point-addr-uint1123 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1125 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1124, align 8
  %395 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1125({}* %394, i64 1, {}* %G103952.0, {}* null, {}* null, {}* null)
          to label %normal-dest1128 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1128:                                  ; preds = %normal-dest1121
  %.elt1385 = extractvalue { {}*, i64 } %395, 0
  %.elt1387 = extractvalue { {}*, i64 } %395, 1
  %cond1205 = icmp eq i64 %.elt1387, 0
  %396 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104058.0 = select i1 %cond1205, {}* %396, {}* %.elt1385
  %ptrtoint1134 = ptrtoint {}* %378 to i64
  %entry-point-addr-uint1135 = add i64 %ptrtoint1134, 7
  %entry-point-addr1136 = inttoptr i64 %entry-point-addr-uint1135 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1137 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1136, align 8
  %397 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1137({}* %378, i64 5, {}* %G104055.0, {}* %G104056.0, {}* %G104057.0, {}* %G104058.0, {}* %396)
          to label %normal-dest1140 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1140:                                  ; preds = %normal-dest1128
  %.elt1389 = extractvalue { {}*, i64 } %397, 0
  %.elt1391 = extractvalue { {}*, i64 } %397, 1
  %cond1206 = icmp eq i64 %.elt1391, 0
  %398 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104052.0 = select i1 %cond1206, {}* %398, {}* %.elt1389
  %399 = load {}*, {}** %141, align 8, !tbaa !74
  %ptrtoint1147 = ptrtoint {}* %122 to i64
  %entry-point-addr-uint1148 = add i64 %ptrtoint1147, 7
  %entry-point-addr1149 = inttoptr i64 %entry-point-addr-uint1148 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1150 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1149, align 8
  %400 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1150({}* %122, i64 2, {}* %G104052.0, {}* %399, {}* null, {}* null)
          to label %tag145 unwind label %cleanup-lpad.loopexit.split-lp.loopexit
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.5"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !81 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.5^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest, %normal-dest13
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest13 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest13 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 403), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest9 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest9, %tag2
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !74
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !74
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag, label %tag2

normal-dest9:                                     ; preds = %tag2
  %27 = load {}*, {}** %23, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 1, {}* %27, {}* null, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt15 = extractvalue { {}*, i64 } %28, 1
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.6"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !82 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.6^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 403), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest7 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest, %normal-dest11
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest11 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest11 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %14 = insertvalue { {}*, i64 } %13, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest7, %tag
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !74
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !74
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag1, label %tag

normal-dest7:                                     ; preds = %tag
  %27 = load {}*, {}** %23, align 8, !tbaa !74
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 405), align 8
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 3, {}* %27, {}* %28, {}* %29, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt15 = extractvalue { {}*, i64 } %30, 1
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^279^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !83 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^279^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G104443.0 = phi {}* [ %18, %header-check-br ], [ %G104443.1, %normal-dest17 ], [ %G104443.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 422), align 16
  %ptrtoint29 = ptrtoint {}* %G104443.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G104443.0, i64 2, {}* %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 422), align 16
  %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 8794, i64 279, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 421), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104443.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 424), align 16
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 427), align 8
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 1116 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 422), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104443.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !84 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc91 unwind label %cleanup-lpad

.noexc91:                                         ; preds = %10
  unreachable

tag2:                                             ; preds = %tag3
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest31 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest25
  %13 = icmp eq {}* %G104427.0, %.val94
  %G104478.0 = select i1 %13, {}* %.val, {}* %.val94
  %14 = icmp eq {}* %G104478.0, %.val94
  br i1 %14, label %tag2, label %tag5

tag5:                                             ; preds = %tag3, %normal-dest38, %tag7
  %G104468.0 = phi {}* [ %20, %tag7 ], [ %G104468.1, %normal-dest38 ], [ %.val94, %tag3 ]
  %ptrtoint48 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %29, i64 1, {}* %G104468.0, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

tag6:                                             ; preds = %normal-dest54, %normal-dest68
  %return-value.sroa.9.0 = phi i64 [ %.elt86, %normal-dest68 ], [ 1, %normal-dest54 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt84, %normal-dest68 ], [ %G104427.0, %normal-dest54 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %16 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %17 = insertvalue { {}*, i64 } %16, i64 %return-value.sroa.9.0, 1
  ret { {}*, i64 } %17

tag7:                                             ; preds = %normal-dest25
  %18 = add i64 %30, -3
  %19 = inttoptr i64 %18 to {}**
  %20 = load {}*, {}** %19, align 8
  br label %tag5

tag10:                                            ; preds = %normal-dest54
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest61 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest61, %tag10, %tag5, %normal-dest31, %tag2, %normal-dest21, %normal-dest18, %normal-dest
  %23 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %23

normal-dest:                                      ; preds = %entry
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest18
  %.elt = extractvalue { {}*, i64 } %26, 0
  %.elt74 = extractvalue { {}*, i64 } %26, 1
  %cond = icmp eq i64 %.elt74, 0
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104427.0 = select i1 %cond, {}* %27, {}* %.elt
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 419), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest21
  %30 = ptrtoint {}* %G104427.0 to i64
  %tag-only75 = and i64 %30, 7
  %consp-test = icmp eq i64 %tag-only75, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %.val94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104485.0 = select i1 %consp-test, {}* %.val, {}* %.val94
  %31 = icmp eq {}* %G104485.0, %.val94
  br i1 %31, label %tag3, label %tag7

normal-dest31:                                    ; preds = %tag2
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint32 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint33 = add i64 %ptrtoint32, 7
  %entry-point-addr34 = inttoptr i64 %entry-point-addr-uint33 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point35 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr34, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point35({}* %12, i64 5, {}* %32, {}* %33, {}* %G104427.0, {}* %34, {}* %35)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest31
  %.elt88 = extractvalue { {}*, i64 } %36, 0
  %.elt90 = extractvalue { {}*, i64 } %36, 1
  %cond72 = icmp eq i64 %.elt90, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104468.1 = select i1 %cond72, {}* %37, {}* %.elt88
  br label %tag5

normal-dest54:                                    ; preds = %tag5
  %.elt77 = extractvalue { {}*, i64 } %15, 0
  %.elt79 = extractvalue { {}*, i64 } %15, 1
  %cond71 = icmp eq i64 %.elt79, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104465.0 = select i1 %cond71, {}* %38, {}* %.elt77
  %39 = icmp eq {}* %G104465.0, %38
  br i1 %39, label %tag10, label %tag6

normal-dest61:                                    ; preds = %tag10
  %ptrtoint62 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint63 = add i64 %ptrtoint62, 7
  %entry-point-addr64 = inttoptr i64 %entry-point-addr-uint63 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point65 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr64, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point65({}* %22, i64 1, {}* %G104427.0, {}* null, {}* null, {}* null)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest61
  %.elt84 = extractvalue { {}*, i64 } %40, 0
  %.elt86 = extractvalue { {}*, i64 } %40, 1
  br label %tag6
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^285^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !85 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^285^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest67, %normal-dest17, %header-check-br
  %G104521.0 = phi {}* [ %18, %header-check-br ], [ %G104521.1, %normal-dest17 ], [ %G104521.2, %normal-dest67 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %ptrtoint20 = ptrtoint {}* %G104521.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G104521.0, i64 2, {}* %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 8987, i64 285, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br73

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 442), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104521.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 443), align 8
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 444), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 1140 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104521.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag2

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !86 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc2321 unwind label %cleanup-lpad.loopexit.split-lp

.noexc2321:                                       ; preds = %10
  unreachable

tag1:                                             ; preds = %tag440
  %11 = add i64 %361, 5
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8
  %.val2456.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag273

tag3:                                             ; preds = %tag129
  %14 = add i64 %116, -3
  %15 = inttoptr i64 %14 to {}**
  %16 = load {}*, {}** %15, align 8
  br label %tag85

tag5:                                             ; preds = %tag5.lr.ph, %tag257
  %17 = phi i64 [ %327, %tag5.lr.ph ], [ %190, %tag257 ]
  %G104617.0 = phi {}* [ %.val24672481, %tag5.lr.ph ], [ %.val2467, %tag257 ]
  %18 = phi i1 [ %330, %tag5.lr.ph ], [ %195, %tag257 ]
  %19 = phi {}* [ %326, %tag5.lr.ph ], [ %189, %tag257 ]
  %20 = phi {}* [ %328, %tag5.lr.ph ], [ %193, %tag257 ]
  %21 = ptrtoint {}* %20 to i64
  %tag-only5012216 = and i64 %21, 7
  %consp-test = icmp eq i64 %tag-only5012216, 3
  br i1 %consp-test, label %tag422, label %tag193

tag7:                                             ; preds = %tag22
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest502 unwind label %cleanup-lpad.loopexit.split-lp

tag12:                                            ; preds = %tag163
  %24 = add i64 %143, 5
  %25 = inttoptr i64 %24 to {}**
  %26 = load {}*, {}** %25, align 8
  br label %tag134

tag15:                                            ; preds = %normal-dest618
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %28 = icmp eq {}* %27, %farg0
  %.val2381 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105204.0 = select i1 %28, {}* %.val2381, {}* %27
  %29 = icmp eq {}* %G105204.0, %27
  br i1 %29, label %tag137, label %tag86

tag17:                                            ; preds = %tag313.tag17_crit_edge, %header-check-br1180, %header-check-br1609, %tag485, %tag28, %tag445
  %.val2465 = phi {}* [ %.val2465.pre, %tag313.tag17_crit_edge ], [ %.val2447, %tag445 ], [ %.val2447, %tag28 ], [ %.val2447, %tag485 ], [ %.val2447, %header-check-br1609 ], [ %.val2447, %header-check-br1180 ]
  %.val24662500 = phi {}* [ %.val2466, %tag313.tag17_crit_edge ], [ %.val24482503, %tag445 ], [ %.val24482503, %tag28 ], [ %.val24482503, %tag485 ], [ %.val24482503, %header-check-br1609 ], [ %.val24482503, %header-check-br1180 ]
  %30 = phi i64 [ %251, %tag313.tag17_crit_edge ], [ %363, %tag445 ], [ %363, %tag28 ], [ %363, %tag485 ], [ %363, %header-check-br1609 ], [ %363, %header-check-br1180 ]
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 393), align 8
  %32 = icmp eq {}* %.in2238, %31
  %G104631.0 = select i1 %32, {}* %.val2465, {}* %.val24662500
  %33 = icmp eq {}* %G104631.0, %.val24662500
  br i1 %33, label %tag186, label %tag57

tag19:                                            ; preds = %normal-dest1085
  %G105144.0 = load {}*, {}** %G105255.0.in, align 8
  %34 = icmp eq {}* %G105144.0, %496
  br i1 %34, label %tag27, label %tag138

tag22:                                            ; preds = %tag85
  %35 = icmp eq {}* %77, %farg0
  %.val2421 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104915.0 = select i1 %35, {}* %.val2421, {}* %77
  %36 = icmp eq {}* %G104915.0, %77
  br i1 %36, label %tag7, label %tag97

tag25:                                            ; preds = %tag72
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest546 unwind label %cleanup-lpad.loopexit.split-lp

tag26:                                            ; preds = %tag134
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %40 = icmp eq {}* %x512.0, %39
  %.val2435 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104828.0 = select i1 %40, {}* %.val2435, {}* %39
  %41 = icmp eq {}* %G104828.0, %39
  br i1 %41, label %tag377, label %tag236

tag27:                                            ; preds = %tag19
  %42 = icmp eq {}* %496, %farg0
  %.val2475 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105137.0 = select i1 %42, {}* %.val2475, {}* %496
  %43 = icmp eq {}* %G105137.0, %496
  br i1 %43, label %tag167, label %tag455

tag28:                                            ; preds = %header-check-br1609, %header-check-br1609, %header-check-br1609, %header-check-br1609
  %44 = ptrtoint {}* %364 to i64
  %single-float-tag-only = and i64 %44, 7
  %45 = icmp eq i64 %single-float-tag-only, 6
  br i1 %45, label %tag17, label %tag445

tag31:                                            ; preds = %tag81, %normal-dest1911, %tag413
  %46 = phi {}* [ %.val2446, %tag413 ], [ %688, %normal-dest1911 ], [ %.val2446, %tag81 ]
  %G104761.0 = phi {}* [ %341, %tag413 ], [ %G104761.1, %normal-dest1911 ], [ %.val2446, %tag81 ]
  br i1 %consp-test831, label %tag357, label %tag341

tag34:                                            ; preds = %tag419, %normal-dest1587, %tag374
  %G104639.0 = phi {}* [ %302, %tag374 ], [ %G104639.1, %normal-dest1587 ], [ %.val2462, %tag419 ]
  %ptrtoint587 = ptrtoint {}* %183 to i64
  %entry-point-addr-uint588 = add i64 %ptrtoint587, 7
  %entry-point-addr589 = inttoptr i64 %entry-point-addr-uint588 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point590 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr589, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point590({}* %183, i64 3, {}* %555, {}* %G104638.0, {}* %G104639.0, {}* null)
          to label %normal-dest593 unwind label %cleanup-lpad.loopexit.split-lp

tag40:                                            ; preds = %tag331
  br i1 %brmerge, label %tag257, label %header-check-br1457

tag43:                                            ; preds = %tag387, %normal-dest697, %tag258
  %G105213.0 = phi {}* [ %199, %tag258 ], [ %G105213.1, %normal-dest697 ], [ %G105230.0, %tag387 ]
  %ptrtoint605 = ptrtoint {}* %109 to i64
  %entry-point-addr-uint606 = add i64 %ptrtoint605, 7
  %entry-point-addr607 = inttoptr i64 %entry-point-addr-uint606 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point608 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr607, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point608({}* %109, i64 1, {}* %G105213.0, {}* null, {}* null, {}* null)
          to label %normal-dest611 unwind label %cleanup-lpad.loopexit.split-lp

tag56:                                            ; preds = %tag268
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest643 unwind label %cleanup-lpad.loopexit

tag57:                                            ; preds = %tag17, %normal-dest1402
  %51 = phi i64 [ %578, %normal-dest1402 ], [ %30, %tag17 ]
  %52 = phi {}* [ %577, %normal-dest1402 ], [ %.val24662500, %tag17 ]
  %G104622.0 = phi {}* [ %G104622.1, %normal-dest1402 ], [ %.val2465, %tag17 ]
  %53 = icmp eq {}* %G104622.0, %52
  br i1 %53, label %tag57.tag397_crit_edge, label %tag434

tag57.tag397_crit_edge:                           ; preds = %tag57
  %.val24672481.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag397

tag66:                                            ; preds = %tag465
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %55 = icmp eq {}* %x679.0, %54
  %.val2397 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105090.0 = select i1 %55, {}* %.val2397, {}* %54
  %56 = icmp eq {}* %G105090.0, %54
  br i1 %56, label %tag92, label %tag319

tag69:                                            ; preds = %normal-dest1990
  %57 = add i64 %457, 5
  %58 = inttoptr i64 %57 to {}**
  %59 = load {}*, {}** %58, align 8
  br label %tag465

tag70:                                            ; preds = %header-check-br1457, %header-check-br1457, %header-check-br1457, %header-check-br1457
  %60 = ptrtoint {}* %.in2242 to i64
  %single-float-tag-only681 = and i64 %60, 7
  %61 = icmp eq i64 %single-float-tag-only681, 6
  br i1 %61, label %tag257, label %tag323

tag72:                                            ; preds = %tag273
  %62 = icmp eq {}* %x496.0, %.val2464
  %G104685.0 = select i1 %62, {}* %.val2455, {}* %.val2464
  %63 = icmp eq {}* %G104685.0, %.val2464
  br i1 %63, label %tag25, label %tag158

tag74:                                            ; preds = %tag387
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest689 unwind label %cleanup-lpad.loopexit.split-lp

tag75:                                            ; preds = %normal-dest1251
  %66 = add i64 %457, 5
  %67 = inttoptr i64 %66 to {}**
  %68 = load {}*, {}** %67, align 8
  br label %tag135

tag76:                                            ; preds = %tag303, %normal-dest1961, %tag358
  %G104540.0 = phi {}* [ %287, %tag358 ], [ %G104540.1, %normal-dest1961 ], [ %239, %tag303 ]
  %ptrtoint704 = ptrtoint {}* %219 to i64
  %entry-point-addr-uint705 = add i64 %ptrtoint704, 7
  %entry-point-addr706 = inttoptr i64 %entry-point-addr-uint705 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point707 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr706, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point707({}* %219, i64 1, {}* %G104540.0, {}* null, {}* null, {}* null)
          to label %normal-dest710 unwind label %cleanup-lpad.loopexit.split-lp

tag79:                                            ; preds = %tag440
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %71 = icmp eq {}* %x1102.0, %70
  %.val2453 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104705.0 = select i1 %71, {}* %.val2453, {}* %70
  %72 = icmp eq {}* %G104705.0, %70
  br i1 %72, label %tag477, label %tag273

tag81:                                            ; preds = %tag236
  %73 = icmp eq {}* %x624.0, %.val2446
  %G104808.0 = select i1 %73, {}* %.val2437, {}* %.val2446
  %74 = icmp eq {}* %G104808.0, %.val2446
  br i1 %74, label %tag460, label %tag31

tag82:                                            ; preds = %tag468
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %76 = invoke {}* @cc_safe_fdefinition({}* %75)
          to label %normal-dest725 unwind label %cleanup-lpad.loopexit.split-lp

tag85:                                            ; preds = %tag451, %normal-dest1509, %tag3
  %77 = phi {}* [ %.val2428, %tag3 ], [ %597, %normal-dest1509 ], [ %.val2428, %tag451 ]
  %G104884.0 = phi {}* [ %16, %tag3 ], [ %G104884.1, %normal-dest1509 ], [ %.val2428, %tag451 ]
  br i1 %consp-test831, label %tag437, label %tag22

tag86:                                            ; preds = %tag15, %normal-dest953, %tag140
  %G105193.0 = phi {}* [ %129, %tag140 ], [ %G105193.1, %normal-dest953 ], [ %27, %tag15 ]
  %ptrtoint745 = ptrtoint {}* %421 to i64
  %entry-point-addr-uint746 = add i64 %ptrtoint745, 7
  %entry-point-addr747 = inttoptr i64 %entry-point-addr-uint746 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point748 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr747, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point748({}* %421, i64 1, {}* %G105193.0, {}* null, {}* null, {}* null)
          to label %normal-dest751 unwind label %cleanup-lpad.loopexit.split-lp

tag88:                                            ; preds = %normal-dest1940
  %79 = add i64 %457, 5
  %80 = inttoptr i64 %79 to {}**
  %81 = load {}*, {}** %80, align 8
  br label %tag400

tag90:                                            ; preds = %normal-dest1537
  %82 = add i64 %457, 5
  %83 = inttoptr i64 %82 to {}**
  %84 = load {}*, {}** %83, align 8
  br label %tag163

tag92:                                            ; preds = %tag66
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest762 unwind label %cleanup-lpad.loopexit.split-lp

tag94:                                            ; preds = %tag246, %normal-dest791, %tag405
  %87 = phi {}* [ %.val2410, %tag405 ], [ %456, %normal-dest791 ], [ %.val2410, %tag246 ]
  %G105007.0 = phi {}* [ %338, %tag405 ], [ %G105007.1, %normal-dest791 ], [ %.val2410, %tag246 ]
  br i1 %consp-test831, label %tag379, label %tag436

tag95:                                            ; preds = %tag246
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %89 = invoke {}* @cc_safe_fdefinition({}* %88)
          to label %normal-dest783 unwind label %cleanup-lpad.loopexit.split-lp

tag97:                                            ; preds = %tag22, %normal-dest507, %tag437
  %.val2426 = phi {}* [ %77, %tag437 ], [ %406, %normal-dest507 ], [ %77, %tag22 ]
  %x508.0 = phi {}* [ %360, %tag437 ], [ %x508.1, %normal-dest507 ], [ %77, %tag22 ]
  %90 = ptrtoint {}* %x508.0 to i64
  %tag-only8002119 = and i64 %90, 7
  %consp-test801 = icmp eq i64 %tag-only8002119, 3
  %.val2423 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104902.0 = select i1 %consp-test801, {}* %.val2423, {}* %.val2426
  %91 = icmp eq {}* %G104902.0, %.val2426
  br i1 %91, label %tag366, label %tag272

tag102:                                           ; preds = %normal-dest1251
  %92 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %93 = icmp eq {}* %92, %farg0
  %.val2449 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104737.0 = select i1 %93, {}* %.val2449, {}* %92
  %94 = icmp eq {}* %G104737.0, %92
  br i1 %94, label %tag215, label %tag135

tag104:                                           ; preds = %normal-dest
  %95 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 419), align 8
  %96 = invoke {}* @cc_safe_fdefinition({}* %95)
          to label %normal-dest823 unwind label %cleanup-lpad.loopexit.split-lp

tag111:                                           ; preds = %tag425
  %97 = icmp eq {}* %x876.0, %.val2444
  %G104772.0 = select i1 %97, {}* %.val2441, {}* %.val2444
  %98 = icmp eq {}* %G104772.0, %.val2444
  br i1 %98, label %tag352, label %tag164

tag116:                                           ; preds = %tag319
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %100 = icmp eq {}* %x770.0, %99
  %.val2399 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105074.0 = select i1 %100, {}* %.val2399, {}* %99
  %101 = icmp eq {}* %G105074.0, %99
  br i1 %101, label %tag363, label %tag278

tag118:                                           ; preds = %tag158
  %102 = add i64 %457, 5
  %103 = inttoptr i64 %102 to {}**
  %104 = load {}*, {}** %103, align 8
  br label %tag383

tag119:                                           ; preds = %tag319
  %105 = add i64 %253, 5
  %106 = inttoptr i64 %105 to {}**
  %107 = load {}*, {}** %106, align 8
  %.val2402.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag278

tag122:                                           ; preds = %normal-dest1085
  %108 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %109 = invoke {}* @cc_safe_fdefinition({}* %108)
          to label %normal-dest878 unwind label %cleanup-lpad.loopexit.split-lp

tag123:                                           ; preds = %tag325
  %110 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %111 = icmp eq {}* %x907.0, %110
  %.val2417 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104951.0 = select i1 %111, {}* %.val2417, {}* %110
  %112 = icmp eq {}* %G104951.0, %110
  br i1 %112, label %tag420, label %tag129

tag127:                                           ; preds = %tag163
  %113 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %114 = icmp eq {}* %x760.0, %113
  %.val2433 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104844.0 = select i1 %114, {}* %.val2433, {}* %113
  %115 = icmp eq {}* %G104844.0, %113
  br i1 %115, label %tag389, label %tag134

tag129:                                           ; preds = %tag123, %normal-dest1834, %tag159
  %.val2428 = phi {}* [ %.val2420.pre, %tag159 ], [ %682, %normal-dest1834 ], [ %110, %tag123 ]
  %x914.0 = phi {}* [ %142, %tag159 ], [ %x914.1, %normal-dest1834 ], [ %110, %tag123 ]
  %116 = ptrtoint {}* %x914.0 to i64
  %tag-only9172117 = and i64 %116, 7
  %consp-test918 = icmp eq i64 %tag-only9172117, 3
  %.val2419 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104938.0 = select i1 %consp-test918, {}* %.val2419, {}* %.val2428
  %117 = icmp eq {}* %G104938.0, %.val2428
  br i1 %117, label %tag451, label %tag3

tag131:                                           ; preds = %tag178
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %119 = invoke {}* @cc_safe_fdefinition({}* %118)
          to label %normal-dest920 unwind label %cleanup-lpad.loopexit.split-lp

tag134:                                           ; preds = %tag127, %normal-dest1712, %tag12
  %x512.0 = phi {}* [ %26, %tag12 ], [ %x512.1, %normal-dest1712 ], [ %113, %tag127 ]
  %120 = ptrtoint {}* %x512.0 to i64
  %tag-only9332150 = and i64 %120, 7
  %consp-test934 = icmp eq i64 %tag-only9332150, 3
  br i1 %consp-test934, label %tag305, label %tag26

tag135:                                           ; preds = %tag102, %normal-dest1144, %tag75
  %x530.0 = phi {}* [ %68, %tag75 ], [ %x530.1, %normal-dest1144 ], [ %92, %tag102 ]
  %121 = ptrtoint {}* %x530.0 to i64
  %tag-only9362183 = and i64 %121, 7
  %consp-test937 = icmp eq i64 %tag-only9362183, 3
  br i1 %consp-test937, label %tag297, label %tag149

tag137:                                           ; preds = %tag15
  %122 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %123 = invoke {}* @cc_safe_fdefinition({}* %122)
          to label %normal-dest946 unwind label %cleanup-lpad.loopexit.split-lp

tag138:                                           ; preds = %tag19
  %124 = add i64 %457, -3
  %125 = inttoptr i64 %124 to {}**
  %126 = load {}*, {}** %125, align 8
  br label %tag455

tag140:                                           ; preds = %normal-dest618
  %127 = add i64 %457, 5
  %128 = inttoptr i64 %127 to {}**
  %129 = load {}*, {}** %128, align 8
  br label %tag86

tag142:                                           ; preds = %normal-dest1041
  %130 = icmp eq {}* %G104496.0, %.val2388
  %G105167.0 = select i1 %130, {}* %.val2387, {}* %.val2388
  %131 = icmp eq {}* %G105167.0, %.val2388
  br i1 %131, label %tag187, label %tag395

tag146:                                           ; preds = %tag366, %normal-dest1287, %tag272
  %G104885.0 = phi {}* [ %210, %tag272 ], [ %G104885.1, %normal-dest1287 ], [ %.val2426, %tag366 ]
  %ptrtoint969 = ptrtoint {}* %390 to i64
  %entry-point-addr-uint970 = add i64 %ptrtoint969, 7
  %entry-point-addr971 = inttoptr i64 %entry-point-addr-uint970 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point972 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr971, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point972({}* %390, i64 3, {}* %690, {}* %G104884.0, {}* %G104885.0, {}* null)
          to label %normal-dest975 unwind label %cleanup-lpad.loopexit.split-lp

tag148:                                           ; preds = %tag454
  %133 = ptrtoint {}* %G104495.0 to i64
  br label %tag434

tag149:                                           ; preds = %tag135
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %135 = icmp eq {}* %x530.0, %134
  %.val2451 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104721.0 = select i1 %135, {}* %.val2451, {}* %134
  %136 = icmp eq {}* %G104721.0, %134
  br i1 %136, label %tag194, label %tag440

tag155:                                           ; preds = %header-check-br1383, %header-check-br1383, %header-check-br1383, %header-check-br1383
  %137 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %138 = invoke {}* @cc_safe_fdefinition({}* %137)
          to label %normal-dest986 unwind label %cleanup-lpad.loopexit.split-lp

tag158:                                           ; preds = %tag72, %normal-dest554, %tag381
  %139 = phi {}* [ %.val2464, %tag381 ], [ %412, %normal-dest554 ], [ %.val2464, %tag72 ]
  %G104638.0 = phi {}* [ %312, %tag381 ], [ %G104638.1, %normal-dest554 ], [ %.val2464, %tag72 ]
  br i1 %consp-test831, label %tag118, label %tag468

tag159:                                           ; preds = %tag325
  %140 = add i64 %254, 5
  %141 = inttoptr i64 %140 to {}**
  %142 = load {}*, {}** %141, align 8
  %.val2420.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag129

tag163:                                           ; preds = %tag261, %normal-dest1752, %tag90
  %x760.0 = phi {}* [ %84, %tag90 ], [ %x760.1, %normal-dest1752 ], [ %200, %tag261 ]
  %143 = ptrtoint {}* %x760.0 to i64
  %tag-only10082149 = and i64 %143, 7
  %consp-test1009 = icmp eq i64 %tag-only10082149, 3
  br i1 %consp-test1009, label %tag12, label %tag127

tag164:                                           ; preds = %tag111, %normal-dest1572, %tag185
  %G104762.0 = phi {}* [ %153, %tag185 ], [ %G104762.1, %normal-dest1572 ], [ %.val2444, %tag111 ]
  %ptrtoint1010 = ptrtoint {}* %277 to i64
  %entry-point-addr-uint1011 = add i64 %ptrtoint1010, 7
  %entry-point-addr1012 = inttoptr i64 %entry-point-addr-uint1011 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1013 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1012, align 8
  %144 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1013({}* %277, i64 3, {}* %598, {}* %G104761.0, {}* %G104762.0, {}* null)
          to label %normal-dest1016 unwind label %cleanup-lpad.loopexit.split-lp

tag167:                                           ; preds = %tag27
  %145 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %146 = invoke {}* @cc_safe_fdefinition({}* %145)
          to label %normal-dest1018 unwind label %cleanup-lpad.loopexit.split-lp

tag174:                                           ; preds = %tag454
  %147 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %148 = invoke {}* @cc_safe_fdefinition({}* %147)
          to label %normal-dest1039 unwind label %cleanup-lpad.loopexit.split-lp

tag178:                                           ; preds = %normal-dest823
  %149 = icmp eq {}* %G105255.0, %farg0
  %.val2477 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105248.0 = select i1 %149, {}* %.val2477, {}* %G105255.0
  %150 = icmp eq {}* %G105248.0, %G105255.0
  br i1 %150, label %tag131, label %tag192

tag185:                                           ; preds = %tag425
  %151 = add i64 %349, -3
  %152 = inttoptr i64 %151 to {}**
  %153 = load {}*, {}** %152, align 8
  br label %tag164

tag186:                                           ; preds = %tag17
  %154 = ptrtoint {}* %.in2238 to i64
  %single-float-tag-only1062 = and i64 %154, 7
  %fixnum-tag-only11332251 = and i64 %154, 3
  %fixnump-test1134 = icmp ne i64 %fixnum-tag-only11332251, 0
  %test1799 = icmp eq i64 %single-float-tag-only1062, 1
  %or.cond2379 = and i1 %fixnump-test1134, %test1799
  br i1 %or.cond2379, label %header-check-br1796, label %tag397

tag187:                                           ; preds = %tag142
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %156 = invoke {}* @cc_safe_fdefinition({}* %155)
          to label %normal-dest1064 unwind label %cleanup-lpad.loopexit.split-lp

tag189:                                           ; preds = %header-check-br1173, %header-check-br1173, %header-check-br1173, %header-check-br1173
  %157 = ptrtoint {}* %379 to i64
  %single-float-tag-only1078 = and i64 %157, 7
  %158 = icmp eq i64 %single-float-tag-only1078, 6
  br i1 %158, label %tag449, label %tag447

tag192:                                           ; preds = %tag178, %normal-dest927, %tag469
  %G105238.0 = phi {}* [ %388, %tag469 ], [ %G105238.1, %normal-dest927 ], [ %G105255.0, %tag178 ]
  %ptrtoint1079 = ptrtoint {}* %96 to i64
  %entry-point-addr-uint1080 = add i64 %ptrtoint1079, 7
  %entry-point-addr1081 = inttoptr i64 %entry-point-addr-uint1080 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1082 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1081, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1082({}* %96, i64 1, {}* %G105238.0, {}* null, {}* null, {}* null)
          to label %normal-dest1085 unwind label %cleanup-lpad.loopexit.split-lp

tag193:                                           ; preds = %tag5
  %160 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %161 = invoke {}* @cc_safe_fdefinition({}* %160)
          to label %normal-dest1092 unwind label %cleanup-lpad.loopexit.split-lp

tag194:                                           ; preds = %tag149
  %162 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %163 = invoke {}* @cc_safe_fdefinition({}* %162)
          to label %normal-dest1094 unwind label %cleanup-lpad.loopexit.split-lp

tag195:                                           ; preds = %tag274, %normal-dest1814
  %164 = phi i64 [ %676, %normal-dest1814 ], [ %213, %tag274 ]
  %.val2430 = phi {}* [ %675, %normal-dest1814 ], [ %.val24122502, %tag274 ]
  %G104991.0 = phi {}* [ %G104991.1, %normal-dest1814 ], [ %.val2411, %tag274 ]
  %165 = icmp eq {}* %G104991.0, %.val2430
  br i1 %165, label %tag195.tag462_crit_edge, label %tag471

tag195.tag462_crit_edge:                          ; preds = %tag195
  %.val2429.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag462

tag201:                                           ; preds = %tag308
  %166 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %167 = invoke {}* @cc_safe_fdefinition({}* %166)
          to label %normal-dest1116 unwind label %cleanup-lpad.loopexit.split-lp

tag202:                                           ; preds = %tag400
  %168 = add i64 %333, 5
  %169 = inttoptr i64 %168 to {}**
  %170 = load {}*, {}** %169, align 8
  br label %tag325

tag204:                                           ; preds = %tag330
  %fixnum-tag-only11302283 = and i64 %258, 3
  %fixnump-test1131 = icmp ne i64 %fixnum-tag-only11302283, 0
  %test583 = icmp eq i64 %single-float-tag-only1494, 1
  %or.cond2365 = and i1 %fixnump-test1131, %test583
  br i1 %or.cond2365, label %header-check-br580, label %tag274

tag215:                                           ; preds = %tag102
  %171 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %172 = invoke {}* @cc_safe_fdefinition({}* %171)
          to label %normal-dest1137 unwind label %cleanup-lpad.loopexit.split-lp

tag218:                                           ; preds = %tag327
  %173 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %174 = invoke {}* @cc_safe_fdefinition({}* %173)
          to label %normal-dest1151 unwind label %cleanup-lpad.loopexit.split-lp

tag228:                                           ; preds = %tag364
  %175 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %176 = invoke {}* @cc_safe_fdefinition({}* %175)
          to label %normal-dest1195 unwind label %cleanup-lpad.loopexit.split-lp

tag232:                                           ; preds = %normal-dest751
  %177 = ptrtoint {}* %G104496.0 to i64
  br label %tag434

tag234:                                           ; preds = %tag341
  %178 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %179 = invoke {}* @cc_safe_fdefinition({}* %178)
          to label %normal-dest1226 unwind label %cleanup-lpad.loopexit.split-lp

tag236:                                           ; preds = %tag26, %normal-dest1672, %tag305
  %.val2446 = phi {}* [ %.val2438.pre, %tag305 ], [ %634, %normal-dest1672 ], [ %39, %tag26 ]
  %x624.0 = phi {}* [ %244, %tag305 ], [ %x624.1, %normal-dest1672 ], [ %39, %tag26 ]
  %180 = ptrtoint {}* %x624.0 to i64
  %tag-only12482151 = and i64 %180, 7
  %consp-test1249 = icmp eq i64 %tag-only12482151, 3
  %.val2437 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104815.0 = select i1 %consp-test1249, {}* %.val2437, {}* %.val2446
  %181 = icmp eq {}* %G104815.0, %.val2446
  br i1 %181, label %tag81, label %tag413

tag238:                                           ; preds = %tag313
  %182 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %183 = invoke {}* @cc_safe_fdefinition({}* %182)
          to label %normal-dest1251 unwind label %cleanup-lpad.loopexit.split-lp

tag246:                                           ; preds = %tag278
  %184 = icmp eq {}* %x641.0, %.val2410
  %G105054.0 = select i1 %184, {}* %.val2401, {}* %.val2410
  %185 = icmp eq {}* %G105054.0, %.val2410
  br i1 %185, label %tag95, label %tag94

tag247:                                           ; preds = %tag366
  %186 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %187 = invoke {}* @cc_safe_fdefinition({}* %186)
          to label %normal-dest1280 unwind label %cleanup-lpad.loopexit.split-lp

tag250:                                           ; preds = %tag274
  %188 = ptrtoint {}* %.in2238 to i64
  %single-float-tag-only1294 = and i64 %188, 7
  %fixnum-tag-only2275 = and i64 %188, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only2275, 0
  %test1212 = icmp eq i64 %single-float-tag-only1294, 1
  %or.cond2370 = and i1 %fixnump-test, %test1212
  br i1 %or.cond2370, label %header-check-br1209, label %tag462

tag257:                                           ; preds = %tag372.tag257_crit_edge, %header-check-br1457, %header-check-br1298, %tag40, %tag70, %tag323
  %.val2467 = phi {}* [ %.val2467.pre, %tag372.tag257_crit_edge ], [ %261, %tag323 ], [ %261, %tag70 ], [ %261, %tag40 ], [ %261, %header-check-br1298 ], [ %261, %header-check-br1457 ]
  %189 = phi {}* [ %298, %tag372.tag257_crit_edge ], [ %.val2472, %tag323 ], [ %.val2472, %tag70 ], [ %.val2472, %tag40 ], [ %.val2472, %header-check-br1298 ], [ %.val2472, %header-check-br1457 ]
  %190 = phi i64 [ %297, %tag372.tag257_crit_edge ], [ %260, %tag323 ], [ %260, %tag70 ], [ %260, %tag40 ], [ %260, %header-check-br1298 ], [ %260, %header-check-br1457 ]
  %191 = add i64 %21, 5
  %192 = inttoptr i64 %191 to {}**
  %193 = load {}*, {}** %192, align 8
  %194 = icmp eq {}* %193, %189
  %object.0 = select i1 %194, {}* %.val2467, {}* %189
  %195 = icmp eq {}* %object.0, %189
  %G104563.0 = select i1 %195, {}* %.val2467, {}* %189
  %196 = icmp eq {}* %G104563.0, %189
  br i1 %196, label %tag277, label %tag5

tag258:                                           ; preds = %normal-dest878
  %197 = add i64 %457, -3
  %198 = inttoptr i64 %197 to {}**
  %199 = load {}*, {}** %198, align 8
  br label %tag43

tag261:                                           ; preds = %normal-dest1537
  %200 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %201 = icmp eq {}* %200, %farg0
  %.val2431 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104860.0 = select i1 %201, {}* %.val2431, {}* %200
  %202 = icmp eq {}* %G104860.0, %200
  br i1 %202, label %tag396, label %tag163

tag263:                                           ; preds = %tag465
  %203 = add i64 %382, 5
  %204 = inttoptr i64 %203 to {}**
  %205 = load {}*, {}** %204, align 8
  br label %tag319

tag265:                                           ; preds = %header-check-br580, %header-check-br580, %header-check-br580, %header-check-br580
  %206 = ptrtoint {}* %373 to i64
  %single-float-tag-only1311 = and i64 %206, 7
  %207 = icmp eq i64 %single-float-tag-only1311, 6
  br i1 %207, label %tag274, label %tag458

tag268:                                           ; preds = %tag422
  br i1 %18, label %tag56, label %tag331

tag272:                                           ; preds = %tag97
  %208 = add i64 %90, -3
  %209 = inttoptr i64 %208 to {}**
  %210 = load {}*, {}** %209, align 8
  br label %tag146

tag273:                                           ; preds = %tag79, %normal-dest1975, %tag1
  %.val2464 = phi {}* [ %.val2456.pre, %tag1 ], [ %702, %normal-dest1975 ], [ %70, %tag79 ]
  %x496.0 = phi {}* [ %13, %tag1 ], [ %x496.1, %normal-dest1975 ], [ %70, %tag79 ]
  %211 = ptrtoint {}* %x496.0 to i64
  %tag-only13412185 = and i64 %211, 7
  %consp-test1342 = icmp eq i64 %tag-only13412185, 3
  %.val2455 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104692.0 = select i1 %consp-test1342, {}* %.val2455, {}* %.val2464
  %212 = icmp eq {}* %G104692.0, %.val2464
  br i1 %212, label %tag72, label %tag381

tag274:                                           ; preds = %tag380.tag274_crit_edge, %header-check-br580, %header-check-br1383, %tag265, %tag458, %tag204, %tag330
  %.val2411 = phi {}* [ %.val2411.pre, %tag380.tag274_crit_edge ], [ %.val2393, %tag330 ], [ %.val2393, %tag204 ], [ %.val2393, %tag458 ], [ %.val2393, %tag265 ], [ %.val2393, %header-check-br1383 ], [ %.val2393, %header-check-br580 ]
  %.val24122502 = phi {}* [ %.val2412, %tag380.tag274_crit_edge ], [ %.val2394, %tag330 ], [ %.val2394, %tag204 ], [ %.val2394, %tag458 ], [ %.val2394, %tag265 ], [ %.val2394, %header-check-br1383 ], [ %.val2394, %header-check-br580 ]
  %213 = phi i64 [ %308, %tag380.tag274_crit_edge ], [ %371, %tag330 ], [ %371, %tag204 ], [ %371, %tag458 ], [ %371, %tag265 ], [ %371, %header-check-br1383 ], [ %371, %header-check-br580 ]
  %214 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 431), align 8
  %215 = icmp eq {}* %.in2238, %214
  %G105000.0 = select i1 %215, {}* %.val2411, {}* %.val24122502
  %216 = icmp eq {}* %G105000.0, %.val24122502
  br i1 %216, label %tag250, label %tag195

tag275:                                           ; preds = %normal-dest1603, %normal-dest1738
  %G105150.0 = phi {}* [ %G104496.0, %normal-dest1738 ], [ %G105150.1, %normal-dest1603 ]
  %ptrtoint1350 = ptrtoint {}* %148 to i64
  %entry-point-addr-uint1351 = add i64 %ptrtoint1350, 7
  %entry-point-addr1352 = inttoptr i64 %entry-point-addr-uint1351 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1353 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1352, align 8
  %217 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1353({}* %148, i64 2, {}* %G104495.0, {}* %G105150.0, {}* null, {}* null)
          to label %normal-dest1356 unwind label %cleanup-lpad.loopexit.split-lp

tag277:                                           ; preds = %tag257, %tag397, %tag370
  %218 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %219 = invoke {}* @cc_safe_fdefinition({}* %218)
          to label %normal-dest1358 unwind label %cleanup-lpad.loopexit.split-lp

tag278:                                           ; preds = %tag116, %normal-dest1624, %tag119
  %.val2410 = phi {}* [ %.val2402.pre, %tag119 ], [ %623, %normal-dest1624 ], [ %99, %tag116 ]
  %x641.0 = phi {}* [ %107, %tag119 ], [ %x641.1, %normal-dest1624 ], [ %99, %tag116 ]
  %220 = ptrtoint {}* %x641.0 to i64
  %tag-only13672083 = and i64 %220, 7
  %consp-test1368 = icmp eq i64 %tag-only13672083, 3
  %.val2401 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105061.0 = select i1 %consp-test1368, {}* %.val2401, {}* %.val2410
  %221 = icmp eq {}* %G105061.0, %.val2410
  br i1 %221, label %tag246, label %tag405

tag279:                                           ; preds = %header-check-br1298, %header-check-br1298, %header-check-br1298, %header-check-br1298
  %222 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %223 = invoke {}* @cc_safe_fdefinition({}* %222)
          to label %normal-dest1370 unwind label %cleanup-lpad.loopexit

tag282:                                           ; preds = %normal-dest1041
  %224 = add i64 %488, -3
  %225 = inttoptr i64 %224 to {}**
  %226 = load {}*, {}** %225, align 8
  br label %tag395

tag285:                                           ; preds = %tag422
  %227 = add i64 %21, -3
  %228 = inttoptr i64 %227 to {}**
  %229 = load {}*, {}** %228, align 8
  br label %tag331

tag290:                                           ; preds = %header-check-br1758, %header-check-br1758, %header-check-br1758, %header-check-br1758
  %230 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %231 = invoke {}* @cc_safe_fdefinition({}* %230)
          to label %normal-dest1395 unwind label %cleanup-lpad.loopexit.split-lp

tag291:                                           ; preds = %header-check-br1649, %header-check-br1649, %header-check-br1649, %header-check-br1649
  %232 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %233 = invoke {}* @cc_safe_fdefinition({}* %232)
          to label %normal-dest1409 unwind label %cleanup-lpad.loopexit.split-lp

tag292:                                           ; preds = %header-check-br1796, %header-check-br1796, %header-check-br1796, %header-check-br1796
  %234 = ptrtoint {}* %31 to i64
  %single-float-tag-only1423 = and i64 %234, 7
  %fixnum-tag-only5202253 = and i64 %234, 3
  %fixnump-test521 = icmp ne i64 %fixnum-tag-only5202253, 0
  %test1761 = icmp eq i64 %single-float-tag-only1423, 1
  %or.cond2378 = and i1 %fixnump-test521, %test1761
  br i1 %or.cond2378, label %header-check-br1758, label %tag397

tag297:                                           ; preds = %tag135
  %235 = add i64 %121, 5
  %236 = inttoptr i64 %235 to {}**
  %237 = load {}*, {}** %236, align 8
  br label %tag440

tag301:                                           ; preds = %header-check-br1209, %header-check-br1209, %header-check-br1209, %header-check-br1209
  %238 = ptrtoint {}* %214 to i64
  %single-float-tag-only1427 = and i64 %238, 7
  %fixnum-tag-only5942277 = and i64 %238, 3
  %fixnump-test595 = icmp ne i64 %fixnum-tag-only5942277, 0
  %test1431 = icmp eq i64 %single-float-tag-only1427, 1
  %or.cond2374 = and i1 %fixnump-test595, %test1431
  br i1 %or.cond2374, label %header-check-br1428, label %tag462

tag303:                                           ; preds = %normal-dest1358
  %239 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %240 = icmp eq {}* %239, %farg0
  %.val2473 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104551.0 = select i1 %240, {}* %.val2473, {}* %239
  %241 = icmp eq {}* %G104551.0, %239
  br i1 %241, label %tag474, label %tag76

tag305:                                           ; preds = %tag134
  %242 = add i64 %120, 5
  %243 = inttoptr i64 %242 to {}**
  %244 = load {}*, {}** %243, align 8
  %.val2438.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag236

tag308:                                           ; preds = %tag400
  %245 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %246 = icmp eq {}* %x633.0, %245
  %.val2415 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104967.0 = select i1 %246, {}* %.val2415, {}* %245
  %247 = icmp eq {}* %G104967.0, %245
  br i1 %247, label %tag201, label %tag325

tag312:                                           ; preds = %tag334
  %248 = add i64 %267, -3
  %249 = inttoptr i64 %248 to {}**
  %250 = load {}*, {}** %249, align 8
  br label %tag466

tag313:                                           ; preds = %tag449, %normal-dest1776
  %251 = phi i64 [ %668, %normal-dest1776 ], [ %363, %tag449 ]
  %.val2466 = phi {}* [ %667, %normal-dest1776 ], [ %.val24482503, %tag449 ]
  %G104745.0 = phi {}* [ %G104745.1, %normal-dest1776 ], [ %.val2447, %tag449 ]
  %252 = icmp eq {}* %G104745.0, %.val2466
  br i1 %252, label %tag313.tag17_crit_edge, label %tag238

tag313.tag17_crit_edge:                           ; preds = %tag313
  %.val2465.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag17

tag319:                                           ; preds = %tag66, %normal-dest769, %tag263
  %x770.0 = phi {}* [ %205, %tag263 ], [ %x770.1, %normal-dest769 ], [ %54, %tag66 ]
  %253 = ptrtoint {}* %x770.0 to i64
  %tag-only14642082 = and i64 %253, 7
  %consp-test1465 = icmp eq i64 %tag-only14642082, 3
  br i1 %consp-test1465, label %tag119, label %tag116

tag323:                                           ; preds = %tag70
  %fixnum-tag-only14752239 = and i64 %60, 3
  %fixnump-test1476 = icmp ne i64 %fixnum-tag-only14752239, 0
  %test1301 = icmp eq i64 %single-float-tag-only681, 1
  %or.cond2372 = and i1 %fixnump-test1476, %test1301
  br i1 %or.cond2372, label %header-check-br1298, label %tag257

tag325:                                           ; preds = %tag308, %normal-dest1124, %tag202
  %x907.0 = phi {}* [ %170, %tag202 ], [ %x907.1, %normal-dest1124 ], [ %245, %tag308 ]
  %254 = ptrtoint {}* %x907.0 to i64
  %tag-only14842116 = and i64 %254, 7
  %consp-test1485 = icmp eq i64 %tag-only14842116, 3
  br i1 %consp-test1485, label %tag159, label %tag123

tag327:                                           ; preds = %normal-dest1940
  %255 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %256 = icmp eq {}* %255, %farg0
  %.val2413 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104983.0 = select i1 %256, {}* %.val2413, {}* %255
  %257 = icmp eq {}* %G104983.0, %255
  br i1 %257, label %tag218, label %tag400

tag330:                                           ; preds = %tag455
  %258 = ptrtoint {}* %.in2238 to i64
  %single-float-tag-only1494 = and i64 %258, 7
  %259 = icmp eq i64 %single-float-tag-only1494, 6
  br i1 %259, label %tag274, label %tag204

tag331:                                           ; preds = %tag268, %normal-dest651, %tag285
  %260 = phi i64 [ %17, %tag285 ], [ %428, %normal-dest651 ], [ %17, %tag268 ]
  %.val2472 = phi {}* [ %19, %tag285 ], [ %427, %normal-dest651 ], [ %G104617.0, %tag268 ]
  %261 = phi {}* [ %G104617.0, %tag285 ], [ %.val2471.pre, %normal-dest651 ], [ %G104617.0, %tag268 ]
  %.in2242 = phi {}* [ %229, %tag285 ], [ %.in2241, %normal-dest651 ], [ %G104617.0, %tag268 ]
  %262 = bitcast {}* %.in2242 to i8*
  %263 = icmp eq {}* %.in2238, %.in2242
  %G104597.0 = select i1 %263, {}* %261, {}* %.val2472
  %264 = icmp eq {}* %G104597.0, %.val2472
  br i1 %264, label %tag40, label %tag372

tag332:                                           ; preds = %tag451
  %265 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %266 = invoke {}* @cc_safe_fdefinition({}* %265)
          to label %normal-dest1502 unwind label %cleanup-lpad.loopexit.split-lp

tag334:                                           ; preds = %tag436, %normal-dest1726, %tag379
  %.val2408 = phi {}* [ %87, %tag379 ], [ %652, %normal-dest1726 ], [ %87, %tag436 ]
  %x968.0 = phi {}* [ %307, %tag379 ], [ %x968.1, %normal-dest1726 ], [ %87, %tag436 ]
  %267 = ptrtoint {}* %x968.0 to i64
  %tag-only15172085 = and i64 %267, 7
  %consp-test1518 = icmp eq i64 %tag-only15172085, 3
  %.val2405 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105025.0 = select i1 %consp-test1518, {}* %.val2405, {}* %.val2408
  %268 = icmp eq {}* %G105025.0, %.val2408
  br i1 %268, label %tag364, label %tag312

tag335:                                           ; preds = %tag462
  %269 = ptrtoint {}* %.in2238 to i64
  %single-float-tag-only1519 = and i64 %269, 7
  %270 = icmp eq i64 %single-float-tag-only1519, 6
  br i1 %270, label %tag449, label %tag453

tag337:                                           ; preds = %normal-dest1990
  %271 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %272 = icmp eq {}* %271, %farg0
  %.val2395 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105106.0 = select i1 %272, {}* %.val2395, {}* %271
  %273 = icmp eq {}* %G105106.0, %271
  br i1 %273, label %tag386, label %tag465

tag341:                                           ; preds = %tag31
  %274 = icmp eq {}* %46, %farg0
  %.val2439 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104792.0 = select i1 %274, {}* %.val2439, {}* %46
  %275 = icmp eq {}* %G104792.0, %46
  br i1 %275, label %tag234, label %tag425

tag345:                                           ; preds = %tag430
  %276 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %277 = invoke {}* @cc_safe_fdefinition({}* %276)
          to label %normal-dest1537 unwind label %cleanup-lpad.loopexit.split-lp

tag352:                                           ; preds = %tag111
  %278 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %279 = invoke {}* @cc_safe_fdefinition({}* %278)
          to label %normal-dest1565 unwind label %cleanup-lpad.loopexit.split-lp

tag354:                                           ; preds = %tag419
  %280 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %281 = invoke {}* @cc_safe_fdefinition({}* %280)
          to label %normal-dest1579 unwind label %cleanup-lpad.loopexit.split-lp

tag357:                                           ; preds = %tag31
  %282 = add i64 %457, 5
  %283 = inttoptr i64 %282 to {}**
  %284 = load {}*, {}** %283, align 8
  br label %tag425

tag358:                                           ; preds = %normal-dest1358
  %285 = add i64 %457, 5
  %286 = inttoptr i64 %285 to {}**
  %287 = load {}*, {}** %286, align 8
  br label %tag76

tag359:                                           ; preds = %normal-dest1738
  %288 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %289 = invoke {}* @cc_safe_fdefinition({}* %288)
          to label %normal-dest1596 unwind label %cleanup-lpad.loopexit.split-lp

tag363:                                           ; preds = %tag116
  %290 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %291 = invoke {}* @cc_safe_fdefinition({}* %290)
          to label %normal-dest1617 unwind label %cleanup-lpad.loopexit.split-lp

tag364:                                           ; preds = %tag334
  %292 = icmp eq {}* %x968.0, %.val2408
  %G105018.0 = select i1 %292, {}* %.val2405, {}* %.val2408
  %293 = icmp eq {}* %G105018.0, %.val2408
  br i1 %293, label %tag228, label %tag466

tag366:                                           ; preds = %tag97
  %294 = icmp eq {}* %x508.0, %.val2426
  %G104895.0 = select i1 %294, {}* %.val2423, {}* %.val2426
  %295 = icmp eq {}* %G104895.0, %.val2426
  br i1 %295, label %tag247, label %tag146

tag370:                                           ; preds = %tag372
  %296 = icmp eq {}* %20, %298
  br i1 %296, label %tag277, label %tag434

tag372:                                           ; preds = %tag331, %normal-dest1377
  %297 = phi i64 [ %570, %normal-dest1377 ], [ %260, %tag331 ]
  %298 = phi {}* [ %569, %normal-dest1377 ], [ %.val2472, %tag331 ]
  %G104588.0 = phi {}* [ %G104588.1, %normal-dest1377 ], [ %261, %tag331 ]
  %299 = icmp eq {}* %G104588.0, %298
  br i1 %299, label %tag372.tag257_crit_edge, label %tag370

tag372.tag257_crit_edge:                          ; preds = %tag372
  %.val2467.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag257

tag374:                                           ; preds = %tag383
  %300 = add i64 %313, -3
  %301 = inttoptr i64 %300 to {}**
  %302 = load {}*, {}** %301, align 8
  br label %tag34

tag377:                                           ; preds = %tag26
  %303 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %304 = invoke {}* @cc_safe_fdefinition({}* %303)
          to label %normal-dest1665 unwind label %cleanup-lpad.loopexit.split-lp

tag379:                                           ; preds = %tag94
  %305 = add i64 %457, 5
  %306 = inttoptr i64 %305 to {}**
  %307 = load {}*, {}** %306, align 8
  br label %tag334

tag380:                                           ; preds = %tag455, %normal-dest995
  %308 = phi i64 [ %477, %normal-dest995 ], [ %371, %tag455 ]
  %.val2412 = phi {}* [ %476, %normal-dest995 ], [ %.val2394, %tag455 ]
  %G105114.0 = phi {}* [ %G105114.1, %normal-dest995 ], [ %.val2393, %tag455 ]
  %309 = icmp eq {}* %G105114.0, %.val2412
  br i1 %309, label %tag380.tag274_crit_edge, label %tag487

tag380.tag274_crit_edge:                          ; preds = %tag380
  %.val2411.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag274

tag381:                                           ; preds = %tag273
  %310 = add i64 %211, -3
  %311 = inttoptr i64 %310 to {}**
  %312 = load {}*, {}** %311, align 8
  br label %tag158

tag383:                                           ; preds = %tag468, %normal-dest733, %tag118
  %.val2462 = phi {}* [ %139, %tag118 ], [ %441, %normal-dest733 ], [ %139, %tag468 ]
  %x734.0 = phi {}* [ %104, %tag118 ], [ %x734.1, %normal-dest733 ], [ %139, %tag468 ]
  %313 = ptrtoint {}* %x734.0 to i64
  %tag-only16822187 = and i64 %313, 7
  %consp-test1683 = icmp eq i64 %tag-only16822187, 3
  %.val2459 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104656.0 = select i1 %consp-test1683, {}* %.val2459, {}* %.val2462
  %314 = icmp eq {}* %G104656.0, %.val2462
  br i1 %314, label %tag419, label %tag374

tag386:                                           ; preds = %tag337
  %315 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %316 = invoke {}* @cc_safe_fdefinition({}* %315)
          to label %normal-dest1685 unwind label %cleanup-lpad.loopexit.split-lp

tag387:                                           ; preds = %normal-dest878
  %317 = icmp eq {}* %G105230.0, %farg0
  %.val2391 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105223.0 = select i1 %317, {}* %.val2391, {}* %G105230.0
  %318 = icmp eq {}* %G105223.0, %G105230.0
  br i1 %318, label %tag74, label %tag43

tag389:                                           ; preds = %tag127
  %319 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %320 = invoke {}* @cc_safe_fdefinition({}* %319)
          to label %normal-dest1705 unwind label %cleanup-lpad.loopexit.split-lp

tag391:                                           ; preds = %tag436
  %321 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %322 = invoke {}* @cc_safe_fdefinition({}* %321)
          to label %normal-dest1719 unwind label %cleanup-lpad.loopexit.split-lp

tag395:                                           ; preds = %tag142, %normal-dest1071, %tag282
  %G105157.0 = phi {}* [ %226, %tag282 ], [ %G105157.1, %normal-dest1071 ], [ %.val2388, %tag142 ]
  %ptrtoint1732 = ptrtoint {}* %487 to i64
  %entry-point-addr-uint1733 = add i64 %ptrtoint1732, 7
  %entry-point-addr1734 = inttoptr i64 %entry-point-addr-uint1733 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1735 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1734, align 8
  %323 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1735({}* %487, i64 1, {}* %G105157.0, {}* null, {}* null, {}* null)
          to label %normal-dest1738 unwind label %cleanup-lpad.loopexit.split-lp

tag396:                                           ; preds = %tag261
  %324 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %325 = invoke {}* @cc_safe_fdefinition({}* %324)
          to label %normal-dest1745 unwind label %cleanup-lpad.loopexit.split-lp

tag397:                                           ; preds = %tag57.tag397_crit_edge, %header-check-br1758, %header-check-br1796, %tag292, %tag186
  %.val24672481 = phi {}* [ %.val24672481.pre, %tag57.tag397_crit_edge ], [ %.val2465, %tag186 ], [ %.val2465, %tag292 ], [ %.val2465, %header-check-br1796 ], [ %.val2465, %header-check-br1758 ]
  %326 = phi {}* [ %52, %tag57.tag397_crit_edge ], [ %.val24662500, %tag186 ], [ %.val24662500, %tag292 ], [ %.val24662500, %header-check-br1796 ], [ %.val24662500, %header-check-br1758 ]
  %327 = phi i64 [ %51, %tag57.tag397_crit_edge ], [ %30, %tag186 ], [ %30, %tag292 ], [ %30, %header-check-br1796 ], [ %30, %header-check-br1758 ]
  %328 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 437), align 8
  %329 = icmp eq {}* %328, %326
  %object.02482 = select i1 %329, {}* %.val24672481, {}* %326
  %330 = icmp eq {}* %object.02482, %326
  %G104563.02483 = select i1 %330, {}* %.val24672481, {}* %326
  %331 = icmp eq {}* %G104563.02483, %326
  br i1 %331, label %tag277, label %tag5.lr.ph

tag5.lr.ph:                                       ; preds = %tag397
  %332 = ptrtoint {}* %.in2238 to i64
  %single-float-tag-only604 = and i64 %332, 7
  %fixnum-tag-only16622236 = and i64 %332, 3
  %fixnump-test1663 = icmp eq i64 %fixnum-tag-only16622236, 0
  %test1460 = icmp ne i64 %single-float-tag-only604, 1
  %gep1462 = getelementptr inbounds i8, i8* %372, i64 -9
  %irc-bit-cast1463 = bitcast i8* %gep1462 to i64*
  %brmerge = or i1 %test1460, %fixnump-test1663
  br label %tag5

tag400:                                           ; preds = %tag327, %normal-dest1158, %tag88
  %x633.0 = phi {}* [ %81, %tag88 ], [ %x633.1, %normal-dest1158 ], [ %255, %tag327 ]
  %333 = ptrtoint {}* %x633.0 to i64
  %tag-only17652115 = and i64 %333, 7
  %consp-test1766 = icmp eq i64 %tag-only17652115, 3
  br i1 %consp-test1766, label %tag202, label %tag308

tag402:                                           ; preds = %header-check-br1180, %header-check-br1180, %header-check-br1180, %header-check-br1180
  %334 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %335 = invoke {}* @cc_safe_fdefinition({}* %334)
          to label %normal-dest1768 unwind label %cleanup-lpad.loopexit.split-lp

tag405:                                           ; preds = %tag278
  %336 = add i64 %220, -3
  %337 = inttoptr i64 %336 to {}**
  %338 = load {}*, {}** %337, align 8
  br label %tag94

tag413:                                           ; preds = %tag236
  %339 = add i64 %180, -3
  %340 = inttoptr i64 %339 to {}**
  %341 = load {}*, {}** %340, align 8
  br label %tag31

tag418:                                           ; preds = %header-check-br1428, %header-check-br1428, %header-check-br1428, %header-check-br1428
  %342 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %343 = invoke {}* @cc_safe_fdefinition({}* %342)
          to label %normal-dest1807 unwind label %cleanup-lpad.loopexit.split-lp

tag419:                                           ; preds = %tag383
  %344 = icmp eq {}* %x734.0, %.val2462
  %G104649.0 = select i1 %344, {}* %.val2459, {}* %.val2462
  %345 = icmp eq {}* %G104649.0, %.val2462
  br i1 %345, label %tag354, label %tag34

tag420:                                           ; preds = %tag123
  %346 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %347 = invoke {}* @cc_safe_fdefinition({}* %346)
          to label %normal-dest1827 unwind label %cleanup-lpad.loopexit.split-lp

tag422:                                           ; preds = %tag5
  %348 = icmp eq {}* %G104617.0, %19
  br i1 %348, label %tag268, label %tag285

tag425:                                           ; preds = %tag341, %normal-dest1233, %tag357
  %.val2444 = phi {}* [ %46, %tag357 ], [ %554, %normal-dest1233 ], [ %46, %tag341 ]
  %x876.0 = phi {}* [ %284, %tag357 ], [ %x876.1, %normal-dest1233 ], [ %46, %tag341 ]
  %349 = ptrtoint {}* %x876.0 to i64
  %tag-only18532153 = and i64 %349, 7
  %consp-test1854 = icmp eq i64 %tag-only18532153, 3
  %.val2441 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104779.0 = select i1 %consp-test1854, {}* %.val2441, {}* %.val2444
  %350 = icmp eq {}* %G104779.0, %.val2444
  br i1 %350, label %tag111, label %tag185

tag430:                                           ; preds = %tag462, %normal-dest1417
  %351 = phi i64 [ %581, %normal-dest1417 ], [ %378, %tag462 ]
  %.val2448 = phi {}* [ %580, %normal-dest1417 ], [ %.val24302499, %tag462 ]
  %G104868.0 = phi {}* [ %G104868.1, %normal-dest1417 ], [ %.val2429, %tag462 ]
  %352 = icmp eq {}* %G104868.0, %.val2448
  br i1 %352, label %tag430.tag449_crit_edge, label %tag345

tag430.tag449_crit_edge:                          ; preds = %tag430
  %.val2447.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag449

tag434:                                           ; preds = %tag370, %tag57, %normal-dest1932, %tag442, %normal-dest1356, %tag232, %normal-dest1016, %tag148, %normal-dest975, %normal-dest710, %normal-dest593
  %return-value.sroa.99.0 = phi i64 [ %.elt2226, %normal-dest710 ], [ %.elt2191, %normal-dest593 ], [ %.elt2157, %normal-dest1016 ], [ %.elt2123, %normal-dest975 ], [ %.elt2089, %normal-dest1932 ], [ %.elt2062, %normal-dest1356 ], [ 1, %tag148 ], [ 1, %tag232 ], [ 1, %tag442 ], [ 1, %tag57 ], [ 1, %tag370 ]
  %return-value.sroa.0.0 = phi i64 [ %435, %normal-dest710 ], [ %418, %normal-dest593 ], [ %478, %normal-dest1016 ], [ %474, %normal-dest975 ], [ %689, %normal-dest1932 ], [ %567, %normal-dest1356 ], [ %133, %tag148 ], [ %177, %tag232 ], [ %362, %tag442 ], [ %457, %tag57 ], [ %297, %tag370 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %353 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %354 = insertvalue { {}*, i64 } undef, {}* %353, 0
  %355 = insertvalue { {}*, i64 } %354, i64 %return-value.sroa.99.0, 1
  ret { {}*, i64 } %355

tag436:                                           ; preds = %tag94
  %356 = icmp eq {}* %87, %farg0
  %.val2403 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105038.0 = select i1 %356, {}* %.val2403, {}* %87
  %357 = icmp eq {}* %G105038.0, %87
  br i1 %357, label %tag391, label %tag334

tag437:                                           ; preds = %tag85
  %358 = add i64 %457, 5
  %359 = inttoptr i64 %358 to {}**
  %360 = load {}*, {}** %359, align 8
  br label %tag97

tag440:                                           ; preds = %tag149, %normal-dest1101, %tag297
  %x1102.0 = phi {}* [ %237, %tag297 ], [ %x1102.1, %normal-dest1101 ], [ %134, %tag149 ]
  %361 = ptrtoint {}* %x1102.0 to i64
  %tag-only18692184 = and i64 %361, 7
  %consp-test1870 = icmp eq i64 %tag-only18692184, 3
  br i1 %consp-test1870, label %tag1, label %tag79

tag442:                                           ; preds = %normal-dest
  %362 = ptrtoint {}* %398 to i64
  br label %tag434

tag445:                                           ; preds = %tag28
  %fixnum-tag-only18752261 = and i64 %44, 3
  %fixnump-test1876 = icmp ne i64 %fixnum-tag-only18752261, 0
  %test1183 = icmp eq i64 %single-float-tag-only, 1
  %or.cond2369 = and i1 %fixnump-test1876, %test1183
  br i1 %or.cond2369, label %header-check-br1180, label %tag17

tag447:                                           ; preds = %tag189
  %fixnum-tag-only18772269 = and i64 %157, 3
  %fixnump-test1878 = icmp ne i64 %fixnum-tag-only18772269, 0
  %test1652 = icmp eq i64 %single-float-tag-only1078, 1
  %or.cond2377 = and i1 %fixnump-test1878, %test1652
  br i1 %or.cond2377, label %header-check-br1649, label %tag449

tag449:                                           ; preds = %tag430.tag449_crit_edge, %header-check-br1649, %header-check-br1173, %tag189, %tag447, %tag335, %tag453
  %.val2447 = phi {}* [ %.val2447.pre, %tag430.tag449_crit_edge ], [ %.val2429, %tag453 ], [ %.val2429, %tag335 ], [ %.val2429, %tag447 ], [ %.val2429, %tag189 ], [ %.val2429, %header-check-br1173 ], [ %.val2429, %header-check-br1649 ]
  %.val24482503 = phi {}* [ %.val2448, %tag430.tag449_crit_edge ], [ %.val24302499, %tag453 ], [ %.val24302499, %tag335 ], [ %.val24302499, %tag447 ], [ %.val24302499, %tag189 ], [ %.val24302499, %header-check-br1173 ], [ %.val24302499, %header-check-br1649 ]
  %363 = phi i64 [ %351, %tag430.tag449_crit_edge ], [ %378, %tag453 ], [ %378, %tag335 ], [ %378, %tag447 ], [ %378, %tag189 ], [ %378, %header-check-br1173 ], [ %378, %header-check-br1649 ]
  %364 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 435), align 8
  %365 = icmp eq {}* %.in2238, %364
  %G104754.0 = select i1 %365, {}* %.val2447, {}* %.val24482503
  %366 = icmp eq {}* %G104754.0, %.val24482503
  br i1 %366, label %tag485, label %tag313

tag451:                                           ; preds = %tag129
  %367 = icmp eq {}* %x914.0, %.val2428
  %G104931.0 = select i1 %367, {}* %.val2419, {}* %.val2428
  %368 = icmp eq {}* %G104931.0, %.val2428
  br i1 %368, label %tag332, label %tag85

tag453:                                           ; preds = %tag335
  %fixnum-tag-only18912267 = and i64 %269, 3
  %fixnump-test1892 = icmp ne i64 %fixnum-tag-only18912267, 0
  %test1176 = icmp eq i64 %single-float-tag-only1519, 1
  %or.cond2368 = and i1 %fixnump-test1892, %test1176
  br i1 %or.cond2368, label %header-check-br1173, label %tag449

tag454:                                           ; preds = %normal-dest751
  %369 = icmp eq {}* %G104496.0, %442
  %G105181.0 = select i1 %369, {}* %.val2383, {}* %442
  %370 = icmp eq {}* %G105181.0, %442
  br i1 %370, label %tag174, label %tag148

tag455:                                           ; preds = %tag27, %normal-dest1025, %tag138
  %371 = phi i64 [ %498, %tag138 ], [ %485, %normal-dest1025 ], [ %498, %tag27 ]
  %.val2394 = phi {}* [ %496, %tag138 ], [ %484, %normal-dest1025 ], [ %496, %tag27 ]
  %.in2238 = phi {}* [ %126, %tag138 ], [ %.in, %normal-dest1025 ], [ %496, %tag27 ]
  %372 = bitcast {}* %.in2238 to i8*
  %373 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 429), align 8
  %374 = icmp eq {}* %.in2238, %373
  %.val2393 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105123.0 = select i1 %374, {}* %.val2393, {}* %.val2394
  %375 = icmp eq {}* %G105123.0, %.val2394
  br i1 %375, label %tag330, label %tag380

tag458:                                           ; preds = %tag265
  %fixnum-tag-only19012285 = and i64 %206, 3
  %fixnump-test1902 = icmp ne i64 %fixnum-tag-only19012285, 0
  %test1386 = icmp eq i64 %single-float-tag-only1311, 1
  %or.cond2373 = and i1 %fixnump-test1902, %test1386
  br i1 %or.cond2373, label %header-check-br1383, label %tag274

tag460:                                           ; preds = %tag81
  %376 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %377 = invoke {}* @cc_safe_fdefinition({}* %376)
          to label %normal-dest1904 unwind label %cleanup-lpad.loopexit.split-lp

tag462:                                           ; preds = %tag195.tag462_crit_edge, %header-check-br1428, %header-check-br1209, %tag250, %tag301
  %.val2429 = phi {}* [ %.val2429.pre, %tag195.tag462_crit_edge ], [ %.val2411, %tag301 ], [ %.val2411, %tag250 ], [ %.val2411, %header-check-br1209 ], [ %.val2411, %header-check-br1428 ]
  %.val24302499 = phi {}* [ %.val2430, %tag195.tag462_crit_edge ], [ %.val24122502, %tag301 ], [ %.val24122502, %tag250 ], [ %.val24122502, %header-check-br1209 ], [ %.val24122502, %header-check-br1428 ]
  %378 = phi i64 [ %164, %tag195.tag462_crit_edge ], [ %213, %tag301 ], [ %213, %tag250 ], [ %213, %header-check-br1209 ], [ %213, %header-check-br1428 ]
  %379 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 433), align 8
  %380 = icmp eq {}* %.in2238, %379
  %G104877.0 = select i1 %380, {}* %.val2429, {}* %.val24302499
  %381 = icmp eq {}* %G104877.0, %.val24302499
  br i1 %381, label %tag335, label %tag430

tag465:                                           ; preds = %tag337, %normal-dest1692, %tag69
  %x679.0 = phi {}* [ %59, %tag69 ], [ %x679.1, %normal-dest1692 ], [ %271, %tag337 ]
  %382 = ptrtoint {}* %x679.0 to i64
  %tag-only19242081 = and i64 %382, 7
  %consp-test1925 = icmp eq i64 %tag-only19242081, 3
  br i1 %consp-test1925, label %tag263, label %tag66

tag466:                                           ; preds = %tag364, %normal-dest1203, %tag312
  %G105008.0 = phi {}* [ %250, %tag312 ], [ %G105008.1, %normal-dest1203 ], [ %.val2408, %tag364 ]
  %ptrtoint1926 = ptrtoint {}* %397 to i64
  %entry-point-addr-uint1927 = add i64 %ptrtoint1926, 7
  %entry-point-addr1928 = inttoptr i64 %entry-point-addr-uint1927 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1929 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1928, align 8
  %383 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1929({}* %397, i64 3, {}* %703, {}* %G105007.0, {}* %G105008.0, {}* null)
          to label %normal-dest1932 unwind label %cleanup-lpad.loopexit.split-lp

tag468:                                           ; preds = %tag158
  %384 = icmp eq {}* %139, %farg0
  %.val2457 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G104669.0 = select i1 %384, {}* %.val2457, {}* %139
  %385 = icmp eq {}* %G104669.0, %139
  br i1 %385, label %tag82, label %tag383

tag469:                                           ; preds = %normal-dest823
  %386 = add i64 %457, -3
  %387 = inttoptr i64 %386 to {}**
  %388 = load {}*, {}** %387, align 8
  br label %tag192

tag471:                                           ; preds = %tag195
  %389 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %390 = invoke {}* @cc_safe_fdefinition({}* %389)
          to label %normal-dest1940 unwind label %cleanup-lpad.loopexit.split-lp

tag474:                                           ; preds = %tag303
  %391 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %392 = invoke {}* @cc_safe_fdefinition({}* %391)
          to label %normal-dest1954 unwind label %cleanup-lpad.loopexit.split-lp

tag477:                                           ; preds = %tag79
  %393 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %394 = invoke {}* @cc_safe_fdefinition({}* %393)
          to label %normal-dest1968 unwind label %cleanup-lpad.loopexit.split-lp

tag485:                                           ; preds = %tag449
  %395 = ptrtoint {}* %.in2238 to i64
  %single-float-tag-only1988 = and i64 %395, 7
  %fixnum-tag-only12952259 = and i64 %395, 3
  %fixnump-test1296 = icmp ne i64 %fixnum-tag-only12952259, 0
  %test1612 = icmp eq i64 %single-float-tag-only1988, 1
  %or.cond2376 = and i1 %fixnump-test1296, %test1612
  br i1 %or.cond2376, label %header-check-br1609, label %tag17

tag487:                                           ; preds = %tag380
  %396 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %397 = invoke {}* @cc_safe_fdefinition({}* %396)
          to label %normal-dest1990 unwind label %cleanup-lpad.loopexit.split-lp

cleanup-lpad.loopexit:                            ; preds = %tag56, %normal-dest643, %tag279, %normal-dest1370
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %tag7, %normal-dest502, %tag25, %normal-dest546, %tag34, %tag43, %normal-dest611, %tag74, %normal-dest689, %tag76, %tag82, %normal-dest725, %tag86, %tag92, %normal-dest762, %tag95, %normal-dest783, %tag104, %tag122, %tag131, %normal-dest920, %tag137, %normal-dest946, %tag146, %tag155, %normal-dest986, %tag164, %tag167, %normal-dest1018, %tag174, %normal-dest1039, %tag187, %normal-dest1064, %tag192, %tag193, %tag194, %normal-dest1094, %tag201, %normal-dest1116, %tag215, %normal-dest1137, %tag218, %normal-dest1151, %tag228, %normal-dest1195, %tag234, %normal-dest1226, %tag238, %tag247, %normal-dest1280, %tag275, %tag277, %tag290, %normal-dest1395, %tag291, %normal-dest1409, %tag332, %normal-dest1502, %tag345, %normal-dest1092, %tag352, %normal-dest1565, %tag354, %normal-dest1579, %tag359, %normal-dest1596, %tag363, %normal-dest1617, %tag377, %normal-dest1665, %tag386, %normal-dest1685, %tag389, %normal-dest1705, %tag391, %normal-dest1719, %tag395, %tag396, %normal-dest1745, %tag402, %normal-dest1768, %tag418, %normal-dest1807, %tag420, %normal-dest1827, %tag460, %normal-dest1904, %tag466, %tag471, %tag474, %normal-dest1954, %tag477, %normal-dest1968, %tag487, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %398 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %399 = icmp eq {}* %398, %farg0
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105261.0 = select i1 %399, {}* %.val, {}* %398
  %400 = icmp eq {}* %G105261.0, %398
  br i1 %400, label %tag104, label %tag442

normal-dest502:                                   ; preds = %tag7
  %401 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %402 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %403 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %404 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint504 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint504, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %405 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 5, {}* %401, {}* %402, {}* %farg0, {}* %403, {}* %404)
          to label %normal-dest507 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest507:                                   ; preds = %normal-dest502
  %.elt2129 = extractvalue { {}*, i64 } %405, 0
  %.elt2131 = extractvalue { {}*, i64 } %405, 1
  %cond2010 = icmp eq i64 %.elt2131, 0
  %406 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x508.1 = select i1 %cond2010, {}* %406, {}* %.elt2129
  br label %tag97

normal-dest546:                                   ; preds = %tag25
  %407 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %408 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %409 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %410 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint548 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint549 = add i64 %ptrtoint548, 7
  %entry-point-addr550 = inttoptr i64 %entry-point-addr-uint549 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point551 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr550, align 8
  %411 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point551({}* %38, i64 5, {}* %407, {}* %408, {}* %x496.0, {}* %409, {}* %410)
          to label %normal-dest554 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest554:                                   ; preds = %normal-dest546
  %.elt2201 = extractvalue { {}*, i64 } %411, 0
  %.elt2203 = extractvalue { {}*, i64 } %411, 1
  %cond2023 = icmp eq i64 %.elt2203, 0
  %412 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104638.1 = select i1 %cond2023, {}* %412, {}* %.elt2201
  br label %tag158

header-check-br580:                               ; preds = %tag204
  %gep585 = getelementptr inbounds i8, i8* %372, i64 -9
  %irc-bit-cast586 = bitcast i8* %gep585 to i64*
  %413 = load i64, i64* %irc-bit-cast586, align 8
  %414 = add i64 %413, -1309
  %415 = lshr i64 %414, 3
  %416 = shl i64 %414, 61
  %417 = or i64 %415, %416
  switch i64 %417, label %tag274 [
    i64 2, label %tag265
    i64 4, label %tag265
    i64 5, label %tag265
    i64 0, label %tag265
  ]

normal-dest593:                                   ; preds = %tag34
  %.elt2189 = extractvalue { {}*, i64 } %47, 0
  %418 = ptrtoint {}* %.elt2189 to i64
  %.elt2191 = extractvalue { {}*, i64 } %47, 1
  br label %tag434

normal-dest611:                                   ; preds = %tag43
  %.elt2046 = extractvalue { {}*, i64 } %48, 0
  %.elt2048 = extractvalue { {}*, i64 } %48, 1
  %cond1996 = icmp eq i64 %.elt2048, 0
  %419 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104495.0 = select i1 %cond1996, {}* %419, {}* %.elt2046
  %420 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %421 = invoke {}* @cc_safe_fdefinition({}* %420)
          to label %normal-dest618 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest618:                                   ; preds = %normal-dest611
  br i1 %consp-test831, label %tag140, label %tag15

normal-dest643:                                   ; preds = %tag56
  %422 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %423 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %424 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %425 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint645 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint646 = add i64 %ptrtoint645, 7
  %entry-point-addr647 = inttoptr i64 %entry-point-addr-uint646 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point648 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr647, align 8
  %426 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point648({}* %50, i64 5, {}* %422, {}* %423, {}* %20, {}* %424, {}* %425)
          to label %normal-dest651 unwind label %cleanup-lpad.loopexit

normal-dest651:                                   ; preds = %normal-dest643
  %.elt2248 = extractvalue { {}*, i64 } %426, 0
  %.elt2250 = extractvalue { {}*, i64 } %426, 1
  %cond2030 = icmp eq i64 %.elt2250, 0
  %427 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in2241 = select i1 %cond2030, {}* %427, {}* %.elt2248
  %.val2471.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %428 = ptrtoint {}* %427 to i64
  br label %tag331

normal-dest689:                                   ; preds = %tag74
  %429 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %430 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %431 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %432 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint691 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint692 = add i64 %ptrtoint691, 7
  %entry-point-addr693 = inttoptr i64 %entry-point-addr-uint692 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point694 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr693, align 8
  %433 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point694({}* %65, i64 5, {}* %429, {}* %430, {}* %farg0, {}* %431, {}* %432)
          to label %normal-dest697 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest697:                                   ; preds = %normal-dest689
  %.elt2076 = extractvalue { {}*, i64 } %433, 0
  %.elt2078 = extractvalue { {}*, i64 } %433, 1
  %cond2002 = icmp eq i64 %.elt2078, 0
  %434 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105213.1 = select i1 %cond2002, {}* %434, {}* %.elt2076
  br label %tag43

normal-dest710:                                   ; preds = %tag76
  %.elt2224 = extractvalue { {}*, i64 } %69, 0
  %435 = ptrtoint {}* %.elt2224 to i64
  %.elt2226 = extractvalue { {}*, i64 } %69, 1
  br label %tag434

normal-dest725:                                   ; preds = %tag82
  %436 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %437 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %438 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %439 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint727 = ptrtoint {}* %76 to i64
  %entry-point-addr-uint728 = add i64 %ptrtoint727, 7
  %entry-point-addr729 = inttoptr i64 %entry-point-addr-uint728 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point730 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr729, align 8
  %440 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point730({}* %76, i64 5, {}* %436, {}* %437, {}* %farg0, {}* %438, {}* %439)
          to label %normal-dest733 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest733:                                   ; preds = %normal-dest725
  %.elt2197 = extractvalue { {}*, i64 } %440, 0
  %.elt2199 = extractvalue { {}*, i64 } %440, 1
  %cond2022 = icmp eq i64 %.elt2199, 0
  %441 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x734.1 = select i1 %cond2022, {}* %441, {}* %.elt2197
  br label %tag383

normal-dest751:                                   ; preds = %tag86
  %.elt2051 = extractvalue { {}*, i64 } %78, 0
  %.elt2053 = extractvalue { {}*, i64 } %78, 1
  %cond1997 = icmp eq i64 %.elt2053, 0
  %442 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104496.0 = select i1 %cond1997, {}* %442, {}* %.elt2051
  %443 = icmp eq {}* %G104495.0, %442
  %.val2383 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105187.0 = select i1 %443, {}* %.val2383, {}* %442
  %444 = icmp eq {}* %G105187.0, %442
  br i1 %444, label %tag454, label %tag232

normal-dest762:                                   ; preds = %tag92
  %445 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %446 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %447 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %448 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint763 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint764 = add i64 %ptrtoint763, 7
  %entry-point-addr765 = inttoptr i64 %entry-point-addr-uint764 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point766 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr765, align 8
  %449 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point766({}* %86, i64 5, {}* %445, {}* %446, {}* %x679.0, {}* %447, {}* %448)
          to label %normal-dest769 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest769:                                   ; preds = %normal-dest762
  %.elt2107 = extractvalue { {}*, i64 } %449, 0
  %.elt2109 = extractvalue { {}*, i64 } %449, 1
  %cond2007 = icmp eq i64 %.elt2109, 0
  %450 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x770.1 = select i1 %cond2007, {}* %450, {}* %.elt2107
  br label %tag319

normal-dest783:                                   ; preds = %tag95
  %451 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %452 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %453 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %454 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint785 = ptrtoint {}* %89 to i64
  %entry-point-addr-uint786 = add i64 %ptrtoint785, 7
  %entry-point-addr787 = inttoptr i64 %entry-point-addr-uint786 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point788 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr787, align 8
  %455 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point788({}* %89, i64 5, {}* %451, {}* %452, {}* %x641.0, {}* %453, {}* %454)
          to label %normal-dest791 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest791:                                   ; preds = %normal-dest783
  %.elt2099 = extractvalue { {}*, i64 } %455, 0
  %.elt2101 = extractvalue { {}*, i64 } %455, 1
  %cond2005 = icmp eq i64 %.elt2101, 0
  %456 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105007.1 = select i1 %cond2005, {}* %456, {}* %.elt2099
  br label %tag94

normal-dest823:                                   ; preds = %tag104
  %457 = ptrtoint {}* %farg0 to i64
  %tag-only8302040 = and i64 %457, 7
  %consp-test831 = icmp eq i64 %tag-only8302040, 3
  %G105255.0.in = select i1 %consp-test831, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12)
  %G105255.0 = load {}*, {}** %G105255.0.in, align 8
  %458 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %459 = icmp eq {}* %G105255.0, %458
  br i1 %459, label %tag178, label %tag469

normal-dest878:                                   ; preds = %tag122
  %G105230.0 = load {}*, {}** %G105255.0.in, align 8
  %460 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %461 = icmp eq {}* %G105230.0, %460
  br i1 %461, label %tag387, label %tag258

normal-dest920:                                   ; preds = %tag131
  %462 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %463 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %464 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %465 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint921 = ptrtoint {}* %119 to i64
  %entry-point-addr-uint922 = add i64 %ptrtoint921, 7
  %entry-point-addr923 = inttoptr i64 %entry-point-addr-uint922 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point924 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr923, align 8
  %466 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point924({}* %119, i64 5, {}* %462, {}* %463, {}* %farg0, {}* %464, {}* %465)
          to label %normal-dest927 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest927:                                   ; preds = %normal-dest920
  %.elt2296 = extractvalue { {}*, i64 } %466, 0
  %.elt2298 = extractvalue { {}*, i64 } %466, 1
  %cond2037 = icmp eq i64 %.elt2298, 0
  %467 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105238.1 = select i1 %cond2037, {}* %467, {}* %.elt2296
  br label %tag192

normal-dest946:                                   ; preds = %tag137
  %468 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %469 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %470 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %471 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint947 = ptrtoint {}* %123 to i64
  %entry-point-addr-uint948 = add i64 %ptrtoint947, 7
  %entry-point-addr949 = inttoptr i64 %entry-point-addr-uint948 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point950 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr949, align 8
  %472 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point950({}* %123, i64 5, {}* %468, {}* %469, {}* %farg0, {}* %470, {}* %471)
          to label %normal-dest953 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest953:                                   ; preds = %normal-dest946
  %.elt2072 = extractvalue { {}*, i64 } %472, 0
  %.elt2074 = extractvalue { {}*, i64 } %472, 1
  %cond2001 = icmp eq i64 %.elt2074, 0
  %473 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105193.1 = select i1 %cond2001, {}* %473, {}* %.elt2072
  br label %tag86

normal-dest975:                                   ; preds = %tag146
  %.elt2121 = extractvalue { {}*, i64 } %132, 0
  %474 = ptrtoint {}* %.elt2121 to i64
  %.elt2123 = extractvalue { {}*, i64 } %132, 1
  br label %tag434

normal-dest986:                                   ; preds = %tag155
  %ptrtoint989 = ptrtoint {}* %138 to i64
  %entry-point-addr-uint990 = add i64 %ptrtoint989, 7
  %entry-point-addr991 = inttoptr i64 %entry-point-addr-uint990 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point992 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr991, align 8
  %475 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point992({}* %138, i64 2, {}* nonnull %.in2238, {}* nonnull %373, {}* null, {}* null)
          to label %normal-dest995 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest995:                                   ; preds = %normal-dest986
  %.elt2288 = extractvalue { {}*, i64 } %475, 0
  %.elt2290 = extractvalue { {}*, i64 } %475, 1
  %cond2035 = icmp eq i64 %.elt2290, 0
  %476 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105114.1 = select i1 %cond2035, {}* %476, {}* %.elt2288
  %477 = ptrtoint {}* %476 to i64
  br label %tag380

normal-dest1016:                                  ; preds = %tag164
  %.elt2155 = extractvalue { {}*, i64 } %144, 0
  %478 = ptrtoint {}* %.elt2155 to i64
  %.elt2157 = extractvalue { {}*, i64 } %144, 1
  br label %tag434

normal-dest1018:                                  ; preds = %tag167
  %479 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %480 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %481 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %482 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1019 = ptrtoint {}* %146 to i64
  %entry-point-addr-uint1020 = add i64 %ptrtoint1019, 7
  %entry-point-addr1021 = inttoptr i64 %entry-point-addr-uint1020 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1022 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1021, align 8
  %483 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1022({}* %146, i64 5, {}* %479, {}* %480, {}* %farg0, {}* %481, {}* %482)
          to label %normal-dest1025 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1025:                                  ; preds = %normal-dest1018
  %.elt2292 = extractvalue { {}*, i64 } %483, 0
  %.elt2294 = extractvalue { {}*, i64 } %483, 1
  %cond2036 = icmp eq i64 %.elt2294, 0
  %484 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond2036, {}* %484, {}* %.elt2292
  %485 = ptrtoint {}* %484 to i64
  br label %tag455

normal-dest1039:                                  ; preds = %tag174
  %486 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 419), align 8
  %487 = invoke {}* @cc_safe_fdefinition({}* %486)
          to label %normal-dest1041 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1041:                                  ; preds = %normal-dest1039
  %488 = ptrtoint {}* %G104496.0 to i64
  %tag-only10472054 = and i64 %488, 7
  %consp-test1048 = icmp eq i64 %tag-only10472054, 3
  %.val2387 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %.val2388 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105174.0 = select i1 %consp-test1048, {}* %.val2387, {}* %.val2388
  %489 = icmp eq {}* %G105174.0, %.val2388
  br i1 %489, label %tag142, label %tag282

normal-dest1064:                                  ; preds = %tag187
  %490 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %491 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %492 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %493 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1065 = ptrtoint {}* %156 to i64
  %entry-point-addr-uint1066 = add i64 %ptrtoint1065, 7
  %entry-point-addr1067 = inttoptr i64 %entry-point-addr-uint1066 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1068 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1067, align 8
  %494 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1068({}* %156, i64 5, {}* %490, {}* %491, {}* %G104496.0, {}* %492, {}* %493)
          to label %normal-dest1071 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1071:                                  ; preds = %normal-dest1064
  %.elt2068 = extractvalue { {}*, i64 } %494, 0
  %.elt2070 = extractvalue { {}*, i64 } %494, 1
  %cond2000 = icmp eq i64 %.elt2070, 0
  %495 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105157.1 = select i1 %cond2000, {}* %495, {}* %.elt2068
  br label %tag395

normal-dest1085:                                  ; preds = %tag192
  %.elt2041 = extractvalue { {}*, i64 } %159, 0
  %.elt2043 = extractvalue { {}*, i64 } %159, 1
  %cond = icmp eq i64 %.elt2043, 0
  %496 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105235.0 = select i1 %cond, {}* %496, {}* %.elt2041
  %497 = icmp eq {}* %G105235.0, %496
  %498 = ptrtoint {}* %496 to i64
  br i1 %497, label %tag19, label %tag122

normal-dest1092:                                  ; preds = %tag193
  %499 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %500 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %501 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %502 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint1557 = ptrtoint {}* %161 to i64
  %entry-point-addr-uint1558 = add i64 %ptrtoint1557, 7
  %entry-point-addr1559 = inttoptr i64 %entry-point-addr-uint1558 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1560 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1559, align 8
  %503 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1560({}* %161, i64 5, {}* %499, {}* %500, {}* %20, {}* %501, {}* %502)
          to label %normal-dest1563 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1094:                                  ; preds = %tag194
  %504 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %505 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %506 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %507 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1095 = ptrtoint {}* %163 to i64
  %entry-point-addr-uint1096 = add i64 %ptrtoint1095, 7
  %entry-point-addr1097 = inttoptr i64 %entry-point-addr-uint1096 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1098 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1097, align 8
  %508 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1098({}* %163, i64 5, {}* %504, {}* %505, {}* %x530.0, {}* %506, {}* %507)
          to label %normal-dest1101 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1101:                                  ; preds = %normal-dest1094
  %.elt2209 = extractvalue { {}*, i64 } %508, 0
  %.elt2211 = extractvalue { {}*, i64 } %508, 1
  %cond2025 = icmp eq i64 %.elt2211, 0
  %509 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x1102.1 = select i1 %cond2025, {}* %509, {}* %.elt2209
  br label %tag440

normal-dest1116:                                  ; preds = %tag201
  %510 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %511 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %512 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %513 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1118 = ptrtoint {}* %167 to i64
  %entry-point-addr-uint1119 = add i64 %ptrtoint1118, 7
  %entry-point-addr1120 = inttoptr i64 %entry-point-addr-uint1119 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1121 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1120, align 8
  %514 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1121({}* %167, i64 5, {}* %510, {}* %511, {}* %x633.0, {}* %512, {}* %513)
          to label %normal-dest1124 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1124:                                  ; preds = %normal-dest1116
  %.elt2141 = extractvalue { {}*, i64 } %514, 0
  %.elt2143 = extractvalue { {}*, i64 } %514, 1
  %cond2013 = icmp eq i64 %.elt2143, 0
  %515 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x907.1 = select i1 %cond2013, {}* %515, {}* %.elt2141
  br label %tag325

normal-dest1137:                                  ; preds = %tag215
  %516 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %517 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %518 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %519 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1138 = ptrtoint {}* %172 to i64
  %entry-point-addr-uint1139 = add i64 %ptrtoint1138, 7
  %entry-point-addr1140 = inttoptr i64 %entry-point-addr-uint1139 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1141 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1140, align 8
  %520 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1141({}* %172, i64 5, {}* %516, {}* %517, {}* %farg0, {}* %518, {}* %519)
          to label %normal-dest1144 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1144:                                  ; preds = %normal-dest1137
  %.elt2213 = extractvalue { {}*, i64 } %520, 0
  %.elt2215 = extractvalue { {}*, i64 } %520, 1
  %cond2026 = icmp eq i64 %.elt2215, 0
  %521 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x530.1 = select i1 %cond2026, {}* %521, {}* %.elt2213
  br label %tag135

normal-dest1151:                                  ; preds = %tag218
  %522 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %523 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %524 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %525 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1152 = ptrtoint {}* %174 to i64
  %entry-point-addr-uint1153 = add i64 %ptrtoint1152, 7
  %entry-point-addr1154 = inttoptr i64 %entry-point-addr-uint1153 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1155 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1154, align 8
  %526 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1155({}* %174, i64 5, {}* %522, {}* %523, {}* %farg0, {}* %524, {}* %525)
          to label %normal-dest1158 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1158:                                  ; preds = %normal-dest1151
  %.elt2145 = extractvalue { {}*, i64 } %526, 0
  %.elt2147 = extractvalue { {}*, i64 } %526, 1
  %cond2014 = icmp eq i64 %.elt2147, 0
  %527 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x633.1 = select i1 %cond2014, {}* %527, {}* %.elt2145
  br label %tag400

header-check-br1173:                              ; preds = %tag453
  %gep1178 = getelementptr inbounds i8, i8* %372, i64 -9
  %irc-bit-cast1179 = bitcast i8* %gep1178 to i64*
  %528 = load i64, i64* %irc-bit-cast1179, align 8
  %529 = add i64 %528, -1309
  %530 = lshr i64 %529, 3
  %531 = shl i64 %529, 61
  %532 = or i64 %530, %531
  switch i64 %532, label %tag449 [
    i64 2, label %tag189
    i64 4, label %tag189
    i64 5, label %tag189
    i64 0, label %tag189
  ]

header-check-br1180:                              ; preds = %tag445
  %irc-bit-cast1184 = bitcast {}* %364 to i8*
  %gep1185 = getelementptr inbounds i8, i8* %irc-bit-cast1184, i64 -9
  %irc-bit-cast1186 = bitcast i8* %gep1185 to i64*
  %533 = load i64, i64* %irc-bit-cast1186, align 8
  %534 = add i64 %533, -1309
  %535 = lshr i64 %534, 3
  %536 = shl i64 %534, 61
  %537 = or i64 %535, %536
  switch i64 %537, label %tag17 [
    i64 2, label %tag402
    i64 4, label %tag402
    i64 5, label %tag402
    i64 0, label %tag402
  ]

normal-dest1195:                                  ; preds = %tag228
  %538 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %539 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %540 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %541 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1197 = ptrtoint {}* %176 to i64
  %entry-point-addr-uint1198 = add i64 %ptrtoint1197, 7
  %entry-point-addr1199 = inttoptr i64 %entry-point-addr-uint1198 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1200 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1199, align 8
  %542 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1200({}* %176, i64 5, {}* %538, {}* %539, {}* %x968.0, {}* %540, {}* %541)
          to label %normal-dest1203 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1203:                                  ; preds = %normal-dest1195
  %.elt2091 = extractvalue { {}*, i64 } %542, 0
  %.elt2093 = extractvalue { {}*, i64 } %542, 1
  %cond2003 = icmp eq i64 %.elt2093, 0
  %543 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105008.1 = select i1 %cond2003, {}* %543, {}* %.elt2091
  br label %tag466

header-check-br1209:                              ; preds = %tag250
  %gep1214 = getelementptr inbounds i8, i8* %372, i64 -9
  %irc-bit-cast1215 = bitcast i8* %gep1214 to i64*
  %544 = load i64, i64* %irc-bit-cast1215, align 8
  %545 = add i64 %544, -1309
  %546 = lshr i64 %545, 3
  %547 = shl i64 %545, 61
  %548 = or i64 %546, %547
  switch i64 %548, label %tag462 [
    i64 2, label %tag301
    i64 4, label %tag301
    i64 5, label %tag301
    i64 0, label %tag301
  ]

normal-dest1226:                                  ; preds = %tag234
  %549 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %550 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %551 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %552 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1227 = ptrtoint {}* %179 to i64
  %entry-point-addr-uint1228 = add i64 %ptrtoint1227, 7
  %entry-point-addr1229 = inttoptr i64 %entry-point-addr-uint1228 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1230 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1229, align 8
  %553 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1230({}* %179, i64 5, {}* %549, {}* %550, {}* %farg0, {}* %551, {}* %552)
          to label %normal-dest1233 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1233:                                  ; preds = %normal-dest1226
  %.elt2163 = extractvalue { {}*, i64 } %553, 0
  %.elt2165 = extractvalue { {}*, i64 } %553, 1
  %cond2016 = icmp eq i64 %.elt2165, 0
  %554 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x876.1 = select i1 %cond2016, {}* %554, {}* %.elt2163
  br label %tag425

normal-dest1251:                                  ; preds = %tag238
  %555 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 391), align 8
  br i1 %consp-test831, label %tag75, label %tag102

normal-dest1280:                                  ; preds = %tag247
  %556 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %557 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %558 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %559 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1281 = ptrtoint {}* %187 to i64
  %entry-point-addr-uint1282 = add i64 %ptrtoint1281, 7
  %entry-point-addr1283 = inttoptr i64 %entry-point-addr-uint1282 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1284 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1283, align 8
  %560 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1284({}* %187, i64 5, {}* %556, {}* %557, {}* %x508.0, {}* %558, {}* %559)
          to label %normal-dest1287 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1287:                                  ; preds = %normal-dest1280
  %.elt2125 = extractvalue { {}*, i64 } %560, 0
  %.elt2127 = extractvalue { {}*, i64 } %560, 1
  %cond2009 = icmp eq i64 %.elt2127, 0
  %561 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104885.1 = select i1 %cond2009, {}* %561, {}* %.elt2125
  br label %tag146

header-check-br1298:                              ; preds = %tag323
  %gep1303 = getelementptr inbounds i8, i8* %262, i64 -9
  %irc-bit-cast1304 = bitcast i8* %gep1303 to i64*
  %562 = load i64, i64* %irc-bit-cast1304, align 8
  %563 = add i64 %562, -1309
  %564 = lshr i64 %563, 3
  %565 = shl i64 %563, 61
  %566 = or i64 %564, %565
  switch i64 %566, label %tag257 [
    i64 2, label %tag279
    i64 4, label %tag279
    i64 5, label %tag279
    i64 0, label %tag279
  ]

normal-dest1356:                                  ; preds = %tag275
  %.elt2060 = extractvalue { {}*, i64 } %217, 0
  %567 = ptrtoint {}* %.elt2060 to i64
  %.elt2062 = extractvalue { {}*, i64 } %217, 1
  br label %tag434

normal-dest1358:                                  ; preds = %tag277
  br i1 %consp-test831, label %tag358, label %tag303

normal-dest1370:                                  ; preds = %tag279
  %ptrtoint1371 = ptrtoint {}* %223 to i64
  %entry-point-addr-uint1372 = add i64 %ptrtoint1371, 7
  %entry-point-addr1373 = inttoptr i64 %entry-point-addr-uint1372 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1374 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1373, align 8
  %568 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1374({}* %223, i64 2, {}* nonnull %.in2238, {}* nonnull %.in2242, {}* null, {}* null)
          to label %normal-dest1377 unwind label %cleanup-lpad.loopexit

normal-dest1377:                                  ; preds = %normal-dest1370
  %.elt2244 = extractvalue { {}*, i64 } %568, 0
  %.elt2246 = extractvalue { {}*, i64 } %568, 1
  %cond2029 = icmp eq i64 %.elt2246, 0
  %569 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104588.1 = select i1 %cond2029, {}* %569, {}* %.elt2244
  %570 = ptrtoint {}* %569 to i64
  br label %tag372

header-check-br1383:                              ; preds = %tag458
  %irc-bit-cast1387 = bitcast {}* %373 to i8*
  %gep1388 = getelementptr inbounds i8, i8* %irc-bit-cast1387, i64 -9
  %irc-bit-cast1389 = bitcast i8* %gep1388 to i64*
  %571 = load i64, i64* %irc-bit-cast1389, align 8
  %572 = add i64 %571, -1309
  %573 = lshr i64 %572, 3
  %574 = shl i64 %572, 61
  %575 = or i64 %573, %574
  switch i64 %575, label %tag274 [
    i64 2, label %tag155
    i64 4, label %tag155
    i64 5, label %tag155
    i64 0, label %tag155
  ]

normal-dest1395:                                  ; preds = %tag290
  %ptrtoint1396 = ptrtoint {}* %231 to i64
  %entry-point-addr-uint1397 = add i64 %ptrtoint1396, 7
  %entry-point-addr1398 = inttoptr i64 %entry-point-addr-uint1397 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1399 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1398, align 8
  %576 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1399({}* %231, i64 2, {}* nonnull %.in2238, {}* nonnull %31, {}* null, {}* null)
          to label %normal-dest1402 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1402:                                  ; preds = %normal-dest1395
  %.elt2256 = extractvalue { {}*, i64 } %576, 0
  %.elt2258 = extractvalue { {}*, i64 } %576, 1
  %cond2031 = icmp eq i64 %.elt2258, 0
  %577 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104622.1 = select i1 %cond2031, {}* %577, {}* %.elt2256
  %578 = ptrtoint {}* %577 to i64
  br label %tag57

normal-dest1409:                                  ; preds = %tag291
  %ptrtoint1411 = ptrtoint {}* %233 to i64
  %entry-point-addr-uint1412 = add i64 %ptrtoint1411, 7
  %entry-point-addr1413 = inttoptr i64 %entry-point-addr-uint1412 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1414 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1413, align 8
  %579 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1414({}* %233, i64 2, {}* nonnull %.in2238, {}* nonnull %379, {}* null, {}* null)
          to label %normal-dest1417 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1417:                                  ; preds = %normal-dest1409
  %.elt2272 = extractvalue { {}*, i64 } %579, 0
  %.elt2274 = extractvalue { {}*, i64 } %579, 1
  %cond2033 = icmp eq i64 %.elt2274, 0
  %580 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104868.1 = select i1 %cond2033, {}* %580, {}* %.elt2272
  %581 = ptrtoint {}* %580 to i64
  br label %tag430

header-check-br1428:                              ; preds = %tag301
  %irc-bit-cast1432 = bitcast {}* %214 to i8*
  %gep1433 = getelementptr inbounds i8, i8* %irc-bit-cast1432, i64 -9
  %irc-bit-cast1434 = bitcast i8* %gep1433 to i64*
  %582 = load i64, i64* %irc-bit-cast1434, align 8
  %583 = add i64 %582, -1309
  %584 = lshr i64 %583, 3
  %585 = shl i64 %583, 61
  %586 = or i64 %584, %585
  switch i64 %586, label %tag462 [
    i64 2, label %tag418
    i64 4, label %tag418
    i64 5, label %tag418
    i64 0, label %tag418
  ]

header-check-br1457:                              ; preds = %tag40
  %587 = load i64, i64* %irc-bit-cast1463, align 8
  %588 = add i64 %587, -1309
  %589 = lshr i64 %588, 3
  %590 = shl i64 %588, 61
  %591 = or i64 %589, %590
  switch i64 %591, label %tag257 [
    i64 2, label %tag70
    i64 4, label %tag70
    i64 5, label %tag70
    i64 0, label %tag70
  ]

normal-dest1502:                                  ; preds = %tag332
  %592 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %593 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %594 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %595 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1503 = ptrtoint {}* %266 to i64
  %entry-point-addr-uint1504 = add i64 %ptrtoint1503, 7
  %entry-point-addr1505 = inttoptr i64 %entry-point-addr-uint1504 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1506 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1505, align 8
  %596 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1506({}* %266, i64 5, {}* %592, {}* %593, {}* %x914.0, {}* %594, {}* %595)
          to label %normal-dest1509 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1509:                                  ; preds = %normal-dest1502
  %.elt2133 = extractvalue { {}*, i64 } %596, 0
  %.elt2135 = extractvalue { {}*, i64 } %596, 1
  %cond2011 = icmp eq i64 %.elt2135, 0
  %597 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104884.1 = select i1 %cond2011, {}* %597, {}* %.elt2133
  br label %tag85

normal-dest1537:                                  ; preds = %tag345
  %598 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 391), align 8
  br i1 %consp-test831, label %tag90, label %tag261

normal-dest1563:                                  ; preds = %normal-dest1092
  call void @unreachableError()
  unreachable

normal-dest1565:                                  ; preds = %tag352
  %599 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %600 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %601 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %602 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1566 = ptrtoint {}* %279 to i64
  %entry-point-addr-uint1567 = add i64 %ptrtoint1566, 7
  %entry-point-addr1568 = inttoptr i64 %entry-point-addr-uint1567 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1569 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1568, align 8
  %603 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1569({}* %279, i64 5, {}* %599, {}* %600, {}* %x876.0, {}* %601, {}* %602)
          to label %normal-dest1572 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1572:                                  ; preds = %normal-dest1565
  %.elt2159 = extractvalue { {}*, i64 } %603, 0
  %.elt2161 = extractvalue { {}*, i64 } %603, 1
  %cond2015 = icmp eq i64 %.elt2161, 0
  %604 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104762.1 = select i1 %cond2015, {}* %604, {}* %.elt2159
  br label %tag164

normal-dest1579:                                  ; preds = %tag354
  %605 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %606 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %607 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %608 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1581 = ptrtoint {}* %281 to i64
  %entry-point-addr-uint1582 = add i64 %ptrtoint1581, 7
  %entry-point-addr1583 = inttoptr i64 %entry-point-addr-uint1582 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1584 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1583, align 8
  %609 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1584({}* %281, i64 5, {}* %605, {}* %606, {}* %x734.0, {}* %607, {}* %608)
          to label %normal-dest1587 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1587:                                  ; preds = %normal-dest1579
  %.elt2193 = extractvalue { {}*, i64 } %609, 0
  %.elt2195 = extractvalue { {}*, i64 } %609, 1
  %cond2021 = icmp eq i64 %.elt2195, 0
  %610 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104639.1 = select i1 %cond2021, {}* %610, {}* %.elt2193
  br label %tag34

normal-dest1596:                                  ; preds = %tag359
  %ptrtoint1597 = ptrtoint {}* %289 to i64
  %entry-point-addr-uint1598 = add i64 %ptrtoint1597, 7
  %entry-point-addr1599 = inttoptr i64 %entry-point-addr-uint1598 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1600 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1599, align 8
  %611 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1600({}* %289, i64 1, {}* %G104496.0, {}* null, {}* null, {}* null)
          to label %normal-dest1603 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1603:                                  ; preds = %normal-dest1596
  %.elt2064 = extractvalue { {}*, i64 } %611, 0
  %.elt2066 = extractvalue { {}*, i64 } %611, 1
  %cond1999 = icmp eq i64 %.elt2066, 0
  %612 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105150.1 = select i1 %cond1999, {}* %612, {}* %.elt2064
  br label %tag275

header-check-br1609:                              ; preds = %tag485
  %gep1614 = getelementptr inbounds i8, i8* %372, i64 -9
  %irc-bit-cast1615 = bitcast i8* %gep1614 to i64*
  %613 = load i64, i64* %irc-bit-cast1615, align 8
  %614 = add i64 %613, -1309
  %615 = lshr i64 %614, 3
  %616 = shl i64 %614, 61
  %617 = or i64 %615, %616
  switch i64 %617, label %tag17 [
    i64 2, label %tag28
    i64 4, label %tag28
    i64 5, label %tag28
    i64 0, label %tag28
  ]

normal-dest1617:                                  ; preds = %tag363
  %618 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %619 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %620 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %621 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1618 = ptrtoint {}* %291 to i64
  %entry-point-addr-uint1619 = add i64 %ptrtoint1618, 7
  %entry-point-addr1620 = inttoptr i64 %entry-point-addr-uint1619 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1621 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1620, align 8
  %622 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1621({}* %291, i64 5, {}* %618, {}* %619, {}* %x770.0, {}* %620, {}* %621)
          to label %normal-dest1624 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1624:                                  ; preds = %normal-dest1617
  %.elt2103 = extractvalue { {}*, i64 } %622, 0
  %.elt2105 = extractvalue { {}*, i64 } %622, 1
  %cond2006 = icmp eq i64 %.elt2105, 0
  %623 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x641.1 = select i1 %cond2006, {}* %623, {}* %.elt2103
  br label %tag278

header-check-br1649:                              ; preds = %tag447
  %irc-bit-cast1653 = bitcast {}* %379 to i8*
  %gep1654 = getelementptr inbounds i8, i8* %irc-bit-cast1653, i64 -9
  %irc-bit-cast1655 = bitcast i8* %gep1654 to i64*
  %624 = load i64, i64* %irc-bit-cast1655, align 8
  %625 = add i64 %624, -1309
  %626 = lshr i64 %625, 3
  %627 = shl i64 %625, 61
  %628 = or i64 %626, %627
  switch i64 %628, label %tag449 [
    i64 2, label %tag291
    i64 4, label %tag291
    i64 5, label %tag291
    i64 0, label %tag291
  ]

normal-dest1665:                                  ; preds = %tag377
  %629 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %630 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %631 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %632 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1666 = ptrtoint {}* %304 to i64
  %entry-point-addr-uint1667 = add i64 %ptrtoint1666, 7
  %entry-point-addr1668 = inttoptr i64 %entry-point-addr-uint1667 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1669 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1668, align 8
  %633 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1669({}* %304, i64 5, {}* %629, {}* %630, {}* %x512.0, {}* %631, {}* %632)
          to label %normal-dest1672 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1672:                                  ; preds = %normal-dest1665
  %.elt2171 = extractvalue { {}*, i64 } %633, 0
  %.elt2173 = extractvalue { {}*, i64 } %633, 1
  %cond2018 = icmp eq i64 %.elt2173, 0
  %634 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x624.1 = select i1 %cond2018, {}* %634, {}* %.elt2171
  br label %tag236

normal-dest1685:                                  ; preds = %tag386
  %635 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %636 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %637 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %638 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1686 = ptrtoint {}* %316 to i64
  %entry-point-addr-uint1687 = add i64 %ptrtoint1686, 7
  %entry-point-addr1688 = inttoptr i64 %entry-point-addr-uint1687 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1689 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1688, align 8
  %639 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1689({}* %316, i64 5, {}* %635, {}* %636, {}* %farg0, {}* %637, {}* %638)
          to label %normal-dest1692 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1692:                                  ; preds = %normal-dest1685
  %.elt2111 = extractvalue { {}*, i64 } %639, 0
  %.elt2113 = extractvalue { {}*, i64 } %639, 1
  %cond2008 = icmp eq i64 %.elt2113, 0
  %640 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x679.1 = select i1 %cond2008, {}* %640, {}* %.elt2111
  br label %tag465

normal-dest1705:                                  ; preds = %tag389
  %641 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %642 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %643 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %644 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1706 = ptrtoint {}* %320 to i64
  %entry-point-addr-uint1707 = add i64 %ptrtoint1706, 7
  %entry-point-addr1708 = inttoptr i64 %entry-point-addr-uint1707 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1709 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1708, align 8
  %645 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1709({}* %320, i64 5, {}* %641, {}* %642, {}* %x760.0, {}* %643, {}* %644)
          to label %normal-dest1712 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1712:                                  ; preds = %normal-dest1705
  %.elt2175 = extractvalue { {}*, i64 } %645, 0
  %.elt2177 = extractvalue { {}*, i64 } %645, 1
  %cond2019 = icmp eq i64 %.elt2177, 0
  %646 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x512.1 = select i1 %cond2019, {}* %646, {}* %.elt2175
  br label %tag134

normal-dest1719:                                  ; preds = %tag391
  %647 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %648 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %649 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %650 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1720 = ptrtoint {}* %322 to i64
  %entry-point-addr-uint1721 = add i64 %ptrtoint1720, 7
  %entry-point-addr1722 = inttoptr i64 %entry-point-addr-uint1721 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1723 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1722, align 8
  %651 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1723({}* %322, i64 5, {}* %647, {}* %648, {}* %farg0, {}* %649, {}* %650)
          to label %normal-dest1726 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1726:                                  ; preds = %normal-dest1719
  %.elt2095 = extractvalue { {}*, i64 } %651, 0
  %.elt2097 = extractvalue { {}*, i64 } %651, 1
  %cond2004 = icmp eq i64 %.elt2097, 0
  %652 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x968.1 = select i1 %cond2004, {}* %652, {}* %.elt2095
  br label %tag334

normal-dest1738:                                  ; preds = %tag395
  %.elt2056 = extractvalue { {}*, i64 } %323, 0
  %.elt2058 = extractvalue { {}*, i64 } %323, 1
  %cond1998 = icmp eq i64 %.elt2058, 0
  %653 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105154.0 = select i1 %cond1998, {}* %653, {}* %.elt2056
  %654 = icmp eq {}* %G105154.0, %653
  br i1 %654, label %tag359, label %tag275

normal-dest1745:                                  ; preds = %tag396
  %655 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %656 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %657 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %658 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1746 = ptrtoint {}* %325 to i64
  %entry-point-addr-uint1747 = add i64 %ptrtoint1746, 7
  %entry-point-addr1748 = inttoptr i64 %entry-point-addr-uint1747 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1749 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1748, align 8
  %659 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1749({}* %325, i64 5, {}* %655, {}* %656, {}* %farg0, {}* %657, {}* %658)
          to label %normal-dest1752 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1752:                                  ; preds = %normal-dest1745
  %.elt2179 = extractvalue { {}*, i64 } %659, 0
  %.elt2181 = extractvalue { {}*, i64 } %659, 1
  %cond2020 = icmp eq i64 %.elt2181, 0
  %660 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x760.1 = select i1 %cond2020, {}* %660, {}* %.elt2179
  br label %tag163

header-check-br1758:                              ; preds = %tag292
  %irc-bit-cast1762 = bitcast {}* %31 to i8*
  %gep1763 = getelementptr inbounds i8, i8* %irc-bit-cast1762, i64 -9
  %irc-bit-cast1764 = bitcast i8* %gep1763 to i64*
  %661 = load i64, i64* %irc-bit-cast1764, align 8
  %662 = add i64 %661, -1309
  %663 = lshr i64 %662, 3
  %664 = shl i64 %662, 61
  %665 = or i64 %663, %664
  switch i64 %665, label %tag397 [
    i64 2, label %tag290
    i64 4, label %tag290
    i64 5, label %tag290
    i64 0, label %tag290
  ]

normal-dest1768:                                  ; preds = %tag402
  %ptrtoint1770 = ptrtoint {}* %335 to i64
  %entry-point-addr-uint1771 = add i64 %ptrtoint1770, 7
  %entry-point-addr1772 = inttoptr i64 %entry-point-addr-uint1771 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1773 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1772, align 8
  %666 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1773({}* %335, i64 2, {}* nonnull %.in2238, {}* nonnull %364, {}* null, {}* null)
          to label %normal-dest1776 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1776:                                  ; preds = %normal-dest1768
  %.elt2264 = extractvalue { {}*, i64 } %666, 0
  %.elt2266 = extractvalue { {}*, i64 } %666, 1
  %cond2032 = icmp eq i64 %.elt2266, 0
  %667 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104745.1 = select i1 %cond2032, {}* %667, {}* %.elt2264
  %668 = ptrtoint {}* %667 to i64
  br label %tag313

header-check-br1796:                              ; preds = %tag186
  %gep1801 = getelementptr inbounds i8, i8* %372, i64 -9
  %irc-bit-cast1802 = bitcast i8* %gep1801 to i64*
  %669 = load i64, i64* %irc-bit-cast1802, align 8
  %670 = add i64 %669, -1309
  %671 = lshr i64 %670, 3
  %672 = shl i64 %670, 61
  %673 = or i64 %671, %672
  switch i64 %673, label %tag397 [
    i64 2, label %tag292
    i64 4, label %tag292
    i64 5, label %tag292
    i64 0, label %tag292
  ]

normal-dest1807:                                  ; preds = %tag418
  %ptrtoint1808 = ptrtoint {}* %343 to i64
  %entry-point-addr-uint1809 = add i64 %ptrtoint1808, 7
  %entry-point-addr1810 = inttoptr i64 %entry-point-addr-uint1809 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1811 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1810, align 8
  %674 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1811({}* %343, i64 2, {}* nonnull %.in2238, {}* nonnull %214, {}* null, {}* null)
          to label %normal-dest1814 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1814:                                  ; preds = %normal-dest1807
  %.elt2280 = extractvalue { {}*, i64 } %674, 0
  %.elt2282 = extractvalue { {}*, i64 } %674, 1
  %cond2034 = icmp eq i64 %.elt2282, 0
  %675 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104991.1 = select i1 %cond2034, {}* %675, {}* %.elt2280
  %676 = ptrtoint {}* %675 to i64
  br label %tag195

normal-dest1827:                                  ; preds = %tag420
  %677 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %678 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %679 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %680 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1828 = ptrtoint {}* %347 to i64
  %entry-point-addr-uint1829 = add i64 %ptrtoint1828, 7
  %entry-point-addr1830 = inttoptr i64 %entry-point-addr-uint1829 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1831 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1830, align 8
  %681 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1831({}* %347, i64 5, {}* %677, {}* %678, {}* %x907.0, {}* %679, {}* %680)
          to label %normal-dest1834 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1834:                                  ; preds = %normal-dest1827
  %.elt2137 = extractvalue { {}*, i64 } %681, 0
  %.elt2139 = extractvalue { {}*, i64 } %681, 1
  %cond2012 = icmp eq i64 %.elt2139, 0
  %682 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x914.1 = select i1 %cond2012, {}* %682, {}* %.elt2137
  br label %tag129

normal-dest1904:                                  ; preds = %tag460
  %683 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %684 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %685 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %686 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1905 = ptrtoint {}* %377 to i64
  %entry-point-addr-uint1906 = add i64 %ptrtoint1905, 7
  %entry-point-addr1907 = inttoptr i64 %entry-point-addr-uint1906 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1908 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1907, align 8
  %687 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1908({}* %377, i64 5, {}* %683, {}* %684, {}* %x624.0, {}* %685, {}* %686)
          to label %normal-dest1911 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1911:                                  ; preds = %normal-dest1904
  %.elt2167 = extractvalue { {}*, i64 } %687, 0
  %.elt2169 = extractvalue { {}*, i64 } %687, 1
  %cond2017 = icmp eq i64 %.elt2169, 0
  %688 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104761.1 = select i1 %cond2017, {}* %688, {}* %.elt2167
  br label %tag31

normal-dest1932:                                  ; preds = %tag466
  %.elt2087 = extractvalue { {}*, i64 } %383, 0
  %689 = ptrtoint {}* %.elt2087 to i64
  %.elt2089 = extractvalue { {}*, i64 } %383, 1
  br label %tag434

normal-dest1940:                                  ; preds = %tag471
  %690 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 391), align 8
  br i1 %consp-test831, label %tag88, label %tag327

normal-dest1954:                                  ; preds = %tag474
  %691 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %692 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %693 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %694 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1955 = ptrtoint {}* %392 to i64
  %entry-point-addr-uint1956 = add i64 %ptrtoint1955, 7
  %entry-point-addr1957 = inttoptr i64 %entry-point-addr-uint1956 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1958 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1957, align 8
  %695 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1958({}* %392, i64 5, {}* %691, {}* %692, {}* %farg0, {}* %693, {}* %694)
          to label %normal-dest1961 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1961:                                  ; preds = %normal-dest1954
  %.elt2228 = extractvalue { {}*, i64 } %695, 0
  %.elt2230 = extractvalue { {}*, i64 } %695, 1
  %cond2027 = icmp eq i64 %.elt2230, 0
  %696 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G104540.1 = select i1 %cond2027, {}* %696, {}* %.elt2228
  br label %tag76

normal-dest1968:                                  ; preds = %tag477
  %697 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %698 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %699 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %700 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1969 = ptrtoint {}* %394 to i64
  %entry-point-addr-uint1970 = add i64 %ptrtoint1969, 7
  %entry-point-addr1971 = inttoptr i64 %entry-point-addr-uint1970 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1972 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1971, align 8
  %701 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1972({}* %394, i64 5, {}* %697, {}* %698, {}* %x1102.0, {}* %699, {}* %700)
          to label %normal-dest1975 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest1975:                                  ; preds = %normal-dest1968
  %.elt2205 = extractvalue { {}*, i64 } %701, 0
  %.elt2207 = extractvalue { {}*, i64 } %701, 1
  %cond2024 = icmp eq i64 %.elt2207, 0
  %702 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x496.1 = select i1 %cond2024, {}* %702, {}* %.elt2205
  br label %tag273

normal-dest1990:                                  ; preds = %tag487
  %703 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 391), align 8
  br i1 %consp-test831, label %tag69, label %tag337
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^304^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !87 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^304^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G105293.0 = phi {}* [ %18, %header-check-br ], [ %G105293.1, %normal-dest54 ], [ %G105293.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 457), align 8
  %ptrtoint13 = ptrtoint {}* %G105293.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G105293.0, i64 2, {}* %"closure->CWR=SPEICHERE_FALL", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest60 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %tag2, %normal-dest47, %maybe-more-tests81, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 457), align 8
  %"closure->CWR=SPEICHERE_FALL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 9864, i64 304, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br73

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 459), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=SPEICHERE_FALL", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 462), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=SPEICHERE_FALL", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 1216 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 457), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %maybe-more-tests81
  %ptrtoint48 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt101 = extractvalue { {}*, i64 } %33, 0
  %.elt103 = extractvalue { {}*, i64 } %33, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105293.1 = select i1 %cond82, {}* %34, {}* %.elt101
  br label %tag

normal-dest60:                                    ; preds = %tag2
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 456), align 16
  %ptrtoint61 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %14, i64 5, {}* %35, {}* %36, {}* %18, {}* %37, {}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt = extractvalue { {}*, i64 } %39, 0
  %.elt84 = extractvalue { {}*, i64 } %39, 1
  %cond = icmp eq i64 %.elt84, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105293.2 = select i1 %cond, {}* %40, {}* %.elt
  br label %tag

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag2

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest47 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !88 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc90 unwind label %cleanup-lpad

.noexc90:                                         ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest12
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 422), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest37, %normal-dest12
  %G105316.0 = phi {}* [ %G105277.0, %normal-dest12 ], [ %G105316.1, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 452), align 16
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 454), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest44 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest58, %normal-dest51, %normal-dest44, %tag2, %normal-dest25, %normal-dest18, %normal-dest16, %tag, %normal-dest9, %normal-dest7, %normal-dest
  %16 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %16

normal-dest:                                      ; preds = %entry
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 446), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 448), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %21, 0
  %.elt70 = extractvalue { {}*, i64 } %21, 1
  %cond = icmp eq i64 %.elt70, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105277.0 = select i1 %cond, {}* %22, {}* %.elt
  %23 = icmp eq {}* %G105277.0, %22
  br i1 %23, label %tag, label %tag2

normal-dest16:                                    ; preds = %tag
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 450), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 118), align 16
  %ptrtoint19 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %25, i64 2, {}* %26, {}* %27, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  %.elt83 = extractvalue { {}*, i64 } %28, 0
  %.elt85 = extractvalue { {}*, i64 } %28, 1
  %cond67 = icmp eq i64 %.elt85, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105321.0 = select i1 %cond67, {}* %29, {}* %.elt83
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 1, {}* %G105321.0, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest25
  %.elt87 = extractvalue { {}*, i64 } %30, 0
  %.elt89 = extractvalue { {}*, i64 } %30, 1
  %cond68 = icmp eq i64 %.elt89, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105316.1 = select i1 %cond68, {}* %31, {}* %.elt87
  br label %tag2

normal-dest44:                                    ; preds = %tag2
  %ptrtoint45 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint46 = add i64 %ptrtoint45, 7
  %entry-point-addr47 = inttoptr i64 %entry-point-addr-uint46 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point48 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr47, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point48({}* %18, i64 3, {}* %G105316.0, {}* %13, {}* %15, {}* null)
          to label %normal-dest51 unwind label %cleanup-lpad

normal-dest51:                                    ; preds = %normal-dest44
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 408), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest51
  %.elt74 = extractvalue { {}*, i64 } %32, 1
  %cond66 = icmp eq i64 %.elt74, 0
  %.elt72 = extractvalue { {}*, i64 } %32, 0
  %G105275.0 = select i1 %cond66, {}* %33, {}* %.elt72
  %ptrtoint59 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %35, i64 2, {}* %farg0, {}* %G105275.0, {}* null, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %36
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^312^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !89 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^312^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G105356.0 = phi {}* [ %18, %header-check-br ], [ %G105356.1, %normal-dest54 ], [ %G105356.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 448), align 16
  %ptrtoint13 = ptrtoint {}* %G105356.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G105356.0, i64 2, {}* %"closure->CWR=ANALYSIERERE-STEUERUNGSOBJEKT", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest47, %tag1, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 448), align 16
  %"closure->CWR=ANALYSIERERE-STEUERUNGSOBJEKT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10189, i64 312, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br73

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=ANALYSIERERE-STEUERUNGSOBJEKT", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 471), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=ANALYSIERERE-STEUERUNGSOBJEKT", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 1248 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 448), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag1
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 470), align 16
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105356.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105356.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !90 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest93
  %11 = add i64 %26, 5
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag11.backedge

tag11.backedge:                                   ; preds = %tag, %normal-dest63
  %14 = phi {}* [ %.pre, %tag ], [ %55, %normal-dest63 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %13, %tag ], [ %"%DOLIST-VAR.2", %normal-dest63 ]
  %15 = icmp eq {}* %"%DOLIST-VAR.0.be", %14
  br i1 %15, label %tag5, label %tag10

tag1:                                             ; preds = %normal-dest93
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %17 = icmp eq {}* %"%DOLIST-VAR.0157", %16
  %.val155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105389.0 = select i1 %17, {}* %.val155, {}* %16
  %18 = icmp eq {}* %G105389.0, %16
  br i1 %18, label %tag3, label %tag5

tag3:                                             ; preds = %tag1
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest56 unwind label %cleanup-lpad.loopexit

tag5:                                             ; preds = %tag11.backedge, %tag1, %normal-dest46
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 468), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest70 unwind label %cleanup-lpad.loopexit.split-lp

tag8:                                             ; preds = %normal-dest114, %tag18
  %WAS.0 = phi {}* [ %32, %tag18 ], [ %WAS.1, %normal-dest114 ]
  %23 = load %"class.core::T_O"*, %"class.core::T_O"** %49, align 8, !tbaa !74
  %24 = bitcast %"class.core::T_O"* %23 to {}*
  %ptrtoint87 = ptrtoint %"class.core::T_O"* %23 to i64
  %entry-point-addr-uint88 = add i64 %ptrtoint87, 7
  %entry-point-addr89 = inttoptr i64 %entry-point-addr-uint88 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point90 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr89, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point90({}* %24, i64 1, {}* %WAS.0, {}* null, {}* null, {}* null)
          to label %normal-dest93 unwind label %cleanup-lpad.loopexit

tag10:                                            ; preds = %tag10.lr.ph, %tag11.backedge
  %.val154 = phi {}* [ %44, %tag10.lr.ph ], [ %14, %tag11.backedge ]
  %"%DOLIST-VAR.0157" = phi {}* [ %"%DOLIST-VAR.1", %tag10.lr.ph ], [ %"%DOLIST-VAR.0.be", %tag11.backedge ]
  %26 = ptrtoint {}* %"%DOLIST-VAR.0157" to i64
  %tag-only104129 = and i64 %26, 7
  %consp-test105 = icmp eq i64 %tag-only104129, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105414.0 = select i1 %consp-test105, {}* %.val, {}* %.val154
  %27 = icmp eq {}* %G105414.0, %.val154
  br i1 %27, label %tag15, label %tag18

tag15:                                            ; preds = %tag10
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest107 unwind label %cleanup-lpad.loopexit

tag18:                                            ; preds = %tag10
  %30 = add i64 %26, -3
  %31 = inttoptr i64 %30 to {}**
  %32 = load {}*, {}** %31, align 8
  br label %tag8

cleanup-lpad.loopexit:                            ; preds = %tag3, %normal-dest56, %tag8, %tag15, %normal-dest107
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest25, %normal-dest26, %normal-dest29, %normal-dest32, %normal-dest34, %normal-dest37, %tag5, %normal-dest70, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %33 = invoke {}* @cc_makeCell()
          to label %normal-dest25 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest25:                                    ; preds = %normal-dest
  %34 = invoke {}* @cc_makeCell()
          to label %normal-dest26 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest26:                                    ; preds = %normal-dest25
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  call void @cc_writeCell({}* %33, {}* %35)
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %36, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.7", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.7^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10189, i64 312, i64 0, i64 2, {}* %34, {}* %33)
          to label %normal-dest29 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest29:                                    ; preds = %normal-dest26
  call void @cc_writeCell({}* %34, {}* %"closure->LAMBDA")
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 232), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest32 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest32:                                    ; preds = %normal-dest29
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 466), align 16
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest34 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest34:                                    ; preds = %normal-dest32
  %ptrtoint = ptrtoint {}* %40 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %40, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest37:                                    ; preds = %normal-dest34
  %.elt = extractvalue { {}*, i64 } %41, 0
  %.elt124 = extractvalue { {}*, i64 } %41, 1
  %cond = icmp eq i64 %.elt124, 0
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105419.0 = select i1 %cond, {}* %42, {}* %.elt
  %ptrtoint40 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint41 = add i64 %ptrtoint40, 7
  %entry-point-addr42 = inttoptr i64 %entry-point-addr-uint41 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point43 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr42, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point43({}* %38, i64 1, {}* %G105419.0, {}* null, {}* null, {}* null)
          to label %normal-dest46 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest46:                                    ; preds = %normal-dest37
  %.elt126 = extractvalue { {}*, i64 } %43, 0
  %.elt128 = extractvalue { {}*, i64 } %43, 1
  %cond120 = icmp eq i64 %.elt128, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond120, {}* %44, {}* %.elt126
  %45 = icmp eq {}* %"%DOLIST-VAR.1", %44
  br i1 %45, label %tag5, label %tag10.lr.ph

tag10.lr.ph:                                      ; preds = %normal-dest46
  %46 = ptrtoint {}* %34 to i64
  %47 = add i64 %46, -3
  %48 = inttoptr i64 %47 to %"class.gctools::smart_ptr"*
  %49 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %48, i64 0, i32 0
  br label %tag10

normal-dest56:                                    ; preds = %tag3
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint57 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %54 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %20, i64 5, {}* %50, {}* %51, {}* %"%DOLIST-VAR.0157", {}* %52, {}* %53)
          to label %normal-dest63 unwind label %cleanup-lpad.loopexit

normal-dest63:                                    ; preds = %normal-dest56
  %.elt136 = extractvalue { {}*, i64 } %54, 0
  %.elt138 = extractvalue { {}*, i64 } %54, 1
  %cond121 = icmp eq i64 %.elt138, 0
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond121, {}* %55, {}* %.elt136
  br label %tag11.backedge

normal-dest70:                                    ; preds = %tag5
  %56 = ptrtoint {}* %33 to i64
  %57 = add i64 %56, -3
  %58 = inttoptr i64 %57 to {}**
  %59 = load {}*, {}** %58, align 8, !tbaa !74
  %ptrtoint72 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint73 = add i64 %ptrtoint72, 7
  %entry-point-addr74 = inttoptr i64 %entry-point-addr-uint73 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point75 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr74, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point75({}* %22, i64 1, {}* %59, {}* null, {}* null, {}* null)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest78:                                    ; preds = %normal-dest70
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %60

normal-dest93:                                    ; preds = %tag8
  br i1 %consp-test105, label %tag, label %tag1

normal-dest107:                                   ; preds = %tag15
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint108 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint109 = add i64 %ptrtoint108, 7
  %entry-point-addr110 = inttoptr i64 %entry-point-addr-uint109 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point111 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr110, align 8
  %65 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point111({}* %29, i64 5, {}* %61, {}* %62, {}* %"%DOLIST-VAR.0157", {}* %63, {}* %64)
          to label %normal-dest114 unwind label %cleanup-lpad.loopexit

normal-dest114:                                   ; preds = %normal-dest107
  %.elt140 = extractvalue { {}*, i64 } %65, 0
  %.elt142 = extractvalue { {}*, i64 } %65, 1
  %cond122 = icmp eq i64 %.elt142, 0
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %WAS.1 = select i1 %cond122, {}* %66, {}* %.elt140
  br label %tag8
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.7"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !91 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.7^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.7^DESC" to %0*)) #7
          to label %.noexc173 unwind label %cleanup-lpad.loopexit.split-lp

.noexc173:                                        ; preds = %10
  unreachable

tag3:                                             ; preds = %tag19
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest35 unwind label %cleanup-lpad.loopexit

tag4:                                             ; preds = %normal-dest31
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest49 unwind label %cleanup-lpad.loopexit.split-lp

tag6:                                             ; preds = %tag6.lr.ph, %tag16.backedge
  %.val179 = phi {}* [ %76, %tag6.lr.ph ], [ %57, %tag16.backedge ]
  %"%DOLIST-VAR.0182" = phi {}* [ %"%DOLIST-VAR.2", %tag6.lr.ph ], [ %"%DOLIST-VAR.0.be", %tag16.backedge ]
  %15 = ptrtoint {}* %"%DOLIST-VAR.0182" to i64
  %tag-only156 = and i64 %15, 7
  %consp-test = icmp eq i64 %tag-only156, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105463.0 = select i1 %consp-test, {}* %.val, {}* %.val179
  %16 = icmp eq {}* %G105463.0, %.val179
  br i1 %16, label %tag12, label %tag8

tag7:                                             ; preds = %tag19, %tag16.backedge, %normal-dest121
  %17 = phi {}* [ %76, %normal-dest121 ], [ %57, %tag16.backedge ], [ %33, %tag19 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %18 = insertvalue { {}*, i64 } undef, {}* %17, 0
  %19 = insertvalue { {}*, i64 } %18, i64 1, 1
  ret { {}*, i64 } %19

tag8:                                             ; preds = %tag6
  %20 = add i64 %15, -3
  %21 = inttoptr i64 %20 to {}**
  %22 = load {}*, {}** %21, align 8
  br label %tag15

tag10:                                            ; preds = %normal-dest105
  %23 = add i64 %15, 5
  %24 = inttoptr i64 %23 to {}**
  %25 = load {}*, {}** %24, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag16.backedge

tag12:                                            ; preds = %tag6
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest85 unwind label %cleanup-lpad.loopexit

tag15:                                            ; preds = %normal-dest92, %tag8
  %OBJEKT1.0 = phi {}* [ %22, %tag8 ], [ %OBJEKT1.1, %normal-dest92 ]
  %28 = load %"class.core::T_O"*, %"class.core::T_O"** %80, align 8, !tbaa !74
  %29 = bitcast %"class.core::T_O"* %28 to {}*
  %ptrtoint99 = ptrtoint %"class.core::T_O"* %28 to i64
  %entry-point-addr-uint100 = add i64 %ptrtoint99, 7
  %entry-point-addr101 = inttoptr i64 %entry-point-addr-uint100 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point102 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr101, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point102({}* %29, i64 1, {}* %OBJEKT1.0, {}* null, {}* null, {}* null)
          to label %normal-dest105 unwind label %cleanup-lpad.loopexit

tag17:                                            ; preds = %normal-dest70, %normal-dest31
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 232), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest114 unwind label %cleanup-lpad.loopexit.split-lp

tag19:                                            ; preds = %normal-dest105
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %34 = icmp eq {}* %"%DOLIST-VAR.0182", %33
  %.val180 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105438.0 = select i1 %34, {}* %.val180, {}* %33
  %35 = icmp eq {}* %G105438.0, %33
  br i1 %35, label %tag3, label %tag7

cleanup-lpad.loopexit:                            ; preds = %tag3, %normal-dest35, %tag12, %normal-dest85, %tag15
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest28, %tag4, %normal-dest49, %normal-dest51, %normal-dest58, %tag17, %normal-dest114, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %36 = ptrtoint {}* %closure-ptr to i64
  %37 = and i64 %36, -8
  %38 = inttoptr i64 %37 to %1*
  %39 = getelementptr inbounds %1, %1* %38, i64 0, i32 4, i32 1, i64 1, i32 0
  %40 = load %"class.core::T_O"*, %"class.core::T_O"** %39, align 8, !tbaa !74
  %41 = bitcast %"class.core::T_O"* %40 to {}*
  %42 = getelementptr inbounds %1, %1* %38, i64 0, i32 4, i32 1, i64 0, i32 0
  %43 = bitcast %"class.core::T_O"** %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !74
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest28 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest28:                                    ; preds = %normal-dest
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 464), align 16
  %ptrtoint = ptrtoint {}* %46 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %46, i64 2, {}* %farg0, {}* %47, {}* null, {}* null)
          to label %normal-dest31 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest31:                                    ; preds = %normal-dest28
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt143 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt143, 0
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105335.0 = select i1 %cond, {}* %49, {}* %.elt
  %50 = icmp eq {}* %G105335.0, %49
  br i1 %50, label %tag17, label %tag4

normal-dest35:                                    ; preds = %tag3
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint36 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint37 = add i64 %ptrtoint36, 7
  %entry-point-addr38 = inttoptr i64 %entry-point-addr-uint37 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point39 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr38, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point39({}* %12, i64 5, {}* %51, {}* %52, {}* %"%DOLIST-VAR.0182", {}* %53, {}* %54)
          to label %normal-dest42 unwind label %cleanup-lpad.loopexit

normal-dest42:                                    ; preds = %normal-dest35
  %.elt163 = extractvalue { {}*, i64 } %55, 0
  %.elt165 = extractvalue { {}*, i64 } %55, 1
  %cond140 = icmp eq i64 %.elt165, 0
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond140, {}* %56, {}* %.elt163
  br label %tag16.backedge

tag16.backedge:                                   ; preds = %normal-dest42, %tag10
  %57 = phi {}* [ %.pre, %tag10 ], [ %56, %normal-dest42 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %25, %tag10 ], [ %"%DOLIST-VAR.1", %normal-dest42 ]
  %58 = icmp eq {}* %"%DOLIST-VAR.0.be", %57
  br i1 %58, label %tag7, label %tag6

normal-dest49:                                    ; preds = %tag4
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 417), align 8
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest51 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest51:                                    ; preds = %normal-dest49
  %ptrtoint52 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint53 = add i64 %ptrtoint52, 7
  %entry-point-addr54 = inttoptr i64 %entry-point-addr-uint53 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point55 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr54, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point55({}* %60, i64 1, {}* %G105335.0, {}* null, {}* null, {}* null)
          to label %normal-dest58 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest58:                                    ; preds = %normal-dest51
  %.elt145 = extractvalue { {}*, i64 } %61, 0
  %.elt147 = extractvalue { {}*, i64 } %61, 1
  %cond137 = icmp eq i64 %.elt147, 0
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105471.0 = select i1 %cond137, {}* %62, {}* %.elt145
  %63 = ptrtoint %"class.core::T_O"* %40 to i64
  %64 = add i64 %63, -3
  %65 = inttoptr i64 %64 to {}**
  %66 = load {}*, {}** %65, align 8, !tbaa !74
  %ptrtoint64 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint65 = add i64 %ptrtoint64, 7
  %entry-point-addr66 = inttoptr i64 %entry-point-addr-uint65 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point67 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr66, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point67({}* %14, i64 2, {}* %G105471.0, {}* %66, {}* null, {}* null)
          to label %normal-dest70 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest70:                                    ; preds = %normal-dest58
  %.elt149 = extractvalue { {}*, i64 } %67, 0
  %.elt151 = extractvalue { {}*, i64 } %67, 1
  %cond138 = icmp eq i64 %.elt151, 0
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105492.0 = select i1 %cond138, {}* %68, {}* %.elt149
  call void @cc_writeCell({}* %41, {}* %G105492.0)
  br label %tag17

normal-dest85:                                    ; preds = %tag12
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint86 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint87 = add i64 %ptrtoint86, 7
  %entry-point-addr88 = inttoptr i64 %entry-point-addr-uint87 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point89 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr88, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point89({}* %27, i64 5, {}* %69, {}* %70, {}* %"%DOLIST-VAR.0182", {}* %71, {}* %72)
          to label %normal-dest92 unwind label %cleanup-lpad.loopexit

normal-dest92:                                    ; preds = %normal-dest85
  %.elt167 = extractvalue { {}*, i64 } %73, 0
  %.elt169 = extractvalue { {}*, i64 } %73, 1
  %cond141 = icmp eq i64 %.elt169, 0
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKT1.1 = select i1 %cond141, {}* %74, {}* %.elt167
  br label %tag15

normal-dest105:                                   ; preds = %tag15
  br i1 %consp-test, label %tag10, label %tag19

normal-dest114:                                   ; preds = %tag17
  %ptrtoint115 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint116 = add i64 %ptrtoint115, 7
  %entry-point-addr117 = inttoptr i64 %entry-point-addr-uint116 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point118 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr117, align 8
  %75 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point118({}* %32, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest121 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest121:                                   ; preds = %normal-dest114
  %.elt153 = extractvalue { {}*, i64 } %75, 0
  %.elt155 = extractvalue { {}*, i64 } %75, 1
  %cond139 = icmp eq i64 %.elt155, 0
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond139, {}* %76, {}* %.elt153
  %77 = icmp eq {}* %"%DOLIST-VAR.2", %76
  br i1 %77, label %tag7, label %tag6.lr.ph

tag6.lr.ph:                                       ; preds = %normal-dest121
  %78 = add i64 %44, -3
  %79 = inttoptr i64 %78 to %"class.gctools::smart_ptr"*
  %80 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %79, i64 0, i32 0
  br label %tag6
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^327^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !92 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^327^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G105514.0 = phi {}* [ %18, %header-check-br ], [ %G105514.1, %normal-dest17 ], [ %G105514.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 482), align 16
  %ptrtoint29 = ptrtoint {}* %G105514.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G105514.0, i64 2, {}* %"closure->MY-LOAD", {}* %11, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br20
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 482), align 16
  %"closure->MY-LOAD" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"MY-LOAD^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"MY-LOAD^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10731, i64 327, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105514.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag4

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 484), align 16
  %ptrtoint42 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %27, i64 2, {}* %"closure->MY-LOAD", {}* %28, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 487), align 8
  %ptrtoint55 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %31, i64 2, {}* %"closure->MY-LOAD", {}* %32, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %34, {}* inttoptr (i64 1368 to {}*))
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 482), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %36 = insertvalue { {}*, i64 } undef, {}* %35, 0
  %37 = insertvalue { {}*, i64 } %36, i64 1, 1
  ret { {}*, i64 } %37

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 481), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105514.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"MY-LOAD^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !93 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure25 = alloca [120 x i8], align 1
  %stack-allocated-closure1626 = alloca [120 x i8], align 1
  %stack-allocated-closure1626.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure1626, i64 0, i64 0
  %stack-allocated-closure25.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure25, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"MY-LOAD^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"MY-LOAD^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc36 unwind label %cleanup-lpad

.noexc36:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest13, %normal-dest9, %normal-dest6, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = invoke {}* @cc_makeCell()
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 374), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 380), align 16
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 473), align 8
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 3, {}* %farg0, {}* %15, {}* %16, {}* null)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt28 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt28, 0
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105496.0 = select i1 %cond, {}* %18, {}* %.elt
  call void @cc_writeCell({}* %12, {}* %G105496.0)
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 384), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure25.sub, {}* %21, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.8", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.8^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10731, i64 327, i64 0, i64 1, {}* %12)
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA17" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure1626.sub, {}* %22, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.11", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.11^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10731, i64 327, i64 0, i64 1, {}* %12)
  %ptrtoint18 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint19 = add i64 %ptrtoint18, 7
  %entry-point-addr20 = inttoptr i64 %entry-point-addr-uint19 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point21 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr20, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point21({}* %20, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA17", {}* null, {}* null)
          to label %normal-dest24 unwind label %cleanup-lpad

normal-dest24:                                    ; preds = %normal-dest13
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.8"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !94 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure12 = alloca [120 x i8], align 1
  %stack-allocated-closure713 = alloca [120 x i8], align 1
  %stack-allocated-closure713.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure713, i64 0, i64 0
  %stack-allocated-closure12.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure12, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.8^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %16 = load %"class.core::T_O"*, %"class.core::T_O"** %15, align 8, !tbaa !74
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 386), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure12.sub, {}* %19, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.9", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.9^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10731, i64 327, i64 0, i64 1, %"class.core::T_O"* %16)
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA8" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure713.sub, {}* %20, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.10", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.10^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10731, i64 327, i64 0, i64 1, %"class.core::T_O"* %16)
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA8", {}* null, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %21
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.9"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !95 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.9^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest17, %normal-dest
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 475), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest10 unwind label %cleanup-lpad.loopexit

tag4:                                             ; preds = %normal-dest13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 479), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest17 unwind label %cleanup-lpad.loopexit

tag5:                                             ; preds = %normal-dest13
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %15 = insertvalue { {}*, i64 } undef, {}* %29, 0
  %16 = insertvalue { {}*, i64 } %15, i64 1, 1
  ret { {}*, i64 } %16

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest10, %tag4, %normal-dest17
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %17 = ptrtoint {}* %closure-ptr to i64
  %18 = and i64 %17, -8
  %19 = inttoptr i64 %18 to %1*
  %20 = getelementptr inbounds %1, %1* %19, i64 0, i32 4, i32 1, i64 0, i32 0
  %21 = bitcast %"class.core::T_O"** %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !74
  %23 = add i64 %22, -3
  %24 = inttoptr i64 %23 to {}**
  br label %tag1

normal-dest10:                                    ; preds = %tag1
  %25 = load {}*, {}** %24, align 8, !tbaa !74
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 477), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 3, {}* %25, {}* %26, {}* %27, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad.loopexit

normal-dest13:                                    ; preds = %normal-dest10
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt32 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt32, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105498.0 = select i1 %cond, {}* %29, {}* %.elt
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 477), align 8
  %31 = icmp eq {}* %30, %G105498.0
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105562.0 = select i1 %31, {}* %.val, {}* %29
  %32 = icmp eq {}* %G105562.0, %29
  br i1 %32, label %tag4, label %tag5

normal-dest17:                                    ; preds = %tag4
  %ptrtoint18 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint19 = add i64 %ptrtoint18, 7
  %entry-point-addr20 = inttoptr i64 %entry-point-addr-uint19 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point21 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr20, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point21({}* %14, i64 1, {}* %G105498.0, {}* null, {}* null, {}* null)
          to label %tag1 unwind label %cleanup-lpad.loopexit
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.10"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !96 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.10^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 403), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest9 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest, %normal-dest13
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest13 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest13 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %14 = insertvalue { {}*, i64 } %13, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest9, %tag1
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !74
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !74
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag2, label %tag1

normal-dest9:                                     ; preds = %tag1
  %27 = load {}*, {}** %23, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 1, {}* %27, {}* null, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt15 = extractvalue { {}*, i64 } %28, 1
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.11"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !97 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.11^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest, %normal-dest13
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest13 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest13 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 403), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest9 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest9, %tag2
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !74
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !74
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag, label %tag2

normal-dest9:                                     ; preds = %tag2
  %27 = load {}*, {}** %23, align 8, !tbaa !74
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 405), align 8
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 3, {}* %27, {}* %28, {}* %29, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt15 = extractvalue { {}*, i64 } %30, 1
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^350^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !98 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^350^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G105609.0 = phi {}* [ %18, %header-check-br ], [ %G105609.1, %normal-dest17 ], [ %G105609.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 496), align 16
  %ptrtoint34 = ptrtoint {}* %G105609.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G105609.0, i64 2, {}* %"closure->CWR=LADE_ES_ES_LOKAL", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag2, %normal-dest21, %maybe-more-tests81, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 496), align 16
  %"closure->CWR=LADE_ES_ES_LOKAL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 11396, i64 350, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br73

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 495), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105609.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest21:                                    ; preds = %maybe-more-tests81
  %ptrtoint22 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105609.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag2

normal-dest40:                                    ; preds = %tag2
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 498), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=LADE_ES_ES_LOKAL", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 499), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=LADE_ES_ES_LOKAL", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 1400 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 496), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !99 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure26 = alloca [128 x i8], align 1
  %stack-allocated-closure26.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure26, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc36 unwind label %cleanup-lpad

.noexc36:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest18, %mvn-final, %normal-dest9, %normal-dest6, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = invoke {}* @cc_makeCell()
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %13 = invoke {}* @cc_makeCell()
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  call void @cc_writeCell({}* %13, {}* %farg0)
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  call void @cc_writeCell({}* %12, {}* %15)
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 352), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 20), align 16
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure26.sub, {}* %19, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.12", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.12^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 11396, i64 350, i64 0, i64 2, {}* %13, {}* %12)
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 3, {}* %18, {}* %14, {}* %"closure->LAMBDA", {}* null)
          to label %mvn-final unwind label %cleanup-lpad

mvn-final:                                        ; preds = %normal-dest9
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 493), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %mvn-final
  %ptrtoint19 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %22, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.12"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !100 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure11 = alloca [120 x i8], align 1
  %stack-allocated-closure11.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure11, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.12^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest6, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 1, i32 0
  %16 = bitcast %"class.core::T_O"** %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !74
  %18 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %19 = load %"class.core::T_O"*, %"class.core::T_O"** %18, align 8, !tbaa !74
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 352), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 38), align 16
  %23 = add i64 %17, -3
  %24 = inttoptr i64 %23 to {}**
  %25 = load {}*, {}** %24, align 8, !tbaa !74
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure11.sub, {}* %26, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.13", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.13^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 11396, i64 350, i64 0, i64 1, %"class.core::T_O"* %19)
  %ptrtoint = ptrtoint {}* %21 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %21, i64 3, {}* %22, {}* %25, {}* %"closure->LAMBDA", {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %27
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.13"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !101 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.13^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest13, %normal-dest12, %mvn-final, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %16 = load %"class.core::T_O"*, %"class.core::T_O"** %15, align 8, !tbaa !74
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 489), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %mvn-final unwind label %cleanup-lpad

mvn-final:                                        ; preds = %normal-dest5
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 491), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %mvn-final
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %22, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.14", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.14^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 11396, i64 350, i64 0, i64 1, %"class.core::T_O"* %16)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest12
  %ptrtoint14 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint15 = add i64 %ptrtoint14, 7
  %entry-point-addr16 = inttoptr i64 %entry-point-addr-uint15 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point17 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr16, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point17({}* %21, i64 1, {}* %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest20 unwind label %cleanup-lpad

normal-dest20:                                    ; preds = %normal-dest13
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.14"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !102 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.14^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %16 = bitcast %"class.core::T_O"** %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !74
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 482), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %20 = add i64 %17, -3
  %21 = inttoptr i64 %20 to {}**
  %22 = load {}*, {}** %21, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %19 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %19, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^360^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !103 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^360^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G105688.0 = phi {}* [ %18, %header-check-br ], [ %G105688.1, %normal-dest17 ], [ %G105688.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 512), align 16
  %ptrtoint43 = ptrtoint {}* %G105688.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G105688.0, i64 2, {}* %"closure->CWR-SETZE_INVERSE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests28, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 512), align 16
  %"closure->CWR-SETZE_INVERSE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 11634, i64 360, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 511), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105688.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %maybe-more-tests28
  %ptrtoint31 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105688.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR-SETZE_INVERSE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 514), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR-SETZE_INVERSE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1440 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 512), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !104 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest229, %tag20
  %W.0 = phi {}* [ %29, %tag20 ], [ %W.1, %normal-dest229 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 509), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest96 unwind label %cleanup-lpad.loopexit

tag2:                                             ; preds = %normal-dest259
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 507), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest110 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag5:                                             ; preds = %tag74
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %16 = icmp eq {}* %"%DOLIST-VAR137.0498", %15
  %.val484 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105738.0 = select i1 %16, {}* %.val484, {}* %15
  %17 = icmp eq {}* %G105738.0, %15
  br i1 %17, label %tag22, label %tag84

tag11:                                            ; preds = %normal-dest308
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 503), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest129 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag14:                                            ; preds = %normal-dest117
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 509), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest144 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag17:                                            ; preds = %tag84
  %22 = add i64 %68, 5
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8
  br label %tag72.backedge

tag72.backedge:                                   ; preds = %tag17, %normal-dest369
  %25 = phi {}* [ %75, %tag17 ], [ %153, %normal-dest369 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %24, %tag17 ], [ %"%DOLIST-VAR.2", %normal-dest369 ]
  %26 = icmp eq {}* %"%DOLIST-VAR.0.be", %25
  br i1 %26, label %tag48, label %tag73

tag20:                                            ; preds = %tag37
  %27 = add i64 %39, -3
  %28 = inttoptr i64 %27 to {}**
  %29 = load {}*, {}** %28, align 8
  br label %tag1

tag22:                                            ; preds = %tag5
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest160 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag27:                                            ; preds = %normal-dest103
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %33 = icmp eq {}* %"%DOLIST-VAR108.0497", %32
  %.val488 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105757.0 = select i1 %33, {}* %.val488, {}* %32
  %34 = icmp eq {}* %G105757.0, %32
  br i1 %34, label %tag28, label %tag74

tag28:                                            ; preds = %tag27
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest180 unwind label %cleanup-lpad.loopexit

tag30:                                            ; preds = %tag73
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest194 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag37:                                            ; preds = %tag37.preheader, %tag69.backedge
  %.val487 = phi {}* [ %107, %tag69.backedge ], [ %85, %tag37.preheader ]
  %"%DOLIST-VAR108.0497" = phi {}* [ %"%DOLIST-VAR108.0.be", %tag69.backedge ], [ %G105668.0, %tag37.preheader ]
  %39 = ptrtoint {}* %"%DOLIST-VAR108.0497" to i64
  %tag-only219428 = and i64 %39, 7
  %consp-test220 = icmp eq i64 %tag-only219428, 3
  %.val486 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105787.0 = select i1 %consp-test220, {}* %.val486, {}* %.val487
  %40 = icmp eq {}* %G105787.0, %.val487
  br i1 %40, label %tag43, label %tag20

tag40:                                            ; preds = %tag73
  %41 = add i64 %68, -3
  %42 = inttoptr i64 %41 to {}**
  %43 = load {}*, {}** %42, align 8
  br label %tag56

tag41:                                            ; preds = %normal-dest103
  %44 = add i64 %39, 5
  %45 = inttoptr i64 %44 to {}**
  %46 = load {}*, {}** %45, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag69.backedge

tag43:                                            ; preds = %tag37
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest222 unwind label %cleanup-lpad.loopexit

tag48:                                            ; preds = %tag65, %tag72.backedge, %normal-dest92
  %49 = phi {}* [ %79, %normal-dest92 ], [ %25, %tag72.backedge ], [ %75, %tag65 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %50 = insertvalue { {}*, i64 } undef, {}* %49, 0
  %51 = insertvalue { {}*, i64 } %50, i64 1, 1
  ret { {}*, i64 } %51

tag53:                                            ; preds = %normal-dest280, %tag80
  %SLOT.0 = phi {}* [ %74, %tag80 ], [ %SLOT.1, %normal-dest280 ]
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 505), align 8
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest238 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag54:                                            ; preds = %tag74
  %54 = add i64 %64, 5
  %55 = inttoptr i64 %54 to {}**
  %56 = load {}*, {}** %55, align 8
  %.pre500 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag32.backedge

tag55:                                            ; preds = %tag63
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %58 = invoke {}* @cc_safe_fdefinition({}* %57)
          to label %normal-dest272 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag56:                                            ; preds = %normal-dest202, %tag40
  %OBJEKT.0 = phi {}* [ %43, %tag40 ], [ %OBJEKT.1, %normal-dest202 ]
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 218), align 16
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest287 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag57:                                            ; preds = %normal-dest294
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest301 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag58:                                            ; preds = %normal-dest117
  %63 = icmp eq {}* %G105668.0, %85
  br i1 %63, label %tag74, label %tag37.preheader

tag37.preheader:                                  ; preds = %tag58
  br label %tag37

tag63:                                            ; preds = %tag63.preheader, %tag32.backedge
  %.val479 = phi {}* [ %99, %tag32.backedge ], [ %88, %tag63.preheader ]
  %"%DOLIST-VAR137.0498" = phi {}* [ %"%DOLIST-VAR137.0.be", %tag32.backedge ], [ %"%DOLIST-VAR137.1", %tag63.preheader ]
  %64 = ptrtoint {}* %"%DOLIST-VAR137.0498" to i64
  %tag-only331406 = and i64 %64, 7
  %consp-test332 = icmp eq i64 %tag-only331406, 3
  %.val478 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105842.0 = select i1 %consp-test332, {}* %.val478, {}* %.val479
  %65 = icmp eq {}* %G105842.0, %.val479
  br i1 %65, label %tag55, label %tag80

tag65:                                            ; preds = %tag84
  %66 = icmp eq {}* %"%DOLIST-VAR.0499", %75
  %.val490 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105719.0 = select i1 %66, {}* %.val490, {}* %75
  %67 = icmp eq {}* %G105719.0, %75
  br i1 %67, label %tag76, label %tag48

tag73:                                            ; preds = %tag73.preheader, %tag72.backedge
  %.val473 = phi {}* [ %25, %tag72.backedge ], [ %79, %tag73.preheader ]
  %"%DOLIST-VAR.0499" = phi {}* [ %"%DOLIST-VAR.0.be", %tag72.backedge ], [ %"%DOLIST-VAR.1", %tag73.preheader ]
  %68 = ptrtoint {}* %"%DOLIST-VAR.0499" to i64
  %tag-only350393 = and i64 %68, 7
  %consp-test351 = icmp eq i64 %tag-only350393, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105884.0 = select i1 %consp-test351, {}* %.val, {}* %.val473
  %69 = icmp eq {}* %G105884.0, %.val473
  br i1 %69, label %tag30, label %tag40

tag74:                                            ; preds = %tag27, %tag69.backedge, %tag58, %normal-dest144, %normal-dest259
  br i1 %consp-test332, label %tag54, label %tag5

tag76:                                            ; preds = %tag65
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %71 = invoke {}* @cc_safe_fdefinition({}* %70)
          to label %normal-dest362 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag80:                                            ; preds = %tag63
  %72 = add i64 %64, -3
  %73 = inttoptr i64 %72 to {}**
  %74 = load {}*, {}** %73, align 8
  br label %tag53

tag84:                                            ; preds = %tag5, %tag32.backedge, %normal-dest136, %normal-dest294, %normal-dest308
  %75 = phi {}* [ %88, %normal-dest136 ], [ %140, %normal-dest294 ], [ %144, %normal-dest308 ], [ %99, %tag32.backedge ], [ %15, %tag5 ]
  br i1 %consp-test351, label %tag17, label %tag65

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest96, %tag28, %normal-dest180, %tag43, %normal-dest222
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest272, %tag55, %normal-dest252, %normal-dest245, %normal-dest238, %tag53, %normal-dest160, %tag22, %normal-dest144, %tag14, %normal-dest110, %tag2
  %lpad.loopexit492 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %tag11, %normal-dest129, %tag30, %normal-dest194, %tag56, %normal-dest287, %tag57, %normal-dest301, %tag76, %normal-dest362
  %lpad.loopexit495 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %normal-dest, %normal-dest89, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit492, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit495, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 501), align 8
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest89 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest89:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %77 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %77, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest92 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest92:                                    ; preds = %normal-dest89
  %.elt = extractvalue { {}*, i64 } %78, 0
  %.elt392 = extractvalue { {}*, i64 } %78, 1
  %cond = icmp eq i64 %.elt392, 0
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %79, {}* %.elt
  %80 = icmp eq {}* %"%DOLIST-VAR.1", %79
  br i1 %80, label %tag48, label %tag73.preheader

tag73.preheader:                                  ; preds = %normal-dest92
  br label %tag73

normal-dest96:                                    ; preds = %tag1
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint97 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint98 = add i64 %ptrtoint97, 7
  %entry-point-addr99 = inttoptr i64 %entry-point-addr-uint98 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point100 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr99, align 8
  %83 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point100({}* %12, i64 5, {}* %W.0, {}* %G105667.0, {}* %OBJEKT.0, {}* %81, {}* %82)
          to label %normal-dest103 unwind label %cleanup-lpad.loopexit

normal-dest103:                                   ; preds = %normal-dest96
  br i1 %consp-test220, label %tag41, label %tag27

normal-dest110:                                   ; preds = %tag2
  %ptrtoint111 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint112 = add i64 %ptrtoint111, 7
  %entry-point-addr113 = inttoptr i64 %entry-point-addr-uint112 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point114 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr113, align 8
  %84 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point114({}* %14, i64 1, {}* %G105668.0, {}* null, {}* null, {}* null)
          to label %normal-dest117 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest117:                                   ; preds = %normal-dest110
  %.elt416 = extractvalue { {}*, i64 } %84, 0
  %.elt418 = extractvalue { {}*, i64 } %84, 1
  %cond384 = icmp eq i64 %.elt418, 0
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105798.0 = select i1 %cond384, {}* %85, {}* %.elt416
  %86 = icmp eq {}* %G105798.0, %85
  br i1 %86, label %tag58, label %tag14

normal-dest129:                                   ; preds = %tag11
  %ptrtoint130 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint131 = add i64 %ptrtoint130, 7
  %entry-point-addr132 = inttoptr i64 %entry-point-addr-uint131 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point133 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr132, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point133({}* %19, i64 1, {}* %OBJEKT.0, {}* null, {}* null, {}* null)
          to label %normal-dest136 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest136:                                   ; preds = %normal-dest129
  %.elt403 = extractvalue { {}*, i64 } %87, 0
  %.elt405 = extractvalue { {}*, i64 } %87, 1
  %cond381 = icmp eq i64 %.elt405, 0
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR137.1" = select i1 %cond381, {}* %88, {}* %.elt403
  %89 = icmp eq {}* %"%DOLIST-VAR137.1", %88
  br i1 %89, label %tag84, label %tag63.preheader

tag63.preheader:                                  ; preds = %normal-dest136
  br label %tag63

normal-dest144:                                   ; preds = %tag14
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint145 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint146 = add i64 %ptrtoint145, 7
  %entry-point-addr147 = inttoptr i64 %entry-point-addr-uint146 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point148 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr147, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point148({}* %21, i64 5, {}* %G105668.0, {}* %G105667.0, {}* %OBJEKT.0, {}* %90, {}* %91)
          to label %tag74 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest160:                                   ; preds = %tag22
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %95 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint161 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint162 = add i64 %ptrtoint161, 7
  %entry-point-addr163 = inttoptr i64 %entry-point-addr-uint162 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point164 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr163, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point164({}* %31, i64 5, {}* %93, {}* %94, {}* %"%DOLIST-VAR137.0498", {}* %95, {}* %96)
          to label %normal-dest167 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest167:                                   ; preds = %normal-dest160
  %.elt425 = extractvalue { {}*, i64 } %97, 0
  %.elt427 = extractvalue { {}*, i64 } %97, 1
  %cond387 = icmp eq i64 %.elt427, 0
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR137.2" = select i1 %cond387, {}* %98, {}* %.elt425
  br label %tag32.backedge

tag32.backedge:                                   ; preds = %normal-dest167, %tag54
  %99 = phi {}* [ %.pre500, %tag54 ], [ %98, %normal-dest167 ]
  %"%DOLIST-VAR137.0.be" = phi {}* [ %56, %tag54 ], [ %"%DOLIST-VAR137.2", %normal-dest167 ]
  %100 = icmp eq {}* %"%DOLIST-VAR137.0.be", %99
  br i1 %100, label %tag84, label %tag63

normal-dest180:                                   ; preds = %tag28
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %102 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %103 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %104 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint181 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint182 = add i64 %ptrtoint181, 7
  %entry-point-addr183 = inttoptr i64 %entry-point-addr-uint182 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point184 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr183, align 8
  %105 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point184({}* %36, i64 5, {}* %101, {}* %102, {}* %"%DOLIST-VAR108.0497", {}* %103, {}* %104)
          to label %normal-dest187 unwind label %cleanup-lpad.loopexit

normal-dest187:                                   ; preds = %normal-dest180
  %.elt435 = extractvalue { {}*, i64 } %105, 0
  %.elt437 = extractvalue { {}*, i64 } %105, 1
  %cond385 = icmp eq i64 %.elt437, 0
  %106 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR108.1" = select i1 %cond385, {}* %106, {}* %.elt435
  br label %tag69.backedge

tag69.backedge:                                   ; preds = %normal-dest187, %tag41
  %107 = phi {}* [ %.pre, %tag41 ], [ %106, %normal-dest187 ]
  %"%DOLIST-VAR108.0.be" = phi {}* [ %46, %tag41 ], [ %"%DOLIST-VAR108.1", %normal-dest187 ]
  %108 = icmp eq {}* %"%DOLIST-VAR108.0.be", %107
  br i1 %108, label %tag74, label %tag37

normal-dest194:                                   ; preds = %tag30
  %109 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %110 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %111 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %112 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint196 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint197 = add i64 %ptrtoint196, 7
  %entry-point-addr198 = inttoptr i64 %entry-point-addr-uint197 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point199 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr198, align 8
  %113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point199({}* %38, i64 5, {}* %109, {}* %110, {}* %"%DOLIST-VAR.0499", {}* %111, {}* %112)
          to label %normal-dest202 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest202:                                   ; preds = %normal-dest194
  %.elt452 = extractvalue { {}*, i64 } %113, 0
  %.elt454 = extractvalue { {}*, i64 } %113, 1
  %cond390 = icmp eq i64 %.elt454, 0
  %114 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKT.1 = select i1 %cond390, {}* %114, {}* %.elt452
  br label %tag56

normal-dest222:                                   ; preds = %tag43
  %115 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %117 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint223 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint224 = add i64 %ptrtoint223, 7
  %entry-point-addr225 = inttoptr i64 %entry-point-addr-uint224 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point226 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr225, align 8
  %119 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point226({}* %48, i64 5, {}* %115, {}* %116, {}* %"%DOLIST-VAR108.0497", {}* %117, {}* %118)
          to label %normal-dest229 unwind label %cleanup-lpad.loopexit

normal-dest229:                                   ; preds = %normal-dest222
  %.elt439 = extractvalue { {}*, i64 } %119, 0
  %.elt441 = extractvalue { {}*, i64 } %119, 1
  %cond386 = icmp eq i64 %.elt441, 0
  %120 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %W.1 = select i1 %cond386, {}* %120, {}* %.elt439
  br label %tag1

normal-dest238:                                   ; preds = %tag53
  %ptrtoint239 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint240 = add i64 %ptrtoint239, 7
  %entry-point-addr241 = inttoptr i64 %entry-point-addr-uint240 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point242 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr241, align 8
  %121 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point242({}* %53, i64 2, {}* %OBJEKT.0, {}* %SLOT.0, {}* null, {}* null)
          to label %normal-dest245 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest245:                                   ; preds = %normal-dest238
  %.elt408 = extractvalue { {}*, i64 } %121, 0
  %.elt410 = extractvalue { {}*, i64 } %121, 1
  %cond382 = icmp eq i64 %.elt410, 0
  %122 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105667.0 = select i1 %cond382, {}* %122, {}* %.elt408
  %123 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %124 = invoke {}* @cc_safe_fdefinition({}* %123)
          to label %normal-dest252 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest252:                                   ; preds = %normal-dest245
  %ptrtoint253 = ptrtoint {}* %124 to i64
  %entry-point-addr-uint254 = add i64 %ptrtoint253, 7
  %entry-point-addr255 = inttoptr i64 %entry-point-addr-uint254 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point256 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr255, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point256({}* %124, i64 2, {}* %OBJEKT.0, {}* %SLOT.0, {}* null, {}* null)
          to label %normal-dest259 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest259:                                   ; preds = %normal-dest252
  %.elt412 = extractvalue { {}*, i64 } %125, 0
  %.elt414 = extractvalue { {}*, i64 } %125, 1
  %cond383 = icmp eq i64 %.elt414, 0
  %126 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105668.0 = select i1 %cond383, {}* %126, {}* %.elt412
  %127 = icmp eq {}* %G105668.0, %126
  %.val480 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105670.0 = select i1 %127, {}* %.val480, {}* %126
  %128 = icmp eq {}* %G105670.0, %126
  %129 = icmp eq {}* %G105667.0, %126
  %.472 = select i1 %129, {}* %.val480, {}* %126
  %object156.0 = select i1 %128, {}* %.472, {}* %G105670.0
  %130 = icmp eq {}* %object156.0, %126
  %G105803.0 = select i1 %130, {}* %.val480, {}* %126
  %131 = icmp eq {}* %G105803.0, %126
  br i1 %131, label %tag74, label %tag2

normal-dest272:                                   ; preds = %tag55
  %132 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %133 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %135 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint274 = ptrtoint {}* %58 to i64
  %entry-point-addr-uint275 = add i64 %ptrtoint274, 7
  %entry-point-addr276 = inttoptr i64 %entry-point-addr-uint275 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point277 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr276, align 8
  %136 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point277({}* %58, i64 5, {}* %132, {}* %133, {}* %"%DOLIST-VAR137.0498", {}* %134, {}* %135)
          to label %normal-dest280 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest280:                                   ; preds = %normal-dest272
  %.elt443 = extractvalue { {}*, i64 } %136, 0
  %.elt445 = extractvalue { {}*, i64 } %136, 1
  %cond388 = icmp eq i64 %.elt445, 0
  %137 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %SLOT.1 = select i1 %cond388, {}* %137, {}* %.elt443
  br label %tag53

normal-dest287:                                   ; preds = %tag56
  %138 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint288 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint289 = add i64 %ptrtoint288, 7
  %entry-point-addr290 = inttoptr i64 %entry-point-addr-uint289 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point291 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr290, align 8
  %139 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point291({}* %60, i64 2, {}* %OBJEKT.0, {}* %138, {}* null, {}* null)
          to label %normal-dest294 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest294:                                   ; preds = %normal-dest287
  %.elt395 = extractvalue { {}*, i64 } %139, 0
  %.elt397 = extractvalue { {}*, i64 } %139, 1
  %cond379 = icmp eq i64 %.elt397, 0
  %140 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105862.0 = select i1 %cond379, {}* %140, {}* %.elt395
  %141 = icmp eq {}* %G105862.0, %140
  br i1 %141, label %tag84, label %tag57

normal-dest301:                                   ; preds = %tag57
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint302 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint303 = add i64 %ptrtoint302, 7
  %entry-point-addr304 = inttoptr i64 %entry-point-addr-uint303 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point305 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr304, align 8
  %143 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point305({}* %62, i64 2, {}* %OBJEKT.0, {}* %142, {}* null, {}* null)
          to label %normal-dest308 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest308:                                   ; preds = %normal-dest301
  %.elt399 = extractvalue { {}*, i64 } %143, 0
  %.elt401 = extractvalue { {}*, i64 } %143, 1
  %cond380 = icmp eq i64 %.elt401, 0
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105664.0 = select i1 %cond380, {}* %144, {}* %.elt399
  %145 = icmp eq {}* %G105664.0, %144
  %.val474 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0 = select i1 %145, {}* %.val474, {}* %144
  %146 = icmp eq {}* %object.0, %144
  %G105849.0 = select i1 %146, {}* %.val474, {}* %144
  %147 = icmp eq {}* %G105849.0, %144
  br i1 %147, label %tag84, label %tag11

normal-dest362:                                   ; preds = %tag76
  %148 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %149 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %151 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint363 = ptrtoint {}* %71 to i64
  %entry-point-addr-uint364 = add i64 %ptrtoint363, 7
  %entry-point-addr365 = inttoptr i64 %entry-point-addr-uint364 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point366 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr365, align 8
  %152 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point366({}* %71, i64 5, {}* %148, {}* %149, {}* %"%DOLIST-VAR.0499", {}* %150, {}* %151)
          to label %normal-dest369 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest369:                                   ; preds = %normal-dest362
  %.elt448 = extractvalue { {}*, i64 } %152, 0
  %.elt450 = extractvalue { {}*, i64 } %152, 1
  %cond389 = icmp eq i64 %.elt450, 0
  %153 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond389, {}* %153, {}* %.elt448
  br label %tag72.backedge
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^385^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !105 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^385^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G105916.0 = phi {}* [ %18, %header-check-br ], [ %G105916.1, %normal-dest17 ], [ %G105916.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 518), align 16
  %ptrtoint43 = ptrtoint {}* %G105916.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G105916.0, i64 2, {}* %"closure->CWR-LOESCHE_INVERSE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 518), align 16
  %"closure->CWR-LOESCHE_INVERSE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 12581, i64 385, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105916.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %23 = icmp ult i64 %.off123, 5
  br i1 %23, label %maybe-more-tests28, label %tag3

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 517), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt97 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt97, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105916.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR-LOESCHE_INVERSE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 520), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR-LOESCHE_INVERSE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 301), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 518), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 521), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 1540 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 518), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !106 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %tag2
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest55 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag1:                                             ; preds = %normal-dest183, %tag20
  %SLOT.0 = phi {}* [ %33, %tag20 ], [ %SLOT.1, %normal-dest183 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 454), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad.loopexit

tag2:                                             ; preds = %tag2.preheader, %tag22.backedge
  %.val265 = phi {}* [ %76, %tag22.backedge ], [ %54, %tag2.preheader ]
  %"%DOLIST-VAR.0277" = phi {}* [ %"%DOLIST-VAR.0.be", %tag22.backedge ], [ %"%DOLIST-VAR.1", %tag2.preheader ]
  %15 = ptrtoint {}* %"%DOLIST-VAR.0277" to i64
  %tag-only219 = and i64 %15, 7
  %consp-test = icmp eq i64 %tag-only219, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106026.0 = select i1 %consp-test, {}* %.val, {}* %.val265
  %16 = icmp eq {}* %G106026.0, %.val265
  br i1 %16, label %tag, label %tag25

tag4:                                             ; preds = %tag33
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest101 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag7:                                             ; preds = %tag33, %tag22.backedge, %normal-dest51
  %19 = phi {}* [ %54, %normal-dest51 ], [ %.val271, %tag33 ], [ %76, %tag22.backedge ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %20 = insertvalue { {}*, i64 } undef, {}* %19, 0
  %21 = insertvalue { {}*, i64 } %20, i64 1, 1
  ret { {}*, i64 } %21

tag10:                                            ; preds = %normal-dest141, %normal-dest90
  br i1 %consp-test174, label %tag30, label %tag16

tag42.backedge:                                   ; preds = %normal-dest162, %tag30
  %22 = phi {}* [ %.pre, %tag30 ], [ %87, %normal-dest162 ]
  %"%DOLIST-VAR117.0.be" = phi {}* [ %45, %tag30 ], [ %"%DOLIST-VAR117.2", %normal-dest162 ]
  %23 = icmp eq {}* %"%DOLIST-VAR117.0.be", %22
  br i1 %23, label %tag34, label %tag26

tag15:                                            ; preds = %normal-dest62, %tag25
  %OBJEKT.0 = phi {}* [ %38, %tag25 ], [ %OBJEKT.1, %normal-dest62 ]
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 503), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest123 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag16:                                            ; preds = %tag10
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %27 = icmp eq {}* %"%DOLIST-VAR117.0276", %26
  %.val268 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105966.0 = select i1 %27, {}* %.val268, {}* %26
  %28 = icmp eq {}* %G105966.0, %26
  br i1 %28, label %tag24, label %tag34

tag19:                                            ; preds = %normal-dest90
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 515), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest141 unwind label %cleanup-lpad.loopexit

tag20:                                            ; preds = %tag26
  %31 = add i64 %39, -3
  %32 = inttoptr i64 %31 to {}**
  %33 = load {}*, {}** %32, align 8
  br label %tag1

tag24:                                            ; preds = %tag16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest155 unwind label %cleanup-lpad.loopexit

tag25:                                            ; preds = %tag2
  %36 = add i64 %15, -3
  %37 = inttoptr i64 %36 to {}**
  %38 = load {}*, {}** %37, align 8
  br label %tag15

tag26:                                            ; preds = %tag26.preheader, %tag42.backedge
  %.val267 = phi {}* [ %22, %tag42.backedge ], [ %79, %tag26.preheader ]
  %"%DOLIST-VAR117.0276" = phi {}* [ %"%DOLIST-VAR117.0.be", %tag42.backedge ], [ %"%DOLIST-VAR117.1", %tag26.preheader ]
  %39 = ptrtoint {}* %"%DOLIST-VAR117.0276" to i64
  %tag-only173224 = and i64 %39, 7
  %consp-test174 = icmp eq i64 %tag-only173224, 3
  %.val266 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106003.0 = select i1 %consp-test174, {}* %.val266, {}* %.val267
  %40 = icmp eq {}* %G106003.0, %.val267
  br i1 %40, label %tag29, label %tag20

tag29:                                            ; preds = %tag26
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest176 unwind label %cleanup-lpad.loopexit

tag30:                                            ; preds = %tag10
  %43 = add i64 %39, 5
  %44 = inttoptr i64 %43 to {}**
  %45 = load {}*, {}** %44, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag42.backedge

tag33:                                            ; preds = %tag34
  %46 = icmp eq {}* %"%DOLIST-VAR.0277", %.val271
  %.val270 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G105947.0 = select i1 %46, {}* %.val270, {}* %.val271
  %47 = icmp eq {}* %G105947.0, %.val271
  br i1 %47, label %tag4, label %tag7

tag34:                                            ; preds = %tag42.backedge, %tag16, %normal-dest130
  %.val271 = phi {}* [ %79, %normal-dest130 ], [ %22, %tag42.backedge ], [ %26, %tag16 ]
  br i1 %consp-test, label %tag37, label %tag33

tag37:                                            ; preds = %tag34
  %48 = add i64 %15, 5
  %49 = inttoptr i64 %48 to {}**
  %50 = load {}*, {}** %49, align 8
  br label %tag22.backedge

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest69, %normal-dest71, %normal-dest78, %tag19, %normal-dest141, %tag24, %normal-dest155, %tag29, %normal-dest176
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest123, %tag15, %normal-dest101, %tag4, %normal-dest55, %tag
  %lpad.loopexit272 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %normal-dest48, %normal-dest
  %lpad.loopexit.split-lp273 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit272, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp273, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 501), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest48 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest48:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %52 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %52, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest51 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest51:                                    ; preds = %normal-dest48
  %.elt = extractvalue { {}*, i64 } %53, 0
  %.elt218 = extractvalue { {}*, i64 } %53, 1
  %cond = icmp eq i64 %.elt218, 0
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %54, {}* %.elt
  %55 = icmp eq {}* %"%DOLIST-VAR.1", %54
  br i1 %55, label %tag7, label %tag2.preheader

tag2.preheader:                                   ; preds = %normal-dest51
  br label %tag2

normal-dest55:                                    ; preds = %tag
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint56 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %12, i64 5, {}* %56, {}* %57, {}* %"%DOLIST-VAR.0277", {}* %58, {}* %59)
          to label %normal-dest62 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest62:                                    ; preds = %normal-dest55
  %.elt252 = extractvalue { {}*, i64 } %60, 0
  %.elt254 = extractvalue { {}*, i64 } %60, 1
  %cond216 = icmp eq i64 %.elt254, 0
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKT.1 = select i1 %cond216, {}* %61, {}* %.elt252
  br label %tag15

normal-dest69:                                    ; preds = %tag1
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %64 = invoke {}* @cc_safe_fdefinition({}* %63)
          to label %normal-dest71 unwind label %cleanup-lpad.loopexit

normal-dest71:                                    ; preds = %normal-dest69
  %ptrtoint72 = ptrtoint {}* %64 to i64
  %entry-point-addr-uint73 = add i64 %ptrtoint72, 7
  %entry-point-addr74 = inttoptr i64 %entry-point-addr-uint73 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point75 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr74, align 8
  %65 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point75({}* %64, i64 2, {}* %OBJEKT.0, {}* %SLOT.0, {}* null, {}* null)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit

normal-dest78:                                    ; preds = %normal-dest71
  %.elt226 = extractvalue { {}*, i64 } %65, 0
  %.elt228 = extractvalue { {}*, i64 } %65, 1
  %cond211 = icmp eq i64 %.elt228, 0
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105981.0 = select i1 %cond211, {}* %66, {}* %.elt226
  %ptrtoint84 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint85 = add i64 %ptrtoint84, 7
  %entry-point-addr86 = inttoptr i64 %entry-point-addr-uint85 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point87 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr86, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point87({}* %14, i64 2, {}* %62, {}* %G105981.0, {}* null, {}* null)
          to label %normal-dest90 unwind label %cleanup-lpad.loopexit

normal-dest90:                                    ; preds = %normal-dest78
  %.elt230 = extractvalue { {}*, i64 } %67, 0
  %.elt232 = extractvalue { {}*, i64 } %67, 1
  %cond212 = icmp eq i64 %.elt232, 0
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G105977.0 = select i1 %cond212, {}* %68, {}* %.elt230
  %69 = icmp eq {}* %G105977.0, %68
  br i1 %69, label %tag10, label %tag19

normal-dest101:                                   ; preds = %tag4
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint103 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint104 = add i64 %ptrtoint103, 7
  %entry-point-addr105 = inttoptr i64 %entry-point-addr-uint104 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point106 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr105, align 8
  %74 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point106({}* %18, i64 5, {}* %70, {}* %71, {}* %"%DOLIST-VAR.0277", {}* %72, {}* %73)
          to label %normal-dest109 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest109:                                   ; preds = %normal-dest101
  %.elt248 = extractvalue { {}*, i64 } %74, 0
  %.elt250 = extractvalue { {}*, i64 } %74, 1
  %cond215 = icmp eq i64 %.elt250, 0
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond215, {}* %75, {}* %.elt248
  br label %tag22.backedge

tag22.backedge:                                   ; preds = %normal-dest109, %tag37
  %76 = phi {}* [ %.val271, %tag37 ], [ %75, %normal-dest109 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %50, %tag37 ], [ %"%DOLIST-VAR.2", %normal-dest109 ]
  %77 = icmp eq {}* %"%DOLIST-VAR.0.be", %76
  br i1 %77, label %tag7, label %tag2

normal-dest123:                                   ; preds = %tag15
  %ptrtoint124 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint125 = add i64 %ptrtoint124, 7
  %entry-point-addr126 = inttoptr i64 %entry-point-addr-uint125 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point127 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr126, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point127({}* %25, i64 1, {}* %OBJEKT.0, {}* null, {}* null, {}* null)
          to label %normal-dest130 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest130:                                   ; preds = %normal-dest123
  %.elt221 = extractvalue { {}*, i64 } %78, 0
  %.elt223 = extractvalue { {}*, i64 } %78, 1
  %cond210 = icmp eq i64 %.elt223, 0
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR117.1" = select i1 %cond210, {}* %79, {}* %.elt221
  %80 = icmp eq {}* %"%DOLIST-VAR117.1", %79
  br i1 %80, label %tag34, label %tag26.preheader

tag26.preheader:                                  ; preds = %normal-dest130
  br label %tag26

normal-dest141:                                   ; preds = %tag19
  %ptrtoint142 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint143 = add i64 %ptrtoint142, 7
  %entry-point-addr144 = inttoptr i64 %entry-point-addr-uint143 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point145 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr144, align 8
  %81 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point145({}* %30, i64 2, {}* %OBJEKT.0, {}* %SLOT.0, {}* null, {}* null)
          to label %tag10 unwind label %cleanup-lpad.loopexit

normal-dest155:                                   ; preds = %tag24
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint156 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint157 = add i64 %ptrtoint156, 7
  %entry-point-addr158 = inttoptr i64 %entry-point-addr-uint157 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point159 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr158, align 8
  %86 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point159({}* %35, i64 5, {}* %82, {}* %83, {}* %"%DOLIST-VAR117.0276", {}* %84, {}* %85)
          to label %normal-dest162 unwind label %cleanup-lpad.loopexit

normal-dest162:                                   ; preds = %normal-dest155
  %.elt239 = extractvalue { {}*, i64 } %86, 0
  %.elt241 = extractvalue { {}*, i64 } %86, 1
  %cond213 = icmp eq i64 %.elt241, 0
  %87 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR117.2" = select i1 %cond213, {}* %87, {}* %.elt239
  br label %tag42.backedge

normal-dest176:                                   ; preds = %tag29
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint177 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint178 = add i64 %ptrtoint177, 7
  %entry-point-addr179 = inttoptr i64 %entry-point-addr-uint178 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point180 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr179, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point180({}* %42, i64 5, {}* %88, {}* %89, {}* %"%DOLIST-VAR117.0276", {}* %90, {}* %91)
          to label %normal-dest183 unwind label %cleanup-lpad.loopexit

normal-dest183:                                   ; preds = %normal-dest176
  %.elt243 = extractvalue { {}*, i64 } %92, 0
  %.elt245 = extractvalue { {}*, i64 } %92, 1
  %cond214 = icmp eq i64 %.elt245, 0
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %SLOT.1 = select i1 %cond214, {}* %93, {}* %.elt243
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^393^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !107 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^393^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G106049.0 = phi {}* [ %18, %header-check-br ], [ %G106049.1, %normal-dest63 ], [ %G106049.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 182), align 16
  %ptrtoint22 = ptrtoint {}* %G106049.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G106049.0, i64 2, {}* %"closure->CWR=NEUE_INVERSE", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests21, %normal-dest56, %tag3, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 182), align 16
  %"closure->CWR=NEUE_INVERSE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 12854, i64 393, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR=NEUE_INVERSE", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 529), align 8
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR=NEUE_INVERSE", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 1572 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 182), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %tag3
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 528), align 16
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106049.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag1

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106049.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !108 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest51, %normal-dest45, %normal-dest38, %normal-dest32, %normal-dest25, %normal-dest19, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 522), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 170), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 524), align 16
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 1, {}* %16, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt60 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt60, 0
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106074.0 = select i1 %cond, {}* %18, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %13, i64 1, {}* %G106074.0, {}* null, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 518), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest19
  %ptrtoint26 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint27 = add i64 %ptrtoint26, 7
  %entry-point-addr28 = inttoptr i64 %entry-point-addr-uint27 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point29 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr28, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point29({}* %21, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest25
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 512), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest32
  %ptrtoint39 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint40 = add i64 %ptrtoint39, 7
  %entry-point-addr41 = inttoptr i64 %entry-point-addr-uint40 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point42 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr41, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point42({}* %24, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest38
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 526), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest51 unwind label %cleanup-lpad

normal-dest51:                                    ; preds = %normal-dest45
  %ptrtoint52 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint53 = add i64 %ptrtoint52, 7
  %entry-point-addr54 = inttoptr i64 %entry-point-addr-uint53 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point55 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr54, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point55({}* %27, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest51
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %28
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^401^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !109 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^401^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G106105.0 = phi {}* [ %18, %header-check-br ], [ %G106105.1, %normal-dest17 ], [ %G106105.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 537), align 8
  %ptrtoint29 = ptrtoint {}* %G106105.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G106105.0, i64 2, {}* %"closure->CWR-EIN_DYNAMISCHER_INFORMANT", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 537), align 8
  %"closure->CWR-EIN_DYNAMISCHER_INFORMANT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13029, i64 401, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 536), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106105.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 539), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR-EIN_DYNAMISCHER_INFORMANT", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 542), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR-EIN_DYNAMISCHER_INFORMANT", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 1604 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 537), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106105.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !110 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc362 unwind label %cleanup-lpad.loopexit.split-lp

.noexc362:                                        ; preds = %10
  unreachable

tag1:                                             ; preds = %header-check-br262, %header-check-br262, %header-check-br262, %header-check-br262
  %11 = ptrtoint {}* %.in350 to i64
  %single-float-tag-only = and i64 %11, 7
  %fixnum-tag-only168348 = and i64 %11, 3
  %fixnump-test169 = icmp ne i64 %fixnum-tag-only168348, 0
  %test198 = icmp eq i64 %single-float-tag-only, 1
  %or.cond371 = and i1 %fixnump-test169, %test198
  br i1 %or.cond371, label %header-check-br195, label %tag56

tag15:                                            ; preds = %tag37, %tag30
  %return-value.sroa.0.0 = phi i64 [ %., %tag30 ], [ %37, %tag37 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %12 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14

tag17:                                            ; preds = %header-check-br195, %header-check-br195, %header-check-br195, %header-check-br195
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest181 unwind label %cleanup-lpad.loopexit

tag26:                                            ; preds = %tag60
  br i1 %35, label %tag27, label %tag55

tag27:                                            ; preds = %tag26
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest226 unwind label %cleanup-lpad.loopexit

tag28:                                            ; preds = %tag55, %normal-dest189
  %19 = phi i64 [ %91, %normal-dest189 ], [ %39, %tag55 ]
  %20 = phi {}* [ %90, %normal-dest189 ], [ %.val378, %tag55 ]
  %G106158.0 = phi {}* [ %G106158.1, %normal-dest189 ], [ %40, %tag55 ]
  %21 = icmp eq {}* %G106158.0, %20
  br i1 %21, label %tag28.tag56_crit_edge, label %tag37

tag28.tag56_crit_edge:                            ; preds = %tag28
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %22 = ptrtoint {}* %.val.pre to i64
  br label %tag56

tag30:                                            ; preds = %tag56, %tag37.tag30_crit_edge, %normal-dest139
  %23 = phi i64 [ %.pre, %tag37.tag30_crit_edge ], [ %87, %normal-dest139 ], [ %44, %tag56 ]
  %24 = phi {}* [ %"%SUBLIST106084.0384", %tag37.tag30_crit_edge ], [ %82, %normal-dest139 ], [ %45, %tag56 ]
  %25 = phi i64 [ %19, %tag37.tag30_crit_edge ], [ %86, %normal-dest139 ], [ %46, %tag56 ]
  %26 = icmp eq {}* %24, %farg0
  %. = select i1 %26, i64 %23, i64 %25
  br label %tag15

tag31:                                            ; preds = %tag60
  %27 = add i64 %37, -3
  %28 = inttoptr i64 %27 to {}**
  %29 = load {}*, {}** %28, align 8
  br label %tag55

tag37:                                            ; preds = %tag28
  %30 = icmp eq {}* %"%SUBLIST106084.0384", %20
  br i1 %30, label %tag37.tag30_crit_edge, label %tag15

tag37.tag30_crit_edge:                            ; preds = %tag37
  %.pre = load i64, i64* bitcast ({}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13) to i64*), align 8
  br label %tag30

tag42:                                            ; preds = %tag43
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest270 unwind label %cleanup-lpad.loopexit.split-lp

tag43:                                            ; preds = %tag43.lr.ph, %tag56
  %33 = phi i64 [ %87, %tag43.lr.ph ], [ %44, %tag56 ]
  %34 = phi i64 [ %86, %tag43.lr.ph ], [ %46, %tag56 ]
  %G106187.0 = phi {}* [ %.val381, %tag43.lr.ph ], [ %.val, %tag56 ]
  %35 = phi i1 [ %84, %tag43.lr.ph ], [ %51, %tag56 ]
  %36 = phi {}* [ %82, %tag43.lr.ph ], [ %45, %tag56 ]
  %"%SUBLIST106084.0384" = phi {}* [ %"%SUBLIST106084.1", %tag43.lr.ph ], [ %49, %tag56 ]
  %37 = ptrtoint {}* %"%SUBLIST106084.0384" to i64
  %tag-only272332 = and i64 %37, 7
  %consp-test273 = icmp eq i64 %tag-only272332, 3
  br i1 %consp-test273, label %tag60, label %tag42

tag55:                                            ; preds = %tag26, %normal-dest233, %tag31
  %38 = phi i64 [ %33, %tag31 ], [ %104, %normal-dest233 ], [ %33, %tag26 ]
  %39 = phi i64 [ %34, %tag31 ], [ %103, %normal-dest233 ], [ %34, %tag26 ]
  %.val378 = phi {}* [ %36, %tag31 ], [ %102, %normal-dest233 ], [ %G106187.0, %tag26 ]
  %40 = phi {}* [ %G106187.0, %tag31 ], [ %.val377.pre, %normal-dest233 ], [ %G106187.0, %tag26 ]
  %.in350 = phi {}* [ %29, %tag31 ], [ %.in, %normal-dest233 ], [ %G106187.0, %tag26 ]
  %41 = bitcast {}* %.in350 to i8*
  %42 = icmp eq {}* %.in350, %farg0
  %G106167.0 = select i1 %42, {}* %40, {}* %.val378
  %43 = icmp eq {}* %G106167.0, %.val378
  br i1 %43, label %tag63, label %tag28

tag56:                                            ; preds = %tag28.tag56_crit_edge, %header-check-br195, %header-check-br262, %tag1, %tag63
  %44 = phi i64 [ %22, %tag28.tag56_crit_edge ], [ %38, %tag63 ], [ %38, %tag1 ], [ %38, %header-check-br262 ], [ %38, %header-check-br195 ]
  %.val = phi {}* [ %.val.pre, %tag28.tag56_crit_edge ], [ %40, %tag63 ], [ %40, %tag1 ], [ %40, %header-check-br262 ], [ %40, %header-check-br195 ]
  %45 = phi {}* [ %20, %tag28.tag56_crit_edge ], [ %.val378, %tag63 ], [ %.val378, %tag1 ], [ %.val378, %header-check-br262 ], [ %.val378, %header-check-br195 ]
  %46 = phi i64 [ %19, %tag28.tag56_crit_edge ], [ %39, %tag63 ], [ %39, %tag1 ], [ %39, %header-check-br262 ], [ %39, %header-check-br195 ]
  %47 = add i64 %37, 5
  %48 = inttoptr i64 %47 to {}**
  %49 = load {}*, {}** %48, align 8
  %50 = icmp eq {}* %49, %45
  %object.0 = select i1 %50, {}* %.val, {}* %45
  %51 = icmp eq {}* %object.0, %45
  %G106133.0 = select i1 %51, {}* %.val, {}* %45
  %52 = icmp eq {}* %G106133.0, %45
  br i1 %52, label %tag30, label %tag43

tag60:                                            ; preds = %tag43
  %53 = icmp eq {}* %G106187.0, %36
  br i1 %53, label %tag26, label %tag31

tag63:                                            ; preds = %tag55
  br i1 %or.cond373, label %header-check-br262, label %tag56

cleanup-lpad.loopexit:                            ; preds = %tag17, %normal-dest181, %tag27, %normal-dest226
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest69, %normal-dest71, %normal-dest74, %normal-dest78, %normal-dest85, %normal-dest92, %normal-dest99, %normal-dest106, %normal-dest113, %normal-dest120, %normal-dest127, %tag42, %normal-dest270, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest69 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest69:                                    ; preds = %normal-dest
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest71 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest71:                                    ; preds = %normal-dest69
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 530), align 16
  %ptrtoint = ptrtoint {}* %57 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %57, i64 1, {}* %58, {}* null, {}* null, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest74:                                    ; preds = %normal-dest71
  %.elt = extractvalue { {}*, i64 } %59, 0
  %.elt311 = extractvalue { {}*, i64 } %59, 1
  %cond = icmp eq i64 %.elt311, 0
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106192.0 = select i1 %cond, {}* %60, {}* %.elt
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest78:                                    ; preds = %normal-dest74
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint79 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint80 = add i64 %ptrtoint79, 7
  %entry-point-addr81 = inttoptr i64 %entry-point-addr-uint80 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point82 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr81, align 8
  %64 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point82({}* %62, i64 1, {}* %63, {}* null, {}* null, {}* null)
          to label %normal-dest85 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest85:                                    ; preds = %normal-dest78
  %.elt313 = extractvalue { {}*, i64 } %64, 0
  %.elt315 = extractvalue { {}*, i64 } %64, 1
  %cond302 = icmp eq i64 %.elt315, 0
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106193.0 = select i1 %cond302, {}* %65, {}* %.elt313
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %67 = invoke {}* @cc_safe_fdefinition({}* %66)
          to label %normal-dest92 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest92:                                    ; preds = %normal-dest85
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint93 = ptrtoint {}* %67 to i64
  %entry-point-addr-uint94 = add i64 %ptrtoint93, 7
  %entry-point-addr95 = inttoptr i64 %entry-point-addr-uint94 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point96 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr95, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point96({}* %67, i64 1, {}* %68, {}* null, {}* null, {}* null)
          to label %normal-dest99 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest99:                                    ; preds = %normal-dest92
  %.elt317 = extractvalue { {}*, i64 } %69, 0
  %.elt319 = extractvalue { {}*, i64 } %69, 1
  %cond303 = icmp eq i64 %.elt319, 0
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106194.0 = select i1 %cond303, {}* %70, {}* %.elt317
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest106 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest106:                                   ; preds = %normal-dest99
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 532), align 16
  %ptrtoint107 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint108 = add i64 %ptrtoint107, 7
  %entry-point-addr109 = inttoptr i64 %entry-point-addr-uint108 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point110 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr109, align 8
  %74 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point110({}* %72, i64 1, {}* %73, {}* null, {}* null, {}* null)
          to label %normal-dest113 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest113:                                   ; preds = %normal-dest106
  %.elt321 = extractvalue { {}*, i64 } %74, 0
  %.elt323 = extractvalue { {}*, i64 } %74, 1
  %cond304 = icmp eq i64 %.elt323, 0
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106195.0 = select i1 %cond304, {}* %75, {}* %.elt321
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest120 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest120:                                   ; preds = %normal-dest113
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 534), align 16
  %ptrtoint121 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint122 = add i64 %ptrtoint121, 7
  %entry-point-addr123 = inttoptr i64 %entry-point-addr-uint122 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point124 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr123, align 8
  %79 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point124({}* %77, i64 1, {}* %78, {}* null, {}* null, {}* null)
          to label %normal-dest127 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest127:                                   ; preds = %normal-dest120
  %.elt325 = extractvalue { {}*, i64 } %79, 0
  %.elt327 = extractvalue { {}*, i64 } %79, 1
  %cond305 = icmp eq i64 %.elt327, 0
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106196.0 = select i1 %cond305, {}* %80, {}* %.elt325
  %ptrtoint133 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint134 = add i64 %ptrtoint133, 7
  %entry-point-addr135 = inttoptr i64 %entry-point-addr-uint134 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point136 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr135, align 8
  %81 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point136({}* %55, i64 6, {}* %G106192.0, {}* %G106193.0, {}* %G106194.0, {}* %G106195.0, {}* %G106196.0, {}* %80)
          to label %normal-dest139 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest139:                                   ; preds = %normal-dest127
  %.elt329 = extractvalue { {}*, i64 } %81, 0
  %.elt331 = extractvalue { {}*, i64 } %81, 1
  %cond306 = icmp eq i64 %.elt331, 0
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%SUBLIST106084.1" = select i1 %cond306, {}* %82, {}* %.elt329
  %83 = icmp eq {}* %"%SUBLIST106084.1", %82
  %.val381 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0382 = select i1 %83, {}* %.val381, {}* %82
  %84 = icmp eq {}* %object.0382, %82
  %G106133.0383 = select i1 %84, {}* %.val381, {}* %82
  %85 = icmp eq {}* %G106133.0383, %82
  %86 = ptrtoint {}* %82 to i64
  %87 = ptrtoint {}* %.val381 to i64
  br i1 %85, label %tag30, label %tag43.lr.ph

tag43.lr.ph:                                      ; preds = %normal-dest139
  %88 = ptrtoint {}* %farg0 to i64
  %single-float-tag-only301 = and i64 %88, 7
  %fixnum-tag-only245346 = and i64 %88, 3
  %fixnump-test246 = icmp ne i64 %fixnum-tag-only245346, 0
  %test265 = icmp eq i64 %single-float-tag-only301, 1
  %or.cond373 = and i1 %fixnump-test246, %test265
  %irc-bit-cast266 = bitcast {}* %farg0 to i8*
  %gep267 = getelementptr inbounds i8, i8* %irc-bit-cast266, i64 -9
  %irc-bit-cast268 = bitcast i8* %gep267 to i64*
  br label %tag43

normal-dest181:                                   ; preds = %tag17
  %ptrtoint183 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint184 = add i64 %ptrtoint183, 7
  %entry-point-addr185 = inttoptr i64 %entry-point-addr-uint184 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point186 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr185, align 8
  %89 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point186({}* %16, i64 2, {}* nonnull %farg0, {}* nonnull %.in350, {}* null, {}* null)
          to label %normal-dest189 unwind label %cleanup-lpad.loopexit

normal-dest189:                                   ; preds = %normal-dest181
  %.elt352 = extractvalue { {}*, i64 } %89, 0
  %.elt354 = extractvalue { {}*, i64 } %89, 1
  %cond308 = icmp eq i64 %.elt354, 0
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106158.1 = select i1 %cond308, {}* %90, {}* %.elt352
  %91 = ptrtoint {}* %90 to i64
  br label %tag28

header-check-br195:                               ; preds = %tag1
  %gep200 = getelementptr inbounds i8, i8* %41, i64 -9
  %irc-bit-cast201 = bitcast i8* %gep200 to i64*
  %92 = load i64, i64* %irc-bit-cast201, align 8
  %93 = add i64 %92, -1309
  %94 = lshr i64 %93, 3
  %95 = shl i64 %93, 61
  %96 = or i64 %94, %95
  switch i64 %96, label %tag56 [
    i64 2, label %tag17
    i64 4, label %tag17
    i64 5, label %tag17
    i64 0, label %tag17
  ]

normal-dest226:                                   ; preds = %tag27
  %97 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %100 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint227 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint228 = add i64 %ptrtoint227, 7
  %entry-point-addr229 = inttoptr i64 %entry-point-addr-uint228 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point230 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr229, align 8
  %101 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point230({}* %18, i64 5, {}* %97, {}* %98, {}* %"%SUBLIST106084.0384", {}* %99, {}* %100)
          to label %normal-dest233 unwind label %cleanup-lpad.loopexit

normal-dest233:                                   ; preds = %normal-dest226
  %.elt356 = extractvalue { {}*, i64 } %101, 0
  %.elt358 = extractvalue { {}*, i64 } %101, 1
  %cond309 = icmp eq i64 %.elt358, 0
  %102 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond309, {}* %102, {}* %.elt356
  %.val377.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %103 = ptrtoint {}* %102 to i64
  %104 = ptrtoint {}* %.val377.pre to i64
  br label %tag55

header-check-br262:                               ; preds = %tag63
  %105 = load i64, i64* %irc-bit-cast268, align 8
  %106 = add i64 %105, -1309
  %107 = lshr i64 %106, 3
  %108 = shl i64 %106, 61
  %109 = or i64 %107, %108
  switch i64 %109, label %tag56 [
    i64 2, label %tag1
    i64 4, label %tag1
    i64 5, label %tag1
    i64 0, label %tag1
  ]

normal-dest270:                                   ; preds = %tag42
  %110 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %111 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %112 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %113 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint281 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint282 = add i64 %ptrtoint281, 7
  %entry-point-addr283 = inttoptr i64 %entry-point-addr-uint282 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point284 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr283, align 8
  %114 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point284({}* %32, i64 5, {}* %110, {}* %111, {}* %"%SUBLIST106084.0384", {}* %112, {}* %113)
          to label %normal-dest287 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest287:                                   ; preds = %normal-dest270
  call void @unreachableError()
  unreachable
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^406^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !111 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^406^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G106241.0 = phi {}* [ %18, %header-check-br ], [ %G106241.1, %normal-dest26 ], [ %G106241.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 489), align 8
  %ptrtoint43 = ptrtoint {}* %G106241.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106241.0, i64 2, {}* %"closure->CWR=DYNAMISCHE_ATTRIBUTE_INIT", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 489), align 8
  %"closure->CWR=DYNAMISCHE_ATTRIBUTE_INIT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13173, i64 406, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt101 = extractvalue { {}*, i64 } %24, 0
  %.elt103 = extractvalue { {}*, i64 } %24, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106241.1 = select i1 %cond82, {}* %25, {}* %.elt101
  br label %tag4

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 546), align 16
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106241.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=DYNAMISCHE_ATTRIBUTE_INIT", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 547), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=DYNAMISCHE_ATTRIBUTE_INIT", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1624 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 489), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !112 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest160
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 515), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest55 unwind label %cleanup-lpad.loopexit

tag2:                                             ; preds = %normal-dest209
  %13 = add i64 %37, 5
  %14 = inttoptr i64 %13 to {}**
  %15 = load {}*, {}** %14, align 8
  %.pre296 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag.backedge

tag.backedge:                                     ; preds = %tag2, %normal-dest126
  %16 = phi {}* [ %.pre296, %tag2 ], [ %79, %normal-dest126 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %15, %tag2 ], [ %"%DOLIST-VAR.2", %normal-dest126 ]
  %17 = icmp eq {}* %"%DOLIST-VAR.0.be", %16
  br i1 %17, label %tag4, label %tag14

tag4:                                             ; preds = %tag5, %tag.backedge, %normal-dest51
  %18 = phi {}* [ %59, %normal-dest51 ], [ %16, %tag.backedge ], [ %21, %tag5 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %19 = insertvalue { {}*, i64 } undef, {}* %18, 0
  %20 = insertvalue { {}*, i64 } %19, i64 1, 1
  ret { {}*, i64 } %20

tag5:                                             ; preds = %normal-dest209
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %22 = icmp eq {}* %"%DOLIST-VAR.0295", %21
  %.val289 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106272.0 = select i1 %22, {}* %.val289, {}* %21
  %23 = icmp eq {}* %G106272.0, %21
  br i1 %23, label %tag26, label %tag4

tag7:                                             ; preds = %tag14
  %24 = add i64 %37, -3
  %25 = inttoptr i64 %24 to {}**
  %26 = load {}*, {}** %25, align 8
  br label %tag37

tag9:                                             ; preds = %tag17
  %27 = add i64 %52, 5
  %28 = inttoptr i64 %27 to {}**
  %29 = load {}*, {}** %28, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag20.backedge

tag20.backedge:                                   ; preds = %tag9, %normal-dest174
  %30 = phi {}* [ %.pre, %tag9 ], [ %92, %normal-dest174 ]
  %"%DOLIST-VAR74.0.be" = phi {}* [ %29, %tag9 ], [ %"%DOLIST-VAR74.1", %normal-dest174 ]
  %31 = icmp eq {}* %"%DOLIST-VAR74.0.be", %30
  br i1 %31, label %tag39, label %tag38

tag10:                                            ; preds = %tag17
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %33 = icmp eq {}* %"%DOLIST-VAR74.0294", %32
  %.val287 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106295.0 = select i1 %33, {}* %.val287, {}* %32
  %34 = icmp eq {}* %G106295.0, %32
  br i1 %34, label %tag34, label %tag39

tag12:                                            ; preds = %tag38
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest82 unwind label %cleanup-lpad.loopexit

tag14:                                            ; preds = %tag14.preheader, %tag.backedge
  %.val284 = phi {}* [ %16, %tag.backedge ], [ %59, %tag14.preheader ]
  %"%DOLIST-VAR.0295" = phi {}* [ %"%DOLIST-VAR.0.be", %tag.backedge ], [ %"%DOLIST-VAR.1", %tag14.preheader ]
  %37 = ptrtoint {}* %"%DOLIST-VAR.0295" to i64
  %tag-only232 = and i64 %37, 7
  %consp-test = icmp eq i64 %tag-only232, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106354.0 = select i1 %consp-test, {}* %.val, {}* %.val284
  %38 = icmp eq {}* %G106354.0, %.val284
  br i1 %38, label %tag16, label %tag7

tag16:                                            ; preds = %tag14
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest102 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag17:                                            ; preds = %normal-dest55, %normal-dest160
  br i1 %consp-test200, label %tag9, label %tag10

tag18:                                            ; preds = %tag38
  %41 = add i64 %52, -3
  %42 = inttoptr i64 %41 to {}**
  %43 = load {}*, {}** %42, align 8
  br label %tag32

tag26:                                            ; preds = %tag5
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest119 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag32:                                            ; preds = %normal-dest90, %tag18
  %A.0 = phi {}* [ %43, %tag18 ], [ %A.1, %normal-dest90 ]
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 537), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest139 unwind label %cleanup-lpad.loopexit

tag34:                                            ; preds = %tag10
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest167 unwind label %cleanup-lpad.loopexit

tag37:                                            ; preds = %normal-dest109, %tag7
  %OBJEKT.0 = phi {}* [ %26, %tag7 ], [ %OBJEKT.1, %normal-dest109 ]
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 503), align 8
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest181 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag38:                                            ; preds = %tag38.preheader, %tag20.backedge
  %.val286 = phi {}* [ %30, %tag20.backedge ], [ %94, %tag38.preheader ]
  %"%DOLIST-VAR74.0294" = phi {}* [ %"%DOLIST-VAR74.0.be", %tag20.backedge ], [ %"%DOLIST-VAR74.2", %tag38.preheader ]
  %52 = ptrtoint {}* %"%DOLIST-VAR74.0294" to i64
  %tag-only199237 = and i64 %52, 7
  %consp-test200 = icmp eq i64 %tag-only199237, 3
  %.val285 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106331.0 = select i1 %consp-test200, {}* %.val285, {}* %.val286
  %53 = icmp eq {}* %G106331.0, %.val286
  br i1 %53, label %tag12, label %tag18

tag39:                                            ; preds = %tag20.backedge, %tag10, %normal-dest188
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 515), align 8
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest202 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest55, %tag12, %normal-dest82, %tag32, %normal-dest139, %normal-dest141, %normal-dest148, %tag34, %normal-dest167
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest202, %tag39, %normal-dest181, %tag37, %normal-dest119, %tag26, %normal-dest102, %tag16
  %lpad.loopexit291 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %normal-dest48, %normal-dest
  %lpad.loopexit.split-lp292 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit291, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp292, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 501), align 8
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest48 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest48:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %57 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %57, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest51 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest51:                                    ; preds = %normal-dest48
  %.elt = extractvalue { {}*, i64 } %58, 0
  %.elt231 = extractvalue { {}*, i64 } %58, 1
  %cond = icmp eq i64 %.elt231, 0
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %59, {}* %.elt
  %60 = icmp eq {}* %"%DOLIST-VAR.1", %59
  br i1 %60, label %tag4, label %tag14.preheader

tag14.preheader:                                  ; preds = %normal-dest51
  br label %tag14

normal-dest55:                                    ; preds = %tag1
  %ptrtoint56 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %12, i64 2, {}* %OBJEKT.0, {}* %A.0, {}* null, {}* null)
          to label %tag17 unwind label %cleanup-lpad.loopexit

normal-dest82:                                    ; preds = %tag12
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint84 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint85 = add i64 %ptrtoint84, 7
  %entry-point-addr86 = inttoptr i64 %entry-point-addr-uint85 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point87 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr86, align 8
  %66 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point87({}* %36, i64 5, {}* %62, {}* %63, {}* %"%DOLIST-VAR74.0294", {}* %64, {}* %65)
          to label %normal-dest90 unwind label %cleanup-lpad.loopexit

normal-dest90:                                    ; preds = %normal-dest82
  %.elt256 = extractvalue { {}*, i64 } %66, 0
  %.elt258 = extractvalue { {}*, i64 } %66, 1
  %cond227 = icmp eq i64 %.elt258, 0
  %67 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %A.1 = select i1 %cond227, {}* %67, {}* %.elt256
  br label %tag32

normal-dest102:                                   ; preds = %tag16
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint103 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint104 = add i64 %ptrtoint103, 7
  %entry-point-addr105 = inttoptr i64 %entry-point-addr-uint104 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point106 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr105, align 8
  %72 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point106({}* %40, i64 5, {}* %68, {}* %69, {}* %"%DOLIST-VAR.0295", {}* %70, {}* %71)
          to label %normal-dest109 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest109:                                   ; preds = %normal-dest102
  %.elt269 = extractvalue { {}*, i64 } %72, 0
  %.elt271 = extractvalue { {}*, i64 } %72, 1
  %cond229 = icmp eq i64 %.elt271, 0
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKT.1 = select i1 %cond229, {}* %73, {}* %.elt269
  br label %tag37

normal-dest119:                                   ; preds = %tag26
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %77 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint120 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint121 = add i64 %ptrtoint120, 7
  %entry-point-addr122 = inttoptr i64 %entry-point-addr-uint121 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point123 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr122, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point123({}* %45, i64 5, {}* %74, {}* %75, {}* %"%DOLIST-VAR.0295", {}* %76, {}* %77)
          to label %normal-dest126 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest126:                                   ; preds = %normal-dest119
  %.elt265 = extractvalue { {}*, i64 } %78, 0
  %.elt267 = extractvalue { {}*, i64 } %78, 1
  %cond228 = icmp eq i64 %.elt267, 0
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond228, {}* %79, {}* %.elt265
  br label %tag.backedge

normal-dest139:                                   ; preds = %tag32
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest141 unwind label %cleanup-lpad.loopexit

normal-dest141:                                   ; preds = %normal-dest139
  %ptrtoint142 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint143 = add i64 %ptrtoint142, 7
  %entry-point-addr144 = inttoptr i64 %entry-point-addr-uint143 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point145 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr144, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point145({}* %81, i64 2, {}* %OBJEKT.0, {}* %A.0, {}* null, {}* null)
          to label %normal-dest148 unwind label %cleanup-lpad.loopexit

normal-dest148:                                   ; preds = %normal-dest141
  %.elt239 = extractvalue { {}*, i64 } %82, 0
  %.elt241 = extractvalue { {}*, i64 } %82, 1
  %cond224 = icmp eq i64 %.elt241, 0
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106309.0 = select i1 %cond224, {}* %83, {}* %.elt239
  %ptrtoint154 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint155 = add i64 %ptrtoint154, 7
  %entry-point-addr156 = inttoptr i64 %entry-point-addr-uint155 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point157 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr156, align 8
  %84 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point157({}* %47, i64 1, {}* %G106309.0, {}* null, {}* null, {}* null)
          to label %normal-dest160 unwind label %cleanup-lpad.loopexit

normal-dest160:                                   ; preds = %normal-dest148
  %.elt243 = extractvalue { {}*, i64 } %84, 0
  %.elt245 = extractvalue { {}*, i64 } %84, 1
  %cond225 = icmp eq i64 %.elt245, 0
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106306.0 = select i1 %cond225, {}* %85, {}* %.elt243
  %86 = icmp eq {}* %G106306.0, %85
  br i1 %86, label %tag17, label %tag1

normal-dest167:                                   ; preds = %tag34
  %87 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint168 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint169 = add i64 %ptrtoint168, 7
  %entry-point-addr170 = inttoptr i64 %entry-point-addr-uint169 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point171 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr170, align 8
  %91 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point171({}* %49, i64 5, {}* %87, {}* %88, {}* %"%DOLIST-VAR74.0294", {}* %89, {}* %90)
          to label %normal-dest174 unwind label %cleanup-lpad.loopexit

normal-dest174:                                   ; preds = %normal-dest167
  %.elt252 = extractvalue { {}*, i64 } %91, 0
  %.elt254 = extractvalue { {}*, i64 } %91, 1
  %cond226 = icmp eq i64 %.elt254, 0
  %92 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR74.1" = select i1 %cond226, {}* %92, {}* %.elt252
  br label %tag20.backedge

normal-dest181:                                   ; preds = %tag37
  %ptrtoint182 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint183 = add i64 %ptrtoint182, 7
  %entry-point-addr184 = inttoptr i64 %entry-point-addr-uint183 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point185 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr184, align 8
  %93 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point185({}* %51, i64 1, {}* %OBJEKT.0, {}* null, {}* null, {}* null)
          to label %normal-dest188 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest188:                                   ; preds = %normal-dest181
  %.elt234 = extractvalue { {}*, i64 } %93, 0
  %.elt236 = extractvalue { {}*, i64 } %93, 1
  %cond223 = icmp eq i64 %.elt236, 0
  %94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR74.2" = select i1 %cond223, {}* %94, {}* %.elt234
  %95 = icmp eq {}* %"%DOLIST-VAR74.2", %94
  br i1 %95, label %tag39, label %tag38.preheader

tag38.preheader:                                  ; preds = %normal-dest188
  br label %tag38

normal-dest202:                                   ; preds = %tag39
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 544), align 16
  %ptrtoint203 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint204 = add i64 %ptrtoint203, 7
  %entry-point-addr205 = inttoptr i64 %entry-point-addr-uint204 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point206 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr205, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point206({}* %55, i64 2, {}* %OBJEKT.0, {}* %96, {}* null, {}* null)
          to label %normal-dest209 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest209:                                   ; preds = %normal-dest202
  br i1 %consp-test, label %tag2, label %tag5
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^415^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !113 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^415^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G106377.0 = phi {}* [ %18, %header-check-br ], [ %G106377.1, %normal-dest17 ], [ %G106377.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 505), align 8
  %ptrtoint43 = ptrtoint {}* %G106377.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106377.0, i64 2, {}* %"closure->CWR=HOLE_INVERSES_ATTRIBUT", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %tag2, %normal-dest13, %maybe-more-tests42, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 505), align 8
  %"closure->CWR=HOLE_INVERSES_ATTRIBUT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13452, i64 415, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %maybe-more-tests42
  %ptrtoint14 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106377.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

normal-dest21:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 550), align 16
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt84 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt84, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106377.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag2

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 551), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=HOLE_INVERSES_ATTRIBUT", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 554), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=HOLE_INVERSES_ATTRIBUT", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1696 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 505), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !114 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %19, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt21 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt21, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106396.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G106396.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^428^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !115 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^428^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest67, %normal-dest17, %header-check-br
  %G106433.0 = phi {}* [ %18, %header-check-br ], [ %G106433.1, %normal-dest17 ], [ %G106433.2, %normal-dest67 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 561), align 8
  %ptrtoint20 = ptrtoint {}* %G106433.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G106433.0, i64 2, {}* %"closure->CWR=SETZE_INVERSES_ATTRIBUT", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 561), align 8
  %"closure->CWR=SETZE_INVERSES_ATTRIBUT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13784, i64 428, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br73

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 560), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106433.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 563), align 8
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->CWR=SETZE_INVERSES_ATTRIBUT", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 566), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->CWR=SETZE_INVERSES_ATTRIBUT", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 1712 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 561), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106433.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag1

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !116 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %9 = call [0 x {}*]* @cc_multipleValuesArrayAddress()
  %10 = load i64, i64* %"remaining-nargs*", align 8
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %10)
  %11 = icmp ult i64 %nargs, 3
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %12
  unreachable

; <label>:13:                                     ; preds = %entry
  %14 = icmp eq i64 %nargs, 3
  br i1 %14, label %normal-dest, label %15

; <label>:15:                                     ; preds = %13
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc110 unwind label %cleanup-lpad

.noexc110:                                        ; preds = %15
  unreachable

tag1:                                             ; preds = %tag7
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 558), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest37 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest44, %normal-dest80, %tag7
  %DER_WERT.0 = phi {}* [ %DER_WERT.1, %tag7 ], [ %G106417.0, %normal-dest80 ], [ %..elt103, %normal-dest44 ]
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest51 unwind label %cleanup-lpad

tag7:                                             ; preds = %normal-dest28
  %.elt94 = extractvalue { {}*, i64 } %32, 1
  %cond86 = icmp eq i64 %.elt94, 0
  %.elt92 = extractvalue { {}*, i64 } %32, 0
  %DAS_ALTE_ATTRIBUT.0 = select i1 %cond86, {}* %33, {}* %.elt92
  %20 = icmp eq {}* %DAS_ALTE_ATTRIBUT.0, %33
  %G106468.0 = select i1 %20, {}* %.val, {}* %33
  %21 = icmp eq {}* %G106468.0, %33
  br i1 %21, label %tag1, label %tag5

tag9:                                             ; preds = %normal-dest28
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest73 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %15, %12, %normal-dest73, %tag9, %normal-dest51, %tag5, %normal-dest37, %tag1, %normal-dest21, %normal-dest17, %normal-dest14, %normal-dest
  %24 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %24

normal-dest:                                      ; preds = %13
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint = ptrtoint {}* %26 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %26, i64 2, {}* %farg0, {}* %27, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest14
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt90 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt90, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %DER_WERT.1 = select i1 %cond, {}* %29, {}* %.elt
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest17
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 2, {}* %DER_WERT.1, {}* %farg1, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %34 = icmp eq {}* %33, %farg2
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106474.0 = select i1 %34, {}* %.val, {}* %33
  %35 = icmp eq {}* %G106474.0, %33
  br i1 %35, label %tag9, label %tag7

normal-dest37:                                    ; preds = %tag1
  %ptrtoint38 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint39 = add i64 %ptrtoint38, 7
  %entry-point-addr40 = inttoptr i64 %entry-point-addr-uint39 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point41 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr40, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point41({}* %17, i64 2, {}* %DER_WERT.1, {}* %farg1, {}* null, {}* null)
          to label %normal-dest44 unwind label %cleanup-lpad

normal-dest44:                                    ; preds = %normal-dest37
  %.elt103 = extractvalue { {}*, i64 } %36, 0
  %.elt105 = extractvalue { {}*, i64 } %36, 1
  %cond116 = icmp eq i64 %.elt105, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %..elt103 = select i1 %cond116, {}* %37, {}* %.elt103
  br label %tag5

normal-dest51:                                    ; preds = %tag5
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint52 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint53 = add i64 %ptrtoint52, 7
  %entry-point-addr54 = inttoptr i64 %entry-point-addr-uint53 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point55 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr54, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point55({}* %19, i64 5, {}* %farg0, {}* %38, {}* %DER_WERT.0, {}* %39, {}* %40)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest51
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %41

normal-dest73:                                    ; preds = %tag9
  %ptrtoint74 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint75 = add i64 %ptrtoint74, 7
  %entry-point-addr76 = inttoptr i64 %entry-point-addr-uint75 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point77 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr76, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point77({}* %23, i64 3, {}* %DER_WERT.1, {}* %farg2, {}* %farg1, {}* null)
          to label %normal-dest80 unwind label %cleanup-lpad

normal-dest80:                                    ; preds = %normal-dest73
  %.elt107 = extractvalue { {}*, i64 } %42, 0
  %.elt109 = extractvalue { {}*, i64 } %42, 1
  %cond88 = icmp eq i64 %.elt109, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106417.0 = select i1 %cond88, {}* %43, {}* %.elt107
  br label %tag5
}

; Function Attrs: nounwind
declare [0 x {}*]* @cc_multipleValuesArrayAddress() local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^444^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !117 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^444^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G106505.0 = phi {}* [ %18, %header-check-br ], [ %G106505.1, %normal-dest17 ], [ %G106505.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 569), align 8
  %ptrtoint43 = ptrtoint {}* %G106505.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106505.0, i64 2, {}* %"closure->CWR=HOLE_RELATIONEN_ATTRIBUTE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag3, %normal-dest21, %maybe-more-tests42, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 569), align 8
  %"closure->CWR=HOLE_RELATIONEN_ATTRIBUTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14213, i64 444, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br34

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 568), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106505.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

normal-dest21:                                    ; preds = %maybe-more-tests42
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106505.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag3

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag3
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 571), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=HOLE_RELATIONEN_ATTRIBUTE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 572), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=HOLE_RELATIONEN_ATTRIBUTE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1776 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 569), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !118 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 94), align 16
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %19, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt21 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt21, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106524.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G106524.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^448^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !119 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^448^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G106556.0 = phi {}* [ %18, %header-check-br ], [ %G106556.1, %normal-dest63 ], [ %G106556.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 575), align 8
  %ptrtoint13 = ptrtoint {}* %G106556.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G106556.0, i64 2, {}* %"closure->CWR=SETZE_RELATIONEN_ATTRIBUTE", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests54, %normal-dest56, %tag3, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 575), align 8
  %"closure->CWR=SETZE_RELATIONEN_ATTRIBUTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14322, i64 448, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br46

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 577), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=SETZE_RELATIONEN_ATTRIBUTE", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 580), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=SETZE_RELATIONEN_ATTRIBUTE", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 1792 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 575), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag3

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %tag3
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 574), align 16
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106556.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag

normal-dest69:                                    ; preds = %maybe-more-tests54
  %ptrtoint70 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106556.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !120 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 94), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest8
  %.elt44 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt44, 0
  %.elt = extractvalue { {}*, i64 } %18, 0
  %G106533.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint20 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %21, i64 3, {}* %G106533.0, {}* %farg2, {}* %farg1, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt48 = extractvalue { {}*, i64 } %22, 1
  %cond42 = icmp eq i64 %.elt48, 0
  %.elt46 = extractvalue { {}*, i64 } %22, 0
  %G106540.0 = select i1 %cond42, {}* %23, {}* %.elt46
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 94), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint34 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %25, i64 5, {}* %farg0, {}* %26, {}* %G106540.0, {}* %27, {}* %28)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^457^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !121 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^457^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G106608.0 = phi {}* [ %18, %header-check-br ], [ %G106608.1, %normal-dest17 ], [ %G106608.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 583), align 8
  %ptrtoint43 = ptrtoint {}* %G106608.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106608.0, i64 2, {}* %"closure->CWR=LESE_PRIORITAET", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %maybe-more-tests42, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 583), align 8
  %"closure->CWR=LESE_PRIORITAET" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14616, i64 457, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 582), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106608.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

normal-dest21:                                    ; preds = %maybe-more-tests42
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106608.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag1

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 585), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=LESE_PRIORITAET", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 588), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=LESE_PRIORITAET", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1828 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 583), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !122 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt21 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt21, 0
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106627.0 = select i1 %cond, {}* %20, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G106627.0, {}* %farg2, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %21
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^460^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !123 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^460^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G106665.0 = phi {}* [ %18, %header-check-br ], [ %G106665.1, %normal-dest63 ], [ %G106665.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 591), align 8
  %ptrtoint13 = ptrtoint {}* %G106665.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G106665.0, i64 2, {}* %"closure->CWR=SCHREIBE_PRIORITAET", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest56, %maybe-more-tests54, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 591), align 8
  %"closure->CWR=SCHREIBE_PRIORITAET" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14715, i64 460, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br46

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 593), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=SCHREIBE_PRIORITAET", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 594), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=SCHREIBE_PRIORITAET", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 1840 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 591), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag4

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %maybe-more-tests54
  %ptrtoint57 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106665.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag1

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 590), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106665.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !124 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %9 = call [0 x {}*]* @cc_multipleValuesArrayAddress()
  %10 = load i64, i64* %"remaining-nargs*", align 8
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %10)
  %11 = icmp ult i64 %nargs, 4
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %12
  unreachable

; <label>:13:                                     ; preds = %entry
  %14 = icmp eq i64 %nargs, 4
  br i1 %14, label %normal-dest, label %15

; <label>:15:                                     ; preds = %13
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc81 unwind label %cleanup-lpad

.noexc81:                                         ; preds = %15
  unreachable

tag1:                                             ; preds = %normal-dest49, %normal-dest35
  %.sink87 = phi { {}*, i64 } [ %33, %normal-dest35 ], [ %34, %normal-dest49 ]
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest19 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest13
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest35 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest13
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 558), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %15, %12, %normal-dest49, %tag5, %normal-dest35, %tag3, %normal-dest19, %tag1, %normal-dest10, %normal-dest
  %23 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %23

normal-dest:                                      ; preds = %13
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 2, {}* %farg0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest10
  %.elt = extractvalue { {}*, i64 } %26, 0
  %.elt65 = extractvalue { {}*, i64 } %26, 1
  %cond = icmp eq i64 %.elt65, 0
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106636.0 = select i1 %cond, {}* %27, {}* %.elt
  %28 = icmp eq {}* %27, %farg3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106700.0 = select i1 %28, {}* %.val, {}* %27
  %29 = icmp eq {}* %G106700.0, %27
  br i1 %29, label %tag3, label %tag5

normal-dest19:                                    ; preds = %tag1
  %.elt69 = extractvalue { {}*, i64 } %.sink87, 1
  %cond86 = icmp eq i64 %.elt69, 0
  %.elt67 = extractvalue { {}*, i64 } %.sink87, 0
  %..elt67 = select i1 %cond86, {}* %16, {}* %.elt67
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint20 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %18, i64 5, {}* %farg0, {}* %farg1, {}* %..elt67, {}* %30, {}* %31)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %32

normal-dest35:                                    ; preds = %tag3
  %ptrtoint36 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint37 = add i64 %ptrtoint36, 7
  %entry-point-addr38 = inttoptr i64 %entry-point-addr-uint37 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point39 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr38, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point39({}* %20, i64 3, {}* %G106636.0, {}* %farg3, {}* %farg2, {}* null)
          to label %tag1 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag5
  %ptrtoint50 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint51 = add i64 %ptrtoint50, 7
  %entry-point-addr52 = inttoptr i64 %entry-point-addr-uint51 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point53 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr52, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point53({}* %22, i64 2, {}* %G106636.0, {}* %farg2, {}* null, {}* null)
          to label %tag1 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^469^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !125 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^469^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G106727.0 = phi {}* [ %18, %header-check-br ], [ %G106727.1, %normal-dest17 ], [ %G106727.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 599), align 8
  %ptrtoint43 = ptrtoint {}* %G106727.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106727.0, i64 2, {}* %"closure->CWR=DIE_KLASSEN", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag3, %normal-dest21, %maybe-more-tests42, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 599), align 8
  %"closure->CWR=DIE_KLASSEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15007, i64 469, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br34

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 598), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106727.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

normal-dest21:                                    ; preds = %maybe-more-tests42
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106727.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag3

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag3
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=DIE_KLASSEN", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 601), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=DIE_KLASSEN", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1876 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 599), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !126 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 232), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 596), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %16, 0
  %.elt21 = extractvalue { {}*, i64 } %16, 1
  %cond = icmp eq i64 %.elt21, 0
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106746.0 = select i1 %cond, {}* %17, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %13, i64 1, {}* %G106746.0, {}* null, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^473^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !127 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^473^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G106767.0 = phi {}* [ %18, %header-check-br ], [ %G106767.1, %normal-dest26 ], [ %G106767.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 596), align 16
  %ptrtoint43 = ptrtoint {}* %G106767.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106767.0, i64 2, {}* %"closure->CWR=DIE_WURZEL", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 596), align 16
  %"closure->CWR=DIE_WURZEL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15072, i64 473, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt101 = extractvalue { {}*, i64 } %24, 0
  %.elt103 = extractvalue { {}*, i64 } %24, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106767.1 = select i1 %cond82, {}* %25, {}* %.elt101
  br label %tag4

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 606), align 16
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106767.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=DIE_WURZEL", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 607), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=DIE_WURZEL", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1892 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 596), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !128 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag6:                                             ; preds = %normal-dest18
  %11 = add i64 %29, -3
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 8
  br label %tag10

tag8:                                             ; preds = %tag9
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest30 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest18
  %16 = ptrtoint {}* %28 to i64
  %17 = icmp eq {}* %x.0, %28
  %G106795.0 = select i1 %17, {}* %.val, {}* %28
  %18 = icmp eq {}* %G106795.0, %28
  br i1 %18, label %tag8, label %tag10

tag10:                                            ; preds = %tag9, %normal-dest37, %tag6
  %return-value.sroa.6.0 = phi i64 [ %.elt51, %normal-dest37 ], [ 1, %tag6 ], [ 1, %tag9 ]
  %return-value.sroa.0.0 = phi i64 [ %36, %normal-dest37 ], [ %13, %tag6 ], [ %16, %tag9 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %19 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %20 = insertvalue { {}*, i64 } undef, {}* %19, 0
  %21 = insertvalue { {}*, i64 } %20, i64 %return-value.sroa.6.0, 1
  ret { {}*, i64 } %21

cleanup-lpad:                                     ; preds = %10, %normal-dest30, %tag8, %normal-dest15, %normal-dest
  %22 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %22

normal-dest:                                      ; preds = %entry
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 602), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 604), align 16
  %ptrtoint = ptrtoint {}* %24 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %24, i64 2, {}* %25, {}* %26, {}* null, {}* null)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest15
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt43 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt43, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x.0 = select i1 %cond, {}* %28, {}* %.elt
  %29 = ptrtoint {}* %x.0 to i64
  %tag-only44 = and i64 %29, 7
  %consp-test = icmp eq i64 %tag-only44, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G106803.0 = select i1 %consp-test, {}* %.val, {}* %28
  %30 = icmp eq {}* %G106803.0, %28
  br i1 %30, label %tag9, label %tag6

normal-dest30:                                    ; preds = %tag8
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint31 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %15, i64 5, {}* %31, {}* %32, {}* %x.0, {}* %33, {}* %34)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt49 = extractvalue { {}*, i64 } %35, 0
  %36 = ptrtoint {}* %.elt49 to i64
  %.elt51 = extractvalue { {}*, i64 } %35, 1
  br label %tag10
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^476^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !129 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^476^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br59
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G106828.0 = phi {}* [ %18, %header-check-br ], [ %G106828.1, %normal-dest17 ], [ %G106828.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 617), align 8
  %ptrtoint20 = ptrtoint {}* %G106828.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G106828.0, i64 2, {}* %"closure->CWR=SYSTEM_KLASSEN", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 617), align 8
  %"closure->CWR=SYSTEM_KLASSEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15142, i64 476, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br59

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 616), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106828.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->CWR=SYSTEM_KLASSEN", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 619), align 8
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->CWR=SYSTEM_KLASSEN", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 1904 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 617), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag1

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106828.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !130 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest105, %normal-dest98, %normal-dest91, %normal-dest84, %normal-dest77, %normal-dest70, %normal-dest63, %normal-dest56, %normal-dest49, %normal-dest42, %normal-dest35, %normal-dest28, %normal-dest21, %normal-dest14, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 1, {}* %16, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt126 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt126, 0
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106847.0 = select i1 %cond, {}* %18, {}* %.elt
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest10
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint15 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %20, i64 1, {}* %21, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest14
  %.elt128 = extractvalue { {}*, i64 } %22, 0
  %.elt130 = extractvalue { {}*, i64 } %22, 1
  %cond118 = icmp eq i64 %.elt130, 0
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106848.0 = select i1 %cond118, {}* %23, {}* %.elt128
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 1, {}* %26, {}* null, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %.elt132 = extractvalue { {}*, i64 } %27, 0
  %.elt134 = extractvalue { {}*, i64 } %27, 1
  %cond119 = icmp eq i64 %.elt134, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106849.0 = select i1 %cond119, {}* %28, {}* %.elt132
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest35
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 96), align 16
  %ptrtoint43 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %30, i64 1, {}* %31, {}* null, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %normal-dest42
  %.elt136 = extractvalue { {}*, i64 } %32, 0
  %.elt138 = extractvalue { {}*, i64 } %32, 1
  %cond120 = icmp eq i64 %.elt138, 0
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106850.0 = select i1 %cond120, {}* %33, {}* %.elt136
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %normal-dest49
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 608), align 16
  %ptrtoint57 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %35, i64 1, {}* %36, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt140 = extractvalue { {}*, i64 } %37, 0
  %.elt142 = extractvalue { {}*, i64 } %37, 1
  %cond121 = icmp eq i64 %.elt142, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106851.0 = select i1 %cond121, {}* %38, {}* %.elt140
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest70 unwind label %cleanup-lpad

normal-dest70:                                    ; preds = %normal-dest63
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 610), align 16
  %ptrtoint71 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint72 = add i64 %ptrtoint71, 7
  %entry-point-addr73 = inttoptr i64 %entry-point-addr-uint72 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point74 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr73, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point74({}* %40, i64 1, {}* %41, {}* null, {}* null, {}* null)
          to label %normal-dest77 unwind label %cleanup-lpad

normal-dest77:                                    ; preds = %normal-dest70
  %.elt144 = extractvalue { {}*, i64 } %42, 0
  %.elt146 = extractvalue { {}*, i64 } %42, 1
  %cond122 = icmp eq i64 %.elt146, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106852.0 = select i1 %cond122, {}* %43, {}* %.elt144
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest84 unwind label %cleanup-lpad

normal-dest84:                                    ; preds = %normal-dest77
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 612), align 16
  %ptrtoint85 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint86 = add i64 %ptrtoint85, 7
  %entry-point-addr87 = inttoptr i64 %entry-point-addr-uint86 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point88 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr87, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point88({}* %45, i64 1, {}* %46, {}* null, {}* null, {}* null)
          to label %normal-dest91 unwind label %cleanup-lpad

normal-dest91:                                    ; preds = %normal-dest84
  %.elt148 = extractvalue { {}*, i64 } %47, 0
  %.elt150 = extractvalue { {}*, i64 } %47, 1
  %cond123 = icmp eq i64 %.elt150, 0
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106853.0 = select i1 %cond123, {}* %48, {}* %.elt148
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest98 unwind label %cleanup-lpad

normal-dest98:                                    ; preds = %normal-dest91
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 614), align 16
  %ptrtoint99 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint100 = add i64 %ptrtoint99, 7
  %entry-point-addr101 = inttoptr i64 %entry-point-addr-uint100 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point102 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr101, align 8
  %52 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point102({}* %50, i64 1, {}* %51, {}* null, {}* null, {}* null)
          to label %normal-dest105 unwind label %cleanup-lpad

normal-dest105:                                   ; preds = %normal-dest98
  %.elt152 = extractvalue { {}*, i64 } %52, 0
  %.elt154 = extractvalue { {}*, i64 } %52, 1
  %cond124 = icmp eq i64 %.elt154, 0
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106854.0 = select i1 %cond124, {}* %53, {}* %.elt152
  %ptrtoint111 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint112 = add i64 %ptrtoint111, 7
  %entry-point-addr113 = inttoptr i64 %entry-point-addr-uint112 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point114 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr113, align 8
  %54 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point114({}* %13, i64 9, {}* %G106847.0, {}* %G106848.0, {}* %G106849.0, {}* %G106850.0, {}* %G106851.0, {}* %G106852.0, {}* %G106853.0, {}* %G106854.0, {}* %53)
          to label %normal-dest117 unwind label %cleanup-lpad

normal-dest117:                                   ; preds = %normal-dest105
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %54
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^481^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !131 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^481^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G106898.0 = phi {}* [ %18, %header-check-br ], [ %G106898.1, %normal-dest17 ], [ %G106898.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 466), align 16
  %ptrtoint43 = ptrtoint {}* %G106898.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G106898.0, i64 2, {}* %"closure->CWR=ABLAUBSTEUERUNG_WURZEL", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 466), align 16
  %"closure->CWR=ABLAUBSTEUERUNG_WURZEL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15332, i64 481, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106898.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag3

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 620), align 16
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106898.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=ABLAUBSTEUERUNG_WURZEL", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 621), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=ABLAUBSTEUERUNG_WURZEL", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1924 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 466), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !132 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 610), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^485^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !133 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^485^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest67, %normal-dest17, %header-check-br
  %G106942.0 = phi {}* [ %18, %header-check-br ], [ %G106942.1, %normal-dest17 ], [ %G106942.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 273), align 8
  %ptrtoint20 = ptrtoint {}* %G106942.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G106942.0, i64 2, {}* %"closure->CWR=BENUTZER_KLASSEN", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest60 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %tag3, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %maybe-more-tests81, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 273), align 8
  %"closure->CWR=BENUTZER_KLASSEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15395, i64 485, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br73

normal-dest13:                                    ; preds = %maybe-more-tests81
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106942.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->CWR=BENUTZER_KLASSEN", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 625), align 8
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->CWR=BENUTZER_KLASSEN", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %31, {}* inttoptr (i64 1940 to {}*))
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 273), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %33 = insertvalue { {}*, i64 } undef, {}* %32, 0
  %34 = insertvalue { {}*, i64 } %33, i64 1, 1
  ret { {}*, i64 } %34

normal-dest60:                                    ; preds = %tag3
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 624), align 16
  %ptrtoint61 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %14, i64 5, {}* %35, {}* %36, {}* %18, {}* %37, {}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt = extractvalue { {}*, i64 } %39, 0
  %.elt84 = extractvalue { {}*, i64 } %39, 1
  %cond = icmp eq i64 %.elt84, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106942.2 = select i1 %cond, {}* %40, {}* %.elt
  br label %tag1

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag3

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !134 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest24, %normal-dest17, %normal-dest15, %normal-dest13, %normal-dest9, %normal-dest6, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = invoke {}* @cc_makeCell()
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 617), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  %.elt = extractvalue { {}*, i64 } %15, 0
  %.elt39 = extractvalue { {}*, i64 } %15, 1
  %cond = icmp eq i64 %.elt39, 0
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106919.0 = select i1 %cond, {}* %16, {}* %.elt
  call void @cc_writeCell({}* %12, {}* %G106919.0)
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 622), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %19, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.15", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.15^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15395, i64 485, i64 0, i64 1, {}* %12)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest13
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 599), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest15
  %ptrtoint18 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint19 = add i64 %ptrtoint18, 7
  %entry-point-addr20 = inttoptr i64 %entry-point-addr-uint19 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point21 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr20, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point21({}* %21, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest24 unwind label %cleanup-lpad

normal-dest24:                                    ; preds = %normal-dest17
  %.elt41 = extractvalue { {}*, i64 } %22, 0
  %.elt43 = extractvalue { {}*, i64 } %22, 1
  %cond37 = icmp eq i64 %.elt43, 0
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106962.0 = select i1 %cond37, {}* %23, {}* %.elt41
  %ptrtoint30 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint31 = add i64 %ptrtoint30, 7
  %entry-point-addr32 = inttoptr i64 %entry-point-addr-uint31 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point33 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr32, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point33({}* %18, i64 2, {}* %"closure->LAMBDA", {}* %G106962.0, {}* null, {}* null)
          to label %normal-dest36 unwind label %cleanup-lpad

normal-dest36:                                    ; preds = %normal-dest24
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %24
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.15"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !135 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.15^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.15^DESC" to %0*)) #7
          to label %.noexc235 unwind label %cleanup-lpad.loopexit.split-lp

.noexc235:                                        ; preds = %10
  unreachable

tag10:                                            ; preds = %header-check-br161, %header-check-br161, %header-check-br161, %header-check-br161
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest86 unwind label %cleanup-lpad.loopexit

tag17:                                            ; preds = %tag21, %normal-dest140, %tag25
  %13 = phi i64 [ %18, %tag25 ], [ %65, %normal-dest140 ], [ %18, %tag21 ]
  %.val245 = phi {}* [ %20, %tag25 ], [ %64, %normal-dest140 ], [ %G107023.0, %tag21 ]
  %14 = phi {}* [ %G107023.0, %tag25 ], [ %.val244.pre, %normal-dest140 ], [ %G107023.0, %tag21 ]
  %.in223 = phi {}* [ %26, %tag25 ], [ %.in, %normal-dest140 ], [ %G107023.0, %tag21 ]
  %15 = bitcast {}* %.in223 to i8*
  %16 = icmp eq {}* %.in223, %farg0
  %G107003.0 = select i1 %16, {}* %14, {}* %.val245
  %17 = icmp eq {}* %G107003.0, %.val245
  br i1 %17, label %tag38, label %tag43

tag18:                                            ; preds = %tag18.lr.ph, %tag33
  %18 = phi i64 [ %54, %tag18.lr.ph ], [ %29, %tag33 ]
  %G107023.0 = phi {}* [ %.val253, %tag18.lr.ph ], [ %.val, %tag33 ]
  %19 = phi i1 [ %52, %tag18.lr.ph ], [ %32, %tag33 ]
  %20 = phi {}* [ %50, %tag18.lr.ph ], [ %28, %tag33 ]
  %"%SUBLIST106921.0256" = phi {}* [ %"%SUBLIST106921.0252", %tag18.lr.ph ], [ %"%SUBLIST106921.0", %tag33 ]
  %21 = ptrtoint {}* %"%SUBLIST106921.0256" to i64
  %tag-only122207 = and i64 %21, 7
  %consp-test = icmp eq i64 %tag-only122207, 3
  br i1 %consp-test, label %tag29, label %tag37

tag21:                                            ; preds = %tag29
  br i1 %19, label %tag22, label %tag17

tag22:                                            ; preds = %tag21
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest133 unwind label %cleanup-lpad.loopexit

tag25:                                            ; preds = %tag29
  %24 = add i64 %21, -3
  %25 = inttoptr i64 %24 to {}**
  %26 = load {}*, {}** %25, align 8
  br label %tag17

tag29:                                            ; preds = %tag18
  %27 = icmp eq {}* %G107023.0, %20
  br i1 %27, label %tag21, label %tag25

tag33:                                            ; preds = %tag43.tag33_crit_edge, %header-check-br161, %header-check-br186, %tag38, %tag34
  %.val = phi {}* [ %.val.pre, %tag43.tag33_crit_edge ], [ %14, %tag34 ], [ %14, %tag38 ], [ %14, %header-check-br186 ], [ %14, %header-check-br161 ]
  %28 = phi {}* [ %41, %tag43.tag33_crit_edge ], [ %.val245, %tag34 ], [ %.val245, %tag38 ], [ %.val245, %header-check-br186 ], [ %.val245, %header-check-br161 ]
  %29 = phi i64 [ %40, %tag43.tag33_crit_edge ], [ %13, %tag34 ], [ %13, %tag38 ], [ %13, %header-check-br186 ], [ %13, %header-check-br161 ]
  %30 = add i64 %21, 5
  %"%SUBLIST106921.0.in" = inttoptr i64 %30 to {}**
  %"%SUBLIST106921.0" = load {}*, {}** %"%SUBLIST106921.0.in", align 8
  %31 = icmp eq {}* %"%SUBLIST106921.0", %28
  %object.0 = select i1 %31, {}* %.val, {}* %28
  %32 = icmp eq {}* %object.0, %28
  %G106968.0 = select i1 %32, {}* %.val, {}* %28
  %33 = icmp eq {}* %G106968.0, %28
  br i1 %33, label %tag41, label %tag18

tag34:                                            ; preds = %header-check-br186, %header-check-br186, %header-check-br186, %header-check-br186
  %34 = ptrtoint {}* %.in223 to i64
  %single-float-tag-only = and i64 %34, 7
  %fixnum-tag-only83221 = and i64 %34, 3
  %fixnump-test84 = icmp ne i64 %fixnum-tag-only83221, 0
  %test164 = icmp eq i64 %single-float-tag-only, 1
  %or.cond239 = and i1 %fixnump-test84, %test164
  br i1 %or.cond239, label %header-check-br161, label %tag33

tag37:                                            ; preds = %tag18
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest173 unwind label %cleanup-lpad.loopexit.split-lp

tag38:                                            ; preds = %tag17
  br i1 %or.cond240, label %header-check-br186, label %tag33

tag41:                                            ; preds = %tag33, %tag43, %normal-dest
  %return-value.sroa.0.0 = phi i64 [ %54, %normal-dest ], [ %21, %tag43 ], [ %29, %tag33 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %38 = insertvalue { {}*, i64 } undef, {}* %37, 0
  %39 = insertvalue { {}*, i64 } %38, i64 1, 1
  ret { {}*, i64 } %39

tag43:                                            ; preds = %tag17, %normal-dest95
  %40 = phi i64 [ %58, %normal-dest95 ], [ %13, %tag17 ]
  %41 = phi {}* [ %57, %normal-dest95 ], [ %.val245, %tag17 ]
  %G106994.0 = phi {}* [ %G106994.1, %normal-dest95 ], [ %14, %tag17 ]
  %42 = icmp eq {}* %G106994.0, %41
  br i1 %42, label %tag43.tag33_crit_edge, label %tag41

tag43.tag33_crit_edge:                            ; preds = %tag43
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag33

cleanup-lpad.loopexit:                            ; preds = %tag10, %normal-dest86, %tag22, %normal-dest133
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest173, %tag37, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %43 = ptrtoint {}* %closure-ptr to i64
  %44 = and i64 %43, -8
  %45 = inttoptr i64 %44 to %1*
  %46 = getelementptr inbounds %1, %1* %45, i64 0, i32 4, i32 1, i64 0, i32 0
  %47 = bitcast %"class.core::T_O"** %46 to i64*
  %48 = load i64, i64* %47, align 8, !tbaa !74
  %49 = add i64 %48, -3
  %"%SUBLIST106921.0.in251" = inttoptr i64 %49 to {}**
  %"%SUBLIST106921.0252" = load {}*, {}** %"%SUBLIST106921.0.in251", align 8
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %51 = icmp eq {}* %"%SUBLIST106921.0252", %50
  %.val253 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0254 = select i1 %51, {}* %.val253, {}* %50
  %52 = icmp eq {}* %object.0254, %50
  %G106968.0255 = select i1 %52, {}* %.val253, {}* %50
  %53 = icmp eq {}* %G106968.0255, %50
  %54 = ptrtoint {}* %50 to i64
  br i1 %53, label %tag41, label %tag18.lr.ph

tag18.lr.ph:                                      ; preds = %normal-dest
  %55 = ptrtoint {}* %farg0 to i64
  %single-float-tag-only174 = and i64 %55, 7
  %fixnum-tag-only153219 = and i64 %55, 3
  %fixnump-test154 = icmp ne i64 %fixnum-tag-only153219, 0
  %test189 = icmp eq i64 %single-float-tag-only174, 1
  %or.cond240 = and i1 %fixnump-test154, %test189
  %irc-bit-cast190 = bitcast {}* %farg0 to i8*
  %gep191 = getelementptr inbounds i8, i8* %irc-bit-cast190, i64 -9
  %irc-bit-cast192 = bitcast i8* %gep191 to i64*
  br label %tag18

normal-dest86:                                    ; preds = %tag10
  %ptrtoint89 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint90 = add i64 %ptrtoint89, 7
  %entry-point-addr91 = inttoptr i64 %entry-point-addr-uint90 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point92 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr91, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point92({}* %12, i64 2, {}* nonnull %farg0, {}* nonnull %.in223, {}* null, {}* null)
          to label %normal-dest95 unwind label %cleanup-lpad.loopexit

normal-dest95:                                    ; preds = %normal-dest86
  %.elt225 = extractvalue { {}*, i64 } %56, 0
  %.elt227 = extractvalue { {}*, i64 } %56, 1
  %cond205 = icmp eq i64 %.elt227, 0
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G106994.1 = select i1 %cond205, {}* %57, {}* %.elt225
  %58 = ptrtoint {}* %57 to i64
  br label %tag43

normal-dest108:                                   ; preds = %normal-dest173
  call void @unreachableError()
  unreachable

normal-dest133:                                   ; preds = %tag22
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint134 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint135 = add i64 %ptrtoint134, 7
  %entry-point-addr136 = inttoptr i64 %entry-point-addr-uint135 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point137 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr136, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point137({}* %23, i64 5, {}* %59, {}* %60, {}* %"%SUBLIST106921.0256", {}* %61, {}* %62)
          to label %normal-dest140 unwind label %cleanup-lpad.loopexit

normal-dest140:                                   ; preds = %normal-dest133
  %.elt229 = extractvalue { {}*, i64 } %63, 0
  %.elt231 = extractvalue { {}*, i64 } %63, 1
  %cond206 = icmp eq i64 %.elt231, 0
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond206, {}* %64, {}* %.elt229
  %.val244.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %65 = ptrtoint {}* %64 to i64
  br label %tag17

header-check-br161:                               ; preds = %tag34
  %gep166 = getelementptr inbounds i8, i8* %15, i64 -9
  %irc-bit-cast167 = bitcast i8* %gep166 to i64*
  %66 = load i64, i64* %irc-bit-cast167, align 8
  %67 = add i64 %66, -1309
  %68 = lshr i64 %67, 3
  %69 = shl i64 %67, 61
  %70 = or i64 %68, %69
  switch i64 %70, label %tag33 [
    i64 2, label %tag10
    i64 4, label %tag10
    i64 5, label %tag10
    i64 0, label %tag10
  ]

normal-dest173:                                   ; preds = %tag37
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint102 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint103 = add i64 %ptrtoint102, 7
  %entry-point-addr104 = inttoptr i64 %entry-point-addr-uint103 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point105 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr104, align 8
  %75 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point105({}* %36, i64 5, {}* %71, {}* %72, {}* %"%SUBLIST106921.0256", {}* %73, {}* %74)
          to label %normal-dest108 unwind label %cleanup-lpad.loopexit.split-lp

header-check-br186:                               ; preds = %tag38
  %76 = load i64, i64* %irc-bit-cast192, align 8
  %77 = add i64 %76, -1309
  %78 = lshr i64 %77, 3
  %79 = shl i64 %77, 61
  %80 = or i64 %78, %79
  switch i64 %80, label %tag33 [
    i64 2, label %tag34
    i64 4, label %tag34
    i64 5, label %tag34
    i64 0, label %tag34
  ]
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^492^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !136 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^492^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G107065.0 = phi {}* [ %18, %header-check-br ], [ %G107065.1, %normal-dest26 ], [ %G107065.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 630), align 16
  %ptrtoint43 = ptrtoint {}* %G107065.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G107065.0, i64 2, {}* %"closure->CWR=SETZE_WERTE_BEREICH", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 630), align 16
  %"closure->CWR=SETZE_WERTE_BEREICH" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15608, i64 492, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag1

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 629), align 8
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt84 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt84, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107065.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107065.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 632), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=SETZE_WERTE_BEREICH", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 633), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=SETZE_WERTE_BEREICH", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2088 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 630), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !137 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest8
  %.elt44 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt44, 0
  %.elt = extractvalue { {}*, i64 } %18, 0
  %G107042.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint20 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %21, i64 3, {}* %G107042.0, {}* %farg2, {}* %farg1, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt48 = extractvalue { {}*, i64 } %22, 1
  %cond42 = icmp eq i64 %.elt48, 0
  %.elt46 = extractvalue { {}*, i64 } %22, 0
  %G107049.0 = select i1 %cond42, {}* %23, {}* %.elt46
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint34 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %25, i64 5, {}* %farg0, {}* %26, {}* %G107049.0, {}* %27, {}* %28)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^531^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !138 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^531^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G107117.0 = phi {}* [ %18, %header-check-br ], [ %G107117.1, %normal-dest17 ], [ %G107117.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %ptrtoint43 = ptrtoint {}* %G107117.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G107117.0, i64 2, {}* %"closure->CWR=LESE_WERTE_BEREICH", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %tag2, %normal-dest13, %maybe-more-tests42, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %"closure->CWR=LESE_WERTE_BEREICH" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 16501, i64 531, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %maybe-more-tests42
  %ptrtoint14 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107117.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

normal-dest21:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 635), align 8
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt84 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt84, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107117.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag2

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 638), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=LESE_WERTE_BEREICH", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 639), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=LESE_WERTE_BEREICH", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2124 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !139 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %19, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt21 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt21, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107136.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G107136.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^535^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !140 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^535^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G107381.0 = phi {}* [ %18, %header-check-br ], [ %G107381.1, %normal-dest26 ], [ %G107381.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 680), align 16
  %ptrtoint43 = ptrtoint {}* %G107381.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G107381.0, i64 2, {}* %"closure->CWR=HAT_KLASSE_?_ATTRIBUT", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 680), align 16
  %"closure->CWR=HAT_KLASSE_?_ATTRIBUT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 16606, i64 535, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt118 = extractvalue { {}*, i64 } %24, 0
  %.elt120 = extractvalue { {}*, i64 } %24, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107381.1 = select i1 %cond95, {}* %25, {}* %.elt118
  br label %tag4

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 679), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt97 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt97, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107381.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 682), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=HAT_KLASSE_?_ATTRIBUT", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 683), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=HAT_KLASSE_?_ATTRIBUT", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 301), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 680), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 684), align 16
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 2140 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 680), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !141 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc899 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

.noexc899:                                        ; preds = %13
  unreachable

tag1:                                             ; preds = %normal-dest498, %normal-dest244
  %.sink927 = phi { {}*, i64 } [ %133, %normal-dest244 ], [ %188, %normal-dest498 ]
  %.elt833 = extractvalue { {}*, i64 } %.sink927, 0
  %.elt835 = extractvalue { {}*, i64 } %.sink927, 1
  %cond755 = icmp eq i64 %.elt835, 0
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107360.0 = select i1 %cond755, {}* %14, {}* %.elt833
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 676), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest160 unwind label %cleanup-lpad.loopexit

tag2:                                             ; preds = %tag28
  br i1 %45, label %tag62, label %tag30

tag4:                                             ; preds = %tag4.lr.ph, %tag148
  %G107545.0 = phi {}* [ %.val938961, %tag4.lr.ph ], [ %.val938, %tag148 ]
  %17 = phi i1 [ %51, %tag4.lr.ph ], [ %97, %tag148 ]
  %18 = phi {}* [ %49, %tag4.lr.ph ], [ %93, %tag148 ]
  %"%SUBLIST107255.0964" = phi {}* [ %"%SUBLIST107255.0960", %tag4.lr.ph ], [ %"%SUBLIST107255.0", %tag148 ]
  %19 = ptrtoint {}* %"%SUBLIST107255.0964" to i64
  %tag-only802 = and i64 %19, 7
  %consp-test = icmp eq i64 %tag-only802, 3
  br i1 %consp-test, label %tag45, label %tag49

tag9:                                             ; preds = %tag138, %normal-dest451
  %20 = phi {}* [ %178, %normal-dest451 ], [ %.val943, %tag138 ]
  %G107516.0 = phi {}* [ %G107516.1, %normal-dest451 ], [ %87, %tag138 ]
  %21 = icmp eq {}* %G107516.0, %20
  br i1 %21, label %tag9.tag148_crit_edge, label %tag65

tag9.tag148_crit_edge:                            ; preds = %tag9
  %.val938.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag148

tag11:                                            ; preds = %header-check-br407, %header-check-br407, %header-check-br407, %header-check-br407
  %22 = ptrtoint {}* %.in854 to i64
  %single-float-tag-only = and i64 %22, 7
  %fixnum-tag-only615852 = and i64 %22, 3
  %fixnump-test616 = icmp ne i64 %fixnum-tag-only615852, 0
  %test709 = icmp eq i64 %single-float-tag-only, 1
  %or.cond924 = and i1 %fixnump-test616, %test709
  br i1 %or.cond924, label %header-check-br706, label %tag148

tag12:                                            ; preds = %tag92
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest189 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag15:                                            ; preds = %tag65
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %25, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.16", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.16^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 16606, i64 535, i64 0, i64 2, {}* %100, {}* %99)
          to label %normal-dest220 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag20:                                            ; preds = %tag148, %tag38, %tag65
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 665), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest251 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag25:                                            ; preds = %tag45
  %28 = add i64 %19, -3
  %29 = inttoptr i64 %28 to {}**
  %30 = load {}*, {}** %29, align 8
  br label %tag138

tag26:                                            ; preds = %tag85, %header-check-br
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest268 unwind label %cleanup-lpad.loopexit

tag28:                                            ; preds = %tag37
  %33 = icmp eq {}* %G107670.0, %46
  br i1 %33, label %tag2, label %tag80

tag30:                                            ; preds = %tag2, %normal-dest395, %tag80
  %.val934 = phi {}* [ %46, %tag80 ], [ %165, %normal-dest395 ], [ %G107670.0, %tag2 ]
  %34 = phi {}* [ %G107670.0, %tag80 ], [ %.val933.pre, %normal-dest395 ], [ %G107670.0, %tag2 ]
  %.in877 = phi {}* [ %70, %tag80 ], [ %.in876, %normal-dest395 ], [ %G107670.0, %tag2 ]
  %35 = bitcast {}* %.in877 to i8*
  %36 = icmp eq {}* %.in877, %106
  %G107650.0 = select i1 %36, {}* %34, {}* %.val934
  %37 = icmp eq {}* %G107650.0, %.val934
  br i1 %37, label %tag146, label %tag98

tag35:                                            ; preds = %tag98.tag35_crit_edge, %header-check-br474, %header-check-br713, %tag60, %tag146
  %.val = phi {}* [ %.val.pre, %tag98.tag35_crit_edge ], [ %34, %tag146 ], [ %34, %tag60 ], [ %34, %header-check-br713 ], [ %34, %header-check-br474 ]
  %38 = phi {}* [ %80, %tag98.tag35_crit_edge ], [ %.val934, %tag146 ], [ %.val934, %tag60 ], [ %.val934, %header-check-br713 ], [ %.val934, %header-check-br474 ]
  %39 = add i64 %48, 5
  %40 = inttoptr i64 %39 to {}**
  %41 = load {}*, {}** %40, align 8
  %42 = icmp eq {}* %41, %38
  %object614.0 = select i1 %42, {}* %.val, {}* %38
  %43 = icmp eq {}* %object614.0, %38
  %G107616.0 = select i1 %43, {}* %.val, {}* %38
  %44 = icmp eq {}* %G107616.0, %38
  br i1 %44, label %tag38, label %tag37

tag37:                                            ; preds = %tag37.lr.ph, %tag35
  %G107670.0 = phi {}* [ %.val966, %tag37.lr.ph ], [ %.val, %tag35 ]
  %45 = phi i1 [ %110, %tag37.lr.ph ], [ %43, %tag35 ]
  %46 = phi {}* [ %108, %tag37.lr.ph ], [ %38, %tag35 ]
  %47 = phi {}* [ %107, %tag37.lr.ph ], [ %41, %tag35 ]
  %48 = ptrtoint {}* %47 to i64
  %tag-only327763 = and i64 %48, 7
  %consp-test328 = icmp eq i64 %tag-only327763, 3
  br i1 %consp-test328, label %tag28, label %tag118

tag38:                                            ; preds = %tag35, %tag43.tag38_crit_edge, %normal-dest156
  %.val938961 = phi {}* [ %.val938961.pre, %tag43.tag38_crit_edge ], [ %.val966, %normal-dest156 ], [ %.val, %tag35 ]
  %49 = phi {}* [ %47, %tag43.tag38_crit_edge ], [ %108, %normal-dest156 ], [ %38, %tag35 ]
  %"%SUBLIST107255.0960" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 654), align 16
  %50 = icmp eq {}* %"%SUBLIST107255.0960", %49
  %object424.0962 = select i1 %50, {}* %.val938961, {}* %49
  %51 = icmp eq {}* %object424.0962, %49
  %G107491.0963 = select i1 %51, {}* %.val938961, {}* %49
  %52 = icmp eq {}* %G107491.0963, %49
  br i1 %52, label %tag20, label %tag4.lr.ph

tag4.lr.ph:                                       ; preds = %tag38
  %53 = ptrtoint %"class.core::T_O"* %105 to i64
  %single-float-tag-only692 = and i64 %53, 7
  %fixnum-tag-only440849 = and i64 %53, 3
  %fixnump-test441 = icmp eq i64 %fixnum-tag-only440849, 0
  %test410 = icmp ne i64 %single-float-tag-only692, 1
  %gep412 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %105, i64 -9, i32 0
  %irc-bit-cast413 = bitcast i8* %gep412 to i64*
  %brmerge = or i1 %test410, %fixnump-test441
  br label %tag4

tag42:                                            ; preds = %normal-dest563
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 674), align 16
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest344 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag43:                                            ; preds = %tag98
  %56 = icmp eq {}* %47, %80
  br i1 %56, label %tag43.tag38_crit_edge, label %tag107

tag43.tag38_crit_edge:                            ; preds = %tag43
  %.val938961.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag38

tag45:                                            ; preds = %tag4
  %57 = icmp eq {}* %G107545.0, %18
  br i1 %57, label %tag92, label %tag25

tag49:                                            ; preds = %tag4
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest376 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag50:                                            ; preds = %normal-dest519
  br i1 %test380, label %header-check-br377, label %tag76

tag60:                                            ; preds = %header-check-br474, %header-check-br474, %header-check-br474, %header-check-br474
  %60 = ptrtoint {}* %.in877 to i64
  %single-float-tag-only386 = and i64 %60, 7
  %fixnum-tag-only874 = and i64 %60, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only874, 0
  %test716 = icmp eq i64 %single-float-tag-only386, 1
  %or.cond925 = and i1 %fixnump-test, %test716
  br i1 %or.cond925, label %header-check-br713, label %tag35

tag62:                                            ; preds = %tag2
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest388 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag65:                                            ; preds = %tag9
  %63 = icmp eq {}* %"%SUBLIST107255.0964", %20
  br i1 %63, label %tag20, label %tag15

tag76:                                            ; preds = %tag50, %header-check-br726
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest427 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag78:                                            ; preds = %header-check-br706, %header-check-br706, %header-check-br706, %header-check-br706
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %67 = invoke {}* @cc_safe_fdefinition({}* %66)
          to label %normal-dest443 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag80:                                            ; preds = %tag28
  %68 = add i64 %48, -3
  %69 = inttoptr i64 %68 to {}**
  %70 = load {}*, {}** %69, align 8
  br label %tag30

tag83:                                            ; preds = %header-check-br713, %header-check-br713, %header-check-br713, %header-check-br713
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest461 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag85:                                            ; preds = %normal-dest163
  br i1 %test484, label %header-check-br481, label %tag26

tag88:                                            ; preds = %normal-dest671
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 674), align 16
  %74 = invoke {}* @cc_safe_fdefinition({}* %73)
          to label %normal-dest498 unwind label %cleanup-lpad.loopexit

tag91:                                            ; preds = %normal-dest344, %normal-dest608
  %.sink929 = phi { {}*, i64 } [ %208, %normal-dest608 ], [ %150, %normal-dest344 ]
  %.elt772 = extractvalue { {}*, i64 } %.sink929, 0
  %.elt774 = extractvalue { {}*, i64 } %.sink929, 1
  %cond742 = icmp eq i64 %.elt774, 0
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107160.0 = select i1 %cond742, {}* %75, {}* %.elt772
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 676), align 16
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest512 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag92:                                            ; preds = %tag45
  br i1 %17, label %tag12, label %tag138

tag96:                                            ; preds = %normal-dest434, %header-check-br377, %normal-dest308
  %G107569.0 = phi {}* [ %G107569.1, %normal-dest308 ], [ %"closure->LAMBDA584", %header-check-br377 ], [ %G107569.2, %normal-dest434 ]
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 672), align 16
  %79 = invoke {}* @cc_safe_fdefinition({}* %78)
          to label %normal-dest544 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag98:                                            ; preds = %tag30, %normal-dest468
  %80 = phi {}* [ %180, %normal-dest468 ], [ %.val934, %tag30 ]
  %G107641.0 = phi {}* [ %G107641.1, %normal-dest468 ], [ %34, %tag30 ]
  %81 = icmp eq {}* %G107641.0, %80
  br i1 %81, label %tag98.tag35_crit_edge, label %tag43

tag98.tag35_crit_edge:                            ; preds = %tag98
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag35

tag107:                                           ; preds = %tag43
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA584" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %82, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.17", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.17^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 16606, i64 535, i64 0, i64 2, {}* %100, {}* %99)
          to label %normal-dest583 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag118:                                           ; preds = %tag37
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %84 = invoke {}* @cc_safe_fdefinition({}* %83)
          to label %normal-dest643 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag122:                                           ; preds = %header-check-br481, %normal-dest369, %normal-dest275
  %G107424.0 = phi {}* [ %G107424.1, %normal-dest275 ], [ %G107424.2, %normal-dest369 ], [ %"closure->LAMBDA", %header-check-br481 ]
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 672), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest652 unwind label %cleanup-lpad.loopexit

tag130:                                           ; preds = %tag138
  br i1 %brmerge, label %tag148, label %header-check-br407

tag138:                                           ; preds = %tag92, %normal-dest197, %tag25
  %.val943 = phi {}* [ %18, %tag25 ], [ %122, %normal-dest197 ], [ %G107545.0, %tag92 ]
  %87 = phi {}* [ %G107545.0, %tag25 ], [ %.val942.pre, %normal-dest197 ], [ %G107545.0, %tag92 ]
  %.in854 = phi {}* [ %30, %tag25 ], [ %.in, %normal-dest197 ], [ %G107545.0, %tag92 ]
  %88 = bitcast {}* %.in854 to i8*
  %89 = icmp eq {}* %.in854, %106
  %G107525.0 = select i1 %89, {}* %87, {}* %.val943
  %90 = icmp eq {}* %G107525.0, %.val943
  br i1 %90, label %tag130, label %tag9

tag145:                                           ; preds = %normal-dest563, %normal-dest519, %normal-dest671, %normal-dest163, %normal-dest259
  %return-value.sroa.50.0 = phi i64 [ %.elt843, %normal-dest259 ], [ 1, %normal-dest163 ], [ 1, %normal-dest671 ], [ 1, %normal-dest519 ], [ 1, %normal-dest563 ]
  %return-value.sroa.0.2.in = phi {}* [ %.elt841, %normal-dest259 ], [ %G107357.0, %normal-dest671 ], [ %114, %normal-dest163 ], [ %G107250.0, %normal-dest563 ], [ %190, %normal-dest519 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %91 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.2.in, 0
  %92 = insertvalue { {}*, i64 } %91, i64 %return-value.sroa.50.0, 1
  ret { {}*, i64 } %92

tag146:                                           ; preds = %tag30
  br i1 %or.cond922, label %header-check-br474, label %tag35

tag148:                                           ; preds = %tag9.tag148_crit_edge, %header-check-br706, %header-check-br407, %tag130, %tag11
  %.val938 = phi {}* [ %.val938.pre, %tag9.tag148_crit_edge ], [ %87, %tag11 ], [ %87, %tag130 ], [ %87, %header-check-br407 ], [ %87, %header-check-br706 ]
  %93 = phi {}* [ %20, %tag9.tag148_crit_edge ], [ %.val943, %tag11 ], [ %.val943, %tag130 ], [ %.val943, %header-check-br407 ], [ %.val943, %header-check-br706 ]
  %94 = add i64 %19, 5
  %95 = inttoptr i64 %94 to {}**
  %"%SUBLIST107255.0" = load {}*, {}** %95, align 8
  %96 = icmp eq {}* %"%SUBLIST107255.0", %93
  %object424.0 = select i1 %96, {}* %.val938, {}* %93
  %97 = icmp eq {}* %object424.0, %93
  %G107491.0 = select i1 %97, {}* %.val938, {}* %93
  %98 = icmp eq {}* %G107491.0, %93
  br i1 %98, label %tag20, label %tag4

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest160, %tag26, %normal-dest268, %maybe-more-tests, %normal-dest362, %tag88, %normal-dest498, %tag122, %normal-dest652, %normal-dest659
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest443, %tag78, %normal-dest189, %tag12
  %lpad.loopexit948 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %maybe-more-tests734, %normal-dest301, %tag42, %normal-dest344, %tag76, %normal-dest427, %tag91, %normal-dest512, %tag96, %normal-dest544, %normal-dest551
  %lpad.loopexit951 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %normal-dest461, %tag83, %normal-dest388, %tag62
  %lpad.loopexit953 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %13, %10, %tag118, %normal-dest601, %normal-dest594, %normal-dest586, %normal-dest583, %tag107, %normal-dest376, %normal-dest643, %tag49, %normal-dest251, %tag20, %normal-dest237, %normal-dest230, %normal-dest222, %normal-dest220, %tag15, %normal-dest155, %normal-dest
  %lpad.loopexit.split-lp954 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit948, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit951, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit953, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp954, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %99 = invoke {}* @cc_makeCell()
          to label %normal-dest155 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest155:                                   ; preds = %normal-dest
  %100 = invoke {}* @cc_makeCell()
          to label %normal-dest156 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest156:                                   ; preds = %normal-dest155
  call void @cc_writeCell({}* %100, {}* %farg0)
  call void @cc_writeCell({}* %99, {}* %farg1)
  %101 = ptrtoint {}* %99 to i64
  %102 = add i64 %101, -3
  %103 = inttoptr i64 %102 to %"class.gctools::smart_ptr"*
  %104 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %103, i64 0, i32 0
  %105 = load %"class.core::T_O"*, %"class.core::T_O"** %104, align 8, !tbaa !74
  %106 = bitcast %"class.core::T_O"* %105 to {}*
  %107 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 641), align 8
  %108 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %109 = icmp eq {}* %107, %108
  %.val966 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object614.0967 = select i1 %109, {}* %.val966, {}* %108
  %110 = icmp eq {}* %object614.0967, %108
  %G107616.0968 = select i1 %110, {}* %.val966, {}* %108
  %111 = icmp eq {}* %G107616.0968, %108
  br i1 %111, label %tag38, label %tag37.lr.ph

tag37.lr.ph:                                      ; preds = %normal-dest156
  %112 = ptrtoint %"class.core::T_O"* %105 to i64
  %single-float-tag-only741 = and i64 %112, 7
  %fixnum-tag-only457871 = and i64 %112, 3
  %fixnump-test458 = icmp ne i64 %fixnum-tag-only457871, 0
  %test477 = icmp eq i64 %single-float-tag-only741, 1
  %or.cond922 = and i1 %fixnump-test458, %test477
  %gep479 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %105, i64 -9, i32 0
  %irc-bit-cast480 = bitcast i8* %gep479 to i64*
  br label %tag37

normal-dest160:                                   ; preds = %tag1
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %G107266.0, {}* %G107360.0, {}* null, {}* null)
          to label %normal-dest163 unwind label %cleanup-lpad.loopexit

normal-dest163:                                   ; preds = %normal-dest160
  %.elt817 = extractvalue { {}*, i64 } %113, 0
  %.elt819 = extractvalue { {}*, i64 } %113, 1
  %cond751 = icmp eq i64 %.elt819, 0
  %114 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond751, {}* %114, {}* %.elt817
  %115 = icmp eq {}* %object.0, %114
  %.val944 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G107408.0 = select i1 %115, {}* %.val944, {}* %114
  %116 = icmp eq {}* %G107408.0, %114
  br i1 %116, label %tag145, label %tag85

normal-dest189:                                   ; preds = %tag12
  %117 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %119 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %120 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint191 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint192 = add i64 %ptrtoint191, 7
  %entry-point-addr193 = inttoptr i64 %entry-point-addr-uint192 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point194 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr193, align 8
  %121 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point194({}* %24, i64 5, {}* %117, {}* %118, {}* %"%SUBLIST107255.0964", {}* %119, {}* %120)
          to label %normal-dest197 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest197:                                   ; preds = %normal-dest189
  %.elt863 = extractvalue { {}*, i64 } %121, 0
  %.elt865 = extractvalue { {}*, i64 } %121, 1
  %cond759 = icmp eq i64 %.elt865, 0
  %122 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond759, {}* %122, {}* %.elt863
  %.val942.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag138

normal-dest220:                                   ; preds = %tag15
  %123 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 132), align 16
  %124 = invoke {}* @cc_safe_fdefinition({}* %123)
          to label %normal-dest222 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest222:                                   ; preds = %normal-dest220
  %125 = ptrtoint {}* %100 to i64
  %126 = add i64 %125, -3
  %127 = inttoptr i64 %126 to {}**
  %128 = load {}*, {}** %127, align 8, !tbaa !74
  %ptrtoint224 = ptrtoint {}* %124 to i64
  %entry-point-addr-uint225 = add i64 %ptrtoint224, 7
  %entry-point-addr226 = inttoptr i64 %entry-point-addr-uint225 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point227 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr226, align 8
  %129 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point227({}* %124, i64 1, {}* %128, {}* null, {}* null, {}* null)
          to label %normal-dest230 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest230:                                   ; preds = %normal-dest222
  %.elt809 = extractvalue { {}*, i64 } %129, 0
  %.elt811 = extractvalue { {}*, i64 } %129, 1
  %cond749 = icmp eq i64 %.elt811, 0
  %130 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107266.0 = select i1 %cond749, {}* %130, {}* %.elt809
  %131 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 669), align 8
  %132 = invoke {}* @cc_safe_fdefinition({}* %131)
          to label %normal-dest237 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest237:                                   ; preds = %normal-dest230
  %ptrtoint238 = ptrtoint {}* %132 to i64
  %entry-point-addr-uint239 = add i64 %ptrtoint238, 7
  %entry-point-addr240 = inttoptr i64 %entry-point-addr-uint239 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point241 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr240, align 8
  %133 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point241({}* %132, i64 1, {}* %G107266.0, {}* null, {}* null, {}* null)
          to label %normal-dest244 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest244:                                   ; preds = %normal-dest237
  %ptrtoint482 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only483 = and i64 %ptrtoint482, 7
  %test484 = icmp eq i64 %tag-only483, 1
  %irc-bit-cast485 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep486 = getelementptr inbounds i8, i8* %irc-bit-cast485, i64 -9
  %irc-bit-cast487 = bitcast i8* %gep486 to i64*
  br label %tag1

normal-dest251:                                   ; preds = %tag20
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 667), align 8
  %135 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 668), align 16
  %136 = inttoptr i64 %102 to {}**
  %137 = load {}*, {}** %136, align 8, !tbaa !74
  %ptrtoint253 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint254 = add i64 %ptrtoint253, 7
  %entry-point-addr255 = inttoptr i64 %entry-point-addr-uint254 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point256 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr255, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point256({}* %27, i64 3, {}* %134, {}* %135, {}* %137, {}* null)
          to label %normal-dest259 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest259:                                   ; preds = %normal-dest251
  %.elt841 = extractvalue { {}*, i64 } %138, 0
  %.elt843 = extractvalue { {}*, i64 } %138, 1
  br label %tag145

header-check-br:                                  ; preds = %header-check-br481
  %.off947 = add i64 %186, -1001
  %139 = icmp ult i64 %.off947, 5
  br i1 %139, label %maybe-more-tests, label %tag26

maybe-more-tests:                                 ; preds = %header-check-br
  %140 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %141 = invoke {}* @cc_safe_fdefinition({}* %140)
          to label %normal-dest362 unwind label %cleanup-lpad.loopexit

normal-dest268:                                   ; preds = %tag26
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %143 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %145 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 671), align 8
  %ptrtoint269 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint270 = add i64 %ptrtoint269, 7
  %entry-point-addr271 = inttoptr i64 %entry-point-addr-uint270 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point272 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr271, align 8
  %146 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point272({}* %32, i64 5, {}* %142, {}* %143, {}* %"closure->LAMBDA", {}* %144, {}* %145)
          to label %normal-dest275 unwind label %cleanup-lpad.loopexit

normal-dest275:                                   ; preds = %normal-dest268
  %.elt821 = extractvalue { {}*, i64 } %146, 0
  %.elt823 = extractvalue { {}*, i64 } %146, 1
  %cond752 = icmp eq i64 %.elt823, 0
  %147 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107424.1 = select i1 %cond752, {}* %147, {}* %.elt821
  br label %tag122

normal-dest301:                                   ; preds = %maybe-more-tests734
  %ptrtoint302 = ptrtoint {}* %231 to i64
  %entry-point-addr-uint303 = add i64 %ptrtoint302, 7
  %entry-point-addr304 = inttoptr i64 %entry-point-addr-uint303 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point305 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr304, align 8
  %148 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point305({}* %231, i64 1, {}* nonnull %"closure->LAMBDA584", {}* null, {}* null, {}* null)
          to label %normal-dest308 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest308:                                   ; preds = %normal-dest301
  %.elt799 = extractvalue { {}*, i64 } %148, 0
  %.elt801 = extractvalue { {}*, i64 } %148, 1
  %cond748 = icmp eq i64 %.elt801, 0
  %149 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107569.1 = select i1 %cond748, {}* %149, {}* %.elt799
  br label %tag96

normal-dest344:                                   ; preds = %tag42
  %ptrtoint345 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint346 = add i64 %ptrtoint345, 7
  %entry-point-addr347 = inttoptr i64 %entry-point-addr-uint346 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point348 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr347, align 8
  %150 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point348({}* %55, i64 2, {}* %G107159.0, {}* %G107160.0, {}* null, {}* null)
          to label %tag91 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest362:                                   ; preds = %maybe-more-tests
  %ptrtoint363 = ptrtoint {}* %141 to i64
  %entry-point-addr-uint364 = add i64 %ptrtoint363, 7
  %entry-point-addr365 = inttoptr i64 %entry-point-addr-uint364 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point366 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr365, align 8
  %151 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point366({}* %141, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest369 unwind label %cleanup-lpad.loopexit

normal-dest369:                                   ; preds = %normal-dest362
  %.elt837 = extractvalue { {}*, i64 } %151, 0
  %.elt839 = extractvalue { {}*, i64 } %151, 1
  %cond756 = icmp eq i64 %.elt839, 0
  %152 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107424.2 = select i1 %cond756, {}* %152, {}* %.elt837
  br label %tag122

normal-dest376:                                   ; preds = %tag49
  %153 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %154 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %156 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint490 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint491 = add i64 %ptrtoint490, 7
  %entry-point-addr492 = inttoptr i64 %entry-point-addr-uint491 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point493 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr492, align 8
  %157 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point493({}* %59, i64 5, {}* %153, {}* %154, {}* %"%SUBLIST107255.0964", {}* %155, {}* %156)
          to label %normal-dest496 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

header-check-br377:                               ; preds = %tag50
  %158 = load i64, i64* %irc-bit-cast383, align 8
  %.off = add i64 %158, -913
  %159 = icmp ult i64 %.off, 85
  br i1 %159, label %tag96, label %header-check-br726

normal-dest388:                                   ; preds = %tag62
  %160 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %161 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %162 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %163 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint389 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint390 = add i64 %ptrtoint389, 7
  %entry-point-addr391 = inttoptr i64 %entry-point-addr-uint390 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point392 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr391, align 8
  %164 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point392({}* %62, i64 5, {}* %160, {}* %161, {}* %47, {}* %162, {}* %163)
          to label %normal-dest395 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest395:                                   ; preds = %normal-dest388
  %.elt886 = extractvalue { {}*, i64 } %164, 0
  %.elt888 = extractvalue { {}*, i64 } %164, 1
  %cond762 = icmp eq i64 %.elt888, 0
  %165 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in876 = select i1 %cond762, {}* %165, {}* %.elt886
  %.val933.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag30

header-check-br407:                               ; preds = %tag130
  %166 = load i64, i64* %irc-bit-cast413, align 8
  %167 = add i64 %166, -1309
  %168 = lshr i64 %167, 3
  %169 = shl i64 %167, 61
  %170 = or i64 %168, %169
  switch i64 %170, label %tag148 [
    i64 2, label %tag11
    i64 4, label %tag11
    i64 5, label %tag11
    i64 0, label %tag11
  ]

normal-dest420:                                   ; preds = %normal-dest643
  call void @unreachableError()
  unreachable

normal-dest427:                                   ; preds = %tag76
  %171 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %172 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %173 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %174 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 678), align 16
  %ptrtoint428 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint429 = add i64 %ptrtoint428, 7
  %entry-point-addr430 = inttoptr i64 %entry-point-addr-uint429 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point431 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr430, align 8
  %175 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point431({}* %65, i64 5, {}* %171, {}* %172, {}* %"closure->LAMBDA584", {}* %173, {}* %174)
          to label %normal-dest434 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest434:                                   ; preds = %normal-dest427
  %.elt780 = extractvalue { {}*, i64 } %175, 0
  %.elt782 = extractvalue { {}*, i64 } %175, 1
  %cond744 = icmp eq i64 %.elt782, 0
  %176 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107569.2 = select i1 %cond744, {}* %176, {}* %.elt780
  br label %tag96

normal-dest443:                                   ; preds = %tag78
  %ptrtoint445 = ptrtoint {}* %67 to i64
  %entry-point-addr-uint446 = add i64 %ptrtoint445, 7
  %entry-point-addr447 = inttoptr i64 %entry-point-addr-uint446 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point448 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr447, align 8
  %177 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point448({}* %67, i64 2, {}* nonnull %106, {}* nonnull %.in854, {}* null, {}* null)
          to label %normal-dest451 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest451:                                   ; preds = %normal-dest443
  %.elt856 = extractvalue { {}*, i64 } %177, 0
  %.elt858 = extractvalue { {}*, i64 } %177, 1
  %cond758 = icmp eq i64 %.elt858, 0
  %178 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107516.1 = select i1 %cond758, {}* %178, {}* %.elt856
  br label %tag9

normal-dest461:                                   ; preds = %tag83
  %ptrtoint462 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint463 = add i64 %ptrtoint462, 7
  %entry-point-addr464 = inttoptr i64 %entry-point-addr-uint463 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point465 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr464, align 8
  %179 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point465({}* %72, i64 2, {}* nonnull %106, {}* nonnull %.in877, {}* null, {}* null)
          to label %normal-dest468 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest468:                                   ; preds = %normal-dest461
  %.elt879 = extractvalue { {}*, i64 } %179, 0
  %.elt881 = extractvalue { {}*, i64 } %179, 1
  %cond761 = icmp eq i64 %.elt881, 0
  %180 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107641.1 = select i1 %cond761, {}* %180, {}* %.elt879
  br label %tag98

header-check-br474:                               ; preds = %tag146
  %181 = load i64, i64* %irc-bit-cast480, align 8
  %182 = add i64 %181, -1309
  %183 = lshr i64 %182, 3
  %184 = shl i64 %182, 61
  %185 = or i64 %183, %184
  switch i64 %185, label %tag35 [
    i64 2, label %tag60
    i64 4, label %tag60
    i64 5, label %tag60
    i64 0, label %tag60
  ]

header-check-br481:                               ; preds = %tag85
  %186 = load i64, i64* %irc-bit-cast487, align 8
  %.off946 = add i64 %186, -913
  %187 = icmp ult i64 %.off946, 85
  br i1 %187, label %tag122, label %header-check-br

normal-dest496:                                   ; preds = %normal-dest376
  call void @unreachableError()
  unreachable

normal-dest498:                                   ; preds = %tag88
  %ptrtoint499 = ptrtoint {}* %74 to i64
  %entry-point-addr-uint500 = add i64 %ptrtoint499, 7
  %entry-point-addr501 = inttoptr i64 %entry-point-addr-uint500 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point502 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr501, align 8
  %188 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point502({}* %74, i64 2, {}* %G107266.0, {}* %G107360.0, {}* null, {}* null)
          to label %tag1 unwind label %cleanup-lpad.loopexit

normal-dest512:                                   ; preds = %tag91
  %ptrtoint513 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint514 = add i64 %ptrtoint513, 7
  %entry-point-addr515 = inttoptr i64 %entry-point-addr-uint514 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point516 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr515, align 8
  %189 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point516({}* %77, i64 2, {}* %G107159.0, {}* %G107160.0, {}* null, {}* null)
          to label %normal-dest519 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest519:                                   ; preds = %normal-dest512
  %.elt776 = extractvalue { {}*, i64 } %189, 0
  %.elt778 = extractvalue { {}*, i64 } %189, 1
  %cond743 = icmp eq i64 %.elt778, 0
  %190 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object520.0 = select i1 %cond743, {}* %190, {}* %.elt776
  %191 = icmp eq {}* %object520.0, %190
  %.val935 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G107553.0 = select i1 %191, {}* %.val935, {}* %190
  %192 = icmp eq {}* %G107553.0, %190
  br i1 %192, label %tag145, label %tag50

normal-dest544:                                   ; preds = %tag96
  %ptrtoint545 = ptrtoint {}* %79 to i64
  %entry-point-addr-uint546 = add i64 %ptrtoint545, 7
  %entry-point-addr547 = inttoptr i64 %entry-point-addr-uint546 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point548 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr547, align 8
  %193 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point548({}* %79, i64 2, {}* %G107159.0, {}* %G107160.0, {}* null, {}* null)
          to label %normal-dest551 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest551:                                   ; preds = %normal-dest544
  %.elt784 = extractvalue { {}*, i64 } %193, 0
  %.elt786 = extractvalue { {}*, i64 } %193, 1
  %cond745 = icmp eq i64 %.elt786, 0
  %194 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107570.0 = select i1 %cond745, {}* %194, {}* %.elt784
  %ptrtoint557 = ptrtoint {}* %G107569.0 to i64
  %entry-point-addr-uint558 = add i64 %ptrtoint557, 7
  %entry-point-addr559 = inttoptr i64 %entry-point-addr-uint558 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point560 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr559, align 8
  %195 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point560({}* %G107569.0, i64 1, {}* %G107570.0, {}* null, {}* null, {}* null)
          to label %normal-dest563 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest563:                                   ; preds = %normal-dest551
  %.elt788 = extractvalue { {}*, i64 } %195, 0
  %.elt790 = extractvalue { {}*, i64 } %195, 1
  %cond746 = icmp eq i64 %.elt790, 0
  %196 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107250.0 = select i1 %cond746, {}* %196, {}* %.elt788
  %197 = icmp eq {}* %G107250.0, %196
  br i1 %197, label %tag42, label %tag145

normal-dest583:                                   ; preds = %tag107
  %198 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 132), align 16
  %199 = invoke {}* @cc_safe_fdefinition({}* %198)
          to label %normal-dest586 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest586:                                   ; preds = %normal-dest583
  %200 = ptrtoint {}* %100 to i64
  %201 = add i64 %200, -3
  %202 = inttoptr i64 %201 to {}**
  %203 = load {}*, {}** %202, align 8, !tbaa !74
  %ptrtoint588 = ptrtoint {}* %199 to i64
  %entry-point-addr-uint589 = add i64 %ptrtoint588, 7
  %entry-point-addr590 = inttoptr i64 %entry-point-addr-uint589 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point591 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr590, align 8
  %204 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point591({}* %199, i64 1, {}* %203, {}* null, {}* null, {}* null)
          to label %normal-dest594 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest594:                                   ; preds = %normal-dest586
  %.elt768 = extractvalue { {}*, i64 } %204, 0
  %.elt770 = extractvalue { {}*, i64 } %204, 1
  %cond = icmp eq i64 %.elt770, 0
  %205 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107159.0 = select i1 %cond, {}* %205, {}* %.elt768
  %206 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 669), align 8
  %207 = invoke {}* @cc_safe_fdefinition({}* %206)
          to label %normal-dest601 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest601:                                   ; preds = %normal-dest594
  %ptrtoint602 = ptrtoint {}* %207 to i64
  %entry-point-addr-uint603 = add i64 %ptrtoint602, 7
  %entry-point-addr604 = inttoptr i64 %entry-point-addr-uint603 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point605 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr604, align 8
  %208 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point605({}* %207, i64 1, {}* %G107159.0, {}* null, {}* null, {}* null)
          to label %normal-dest608 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest608:                                   ; preds = %normal-dest601
  %ptrtoint378 = ptrtoint {}* %"closure->LAMBDA584" to i64
  %tag-only379 = and i64 %ptrtoint378, 7
  %test380 = icmp eq i64 %tag-only379, 1
  %irc-bit-cast381 = bitcast {}* %"closure->LAMBDA584" to i8*
  %gep382 = getelementptr inbounds i8, i8* %irc-bit-cast381, i64 -9
  %irc-bit-cast383 = bitcast i8* %gep382 to i64*
  br label %tag91

normal-dest643:                                   ; preds = %tag118
  %209 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %210 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %211 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %212 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint414 = ptrtoint {}* %84 to i64
  %entry-point-addr-uint415 = add i64 %ptrtoint414, 7
  %entry-point-addr416 = inttoptr i64 %entry-point-addr-uint415 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point417 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr416, align 8
  %213 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point417({}* %84, i64 5, {}* %209, {}* %210, {}* %47, {}* %211, {}* %212)
          to label %normal-dest420 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest652:                                   ; preds = %tag122
  %ptrtoint653 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint654 = add i64 %ptrtoint653, 7
  %entry-point-addr655 = inttoptr i64 %entry-point-addr-uint654 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point656 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr655, align 8
  %214 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point656({}* %86, i64 2, {}* %G107266.0, {}* %G107360.0, {}* null, {}* null)
          to label %normal-dest659 unwind label %cleanup-lpad.loopexit

normal-dest659:                                   ; preds = %normal-dest652
  %.elt825 = extractvalue { {}*, i64 } %214, 0
  %.elt827 = extractvalue { {}*, i64 } %214, 1
  %cond753 = icmp eq i64 %.elt827, 0
  %215 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107425.0 = select i1 %cond753, {}* %215, {}* %.elt825
  %ptrtoint665 = ptrtoint {}* %G107424.0 to i64
  %entry-point-addr-uint666 = add i64 %ptrtoint665, 7
  %entry-point-addr667 = inttoptr i64 %entry-point-addr-uint666 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point668 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr667, align 8
  %216 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point668({}* %G107424.0, i64 1, {}* %G107425.0, {}* null, {}* null, {}* null)
          to label %normal-dest671 unwind label %cleanup-lpad.loopexit

normal-dest671:                                   ; preds = %normal-dest659
  %.elt829 = extractvalue { {}*, i64 } %216, 0
  %.elt831 = extractvalue { {}*, i64 } %216, 1
  %cond754 = icmp eq i64 %.elt831, 0
  %217 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107357.0 = select i1 %cond754, {}* %217, {}* %.elt829
  %218 = icmp eq {}* %G107357.0, %217
  br i1 %218, label %tag88, label %tag145

header-check-br706:                               ; preds = %tag11
  %gep711 = getelementptr inbounds i8, i8* %88, i64 -9
  %irc-bit-cast712 = bitcast i8* %gep711 to i64*
  %219 = load i64, i64* %irc-bit-cast712, align 8
  %220 = add i64 %219, -1309
  %221 = lshr i64 %220, 3
  %222 = shl i64 %220, 61
  %223 = or i64 %221, %222
  switch i64 %223, label %tag148 [
    i64 2, label %tag78
    i64 4, label %tag78
    i64 5, label %tag78
    i64 0, label %tag78
  ]

header-check-br713:                               ; preds = %tag60
  %gep718 = getelementptr inbounds i8, i8* %35, i64 -9
  %irc-bit-cast719 = bitcast i8* %gep718 to i64*
  %224 = load i64, i64* %irc-bit-cast719, align 8
  %225 = add i64 %224, -1309
  %226 = lshr i64 %225, 3
  %227 = shl i64 %225, 61
  %228 = or i64 %226, %227
  switch i64 %228, label %tag35 [
    i64 2, label %tag83
    i64 4, label %tag83
    i64 5, label %tag83
    i64 0, label %tag83
  ]

header-check-br726:                               ; preds = %header-check-br377
  %.off937 = add i64 %158, -1001
  %229 = icmp ult i64 %.off937, 5
  br i1 %229, label %maybe-more-tests734, label %tag76

maybe-more-tests734:                              ; preds = %header-check-br726
  %230 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %231 = invoke {}* @cc_safe_fdefinition({}* %230)
          to label %normal-dest301 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.16"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !142 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.16^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.16^DESC" to %0*)) #7
          to label %.noexc178 unwind label %cleanup-lpad

.noexc178:                                        ; preds = %10
  unreachable

tag2:                                             ; preds = %tag10, %normal-dest137, %tag26
  %11 = phi i64 [ %56, %tag26 ], [ %71, %normal-dest137 ], [ %56, %tag10 ]
  %12 = phi i64 [ %55, %tag26 ], [ %70, %normal-dest137 ], [ %55, %tag10 ]
  %.val184 = phi {}* [ %52, %tag26 ], [ %69, %normal-dest137 ], [ %52, %tag10 ]
  %.val183 = phi {}* [ %.val, %tag26 ], [ %.val183.pre, %normal-dest137 ], [ %.val, %tag10 ]
  %.in166 = phi {}* [ %28, %tag26 ], [ %.in, %normal-dest137 ], [ %52, %tag10 ]
  %13 = bitcast {}* %.in166 to i8*
  %14 = icmp eq {}* %.in166, %45
  %G107459.0 = select i1 %14, {}* %.val183, {}* %.val184
  %15 = icmp eq {}* %G107459.0, %.val184
  br i1 %15, label %tag24, label %tag14

tag10:                                            ; preds = %normal-dest44
  %16 = icmp eq {}* %x45.0, %52
  %G107473.0 = select i1 %16, {}* %.val, {}* %52
  %17 = icmp eq {}* %G107473.0, %52
  br i1 %17, label %tag27, label %tag2

tag14:                                            ; preds = %header-check-br, %header-check-br147, %tag24, %tag2, %tag18, %tag21, %normal-dest121
  %return-value.sroa.9.0 = phi i64 [ %.elt170, %normal-dest121 ], [ 1, %tag21 ], [ 1, %tag18 ], [ 1, %tag2 ], [ 1, %tag24 ], [ 1, %header-check-br147 ], [ 1, %header-check-br ]
  %return-value.sroa.0.0 = phi i64 [ %63, %normal-dest121 ], [ %11, %tag21 ], [ %11, %tag18 ], [ %12, %tag2 ], [ %11, %tag24 ], [ %11, %header-check-br147 ], [ %11, %header-check-br ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %18 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %19 = insertvalue { {}*, i64 } undef, {}* %18, 0
  %20 = insertvalue { {}*, i64 } %19, i64 %return-value.sroa.9.0, 1
  ret { {}*, i64 } %20

tag18:                                            ; preds = %header-check-br147, %header-check-br147, %header-check-br147, %header-check-br147
  %21 = ptrtoint {}* %.in166 to i64
  %single-float-tag-only105 = and i64 %21, 7
  %22 = icmp eq i64 %single-float-tag-only105, 6
  br i1 %22, label %tag14, label %tag21

tag20:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest114 unwind label %cleanup-lpad

tag21:                                            ; preds = %tag18
  %fixnum-tag-only122164 = and i64 %21, 3
  %fixnump-test123 = icmp ne i64 %fixnum-tag-only122164, 0
  %test = icmp eq i64 %single-float-tag-only105, 1
  %or.cond = and i1 %fixnump-test123, %test
  br i1 %or.cond, label %header-check-br, label %tag14

tag24:                                            ; preds = %tag2
  %25 = ptrtoint %"class.core::T_O"* %44 to i64
  %single-float-tag-only126 = and i64 %25, 7
  %fixnum-tag-only145161 = and i64 %25, 3
  %fixnump-test146 = icmp ne i64 %fixnum-tag-only145161, 0
  %test150 = icmp eq i64 %single-float-tag-only126, 1
  %or.cond181 = and i1 %fixnump-test146, %test150
  br i1 %or.cond181, label %header-check-br147, label %tag14

tag26:                                            ; preds = %normal-dest44
  %26 = add i64 %53, -3
  %27 = inttoptr i64 %26 to {}**
  %28 = load {}*, {}** %27, align 8
  br label %tag2

tag27:                                            ; preds = %tag10
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest130 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest130, %tag27, %normal-dest114, %tag20, %normal-dest40, %normal-dest
  %31 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %31

normal-dest:                                      ; preds = %entry
  %32 = ptrtoint {}* %closure-ptr to i64
  %33 = and i64 %32, -8
  %34 = inttoptr i64 %33 to %1*
  %35 = getelementptr inbounds %1, %1* %34, i64 0, i32 4, i32 1, i64 1, i32 0
  %36 = bitcast %"class.core::T_O"** %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !74
  %38 = getelementptr inbounds %1, %1* %34, i64 0, i32 4, i32 1, i64 0, i32 0
  %39 = bitcast %"class.core::T_O"** %38 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !74
  %41 = add i64 %37, -3
  %42 = inttoptr i64 %41 to %"class.gctools::smart_ptr"*
  %43 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %42, i64 0, i32 0
  %44 = load %"class.core::T_O"*, %"class.core::T_O"** %43, align 8, !tbaa !74
  %45 = bitcast %"class.core::T_O"* %44 to {}*
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest
  %48 = add i64 %40, -3
  %49 = inttoptr i64 %48 to {}**
  %50 = load {}*, {}** %49, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %47 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %47, i64 2, {}* %50, {}* %farg0, {}* null, {}* null)
          to label %normal-dest44 unwind label %cleanup-lpad

normal-dest44:                                    ; preds = %normal-dest40
  %.elt = extractvalue { {}*, i64 } %51, 0
  %.elt156 = extractvalue { {}*, i64 } %51, 1
  %cond = icmp eq i64 %.elt156, 0
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x45.0 = select i1 %cond, {}* %52, {}* %.elt
  %53 = ptrtoint {}* %x45.0 to i64
  %tag-only157 = and i64 %53, 7
  %consp-test = icmp eq i64 %tag-only157, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G107480.0 = select i1 %consp-test, {}* %.val, {}* %52
  %54 = icmp eq {}* %G107480.0, %52
  %55 = ptrtoint {}* %.val to i64
  %56 = ptrtoint {}* %52 to i64
  br i1 %54, label %tag10, label %tag26

header-check-br:                                  ; preds = %tag21
  %gep = getelementptr inbounds i8, i8* %13, i64 -9
  %irc-bit-cast55 = bitcast i8* %gep to i64*
  %57 = load i64, i64* %irc-bit-cast55, align 8
  %58 = add i64 %57, -1309
  %59 = lshr i64 %58, 3
  %60 = shl i64 %58, 61
  %61 = or i64 %59, %60
  switch i64 %61, label %tag14 [
    i64 2, label %tag20
    i64 4, label %tag20
    i64 5, label %tag20
    i64 0, label %tag20
  ]

normal-dest114:                                   ; preds = %tag20
  %ptrtoint115 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint116 = add i64 %ptrtoint115, 7
  %entry-point-addr117 = inttoptr i64 %entry-point-addr-uint116 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point118 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr117, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point118({}* %24, i64 2, {}* nonnull %45, {}* nonnull %.in166, {}* null, {}* null)
          to label %normal-dest121 unwind label %cleanup-lpad

normal-dest121:                                   ; preds = %normal-dest114
  %.elt168 = extractvalue { {}*, i64 } %62, 0
  %63 = ptrtoint {}* %.elt168 to i64
  %.elt170 = extractvalue { {}*, i64 } %62, 1
  br label %tag14

normal-dest130:                                   ; preds = %tag27
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %67 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint131 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint132 = add i64 %ptrtoint131, 7
  %entry-point-addr133 = inttoptr i64 %entry-point-addr-uint132 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point134 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr133, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point134({}* %30, i64 5, {}* %64, {}* %65, {}* %x45.0, {}* %66, {}* %67)
          to label %normal-dest137 unwind label %cleanup-lpad

normal-dest137:                                   ; preds = %normal-dest130
  %.elt175 = extractvalue { {}*, i64 } %68, 0
  %.elt177 = extractvalue { {}*, i64 } %68, 1
  %cond154 = icmp eq i64 %.elt177, 0
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond154, {}* %69, {}* %.elt175
  %.val183.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %70 = ptrtoint {}* %.val183.pre to i64
  %71 = ptrtoint {}* %69 to i64
  br label %tag2

header-check-br147:                               ; preds = %tag24
  %gep152 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %44, i64 -9, i32 0
  %irc-bit-cast153 = bitcast i8* %gep152 to i64*
  %72 = load i64, i64* %irc-bit-cast153, align 8
  %73 = add i64 %72, -1309
  %74 = lshr i64 %73, 3
  %75 = shl i64 %73, 61
  %76 = or i64 %74, %75
  switch i64 %76, label %tag14 [
    i64 2, label %tag18
    i64 4, label %tag18
    i64 5, label %tag18
    i64 0, label %tag18
  ]
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.17"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !143 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.17^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.17^DESC" to %0*)) #7
          to label %.noexc133 unwind label %cleanup-lpad

.noexc133:                                        ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest33
  %11 = ptrtoint %"class.core::T_O"* %33 to i64
  %single-float-tag-only = and i64 %11, 7
  %fixnum-tag-only59121 = and i64 %11, 3
  %fixnump-test60 = icmp ne i64 %fixnum-tag-only59121, 0
  %test66 = icmp eq i64 %single-float-tag-only, 1
  %or.cond134 = and i1 %fixnump-test60, %test66
  br i1 %or.cond134, label %header-check-br63, label %tag6

tag4:                                             ; preds = %header-check-br92, %header-check-br92, %header-check-br92, %header-check-br92
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest51 unwind label %cleanup-lpad

tag6:                                             ; preds = %header-check-br92, %header-check-br63, %tag13, %tag21, %tag3, %tag16, %normal-dest58
  %return-value.sroa.7.0 = phi i64 [ %.elt129, %normal-dest58 ], [ 1, %tag16 ], [ 1, %tag3 ], [ 1, %tag21 ], [ 1, %tag13 ], [ 1, %header-check-br63 ], [ 1, %header-check-br92 ]
  %return-value.sroa.0.0 = phi i64 [ %47, %normal-dest58 ], [ %19, %tag16 ], [ %45, %tag3 ], [ %45, %tag21 ], [ %45, %tag13 ], [ %45, %header-check-br63 ], [ %45, %header-check-br92 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %14 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %15 = insertvalue { {}*, i64 } undef, {}* %14, 0
  %16 = insertvalue { {}*, i64 } %15, i64 %return-value.sroa.7.0, 1
  ret { {}*, i64 } %16

tag13:                                            ; preds = %header-check-br63, %header-check-br63, %header-check-br63, %header-check-br63
  %17 = ptrtoint {}* %.in to i64
  %single-float-tag-only81 = and i64 %17, 7
  %18 = icmp eq i64 %single-float-tag-only81, 6
  br i1 %18, label %tag6, label %tag21

tag16:                                            ; preds = %normal-dest33
  %19 = ptrtoint {}* %.val to i64
  br label %tag6

tag21:                                            ; preds = %tag13
  %fixnum-tag-only100124 = and i64 %17, 3
  %fixnump-test101 = icmp ne i64 %fixnum-tag-only100124, 0
  %test95 = icmp eq i64 %single-float-tag-only81, 1
  %or.cond135 = and i1 %fixnump-test101, %test95
  br i1 %or.cond135, label %header-check-br92, label %tag6

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest51, %tag4, %normal-dest29, %normal-dest
  %20 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %20

normal-dest:                                      ; preds = %entry
  %21 = ptrtoint {}* %closure-ptr to i64
  %22 = and i64 %21, -8
  %23 = inttoptr i64 %22 to %1*
  %24 = getelementptr inbounds %1, %1* %23, i64 0, i32 4, i32 1, i64 1, i32 0
  %25 = bitcast %"class.core::T_O"** %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !74
  %27 = getelementptr inbounds %1, %1* %23, i64 0, i32 4, i32 1, i64 0, i32 0
  %28 = bitcast %"class.core::T_O"** %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !74
  %30 = add i64 %26, -3
  %31 = inttoptr i64 %30 to %"class.gctools::smart_ptr"*
  %32 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %31, i64 0, i32 0
  %33 = load %"class.core::T_O"*, %"class.core::T_O"** %32, align 8, !tbaa !74
  %34 = bitcast %"class.core::T_O"* %33 to {}*
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest29 unwind label %cleanup-lpad

normal-dest29:                                    ; preds = %normal-dest
  %37 = add i64 %29, -3
  %38 = inttoptr i64 %37 to {}**
  %39 = load {}*, {}** %38, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %36 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %36, i64 2, {}* %39, {}* %farg0, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest29
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt117 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt117, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond, {}* %41, {}* %.elt
  %42 = bitcast {}* %.in to i8*
  %43 = icmp eq {}* %.in, %34
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G107604.0 = select i1 %43, {}* %.val, {}* %41
  %44 = icmp eq {}* %G107604.0, %41
  %45 = ptrtoint {}* %41 to i64
  br i1 %44, label %tag3, label %tag16

normal-dest51:                                    ; preds = %tag4
  %ptrtoint52 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint53 = add i64 %ptrtoint52, 7
  %entry-point-addr54 = inttoptr i64 %entry-point-addr-uint53 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point55 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr54, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point55({}* %13, i64 2, {}* nonnull %34, {}* nonnull %.in, {}* null, {}* null)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest51
  %.elt127 = extractvalue { {}*, i64 } %46, 0
  %47 = ptrtoint {}* %.elt127 to i64
  %.elt129 = extractvalue { {}*, i64 } %46, 1
  br label %tag6

header-check-br63:                                ; preds = %tag3
  %gep68 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %33, i64 -9, i32 0
  %irc-bit-cast69 = bitcast i8* %gep68 to i64*
  %48 = load i64, i64* %irc-bit-cast69, align 8
  %49 = add i64 %48, -1309
  %50 = lshr i64 %49, 3
  %51 = shl i64 %49, 61
  %52 = or i64 %50, %51
  switch i64 %52, label %tag6 [
    i64 2, label %tag13
    i64 4, label %tag13
    i64 5, label %tag13
    i64 0, label %tag13
  ]

header-check-br92:                                ; preds = %tag21
  %gep97 = getelementptr inbounds i8, i8* %42, i64 -9
  %irc-bit-cast98 = bitcast i8* %gep97 to i64*
  %53 = load i64, i64* %irc-bit-cast98, align 8
  %54 = add i64 %53, -1309
  %55 = lshr i64 %54, 3
  %56 = shl i64 %54, 61
  %57 = or i64 %55, %56
  switch i64 %57, label %tag6 [
    i64 2, label %tag4
    i64 4, label %tag4
    i64 5, label %tag4
    i64 0, label %tag4
  ]
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^550^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !144 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^550^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest80, %normal-dest67, %header-check-br
  %G107724.0 = phi {}* [ %18, %header-check-br ], [ %G107724.1, %normal-dest67 ], [ %G107724.2, %normal-dest80 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 691), align 8
  %ptrtoint13 = ptrtoint {}* %G107724.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G107724.0, i64 2, {}* %"closure->CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br86
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest60 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest73, %maybe-more-tests94, %normal-dest60, %tag1, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 691), align 8
  %"closure->CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 17263, i64 550, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br86

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 693), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 694), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 301), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 691), align 8
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 695), align 8
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2200 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 691), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %tag1
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 690), align 16
  %ptrtoint61 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %14, i64 5, {}* %39, {}* %40, {}* %18, {}* %41, {}* %42)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt = extractvalue { {}*, i64 } %43, 0
  %.elt97 = extractvalue { {}*, i64 } %43, 1
  %cond = icmp eq i64 %.elt97, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107724.1 = select i1 %cond, {}* %44, {}* %.elt
  br label %tag

normal-dest73:                                    ; preds = %maybe-more-tests94
  %ptrtoint74 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint75 = add i64 %ptrtoint74, 7
  %entry-point-addr76 = inttoptr i64 %entry-point-addr-uint75 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point77 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr76, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point77({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest80 unwind label %cleanup-lpad

normal-dest80:                                    ; preds = %normal-dest73
  %.elt118 = extractvalue { {}*, i64 } %45, 0
  %.elt120 = extractvalue { {}*, i64 } %45, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107724.2 = select i1 %cond95, {}* %46, {}* %.elt118
  br label %tag

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag1

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest73 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !145 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc32 unwind label %cleanup-lpad

.noexc32:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest13, %normal-dest10, %normal-dest8, %normal-dest6, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = invoke {}* @cc_makeCell()
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  call void @cc_writeCell({}* %12, {}* %farg0)
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 688), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %15, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.18", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.18^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 17263, i64 550, i64 0, i64 1, {}* %12)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest6
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 599), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest8
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest10
  %.elt = extractvalue { {}*, i64 } %18, 0
  %.elt24 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt24, 0
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107744.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint16 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint17 = add i64 %ptrtoint16, 7
  %entry-point-addr18 = inttoptr i64 %entry-point-addr-uint17 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point19 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr18, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point19({}* %14, i64 2, {}* %"closure->LAMBDA", {}* %G107744.0, {}* null, {}* null)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %normal-dest13
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %20
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.18"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !146 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.18^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.18^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %16 = bitcast %"class.core::T_O"** %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !74
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 680), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %20 = add i64 %17, -3
  %21 = inttoptr i64 %20 to {}**
  %22 = load {}*, {}** %21, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %19 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %19, i64 2, {}* %farg0, {}* %22, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^559^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !147 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^559^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G107790.0 = phi {}* [ %18, %header-check-br ], [ %G107790.1, %normal-dest63 ], [ %G107790.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 703), align 8
  %ptrtoint22 = ptrtoint {}* %G107790.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G107790.0, i64 2, {}* %"closure->CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest56, %maybe-more-tests21, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 703), align 8
  %"closure->CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 17518, i64 559, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 705), align 8
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 706), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 2236 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 703), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %maybe-more-tests21
  %ptrtoint57 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107790.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag1

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 702), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107790.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !148 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc37 unwind label %cleanup-lpad

.noexc37:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest18, %normal-dest14, %normal-dest12, %normal-dest9, %normal-dest6, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = invoke {}* @cc_makeCell()
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %16 = invoke {}* @cc_makeCell()
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  call void @cc_writeCell({}* %16, {}* %farg0)
  call void @cc_writeCell({}* %15, {}* %farg1)
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 688), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %19, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.19", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.19^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 17518, i64 559, i64 0, i64 2, {}* %16, {}* %15)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 132), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest12
  %22 = ptrtoint {}* %16 to i64
  %23 = add i64 %22, -3
  %24 = inttoptr i64 %23 to {}**
  %25 = load {}*, {}** %24, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %21 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %21, i64 1, {}* %25, {}* null, {}* null, {}* null)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest14
  %.elt = extractvalue { {}*, i64 } %26, 0
  %.elt29 = extractvalue { {}*, i64 } %26, 1
  %cond = icmp eq i64 %.elt29, 0
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107810.0 = select i1 %cond, {}* %27, {}* %.elt
  %ptrtoint21 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint22 = add i64 %ptrtoint21, 7
  %entry-point-addr23 = inttoptr i64 %entry-point-addr-uint22 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point24 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr23, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point24({}* %18, i64 2, {}* %"closure->LAMBDA", {}* %G107810.0, {}* null, {}* null)
          to label %normal-dest27 unwind label %cleanup-lpad

normal-dest27:                                    ; preds = %normal-dest18
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %28
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.19"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !149 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.19^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.19^DESC" to %0*)) #7
          to label %.noexc894 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc894:                                        ; preds = %10
  unreachable

tag3:                                             ; preds = %tag179
  %11 = icmp eq {}* %G108006.0, %111
  br i1 %11, label %tag180, label %tag82

tag15:                                            ; preds = %tag180, %normal-dest311, %tag82
  %.val920 = phi {}* [ %111, %tag82 ], [ %160, %normal-dest311 ], [ %G108006.0, %tag180 ]
  %12 = phi {}* [ %G108006.0, %tag82 ], [ %.val919.pre, %normal-dest311 ], [ %G108006.0, %tag180 ]
  %.in876 = phi {}* [ %58, %tag82 ], [ %.in875, %normal-dest311 ], [ %G108006.0, %tag180 ]
  %13 = bitcast {}* %.in876 to i8*
  %14 = icmp eq {}* %.in876, %125
  %G107986.0 = select i1 %14, {}* %12, {}* %.val920
  %15 = icmp eq {}* %G107986.0, %.val920
  br i1 %15, label %tag117, label %tag33

tag25:                                            ; preds = %tag74
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 419), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest228 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag33:                                            ; preds = %tag15, %normal-dest520
  %18 = phi {}* [ %181, %normal-dest520 ], [ %.val920, %tag15 ]
  %G107977.0 = phi {}* [ %G107977.1, %normal-dest520 ], [ %12, %tag15 ]
  %19 = icmp eq {}* %G107977.0, %18
  br i1 %19, label %tag33.tag47_crit_edge, label %tag100

tag33.tag47_crit_edge:                            ; preds = %tag33
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag47

tag38:                                            ; preds = %tag39, %normal-dest284, %tag153
  %20 = phi i64 [ %169, %tag153 ], [ %149, %normal-dest284 ], [ %169, %tag39 ]
  %21 = phi i64 [ %168, %tag153 ], [ %148, %normal-dest284 ], [ %168, %tag39 ]
  %.val932 = phi {}* [ %165, %tag153 ], [ %147, %normal-dest284 ], [ %165, %tag39 ]
  %.val931 = phi {}* [ %.val929, %tag153 ], [ %.val931.pre, %normal-dest284 ], [ %.val929, %tag39 ]
  %.in826 = phi {}* [ %90, %tag153 ], [ %.in825, %normal-dest284 ], [ %165, %tag39 ]
  %22 = bitcast {}* %.in826 to i8*
  %23 = icmp eq {}* %.in826, %47
  %G107831.0 = select i1 %23, {}* %.val931, {}* %.val932
  %24 = icmp eq {}* %G107831.0, %.val932
  br i1 %24, label %tag83, label %tag42

tag39:                                            ; preds = %normal-dest403
  %25 = icmp eq {}* %x404.0, %165
  %G107845.0 = select i1 %25, {}* %.val929, {}* %165
  %26 = icmp eq {}* %G107845.0, %165
  br i1 %26, label %tag43, label %tag38

tag41:                                            ; preds = %header-check-br592, %header-check-br592, %header-check-br592, %header-check-br592
  %27 = ptrtoint {}* %.in826 to i64
  %single-float-tag-only275 = and i64 %27, 7
  %28 = icmp eq i64 %single-float-tag-only275, 6
  br i1 %28, label %tag42, label %tag176

tag42:                                            ; preds = %header-check-br296, %header-check-br592, %header-check-br453, %header-check-br652, %tag86, %tag175, %tag38, %tag83, %tag96, %tag41, %tag176, %tag155, %normal-dest635, %normal-dest617, %normal-dest591, %tag71
  %return-value.sroa.35.0 = phi i64 [ %.elt841, %normal-dest635 ], [ 1, %tag71 ], [ %.elt830, %normal-dest617 ], [ %.elt797, %normal-dest591 ], [ 1, %tag155 ], [ 1, %tag176 ], [ 1, %tag41 ], [ 1, %tag96 ], [ 1, %tag83 ], [ 1, %tag38 ], [ 1, %tag175 ], [ 1, %tag86 ], [ 1, %header-check-br652 ], [ 1, %header-check-br453 ], [ 1, %header-check-br592 ], [ 1, %header-check-br296 ]
  %return-value.sroa.0.0 = phi i64 [ %206, %normal-dest635 ], [ %50, %tag71 ], [ %200, %normal-dest617 ], [ %193, %normal-dest591 ], [ %91, %tag155 ], [ %20, %tag176 ], [ %20, %tag41 ], [ %242, %tag96 ], [ %20, %tag83 ], [ %21, %tag38 ], [ %242, %tag175 ], [ %242, %tag86 ], [ %242, %header-check-br652 ], [ %20, %header-check-br453 ], [ %20, %header-check-br592 ], [ %242, %header-check-br296 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %29 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %30 = insertvalue { {}*, i64 } undef, {}* %29, 0
  %31 = insertvalue { {}*, i64 } %30, i64 %return-value.sroa.35.0, 1
  ret { {}*, i64 } %31

tag43:                                            ; preds = %tag39
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest277 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag47:                                            ; preds = %tag33.tag47_crit_edge, %header-check-br568, %header-check-br503, %tag170, %tag117
  %.val = phi {}* [ %.val.pre, %tag33.tag47_crit_edge ], [ %12, %tag117 ], [ %12, %tag170 ], [ %12, %header-check-br503 ], [ %12, %header-check-br568 ]
  %34 = phi {}* [ %18, %tag33.tag47_crit_edge ], [ %.val920, %tag117 ], [ %.val920, %tag170 ], [ %.val920, %header-check-br503 ], [ %.val920, %header-check-br568 ]
  %35 = add i64 %112, 5
  %36 = inttoptr i64 %35 to {}**
  %"%SUBLIST107762.0" = load {}*, {}** %36, align 8
  %37 = icmp eq {}* %"%SUBLIST107762.0", %34
  %object.0 = select i1 %37, {}* %.val, {}* %34
  %38 = icmp eq {}* %object.0, %34
  %G107952.0 = select i1 %38, {}* %.val, {}* %34
  %39 = icmp eq {}* %G107952.0, %34
  br i1 %39, label %tag118, label %tag179

tag50:                                            ; preds = %tag180
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest304 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag58:                                            ; preds = %tag161, %normal-dest344
  %42 = phi {}* [ %162, %normal-dest344 ], [ %.val928, %tag161 ]
  %G107897.0 = phi {}* [ %G107897.1, %normal-dest344 ], [ %92, %tag161 ]
  %43 = icmp eq {}* %G107897.0, %42
  br i1 %43, label %tag58.tag165_crit_edge, label %tag74

tag58.tag165_crit_edge:                           ; preds = %tag58
  %.val923.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag165

tag59:                                            ; preds = %header-check-br673, %header-check-br673, %header-check-br673, %header-check-br673
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest335 unwind label %cleanup-lpad.loopexit

tag65:                                            ; preds = %tag121
  br i1 %52, label %tag166, label %tag161

tag70:                                            ; preds = %normal-dest244
  %46 = load %"class.core::T_O"*, %"class.core::T_O"** %123, align 8, !tbaa !74
  %47 = bitcast %"class.core::T_O"* %46 to {}*
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest395 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag71:                                            ; preds = %normal-dest244
  %50 = ptrtoint {}* %140 to i64
  br label %tag42

tag74:                                            ; preds = %tag58
  %51 = icmp eq {}* %54, %42
  br i1 %51, label %tag137, label %tag25

tag79:                                            ; preds = %tag79.lr.ph, %tag165
  %G107926.0 = phi {}* [ %.val923942, %tag79.lr.ph ], [ %.val923, %tag165 ]
  %52 = phi i1 [ %74, %tag79.lr.ph ], [ %101, %tag165 ]
  %53 = phi {}* [ %71, %tag79.lr.ph ], [ %96, %tag165 ]
  %54 = phi {}* [ %72, %tag79.lr.ph ], [ %99, %tag165 ]
  %55 = ptrtoint {}* %54 to i64
  %tag-only447801 = and i64 %55, 7
  %consp-test448 = icmp eq i64 %tag-only447801, 3
  br i1 %consp-test448, label %tag121, label %tag143

tag82:                                            ; preds = %tag3
  %56 = add i64 %112, -3
  %57 = inttoptr i64 %56 to {}**
  %58 = load {}*, {}** %57, align 8
  br label %tag15

tag83:                                            ; preds = %tag38
  %59 = ptrtoint %"class.core::T_O"* %46 to i64
  %single-float-tag-only449 = and i64 %59, 7
  %fixnum-tag-only208820 = and i64 %59, 3
  %fixnump-test209 = icmp ne i64 %fixnum-tag-only208820, 0
  %test595 = icmp eq i64 %single-float-tag-only449, 1
  %or.cond913 = and i1 %fixnump-test209, %test595
  br i1 %or.cond913, label %header-check-br592, label %tag42

tag86:                                            ; preds = %header-check-br296, %header-check-br296, %header-check-br296, %header-check-br296
  %60 = ptrtoint {}* %.in to i64
  %single-float-tag-only452 = and i64 %60, 7
  %61 = icmp eq i64 %single-float-tag-only452, 6
  br i1 %61, label %tag42, label %tag175

tag95:                                            ; preds = %tag121
  %62 = add i64 %55, -3
  %63 = inttoptr i64 %62 to {}**
  %64 = load {}*, {}** %63, align 8
  br label %tag161

tag96:                                            ; preds = %normal-dest730
  %65 = ptrtoint %"class.core::T_O"* %106 to i64
  %single-float-tag-only478 = and i64 %65, 7
  %fixnum-tag-only250789 = and i64 %65, 3
  %fixnump-test251 = icmp ne i64 %fixnum-tag-only250789, 0
  %test299 = icmp eq i64 %single-float-tag-only478, 1
  %or.cond907 = and i1 %fixnump-test251, %test299
  br i1 %or.cond907, label %header-check-br296, label %tag42

tag100:                                           ; preds = %tag33
  %66 = icmp eq {}* %"%SUBLIST107762.0950", %18
  br i1 %66, label %tag100.tag118_crit_edge, label %tag172

tag100.tag118_crit_edge:                          ; preds = %tag100
  %.val923942.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag118

tag102:                                           ; preds = %header-check-br575, %header-check-br575, %header-check-br575, %header-check-br575
  %67 = ptrtoint {}* %.in853 to i64
  %single-float-tag-only493 = and i64 %67, 7
  %68 = icmp eq i64 %single-float-tag-only493, 6
  br i1 %68, label %tag165, label %tag168

tag111:                                           ; preds = %header-check-br503, %header-check-br503, %header-check-br503, %header-check-br503
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest513 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag117:                                           ; preds = %tag15
  br i1 %brmerge, label %tag47, label %header-check-br568

tag118:                                           ; preds = %tag47, %tag100.tag118_crit_edge, %normal-dest
  %.val923942 = phi {}* [ %.val923942.pre, %tag100.tag118_crit_edge ], [ %.val947, %normal-dest ], [ %.val, %tag47 ]
  %71 = phi {}* [ %"%SUBLIST107762.0950", %tag100.tag118_crit_edge ], [ %126, %normal-dest ], [ %34, %tag47 ]
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 699), align 8
  %73 = icmp eq {}* %72, %71
  %object317.0943 = select i1 %73, {}* %.val923942, {}* %71
  %74 = icmp eq {}* %object317.0943, %71
  %G107872.0944 = select i1 %74, {}* %.val923942, {}* %71
  %75 = icmp eq {}* %G107872.0944, %71
  br i1 %75, label %tag137, label %tag79.lr.ph

tag79.lr.ph:                                      ; preds = %tag118
  %76 = ptrtoint %"class.core::T_O"* %124 to i64
  %single-float-tag-only625 = and i64 %76, 7
  %fixnum-tag-only460847 = and i64 %76, 3
  %fixnump-test461 = icmp ne i64 %fixnum-tag-only460847, 0
  %test578 = icmp eq i64 %single-float-tag-only625, 1
  %or.cond912 = and i1 %fixnump-test461, %test578
  %gep580 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %124, i64 -9, i32 0
  %irc-bit-cast581 = bitcast i8* %gep580 to i64*
  br label %tag79

tag121:                                           ; preds = %tag79
  %77 = icmp eq {}* %G107926.0, %53
  br i1 %77, label %tag65, label %tag95

tag127:                                           ; preds = %header-check-br652, %header-check-br652, %header-check-br652, %header-check-br652
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %79 = invoke {}* @cc_safe_fdefinition({}* %78)
          to label %normal-dest584 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag133:                                           ; preds = %header-check-br453, %header-check-br453, %header-check-br453, %header-check-br453
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest610 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag136:                                           ; preds = %tag161
  br i1 %or.cond912, label %header-check-br575, label %tag165

tag137:                                           ; preds = %tag165, %tag118, %tag74
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 665), align 8
  %83 = invoke {}* @cc_safe_fdefinition({}* %82)
          to label %normal-dest627 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag143:                                           ; preds = %tag79
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %85 = invoke {}* @cc_safe_fdefinition({}* %84)
          to label %normal-dest662 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag152:                                           ; preds = %tag179
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %87 = invoke {}* @cc_safe_fdefinition({}* %86)
          to label %normal-dest672 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag153:                                           ; preds = %normal-dest403
  %88 = add i64 %166, -3
  %89 = inttoptr i64 %88 to {}**
  %90 = load {}*, {}** %89, align 8
  br label %tag38

tag155:                                           ; preds = %normal-dest730
  %91 = ptrtoint {}* %.val921 to i64
  br label %tag42

tag161:                                           ; preds = %tag65, %normal-dest701, %tag95
  %.val928 = phi {}* [ %53, %tag95 ], [ %232, %normal-dest701 ], [ %G107926.0, %tag65 ]
  %92 = phi {}* [ %G107926.0, %tag95 ], [ %.val927.pre, %normal-dest701 ], [ %G107926.0, %tag65 ]
  %.in853 = phi {}* [ %64, %tag95 ], [ %.in852, %normal-dest701 ], [ %G107926.0, %tag65 ]
  %93 = bitcast {}* %.in853 to i8*
  %94 = icmp eq {}* %.in853, %125
  %G107906.0 = select i1 %94, {}* %92, {}* %.val928
  %95 = icmp eq {}* %G107906.0, %.val928
  br i1 %95, label %tag136, label %tag58

tag165:                                           ; preds = %tag58.tag165_crit_edge, %header-check-br575, %header-check-br673, %tag102, %tag168, %tag136
  %.val923 = phi {}* [ %.val923.pre, %tag58.tag165_crit_edge ], [ %92, %tag136 ], [ %92, %tag168 ], [ %92, %tag102 ], [ %92, %header-check-br673 ], [ %92, %header-check-br575 ]
  %96 = phi {}* [ %42, %tag58.tag165_crit_edge ], [ %.val928, %tag136 ], [ %.val928, %tag168 ], [ %.val928, %tag102 ], [ %.val928, %header-check-br673 ], [ %.val928, %header-check-br575 ]
  %97 = add i64 %55, 5
  %98 = inttoptr i64 %97 to {}**
  %99 = load {}*, {}** %98, align 8
  %100 = icmp eq {}* %99, %96
  %object317.0 = select i1 %100, {}* %.val923, {}* %96
  %101 = icmp eq {}* %object317.0, %96
  %G107872.0 = select i1 %101, {}* %.val923, {}* %96
  %102 = icmp eq {}* %G107872.0, %96
  br i1 %102, label %tag137, label %tag79

tag166:                                           ; preds = %tag65
  %103 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %104 = invoke {}* @cc_safe_fdefinition({}* %103)
          to label %normal-dest694 unwind label %cleanup-lpad.loopexit

tag168:                                           ; preds = %tag102
  %fixnum-tag-only709850 = and i64 %67, 3
  %fixnump-test710 = icmp ne i64 %fixnum-tag-only709850, 0
  %test676 = icmp eq i64 %single-float-tag-only493, 1
  %or.cond915 = and i1 %fixnump-test710, %test676
  br i1 %or.cond915, label %header-check-br673, label %tag165

tag170:                                           ; preds = %header-check-br568, %header-check-br568, %header-check-br568, %header-check-br568
  %105 = ptrtoint {}* %.in876 to i64
  %single-float-tag-only718 = and i64 %105, 7
  %fixnum-tag-only210873 = and i64 %105, 3
  %fixnump-test211 = icmp ne i64 %fixnum-tag-only210873, 0
  %test506 = icmp eq i64 %single-float-tag-only718, 1
  %or.cond910 = and i1 %fixnump-test211, %test506
  br i1 %or.cond910, label %header-check-br503, label %tag47

tag172:                                           ; preds = %tag100
  %106 = load %"class.core::T_O"*, %"class.core::T_O"** %123, align 8, !tbaa !74
  %107 = bitcast %"class.core::T_O"* %106 to {}*
  %108 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %109 = invoke {}* @cc_safe_fdefinition({}* %108)
          to label %normal-dest722 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag175:                                           ; preds = %tag86
  %fixnum-tag-only743792 = and i64 %60, 3
  %fixnump-test744 = icmp ne i64 %fixnum-tag-only743792, 0
  %test655 = icmp eq i64 %single-float-tag-only452, 1
  %or.cond914 = and i1 %fixnump-test744, %test655
  br i1 %or.cond914, label %header-check-br652, label %tag42

tag176:                                           ; preds = %tag41
  %fixnum-tag-only745823 = and i64 %27, 3
  %fixnump-test746 = icmp ne i64 %fixnum-tag-only745823, 0
  %test456 = icmp eq i64 %single-float-tag-only275, 1
  %or.cond908 = and i1 %fixnump-test746, %test456
  br i1 %or.cond908, label %header-check-br453, label %tag42

tag179:                                           ; preds = %tag179.lr.ph, %tag47
  %G108006.0 = phi {}* [ %.val947, %tag179.lr.ph ], [ %.val, %tag47 ]
  %110 = phi i1 [ %128, %tag179.lr.ph ], [ %38, %tag47 ]
  %111 = phi {}* [ %126, %tag179.lr.ph ], [ %34, %tag47 ]
  %"%SUBLIST107762.0950" = phi {}* [ %"%SUBLIST107762.0946", %tag179.lr.ph ], [ %"%SUBLIST107762.0", %tag47 ]
  %112 = ptrtoint {}* %"%SUBLIST107762.0950" to i64
  %tag-only754778 = and i64 %112, 7
  %consp-test755 = icmp eq i64 %tag-only754778, 3
  br i1 %consp-test755, label %tag3, label %tag152

tag180:                                           ; preds = %tag3
  br i1 %110, label %tag50, label %tag15

cleanup-lpad.loopexit:                            ; preds = %tag59, %normal-dest335, %tag166, %normal-dest694
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest513, %tag111, %normal-dest304, %tag50
  %lpad.loopexit935 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %9, %normal-dest722, %tag172, %tag152, %tag143, %normal-dest627, %tag137, %normal-dest610, %tag133, %normal-dest584, %tag127, %normal-dest672, %normal-dest662, %normal-dest395, %tag70, %normal-dest277, %tag43, %normal-dest235, %normal-dest230, %normal-dest228, %tag25
  %lpad.loopexit.split-lp936 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit935, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp936, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %113 = ptrtoint {}* %closure-ptr to i64
  %114 = and i64 %113, -8
  %115 = inttoptr i64 %114 to %1*
  %116 = getelementptr inbounds %1, %1* %115, i64 0, i32 4, i32 1, i64 1, i32 0
  %117 = bitcast %"class.core::T_O"** %116 to i64*
  %118 = load i64, i64* %117, align 8, !tbaa !74
  %119 = getelementptr inbounds %1, %1* %115, i64 0, i32 4, i32 1, i64 0, i32 0
  %120 = load %"class.core::T_O"*, %"class.core::T_O"** %119, align 8, !tbaa !74
  %121 = add i64 %118, -3
  %122 = inttoptr i64 %121 to %"class.gctools::smart_ptr"*
  %123 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %122, i64 0, i32 0
  %124 = load %"class.core::T_O"*, %"class.core::T_O"** %123, align 8, !tbaa !74
  %125 = bitcast %"class.core::T_O"* %124 to {}*
  %"%SUBLIST107762.0946" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 698), align 16
  %126 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %127 = icmp eq {}* %"%SUBLIST107762.0946", %126
  %.val947 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0948 = select i1 %127, {}* %.val947, {}* %126
  %128 = icmp eq {}* %object.0948, %126
  %G107952.0949 = select i1 %128, {}* %.val947, {}* %126
  %129 = icmp eq {}* %G107952.0949, %126
  br i1 %129, label %tag118, label %tag179.lr.ph

tag179.lr.ph:                                     ; preds = %normal-dest
  %130 = ptrtoint %"class.core::T_O"* %124 to i64
  %single-float-tag-only549 = and i64 %130, 7
  %fixnum-tag-only607870 = and i64 %130, 3
  %fixnump-test608 = icmp eq i64 %fixnum-tag-only607870, 0
  %test571 = icmp ne i64 %single-float-tag-only549, 1
  %gep573 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %124, i64 -9, i32 0
  %irc-bit-cast574 = bitcast i8* %gep573 to i64*
  %brmerge = or i1 %test571, %fixnump-test608
  br label %tag179

normal-dest228:                                   ; preds = %tag25
  %131 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 636), align 16
  %132 = invoke {}* @cc_safe_fdefinition({}* %131)
          to label %normal-dest230 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest230:                                   ; preds = %normal-dest228
  %133 = ptrtoint %"class.core::T_O"* %120 to i64
  %134 = add i64 %133, -3
  %135 = inttoptr i64 %134 to {}**
  %136 = load {}*, {}** %135, align 8, !tbaa !74
  %ptrtoint232 = ptrtoint {}* %132 to i64
  %entry-point-addr-uint = add i64 %ptrtoint232, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %137 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %132, i64 2, {}* %136, {}* %farg0, {}* null, {}* null)
          to label %normal-dest235 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest235:                                   ; preds = %normal-dest230
  %.elt808 = extractvalue { {}*, i64 } %137, 0
  %.elt810 = extractvalue { {}*, i64 } %137, 1
  %cond768 = icmp eq i64 %.elt810, 0
  %138 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107863.0 = select i1 %cond768, {}* %138, {}* %.elt808
  %ptrtoint238 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint239 = add i64 %ptrtoint238, 7
  %entry-point-addr240 = inttoptr i64 %entry-point-addr-uint239 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point241 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr240, align 8
  %139 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point241({}* %17, i64 1, {}* %G107863.0, {}* null, {}* null, {}* null)
          to label %normal-dest244 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest244:                                   ; preds = %normal-dest235
  %.elt812 = extractvalue { {}*, i64 } %139, 0
  %.elt814 = extractvalue { {}*, i64 } %139, 1
  %cond769 = icmp eq i64 %.elt814, 0
  %140 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107860.0 = select i1 %cond769, {}* %140, {}* %.elt812
  %141 = icmp eq {}* %G107860.0, %140
  br i1 %141, label %tag71, label %tag70

normal-dest277:                                   ; preds = %tag43
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %143 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %145 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint278 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint279 = add i64 %ptrtoint278, 7
  %entry-point-addr280 = inttoptr i64 %entry-point-addr-uint279 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point281 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr280, align 8
  %146 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point281({}* %33, i64 5, {}* %142, {}* %143, {}* %x404.0, {}* %144, {}* %145)
          to label %normal-dest284 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest284:                                   ; preds = %normal-dest277
  %.elt835 = extractvalue { {}*, i64 } %146, 0
  %.elt837 = extractvalue { {}*, i64 } %146, 1
  %cond771 = icmp eq i64 %.elt837, 0
  %147 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in825 = select i1 %cond771, {}* %147, {}* %.elt835
  %.val931.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %148 = ptrtoint {}* %.val931.pre to i64
  %149 = ptrtoint {}* %147 to i64
  br label %tag38

header-check-br296:                               ; preds = %tag96
  %gep301 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %106, i64 -9, i32 0
  %irc-bit-cast302 = bitcast i8* %gep301 to i64*
  %150 = load i64, i64* %irc-bit-cast302, align 8
  %151 = add i64 %150, -1309
  %152 = lshr i64 %151, 3
  %153 = shl i64 %151, 61
  %154 = or i64 %152, %153
  switch i64 %154, label %tag42 [
    i64 2, label %tag86
    i64 4, label %tag86
    i64 5, label %tag86
    i64 0, label %tag86
  ]

normal-dest304:                                   ; preds = %tag50
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %156 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %157 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %158 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint305 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint306 = add i64 %ptrtoint305, 7
  %entry-point-addr307 = inttoptr i64 %entry-point-addr-uint306 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point308 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr307, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point308({}* %41, i64 5, {}* %155, {}* %156, {}* %"%SUBLIST107762.0950", {}* %157, {}* %158)
          to label %normal-dest311 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest311:                                   ; preds = %normal-dest304
  %.elt885 = extractvalue { {}*, i64 } %159, 0
  %.elt887 = extractvalue { {}*, i64 } %159, 1
  %cond777 = icmp eq i64 %.elt887, 0
  %160 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in875 = select i1 %cond777, {}* %160, {}* %.elt885
  %.val919.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag15

normal-dest335:                                   ; preds = %tag59
  %ptrtoint338 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint339 = add i64 %ptrtoint338, 7
  %entry-point-addr340 = inttoptr i64 %entry-point-addr-uint339 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point341 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr340, align 8
  %161 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point341({}* %45, i64 2, {}* nonnull %125, {}* nonnull %.in853, {}* null, {}* null)
          to label %normal-dest344 unwind label %cleanup-lpad.loopexit

normal-dest344:                                   ; preds = %normal-dest335
  %.elt855 = extractvalue { {}*, i64 } %161, 0
  %.elt857 = extractvalue { {}*, i64 } %161, 1
  %cond773 = icmp eq i64 %.elt857, 0
  %162 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107897.1 = select i1 %cond773, {}* %162, {}* %.elt855
  br label %tag58

normal-dest395:                                   ; preds = %tag70
  %163 = load {}*, {}** %135, align 8, !tbaa !74
  %ptrtoint397 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint398 = add i64 %ptrtoint397, 7
  %entry-point-addr399 = inttoptr i64 %entry-point-addr-uint398 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point400 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr399, align 8
  %164 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point400({}* %49, i64 2, {}* %163, {}* %farg0, {}* null, {}* null)
          to label %normal-dest403 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest403:                                   ; preds = %normal-dest395
  %.elt816 = extractvalue { {}*, i64 } %164, 0
  %.elt818 = extractvalue { {}*, i64 } %164, 1
  %cond770 = icmp eq i64 %.elt818, 0
  %165 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x404.0 = select i1 %cond770, {}* %165, {}* %.elt816
  %166 = ptrtoint {}* %x404.0 to i64
  %tag-only414819 = and i64 %166, 7
  %consp-test415 = icmp eq i64 %tag-only414819, 3
  %.val929 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G107852.0 = select i1 %consp-test415, {}* %.val929, {}* %165
  %167 = icmp eq {}* %G107852.0, %165
  %168 = ptrtoint {}* %.val929 to i64
  %169 = ptrtoint {}* %165 to i64
  br i1 %167, label %tag39, label %tag153

normal-dest425:                                   ; preds = %normal-dest662
  call void @unreachableError()
  unreachable

normal-dest446:                                   ; preds = %normal-dest672
  call void @unreachableError()
  unreachable

header-check-br453:                               ; preds = %tag176
  %gep458 = getelementptr inbounds i8, i8* %22, i64 -9
  %irc-bit-cast459 = bitcast i8* %gep458 to i64*
  %170 = load i64, i64* %irc-bit-cast459, align 8
  %171 = add i64 %170, -1309
  %172 = lshr i64 %171, 3
  %173 = shl i64 %171, 61
  %174 = or i64 %172, %173
  switch i64 %174, label %tag42 [
    i64 2, label %tag133
    i64 4, label %tag133
    i64 5, label %tag133
    i64 0, label %tag133
  ]

header-check-br503:                               ; preds = %tag170
  %gep508 = getelementptr inbounds i8, i8* %13, i64 -9
  %irc-bit-cast509 = bitcast i8* %gep508 to i64*
  %175 = load i64, i64* %irc-bit-cast509, align 8
  %176 = add i64 %175, -1309
  %177 = lshr i64 %176, 3
  %178 = shl i64 %176, 61
  %179 = or i64 %177, %178
  switch i64 %179, label %tag47 [
    i64 2, label %tag111
    i64 4, label %tag111
    i64 5, label %tag111
    i64 0, label %tag111
  ]

normal-dest513:                                   ; preds = %tag111
  %ptrtoint514 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint515 = add i64 %ptrtoint514, 7
  %entry-point-addr516 = inttoptr i64 %entry-point-addr-uint515 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point517 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr516, align 8
  %180 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point517({}* %70, i64 2, {}* nonnull %125, {}* nonnull %.in876, {}* null, {}* null)
          to label %normal-dest520 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest520:                                   ; preds = %normal-dest513
  %.elt878 = extractvalue { {}*, i64 } %180, 0
  %.elt880 = extractvalue { {}*, i64 } %180, 1
  %cond776 = icmp eq i64 %.elt880, 0
  %181 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G107977.1 = select i1 %cond776, {}* %181, {}* %.elt878
  br label %tag33

header-check-br568:                               ; preds = %tag117
  %182 = load i64, i64* %irc-bit-cast574, align 8
  %183 = add i64 %182, -1309
  %184 = lshr i64 %183, 3
  %185 = shl i64 %183, 61
  %186 = or i64 %184, %185
  switch i64 %186, label %tag47 [
    i64 2, label %tag170
    i64 4, label %tag170
    i64 5, label %tag170
    i64 0, label %tag170
  ]

header-check-br575:                               ; preds = %tag136
  %187 = load i64, i64* %irc-bit-cast581, align 8
  %188 = add i64 %187, -1309
  %189 = lshr i64 %188, 3
  %190 = shl i64 %188, 61
  %191 = or i64 %189, %190
  switch i64 %191, label %tag165 [
    i64 2, label %tag102
    i64 4, label %tag102
    i64 5, label %tag102
    i64 0, label %tag102
  ]

normal-dest584:                                   ; preds = %tag127
  %ptrtoint585 = ptrtoint {}* %79 to i64
  %entry-point-addr-uint586 = add i64 %ptrtoint585, 7
  %entry-point-addr587 = inttoptr i64 %entry-point-addr-uint586 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point588 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr587, align 8
  %192 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point588({}* %79, i64 2, {}* nonnull %107, {}* nonnull %.in, {}* null, {}* null)
          to label %normal-dest591 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest591:                                   ; preds = %normal-dest584
  %.elt795 = extractvalue { {}*, i64 } %192, 0
  %193 = ptrtoint {}* %.elt795 to i64
  %.elt797 = extractvalue { {}*, i64 } %192, 1
  br label %tag42

header-check-br592:                               ; preds = %tag83
  %gep597 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %46, i64 -9, i32 0
  %irc-bit-cast598 = bitcast i8* %gep597 to i64*
  %194 = load i64, i64* %irc-bit-cast598, align 8
  %195 = add i64 %194, -1309
  %196 = lshr i64 %195, 3
  %197 = shl i64 %195, 61
  %198 = or i64 %196, %197
  switch i64 %198, label %tag42 [
    i64 2, label %tag41
    i64 4, label %tag41
    i64 5, label %tag41
    i64 0, label %tag41
  ]

normal-dest610:                                   ; preds = %tag133
  %ptrtoint611 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint612 = add i64 %ptrtoint611, 7
  %entry-point-addr613 = inttoptr i64 %entry-point-addr-uint612 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point614 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr613, align 8
  %199 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point614({}* %81, i64 2, {}* nonnull %47, {}* nonnull %.in826, {}* null, {}* null)
          to label %normal-dest617 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest617:                                   ; preds = %normal-dest610
  %.elt828 = extractvalue { {}*, i64 } %199, 0
  %200 = ptrtoint {}* %.elt828 to i64
  %.elt830 = extractvalue { {}*, i64 } %199, 1
  br label %tag42

normal-dest627:                                   ; preds = %tag137
  %201 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 700), align 16
  %202 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 701), align 8
  %203 = inttoptr i64 %121 to {}**
  %204 = load {}*, {}** %203, align 8, !tbaa !74
  %ptrtoint629 = ptrtoint {}* %83 to i64
  %entry-point-addr-uint630 = add i64 %ptrtoint629, 7
  %entry-point-addr631 = inttoptr i64 %entry-point-addr-uint630 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point632 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr631, align 8
  %205 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point632({}* %83, i64 3, {}* %201, {}* %202, {}* %204, {}* null)
          to label %normal-dest635 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest635:                                   ; preds = %normal-dest627
  %.elt839 = extractvalue { {}*, i64 } %205, 0
  %206 = ptrtoint {}* %.elt839 to i64
  %.elt841 = extractvalue { {}*, i64 } %205, 1
  br label %tag42

header-check-br652:                               ; preds = %tag175
  %gep657 = getelementptr inbounds i8, i8* %239, i64 -9
  %irc-bit-cast658 = bitcast i8* %gep657 to i64*
  %207 = load i64, i64* %irc-bit-cast658, align 8
  %208 = add i64 %207, -1309
  %209 = lshr i64 %208, 3
  %210 = shl i64 %208, 61
  %211 = or i64 %209, %210
  switch i64 %211, label %tag42 [
    i64 2, label %tag127
    i64 4, label %tag127
    i64 5, label %tag127
    i64 0, label %tag127
  ]

normal-dest662:                                   ; preds = %tag143
  %212 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %213 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %214 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %215 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint419 = ptrtoint {}* %85 to i64
  %entry-point-addr-uint420 = add i64 %ptrtoint419, 7
  %entry-point-addr421 = inttoptr i64 %entry-point-addr-uint420 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point422 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr421, align 8
  %216 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point422({}* %85, i64 5, {}* %212, {}* %213, {}* %54, {}* %214, {}* %215)
          to label %normal-dest425 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest672:                                   ; preds = %tag152
  %217 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %218 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %219 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %220 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint440 = ptrtoint {}* %87 to i64
  %entry-point-addr-uint441 = add i64 %ptrtoint440, 7
  %entry-point-addr442 = inttoptr i64 %entry-point-addr-uint441 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point443 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr442, align 8
  %221 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point443({}* %87, i64 5, {}* %217, {}* %218, {}* %"%SUBLIST107762.0950", {}* %219, {}* %220)
          to label %normal-dest446 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

header-check-br673:                               ; preds = %tag168
  %gep678 = getelementptr inbounds i8, i8* %93, i64 -9
  %irc-bit-cast679 = bitcast i8* %gep678 to i64*
  %222 = load i64, i64* %irc-bit-cast679, align 8
  %223 = add i64 %222, -1309
  %224 = lshr i64 %223, 3
  %225 = shl i64 %223, 61
  %226 = or i64 %224, %225
  switch i64 %226, label %tag165 [
    i64 2, label %tag59
    i64 4, label %tag59
    i64 5, label %tag59
    i64 0, label %tag59
  ]

normal-dest694:                                   ; preds = %tag166
  %227 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %228 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %229 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %230 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint695 = ptrtoint {}* %104 to i64
  %entry-point-addr-uint696 = add i64 %ptrtoint695, 7
  %entry-point-addr697 = inttoptr i64 %entry-point-addr-uint696 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point698 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr697, align 8
  %231 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point698({}* %104, i64 5, {}* %227, {}* %228, {}* %54, {}* %229, {}* %230)
          to label %normal-dest701 unwind label %cleanup-lpad.loopexit

normal-dest701:                                   ; preds = %normal-dest694
  %.elt862 = extractvalue { {}*, i64 } %231, 0
  %.elt864 = extractvalue { {}*, i64 } %231, 1
  %cond774 = icmp eq i64 %.elt864, 0
  %232 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in852 = select i1 %cond774, {}* %232, {}* %.elt862
  %.val927.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag161

normal-dest722:                                   ; preds = %tag172
  %233 = ptrtoint %"class.core::T_O"* %120 to i64
  %234 = add i64 %233, -3
  %235 = inttoptr i64 %234 to {}**
  %236 = load {}*, {}** %235, align 8, !tbaa !74
  %ptrtoint724 = ptrtoint {}* %109 to i64
  %entry-point-addr-uint725 = add i64 %ptrtoint724, 7
  %entry-point-addr726 = inttoptr i64 %entry-point-addr-uint725 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point727 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr726, align 8
  %237 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point727({}* %109, i64 2, {}* %236, {}* %farg0, {}* null, {}* null)
          to label %normal-dest730 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest730:                                   ; preds = %normal-dest722
  %.elt783 = extractvalue { {}*, i64 } %237, 0
  %.elt785 = extractvalue { {}*, i64 } %237, 1
  %cond = icmp eq i64 %.elt785, 0
  %238 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond, {}* %238, {}* %.elt783
  %239 = bitcast {}* %.in to i8*
  %240 = icmp eq {}* %.in, %107
  %.val921 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G107940.0 = select i1 %240, {}* %.val921, {}* %238
  %241 = icmp eq {}* %G107940.0, %238
  %242 = ptrtoint {}* %238 to i64
  br i1 %241, label %tag96, label %tag155
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^577^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !150 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^577^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G108068.0 = phi {}* [ %18, %header-check-br ], [ %G108068.1, %normal-dest17 ], [ %G108068.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 712), align 16
  %ptrtoint43 = ptrtoint {}* %G108068.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G108068.0, i64 2, {}* %"closure->CWR=WERTEBEREICH-EINGEBBAR-P", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag3, %normal-dest30, %tag2, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 712), align 16
  %"closure->CWR=WERTEBEREICH-EINGEBBAR-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18173, i64 577, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108068.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag2

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag2
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 711), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108068.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag3

normal-dest49:                                    ; preds = %tag3
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 714), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=WERTEBEREICH-EINGEBBAR-P", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 715), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=WERTEBEREICH-EINGEBBAR-P", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2308 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 712), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !151 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc553 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

.noexc553:                                        ; preds = %10
  unreachable

tag3:                                             ; preds = %tag110
  br i1 %brmerge, label %tag31, label %header-check-br

tag7:                                             ; preds = %header-check-br241, %header-check-br241, %header-check-br241, %header-check-br241
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest146 unwind label %cleanup-lpad.loopexit

tag11:                                            ; preds = %tag93
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest162 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag13:                                            ; preds = %tag97
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest177 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag15:                                            ; preds = %tag31, %tag69, %tag105, %tag126, %tag117, %tag16
  %return-value.sroa.0.0 = phi i64 [ %20, %tag16 ], [ %104, %tag117 ], [ %39, %tag126 ], [ %68, %tag105 ], [ %61, %tag69 ], [ %29, %tag31 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %17 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %18 = insertvalue { {}*, i64 } undef, {}* %17, 0
  %19 = insertvalue { {}*, i64 } %18, i64 1, 1
  ret { {}*, i64 } %19

tag16:                                            ; preds = %tag97, %normal-dest185, %tag113
  %20 = phi i64 [ %104, %tag113 ], [ %126, %normal-dest185 ], [ %104, %tag97 ]
  %.val572595 = phi {}* [ %.val570, %tag113 ], [ %.val572595.pre, %normal-dest185 ], [ %.val570, %tag97 ]
  %21 = phi {}* [ %102, %tag113 ], [ %125, %normal-dest185 ], [ %102, %tag97 ]
  %.in533 = phi {}* [ %82, %tag113 ], [ %.in532, %normal-dest185 ], [ %102, %tag97 ]
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 709), align 8
  %23 = icmp eq {}* %22, %21
  %object199.0596 = select i1 %23, {}* %.val572595, {}* %21
  %24 = icmp eq {}* %object199.0596, %21
  %G108088.0597 = select i1 %24, {}* %.val572595, {}* %21
  %25 = icmp eq {}* %G108088.0597, %21
  br i1 %25, label %tag15, label %tag34.lr.ph

tag34.lr.ph:                                      ; preds = %tag16
  %26 = bitcast {}* %.in533 to i8*
  %27 = ptrtoint {}* %.in533 to i64
  %single-float-tag-only458 = and i64 %27, 7
  %fixnum-tag-only255530 = and i64 %27, 3
  %fixnump-test256 = icmp ne i64 %fixnum-tag-only255530, 0
  %test432 = icmp eq i64 %single-float-tag-only458, 1
  %or.cond564 = and i1 %fixnump-test256, %test432
  %gep434 = getelementptr inbounds i8, i8* %26, i64 -9
  %irc-bit-cast435 = bitcast i8* %gep434 to i64*
  br label %tag34

tag28:                                            ; preds = %tag59
  br i1 %36, label %tag71, label %tag119

tag31:                                            ; preds = %tag69.tag31_crit_edge, %header-check-br230, %header-check-br, %tag64, %tag107, %tag3
  %.val = phi {}* [ %.val.pre, %tag69.tag31_crit_edge ], [ %76, %tag3 ], [ %76, %tag107 ], [ %76, %tag64 ], [ %76, %header-check-br ], [ %76, %header-check-br230 ]
  %28 = phi {}* [ %50, %tag69.tag31_crit_edge ], [ %.val569, %tag3 ], [ %.val569, %tag107 ], [ %.val569, %tag64 ], [ %.val569, %header-check-br ], [ %.val569, %header-check-br230 ]
  %29 = phi i64 [ %49, %tag69.tag31_crit_edge ], [ %75, %tag3 ], [ %75, %tag107 ], [ %75, %tag64 ], [ %75, %header-check-br ], [ %75, %header-check-br230 ]
  %30 = add i64 %61, 5
  %31 = inttoptr i64 %30 to {}**
  %"%SUBLIST108040.0" = load {}*, {}** %31, align 8
  %32 = icmp eq {}* %"%SUBLIST108040.0", %28
  %object.0 = select i1 %32, {}* %.val, {}* %28
  %33 = icmp eq {}* %object.0, %28
  %G108169.0 = select i1 %33, {}* %.val, {}* %28
  %34 = icmp eq {}* %G108169.0, %28
  br i1 %34, label %tag15, label %tag78

tag34:                                            ; preds = %tag34.lr.ph, %tag105
  %35 = phi i64 [ %20, %tag34.lr.ph ], [ %68, %tag105 ]
  %G108143.0 = phi {}* [ %.val572595, %tag34.lr.ph ], [ %.val572, %tag105 ]
  %36 = phi i1 [ %24, %tag34.lr.ph ], [ %73, %tag105 ]
  %37 = phi {}* [ %21, %tag34.lr.ph ], [ %67, %tag105 ]
  %38 = phi {}* [ %22, %tag34.lr.ph ], [ %71, %tag105 ]
  %39 = ptrtoint {}* %38 to i64
  %tag-only238519 = and i64 %39, 7
  %consp-test = icmp eq i64 %tag-only238519, 3
  br i1 %consp-test, label %tag59, label %tag54

tag36:                                            ; preds = %tag78
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest240 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag45:                                            ; preds = %tag130
  %fixnum-tag-only264534 = and i64 %95, 3
  %fixnump-test265 = icmp ne i64 %fixnum-tag-only264534, 0
  %test244 = icmp eq i64 %single-float-tag-only467, 1
  %or.cond562 = and i1 %fixnump-test265, %test244
  br i1 %or.cond562, label %header-check-br241, label %tag105

tag54:                                            ; preds = %tag34
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest280 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag56:                                            ; preds = %normal-dest139
  %44 = ptrtoint {}* %farg0 to i64
  %tag-only286518 = and i64 %44, 7
  %consp-test287 = icmp eq i64 %tag-only286518, 3
  %.val570 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G108163.0 = select i1 %consp-test287, {}* %.val570, {}* %102
  %45 = icmp eq {}* %G108163.0, %102
  br i1 %45, label %tag97, label %tag113

tag59:                                            ; preds = %tag34
  %46 = icmp eq {}* %G108143.0, %37
  br i1 %46, label %tag28, label %tag75

tag64:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %47 = ptrtoint {}* %.in509 to i64
  %single-float-tag-only320 = and i64 %47, 7
  %48 = icmp eq i64 %single-float-tag-only320, 6
  br i1 %48, label %tag31, label %tag107

tag69:                                            ; preds = %tag110, %normal-dest476
  %49 = phi i64 [ %161, %normal-dest476 ], [ %75, %tag110 ]
  %50 = phi {}* [ %160, %normal-dest476 ], [ %.val569, %tag110 ]
  %G108195.0 = phi {}* [ %G108195.1, %normal-dest476 ], [ %76, %tag110 ]
  %51 = icmp eq {}* %G108195.0, %50
  br i1 %51, label %tag69.tag31_crit_edge, label %tag15

tag69.tag31_crit_edge:                            ; preds = %tag69
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag31

tag71:                                            ; preds = %tag28
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest343 unwind label %cleanup-lpad.loopexit

tag74:                                            ; preds = %tag78
  %54 = icmp eq {}* %G108224.0, %60
  br i1 %54, label %tag93, label %tag101

tag75:                                            ; preds = %tag59
  %55 = add i64 %39, -3
  %56 = inttoptr i64 %55 to {}**
  %57 = load {}*, {}** %56, align 8
  br label %tag119

tag78:                                            ; preds = %tag78.lr.ph, %tag31
  %58 = phi i64 [ %104, %tag78.lr.ph ], [ %29, %tag31 ]
  %G108224.0 = phi {}* [ %.val599, %tag78.lr.ph ], [ %.val, %tag31 ]
  %59 = phi i1 [ %84, %tag78.lr.ph ], [ %33, %tag31 ]
  %60 = phi {}* [ %102, %tag78.lr.ph ], [ %28, %tag31 ]
  %"%SUBLIST108040.0602" = phi {}* [ %"%SUBLIST108040.0598", %tag78.lr.ph ], [ %"%SUBLIST108040.0", %tag31 ]
  %61 = ptrtoint {}* %"%SUBLIST108040.0602" to i64
  %tag-only369491 = and i64 %61, 7
  %consp-test370 = icmp eq i64 %tag-only369491, 3
  br i1 %consp-test370, label %tag74, label %tag36

tag93:                                            ; preds = %tag74
  br i1 %59, label %tag11, label %tag110

tag97:                                            ; preds = %tag56
  %62 = icmp eq {}* %102, %farg0
  %G108156.0 = select i1 %62, {}* %.val570, {}* %102
  %63 = icmp eq {}* %G108156.0, %102
  br i1 %63, label %tag13, label %tag16

tag101:                                           ; preds = %tag74
  %64 = add i64 %61, -3
  %65 = inttoptr i64 %64 to {}**
  %66 = load {}*, {}** %65, align 8
  br label %tag110

tag105:                                           ; preds = %tag126.tag105_crit_edge, %header-check-br429, %header-check-br241, %tag45, %tag130, %tag125
  %.val572 = phi {}* [ %.val572.pre, %tag126.tag105_crit_edge ], [ %88, %tag125 ], [ %88, %tag130 ], [ %88, %tag45 ], [ %88, %header-check-br241 ], [ %88, %header-check-br429 ]
  %67 = phi {}* [ %93, %tag126.tag105_crit_edge ], [ %.val577, %tag125 ], [ %.val577, %tag130 ], [ %.val577, %tag45 ], [ %.val577, %header-check-br241 ], [ %.val577, %header-check-br429 ]
  %68 = phi i64 [ %92, %tag126.tag105_crit_edge ], [ %87, %tag125 ], [ %87, %tag130 ], [ %87, %tag45 ], [ %87, %header-check-br241 ], [ %87, %header-check-br429 ]
  %69 = add i64 %39, 5
  %70 = inttoptr i64 %69 to {}**
  %71 = load {}*, {}** %70, align 8
  %72 = icmp eq {}* %71, %67
  %object199.0 = select i1 %72, {}* %.val572, {}* %67
  %73 = icmp eq {}* %object199.0, %67
  %G108088.0 = select i1 %73, {}* %.val572, {}* %67
  %74 = icmp eq {}* %G108088.0, %67
  br i1 %74, label %tag15, label %tag34

tag107:                                           ; preds = %tag64
  %fixnum-tag-only419507 = and i64 %47, 3
  %fixnump-test420 = icmp ne i64 %fixnum-tag-only419507, 0
  %test233 = icmp eq i64 %single-float-tag-only320, 1
  %or.cond561 = and i1 %fixnump-test420, %test233
  br i1 %or.cond561, label %header-check-br230, label %tag31

tag110:                                           ; preds = %tag93, %normal-dest170, %tag101
  %75 = phi i64 [ %58, %tag101 ], [ %119, %normal-dest170 ], [ %58, %tag93 ]
  %.val569 = phi {}* [ %60, %tag101 ], [ %118, %normal-dest170 ], [ %G108224.0, %tag93 ]
  %76 = phi {}* [ %G108224.0, %tag101 ], [ %.val568.pre, %normal-dest170 ], [ %G108224.0, %tag93 ]
  %.in509 = phi {}* [ %66, %tag101 ], [ %.in, %normal-dest170 ], [ %G108224.0, %tag93 ]
  %77 = bitcast {}* %.in509 to i8*
  %78 = icmp eq {}* %.in509, %farg0
  %G108204.0 = select i1 %78, {}* %76, {}* %.val569
  %79 = icmp eq {}* %G108204.0, %.val569
  br i1 %79, label %tag3, label %tag69

tag113:                                           ; preds = %tag56
  %80 = add i64 %44, -3
  %81 = inttoptr i64 %80 to {}**
  %82 = load {}*, {}** %81, align 8
  br label %tag16

tag117:                                           ; preds = %normal-dest139
  %"%SUBLIST108040.0598" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 710), align 16
  %83 = icmp eq {}* %"%SUBLIST108040.0598", %102
  %.val599 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0600 = select i1 %83, {}* %.val599, {}* %102
  %84 = icmp eq {}* %object.0600, %102
  %G108169.0601 = select i1 %84, {}* %.val599, {}* %102
  %85 = icmp eq {}* %G108169.0601, %102
  br i1 %85, label %tag15, label %tag78.lr.ph

tag78.lr.ph:                                      ; preds = %tag117
  %86 = ptrtoint {}* %farg0 to i64
  %single-float-tag-only = and i64 %86, 7
  %fixnum-tag-only421505 = and i64 %86, 3
  %fixnump-test422 = icmp eq i64 %fixnum-tag-only421505, 0
  %test = icmp ne i64 %single-float-tag-only, 1
  %irc-bit-cast143 = bitcast {}* %farg0 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast143, i64 -9
  %irc-bit-cast144 = bitcast i8* %gep to i64*
  %brmerge = or i1 %test, %fixnump-test422
  br label %tag78

tag119:                                           ; preds = %tag28, %normal-dest350, %tag75
  %87 = phi i64 [ %35, %tag75 ], [ %153, %normal-dest350 ], [ %35, %tag28 ]
  %.val577 = phi {}* [ %37, %tag75 ], [ %152, %normal-dest350 ], [ %G108143.0, %tag28 ]
  %88 = phi {}* [ %G108143.0, %tag75 ], [ %.val576.pre, %normal-dest350 ], [ %G108143.0, %tag28 ]
  %.in537 = phi {}* [ %57, %tag75 ], [ %.in536, %normal-dest350 ], [ %G108143.0, %tag28 ]
  %89 = bitcast {}* %.in537 to i8*
  %90 = icmp eq {}* %.in533, %.in537
  %G108123.0 = select i1 %90, {}* %88, {}* %.val577
  %91 = icmp eq {}* %G108123.0, %.val577
  br i1 %91, label %tag125, label %tag126

tag125:                                           ; preds = %tag119
  br i1 %or.cond564, label %header-check-br429, label %tag105

tag126:                                           ; preds = %tag119, %normal-dest154
  %92 = phi i64 [ %112, %normal-dest154 ], [ %87, %tag119 ]
  %93 = phi {}* [ %111, %normal-dest154 ], [ %.val577, %tag119 ]
  %G108114.0 = phi {}* [ %G108114.1, %normal-dest154 ], [ %88, %tag119 ]
  %94 = icmp eq {}* %G108114.0, %93
  br i1 %94, label %tag126.tag105_crit_edge, label %tag15

tag126.tag105_crit_edge:                          ; preds = %tag126
  %.val572.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag105

tag130:                                           ; preds = %header-check-br429, %header-check-br429, %header-check-br429, %header-check-br429
  %95 = ptrtoint {}* %.in537 to i64
  %single-float-tag-only467 = and i64 %95, 7
  %96 = icmp eq i64 %single-float-tag-only467, 6
  br i1 %96, label %tag105, label %tag45

tag131:                                           ; preds = %header-check-br230, %header-check-br230, %header-check-br230, %header-check-br230
  %97 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %98 = invoke {}* @cc_safe_fdefinition({}* %97)
          to label %normal-dest469 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag7, %normal-dest146, %tag71, %normal-dest343
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest469, %tag131, %normal-dest162, %tag11
  %lpad.loopexit580 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %9, %normal-dest280, %tag54, %tag36, %normal-dest240, %normal-dest177, %tag13, %normal-dest136, %normal-dest
  %lpad.loopexit.split-lp581 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit580, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp581, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 507), align 8
  %100 = invoke {}* @cc_safe_fdefinition({}* %99)
          to label %normal-dest136 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest136:                                   ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %100 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %101 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %100, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest139 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest139:                                   ; preds = %normal-dest136
  %.elt = extractvalue { {}*, i64 } %101, 0
  %.elt490 = extractvalue { {}*, i64 } %101, 1
  %cond = icmp eq i64 %.elt490, 0
  %102 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108228.0 = select i1 %cond, {}* %102, {}* %.elt
  %103 = icmp eq {}* %G108228.0, %102
  %104 = ptrtoint {}* %102 to i64
  br i1 %103, label %tag56, label %tag117

header-check-br:                                  ; preds = %tag3
  %105 = load i64, i64* %irc-bit-cast144, align 8
  %106 = add i64 %105, -1309
  %107 = lshr i64 %106, 3
  %108 = shl i64 %106, 61
  %109 = or i64 %107, %108
  switch i64 %109, label %tag31 [
    i64 2, label %tag64
    i64 4, label %tag64
    i64 5, label %tag64
    i64 0, label %tag64
  ]

normal-dest146:                                   ; preds = %tag7
  %ptrtoint148 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint149 = add i64 %ptrtoint148, 7
  %entry-point-addr150 = inttoptr i64 %entry-point-addr-uint149 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point151 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr150, align 8
  %110 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point151({}* %12, i64 2, {}* nonnull %.in533, {}* nonnull %.in537, {}* null, {}* null)
          to label %normal-dest154 unwind label %cleanup-lpad.loopexit

normal-dest154:                                   ; preds = %normal-dest146
  %.elt539 = extractvalue { {}*, i64 } %110, 0
  %.elt541 = extractvalue { {}*, i64 } %110, 1
  %cond486 = icmp eq i64 %.elt541, 0
  %111 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108114.1 = select i1 %cond486, {}* %111, {}* %.elt539
  %112 = ptrtoint {}* %111 to i64
  br label %tag126

normal-dest162:                                   ; preds = %tag11
  %113 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %114 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %115 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint164 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint165 = add i64 %ptrtoint164, 7
  %entry-point-addr166 = inttoptr i64 %entry-point-addr-uint165 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point167 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr166, align 8
  %117 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point167({}* %14, i64 5, {}* %113, {}* %114, {}* %"%SUBLIST108040.0602", {}* %115, {}* %116)
          to label %normal-dest170 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest170:                                   ; preds = %normal-dest162
  %.elt515 = extractvalue { {}*, i64 } %117, 0
  %.elt517 = extractvalue { {}*, i64 } %117, 1
  %cond484 = icmp eq i64 %.elt517, 0
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond484, {}* %118, {}* %.elt515
  %.val568.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %119 = ptrtoint {}* %118 to i64
  br label %tag110

normal-dest177:                                   ; preds = %tag13
  %120 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %121 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %122 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %123 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint179 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint180 = add i64 %ptrtoint179, 7
  %entry-point-addr181 = inttoptr i64 %entry-point-addr-uint180 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point182 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr181, align 8
  %124 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point182({}* %16, i64 5, {}* %120, {}* %121, {}* %farg0, {}* %122, {}* %123)
          to label %normal-dest185 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest185:                                   ; preds = %normal-dest177
  %.elt547 = extractvalue { {}*, i64 } %124, 0
  %.elt549 = extractvalue { {}*, i64 } %124, 1
  %cond488 = icmp eq i64 %.elt549, 0
  %125 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in532 = select i1 %cond488, {}* %125, {}* %.elt547
  %.val572595.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %126 = ptrtoint {}* %125 to i64
  br label %tag16

normal-dest198:                                   ; preds = %normal-dest240
  call void @unreachableError()
  unreachable

header-check-br230:                               ; preds = %tag107
  %gep235 = getelementptr inbounds i8, i8* %77, i64 -9
  %irc-bit-cast236 = bitcast i8* %gep235 to i64*
  %127 = load i64, i64* %irc-bit-cast236, align 8
  %128 = add i64 %127, -1309
  %129 = lshr i64 %128, 3
  %130 = shl i64 %128, 61
  %131 = or i64 %129, %130
  switch i64 %131, label %tag31 [
    i64 2, label %tag131
    i64 4, label %tag131
    i64 5, label %tag131
    i64 0, label %tag131
  ]

normal-dest240:                                   ; preds = %tag36
  %132 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %133 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %135 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint192 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint193 = add i64 %ptrtoint192, 7
  %entry-point-addr194 = inttoptr i64 %entry-point-addr-uint193 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point195 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr194, align 8
  %136 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point195({}* %41, i64 5, {}* %132, {}* %133, {}* %"%SUBLIST108040.0602", {}* %134, {}* %135)
          to label %normal-dest198 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

header-check-br241:                               ; preds = %tag45
  %gep246 = getelementptr inbounds i8, i8* %89, i64 -9
  %irc-bit-cast247 = bitcast i8* %gep246 to i64*
  %137 = load i64, i64* %irc-bit-cast247, align 8
  %138 = add i64 %137, -1309
  %139 = lshr i64 %138, 3
  %140 = shl i64 %138, 61
  %141 = or i64 %139, %140
  switch i64 %141, label %tag105 [
    i64 2, label %tag7
    i64 4, label %tag7
    i64 5, label %tag7
    i64 0, label %tag7
  ]

normal-dest280:                                   ; preds = %tag54
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %143 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %145 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint444 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint445 = add i64 %ptrtoint444, 7
  %entry-point-addr446 = inttoptr i64 %entry-point-addr-uint445 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point447 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr446, align 8
  %146 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point447({}* %43, i64 5, {}* %142, {}* %143, {}* %38, {}* %144, {}* %145)
          to label %normal-dest450 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest343:                                   ; preds = %tag71
  %147 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %148 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %149 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint344 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint345 = add i64 %ptrtoint344, 7
  %entry-point-addr346 = inttoptr i64 %entry-point-addr-uint345 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point347 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr346, align 8
  %151 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point347({}* %53, i64 5, {}* %147, {}* %148, {}* %38, {}* %149, {}* %150)
          to label %normal-dest350 unwind label %cleanup-lpad.loopexit

normal-dest350:                                   ; preds = %normal-dest343
  %.elt543 = extractvalue { {}*, i64 } %151, 0
  %.elt545 = extractvalue { {}*, i64 } %151, 1
  %cond487 = icmp eq i64 %.elt545, 0
  %152 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in536 = select i1 %cond487, {}* %152, {}* %.elt543
  %.val576.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %153 = ptrtoint {}* %152 to i64
  br label %tag119

header-check-br429:                               ; preds = %tag125
  %154 = load i64, i64* %irc-bit-cast435, align 8
  %155 = add i64 %154, -1309
  %156 = lshr i64 %155, 3
  %157 = shl i64 %155, 61
  %158 = or i64 %156, %157
  switch i64 %158, label %tag105 [
    i64 2, label %tag130
    i64 4, label %tag130
    i64 5, label %tag130
    i64 0, label %tag130
  ]

normal-dest450:                                   ; preds = %normal-dest280
  call void @unreachableError()
  unreachable

normal-dest469:                                   ; preds = %tag131
  %ptrtoint470 = ptrtoint {}* %98 to i64
  %entry-point-addr-uint471 = add i64 %ptrtoint470, 7
  %entry-point-addr472 = inttoptr i64 %entry-point-addr-uint471 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point473 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr472, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point473({}* %98, i64 2, {}* nonnull %farg0, {}* nonnull %.in509, {}* null, {}* null)
          to label %normal-dest476 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest476:                                   ; preds = %normal-dest469
  %.elt511 = extractvalue { {}*, i64 } %159, 0
  %.elt513 = extractvalue { {}*, i64 } %159, 1
  %cond483 = icmp eq i64 %.elt513, 0
  %160 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108195.1 = select i1 %cond483, {}* %160, {}* %.elt511
  %161 = ptrtoint {}* %160 to i64
  br label %tag69
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^583^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !152 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^583^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G108298.0 = phi {}* [ %18, %header-check-br ], [ %G108298.1, %normal-dest17 ], [ %G108298.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 740), align 16
  %ptrtoint43 = ptrtoint {}* %G108298.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G108298.0, i64 2, {}* %"closure->CWR=FUERE_VORSCHLAG_AUS", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag2, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 740), align 16
  %"closure->CWR=FUERE_VORSCHLAG_AUS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18401, i64 583, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108298.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag2

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag2
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 739), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108298.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 742), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=FUERE_VORSCHLAG_AUS", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 749), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=FUERE_VORSCHLAG_AUS", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2336 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 740), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !153 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure775 = alloca [136 x i8], align 1
  %stack-allocated-closure500776 = alloca [120 x i8], align 1
  %stack-allocated-closure500776.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure500776, i64 0, i64 0
  %stack-allocated-closure775.sub = getelementptr inbounds [136 x i8], [136 x i8]* %stack-allocated-closure775, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 2
  br i1 %enough-args, label %error, label %continue

tag3:                                             ; preds = %tag3.preheader, %tag47.backedge
  %.val923 = phi {}* [ %18, %tag47.backedge ], [ %198, %tag3.preheader ]
  %"%DOLIST-VAR.0979" = phi {}* [ %"%DOLIST-VAR.0.be", %tag47.backedge ], [ %.in858, %tag3.preheader ]
  %ALLE-WERTE.1977 = phi {}* [ %ALLE-WERTE.2, %tag47.backedge ], [ %ALLE-WERTE.3984, %tag3.preheader ]
  %9 = ptrtoint {}* %"%DOLIST-VAR.0979" to i64
  %tag-only800 = and i64 %9, 7
  %consp-test = icmp eq i64 %tag-only800, 3
  %.val922 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G108524.0 = select i1 %consp-test, {}* %.val922, {}* %.val923
  %10 = icmp eq {}* %G108524.0, %.val923
  br i1 %10, label %tag25, label %tag152

tag4:                                             ; preds = %tag147, %normal-dest623, %tag142
  %.val929 = phi {}* [ %116, %tag142 ], [ %259, %normal-dest623 ], [ %G108504.0, %tag147 ]
  %11 = phi {}* [ %G108504.0, %tag142 ], [ %.val928.pre, %normal-dest623 ], [ %G108504.0, %tag147 ]
  %.in823 = phi {}* [ %114, %tag142 ], [ %.in822, %normal-dest623 ], [ %G108504.0, %tag147 ]
  %12 = bitcast {}* %.in823 to i8*
  %13 = icmp eq {}* %.in819, %.in823
  %G108484.0 = select i1 %13, {}* %11, {}* %.val929
  %14 = icmp eq {}* %G108484.0, %.val929
  br i1 %14, label %tag5, label %tag174

tag5:                                             ; preds = %tag4
  br i1 %brmerge989, label %tag80, label %header-check-br421

tag6:                                             ; preds = %tag120
  %15 = add i64 %9, 5
  %16 = inttoptr i64 %15 to {}**
  %17 = load {}*, {}** %16, align 8
  br label %tag47.backedge

tag47.backedge:                                   ; preds = %tag6, %normal-dest406
  %18 = phi {}* [ %95, %tag6 ], [ %205, %normal-dest406 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %17, %tag6 ], [ %"%DOLIST-VAR.1", %normal-dest406 ]
  %19 = icmp eq {}* %"%DOLIST-VAR.0.be", %18
  br i1 %19, label %tag21, label %tag3

tag7:                                             ; preds = %header-check-br544, %header-check-br544, %header-check-br544, %header-check-br544
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest215 unwind label %cleanup-lpad.loopexit

tag8:                                             ; preds = %normal-dest495.tag8_crit_edge, %normal-dest201
  %22 = phi {}* [ %.pre, %normal-dest495.tag8_crit_edge ], [ %158, %normal-dest201 ]
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 724), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest222 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag12:                                            ; preds = %normal-dest388
  %25 = icmp eq {}* %ALLE-WERTE.3984, %198
  %.val934980 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0981 = select i1 %25, {}* %.val934980, {}* %198
  %26 = icmp eq {}* %object.0981, %198
  %G108368.0982 = select i1 %26, {}* %.val934980, {}* %198
  %27 = icmp eq {}* %G108368.0982, %198
  br i1 %27, label %tag126, label %tag78.lr.ph

tag78.lr.ph:                                      ; preds = %tag12
  %28 = ptrtoint {}* %.in858 to i64
  %single-float-tag-only718 = and i64 %28, 7
  %fixnum-tag-only335856 = and i64 %28, 3
  %fixnump-test336 = icmp eq i64 %fixnum-tag-only335856, 0
  %test = icmp ne i64 %single-float-tag-only718, 1
  %gep = getelementptr inbounds i8, i8* %194, i64 -9
  %irc-bit-cast247 = bitcast i8* %gep to i64*
  %brmerge = or i1 %test, %fixnump-test336
  br label %tag78

tag21:                                            ; preds = %tag68, %tag47.backedge, %tag38, %tag156, %normal-dest597, %normal-dest687, %normal-dest329
  %29 = phi {}* [ %268, %normal-dest687 ], [ %193, %normal-dest329 ], [ %253, %normal-dest597 ], [ %.in858, %tag156 ], [ %32, %tag38 ], [ %18, %tag47.backedge ], [ %95, %tag68 ]
  %ALLE-WERTE.0 = phi {}* [ %ALLE-WERTE.3984, %normal-dest687 ], [ %ALLE-WERTE.3984, %normal-dest329 ], [ %ALLE-WERTE.4, %normal-dest597 ], [ %ALLE-WERTE.3984, %tag156 ], [ %ALLE-WERTE.3984, %tag38 ], [ %ALLE-WERTE.2, %tag47.backedge ], [ %ALLE-WERTE.2, %tag68 ]
  br i1 %consp-test653, label %tag118, label %tag86

tag25:                                            ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest284 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag38:                                            ; preds = %tag168, %normal-dest574
  %32 = phi {}* [ %251, %normal-dest574 ], [ %.val939, %tag168 ]
  %G108393.0 = phi {}* [ %G108393.1, %normal-dest574 ], [ %126, %tag168 ]
  %33 = icmp eq {}* %G108393.0, %32
  br i1 %33, label %tag38.tag76_crit_edge, label %tag21

tag38.tag76_crit_edge:                            ; preds = %tag38
  %.val934.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag76

tag39:                                            ; preds = %normal-dest687
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest321 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag46:                                            ; preds = %tag137
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 730), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest338 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag48:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %38 = ptrtoint {}* %.in862 to i64
  %single-float-tag-only347 = and i64 %38, 7
  %fixnum-tag-only859 = and i64 %38, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only859, 0
  %test279 = icmp eq i64 %single-float-tag-only347, 1
  %or.cond916 = and i1 %fixnump-test, %test279
  br i1 %or.cond916, label %header-check-br276, label %tag76

tag55:                                            ; preds = %tag175
  %39 = add i64 %57, -3
  %40 = inttoptr i64 %39 to {}**
  %41 = load {}*, {}** %40, align 8
  br label %tag168

tag61:                                            ; preds = %normal-dest329
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 419), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest381 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag66:                                            ; preds = %tag68
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest399 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag68:                                            ; preds = %tag120
  %46 = icmp eq {}* %"%DOLIST-VAR.0979", %95
  %.val930 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G108438.0 = select i1 %46, {}* %.val930, {}* %95
  %47 = icmp eq {}* %G108438.0, %95
  br i1 %47, label %tag66, label %tag21

tag76:                                            ; preds = %tag38.tag76_crit_edge, %header-check-br276, %header-check-br, %tag48, %tag159
  %.val934 = phi {}* [ %.val934.pre, %tag38.tag76_crit_edge ], [ %126, %tag159 ], [ %126, %tag48 ], [ %126, %header-check-br ], [ %126, %header-check-br276 ]
  %48 = phi {}* [ %32, %tag38.tag76_crit_edge ], [ %.val939, %tag159 ], [ %.val939, %tag48 ], [ %.val939, %header-check-br ], [ %.val939, %header-check-br276 ]
  %49 = add i64 %57, 5
  %50 = inttoptr i64 %49 to {}**
  %51 = load {}*, {}** %50, align 8
  %52 = icmp eq {}* %51, %48
  %object.0 = select i1 %52, {}* %.val934, {}* %48
  %53 = icmp eq {}* %object.0, %48
  %G108368.0 = select i1 %53, {}* %.val934, {}* %48
  %54 = icmp eq {}* %G108368.0, %48
  br i1 %54, label %tag126, label %tag78

tag78:                                            ; preds = %tag78.lr.ph, %tag76
  %G108422.0 = phi {}* [ %.val934980, %tag78.lr.ph ], [ %.val934, %tag76 ]
  %55 = phi i1 [ %26, %tag78.lr.ph ], [ %53, %tag76 ]
  %56 = phi {}* [ %198, %tag78.lr.ph ], [ %48, %tag76 ]
  %"%SUBLIST108270.0983" = phi {}* [ %ALLE-WERTE.3984, %tag78.lr.ph ], [ %51, %tag76 ]
  %57 = ptrtoint {}* %"%SUBLIST108270.0983" to i64
  %tag-only443845 = and i64 %57, 7
  %consp-test444 = icmp eq i64 %tag-only443845, 3
  br i1 %consp-test444, label %tag175, label %tag102

tag80:                                            ; preds = %tag174.tag80_crit_edge, %header-check-br544, %header-check-br421, %tag5, %tag135, %tag150
  %.val924 = phi {}* [ %.val924.pre, %tag174.tag80_crit_edge ], [ %11, %tag150 ], [ %11, %tag135 ], [ %11, %tag5 ], [ %11, %header-check-br421 ], [ %11, %header-check-br544 ]
  %58 = phi {}* [ %130, %tag174.tag80_crit_edge ], [ %.val929, %tag150 ], [ %.val929, %tag135 ], [ %.val929, %tag5 ], [ %.val929, %header-check-br421 ], [ %.val929, %header-check-br544 ]
  %59 = add i64 %117, 5
  %60 = inttoptr i64 %59 to {}**
  %61 = load {}*, {}** %60, align 8
  %62 = icmp eq {}* %61, %58
  %object304.0 = select i1 %62, {}* %.val924, {}* %58
  %63 = icmp eq {}* %object304.0, %58
  %G108450.0 = select i1 %63, {}* %.val924, {}* %58
  %64 = icmp eq {}* %G108450.0, %58
  br i1 %64, label %tag167, label %tag148

tag84:                                            ; preds = %tag89
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest447 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag86:                                            ; preds = %tag21
  %67 = icmp eq {}* %"%DOLIST-VAR232.0986", %29
  %.val932 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G108356.0 = select i1 %67, {}* %.val932, {}* %29
  %68 = icmp eq {}* %G108356.0, %29
  br i1 %68, label %tag134, label %tag137

tag89:                                            ; preds = %tag175
  br i1 %55, label %tag84, label %tag168

tag90:                                            ; preds = %tag148
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest477 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag94:                                            ; preds = %normal-dest201
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 717), align 8
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest479 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag98:                                            ; preds = %tag137
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 732), align 16
  %74 = invoke {}* @cc_safe_fdefinition({}* %73)
          to label %normal-dest526 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag144.backedge:                                  ; preds = %tag118, %normal-dest639
  %75 = phi {}* [ %29, %tag118 ], [ %265, %normal-dest639 ]
  %"%DOLIST-VAR232.0.be" = phi {}* [ %94, %tag118 ], [ %"%DOLIST-VAR232.2", %normal-dest639 ]
  %76 = icmp eq {}* %"%DOLIST-VAR232.0.be", %75
  br i1 %76, label %tag137, label %tag140

tag102:                                           ; preds = %tag78
  %77 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %78 = invoke {}* @cc_safe_fdefinition({}* %77)
          to label %normal-dest541 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag103:                                           ; preds = %normal-dest338, %normal-dest531
  %.sink898 = phi { {}*, i64 } [ %233, %normal-dest531 ], [ %196, %normal-dest338 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %.sink898

tag104:                                           ; preds = %tag140
  %79 = add i64 %110, -3
  %80 = inttoptr i64 %79 to {}**
  %81 = load {}*, {}** %80, align 8
  br label %tag151

tag105:                                           ; preds = %normal-dest291, %tag152
  %.val924973 = phi {}* [ %.val922, %tag152 ], [ %.val924973.pre, %normal-dest291 ]
  %82 = phi {}* [ %.val923, %tag152 ], [ %189, %normal-dest291 ]
  %.in819 = phi {}* [ %122, %tag152 ], [ %.in, %normal-dest291 ]
  %83 = icmp eq {}* %ALLE-WERTE.1977, %82
  %object304.0974 = select i1 %83, {}* %.val924973, {}* %82
  %84 = icmp eq {}* %object304.0974, %82
  %G108450.0975 = select i1 %84, {}* %.val924973, {}* %82
  %85 = icmp eq {}* %G108450.0975, %82
  br i1 %85, label %tag167, label %tag148.lr.ph

tag148.lr.ph:                                     ; preds = %tag105
  %86 = bitcast {}* %.in819 to i8*
  %87 = ptrtoint {}* %.in819 to i64
  %single-float-tag-only = and i64 %87, 7
  %fixnum-tag-only468817 = and i64 %87, 3
  %fixnump-test469 = icmp eq i64 %fixnum-tag-only468817, 0
  %test424 = icmp ne i64 %single-float-tag-only, 1
  %gep426 = getelementptr inbounds i8, i8* %86, i64 -9
  %irc-bit-cast427 = bitcast i8* %gep426 to i64*
  %brmerge989 = or i1 %test424, %fixnump-test469
  br label %tag148

tag111:                                           ; preds = %tag140
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %89 = invoke {}* @cc_safe_fdefinition({}* %88)
          to label %normal-dest552 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag115:                                           ; preds = %header-check-br276, %header-check-br276, %header-check-br276, %header-check-br276
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %91 = invoke {}* @cc_safe_fdefinition({}* %90)
          to label %normal-dest566 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag118:                                           ; preds = %tag21
  %92 = add i64 %110, 5
  %93 = inttoptr i64 %92 to {}**
  %94 = load {}*, {}** %93, align 8
  br label %tag144.backedge

tag120:                                           ; preds = %tag174, %normal-dest735
  %95 = phi {}* [ %272, %normal-dest735 ], [ %130, %tag174 ]
  %ALLE-WERTE.2 = phi {}* [ %ALLE-WERTE.5, %normal-dest735 ], [ %ALLE-WERTE.1977, %tag174 ]
  br i1 %consp-test, label %tag6, label %tag68

tag126:                                           ; preds = %tag76, %tag12
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %97 = invoke {}* @cc_safe_fdefinition({}* %96)
          to label %normal-dest590 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag129:                                           ; preds = %tag148
  %98 = icmp eq {}* %G108504.0, %116
  br i1 %98, label %tag147, label %tag142

tag131:                                           ; preds = %tag147
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %100 = invoke {}* @cc_safe_fdefinition({}* %99)
          to label %normal-dest616 unwind label %cleanup-lpad.loopexit

tag134:                                           ; preds = %tag86
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %102 = invoke {}* @cc_safe_fdefinition({}* %101)
          to label %normal-dest632 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag135:                                           ; preds = %header-check-br421, %header-check-br421, %header-check-br421, %header-check-br421
  %103 = ptrtoint {}* %.in823 to i64
  %single-float-tag-only645 = and i64 %103, 7
  %104 = icmp eq i64 %single-float-tag-only645, 6
  br i1 %104, label %tag80, label %tag150

tag137:                                           ; preds = %tag86, %tag144.backedge, %normal-dest231
  %ALLE-WERTE.3.lcssa = phi {}* [ %22, %normal-dest231 ], [ %ALLE-WERTE.0, %tag144.backedge ], [ %ALLE-WERTE.0, %tag86 ]
  %.lcssa = phi {}* [ %172, %normal-dest231 ], [ %29, %tag86 ], [ %75, %tag144.backedge ]
  %105 = ptrtoint {}* %150 to i64
  %106 = add i64 %105, -3
  %107 = inttoptr i64 %106 to {}**
  %108 = load {}*, {}** %107, align 8, !tbaa !74
  %109 = icmp eq {}* %.lcssa, %108
  br i1 %109, label %tag46, label %tag98

tag140:                                           ; preds = %tag140.preheader, %tag144.backedge
  %.val919 = phi {}* [ %75, %tag144.backedge ], [ %172, %tag140.preheader ]
  %"%DOLIST-VAR232.0986" = phi {}* [ %"%DOLIST-VAR232.0.be", %tag144.backedge ], [ %"%DOLIST-VAR232.1", %tag140.preheader ]
  %ALLE-WERTE.3984 = phi {}* [ %ALLE-WERTE.0, %tag144.backedge ], [ %22, %tag140.preheader ]
  %110 = ptrtoint {}* %"%DOLIST-VAR232.0986" to i64
  %tag-only652787 = and i64 %110, 7
  %consp-test653 = icmp eq i64 %tag-only652787, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G108565.0 = select i1 %consp-test653, {}* %.val, {}* %.val919
  %111 = icmp eq {}* %G108565.0, %.val919
  br i1 %111, label %tag111, label %tag104

tag142:                                           ; preds = %tag129
  %112 = add i64 %117, -3
  %113 = inttoptr i64 %112 to {}**
  %114 = load {}*, {}** %113, align 8
  br label %tag4

tag147:                                           ; preds = %tag129
  br i1 %115, label %tag131, label %tag4

tag148:                                           ; preds = %tag148.lr.ph, %tag80
  %G108504.0 = phi {}* [ %.val924973, %tag148.lr.ph ], [ %.val924, %tag80 ]
  %115 = phi i1 [ %84, %tag148.lr.ph ], [ %63, %tag80 ]
  %116 = phi {}* [ %82, %tag148.lr.ph ], [ %58, %tag80 ]
  %"%SUBLIST108259.0976" = phi {}* [ %ALLE-WERTE.1977, %tag148.lr.ph ], [ %61, %tag80 ]
  %117 = ptrtoint {}* %"%SUBLIST108259.0976" to i64
  %tag-only675801 = and i64 %117, 7
  %consp-test676 = icmp eq i64 %tag-only675801, 3
  br i1 %consp-test676, label %tag129, label %tag90

tag150:                                           ; preds = %tag135
  %fixnum-tag-only677820 = and i64 %103, 3
  %fixnump-test678 = icmp ne i64 %fixnum-tag-only677820, 0
  %test547 = icmp eq i64 %single-float-tag-only645, 1
  %or.cond918 = and i1 %fixnump-test678, %test547
  br i1 %or.cond918, label %header-check-br544, label %tag80

tag151:                                           ; preds = %normal-dest559, %tag104
  %METHODE.0 = phi {}* [ %81, %tag104 ], [ %METHODE.1, %normal-dest559 ]
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %119 = invoke {}* @cc_safe_fdefinition({}* %118)
          to label %normal-dest680 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag152:                                           ; preds = %tag3
  %120 = add i64 %9, -3
  %121 = inttoptr i64 %120 to {}**
  %122 = load {}*, {}** %121, align 8
  br label %tag105

tag156:                                           ; preds = %normal-dest388
  %123 = icmp eq {}* %.in858, %198
  br i1 %123, label %tag21, label %tag3.preheader

tag3.preheader:                                   ; preds = %tag156
  br label %tag3

tag159:                                           ; preds = %tag168
  br i1 %brmerge, label %tag76, label %header-check-br

tag167:                                           ; preds = %tag80, %tag105
  %124 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %125 = invoke {}* @cc_safe_fdefinition({}* %124)
          to label %normal-dest728 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag168:                                           ; preds = %tag89, %normal-dest454, %tag55
  %.val939 = phi {}* [ %56, %tag55 ], [ %216, %normal-dest454 ], [ %G108422.0, %tag89 ]
  %126 = phi {}* [ %G108422.0, %tag55 ], [ %.val938.pre, %normal-dest454 ], [ %G108422.0, %tag89 ]
  %.in862 = phi {}* [ %41, %tag55 ], [ %.in861, %normal-dest454 ], [ %G108422.0, %tag89 ]
  %127 = bitcast {}* %.in862 to i8*
  %128 = icmp eq {}* %.in858, %.in862
  %G108402.0 = select i1 %128, {}* %126, {}* %.val939
  %129 = icmp eq {}* %G108402.0, %.val939
  br i1 %129, label %tag159, label %tag38

tag174:                                           ; preds = %tag4, %normal-dest218
  %130 = phi {}* [ %162, %normal-dest218 ], [ %.val929, %tag4 ]
  %G108475.0 = phi {}* [ %G108475.1, %normal-dest218 ], [ %11, %tag4 ]
  %131 = icmp eq {}* %G108475.0, %130
  br i1 %131, label %tag174.tag80_crit_edge, label %tag120

tag174.tag80_crit_edge:                           ; preds = %tag174
  %.val924.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag80

tag175:                                           ; preds = %tag78
  %132 = icmp eq {}* %G108422.0, %56
  br i1 %132, label %tag89, label %tag55

cleanup-lpad.loopexit:                            ; preds = %tag7, %normal-dest215, %tag131, %normal-dest616
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest566, %tag115, %normal-dest447, %tag84
  %lpad.loopexit940 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %tag25, %normal-dest284, %tag66, %normal-dest399, %tag167, %normal-dest728
  %lpad.loopexit944 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %normal-dest680, %tag151, %normal-dest632, %tag134, %normal-dest590, %tag126, %normal-dest552, %tag111, %normal-dest381, %tag61, %normal-dest321, %tag39
  %lpad.loopexit946 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %loop-kw-args
  %lpad.loopexit949 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %error, %loop-cont, %kw-exit-block, %normal-dest197, %normal-dest198, %normal-dest199, %normal-dest200, %tag8, %normal-dest222, %tag46, %normal-dest338, %normal-dest477, %normal-dest541, %tag90, %tag94, %normal-dest479, %normal-dest486, %normal-dest495, %tag98, %normal-dest526, %normal-dest528, %normal-dest531, %tag102
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit940, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit944, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit946, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit949, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @":::global-str-CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 2)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs181 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1182 = add i64 %rem-nargs181, -1
  store i64 %rem-nargs-1182, i64* %"remaining-nargs*", align 8
  %vaarg183 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %133 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %135 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 753), align 8
  %136 = icmp eq i64 %nargs, 2
  br i1 %136, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G108281.0 = phi {}* [ %G108281.2, %advance-arg-idx-block ], [ %134, %loop-kw-args.preheader ]
  %vorschlag_sekundaerschluessel.1 = phi {}* [ %vorschlag_sekundaerschluessel.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %G108282.0 = phi {}* [ %G108282.2, %advance-arg-idx-block ], [ %134, %loop-kw-args.preheader ]
  %vor_vorschlagsberechnen_funktion.1 = phi {}* [ %vor_vorschlagsberechnen_funktion.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %140, %advance-arg-idx-block ], [ 2, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs186 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1187 = add i64 %rem-nargs186, -1
  store i64 %rem-nargs-1187, i64* %"remaining-nargs*", align 8
  %vaarg188 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs189 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1190 = add i64 %rem-nargs189, -1
  store i64 %rem-nargs-1190, i64* %"remaining-nargs*", align 8
  %vaarg191 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg188, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest192 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %continue, %loop-cont
  %G108281.1 = phi {}* [ %134, %continue ], [ %G108281.2, %loop-cont ]
  %vorschlag_sekundaerschluessel.2 = phi {}* [ undef, %continue ], [ %vorschlag_sekundaerschluessel.3, %loop-cont ]
  %G108282.1 = phi {}* [ %134, %continue ], [ %G108282.2, %loop-cont ]
  %vor_vorschlagsberechnen_funktion.2 = phi {}* [ undef, %continue ], [ %vor_vorschlagsberechnen_funktion.3, %loop-cont ]
  %137 = invoke {}* @cc_makeCell()
          to label %normal-dest197 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg188, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^^DESC")
          to label %kw-exit-block unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest192:                                   ; preds = %loop-kw-args
  %138 = icmp eq {}* %135, %vaarg188
  br i1 %138, label %aok-block, label %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test"

aok-block:                                        ; preds = %normal-dest192
  %139 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg191)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test", %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test", %not-seen-before-kw-block, %not-seen-before-kw-block194, %next-kw-block195, %aok-block
  %G108281.2 = phi {}* [ %G108281.0, %aok-block ], [ %G108281.0, %next-kw-block195 ], [ %133, %not-seen-before-kw-block194 ], [ %G108281.0, %not-seen-before-kw-block ], [ %G108281.0, %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test" ], [ %G108281.0, %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test" ]
  %vorschlag_sekundaerschluessel.3 = phi {}* [ %vorschlag_sekundaerschluessel.1, %aok-block ], [ %vorschlag_sekundaerschluessel.1, %next-kw-block195 ], [ %vaarg191, %not-seen-before-kw-block194 ], [ %vorschlag_sekundaerschluessel.1, %not-seen-before-kw-block ], [ %vorschlag_sekundaerschluessel.1, %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test" ], [ %vorschlag_sekundaerschluessel.1, %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test" ]
  %G108282.2 = phi {}* [ %G108282.0, %aok-block ], [ %G108282.0, %next-kw-block195 ], [ %G108282.0, %not-seen-before-kw-block194 ], [ %133, %not-seen-before-kw-block ], [ %G108282.0, %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test" ], [ %G108282.0, %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test" ]
  %vor_vorschlagsberechnen_funktion.3 = phi {}* [ %vor_vorschlagsberechnen_funktion.1, %aok-block ], [ %vor_vorschlagsberechnen_funktion.1, %next-kw-block195 ], [ %vor_vorschlagsberechnen_funktion.1, %not-seen-before-kw-block194 ], [ %vaarg191, %not-seen-before-kw-block ], [ %vor_vorschlagsberechnen_funktion.1, %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test" ], [ %vor_vorschlagsberechnen_funktion.1, %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test" ]
  %phi-this-was-aok = phi i64 [ %139, %aok-block ], [ %phi-saw-aok, %next-kw-block195 ], [ %phi-saw-aok, %not-seen-before-kw-block194 ], [ %phi-saw-aok, %not-seen-before-kw-block ], [ %phi-saw-aok, %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test" ], [ %phi-saw-aok, %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test" ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %146, %next-kw-block195 ], [ %phi-bad-kw-idx, %not-seen-before-kw-block194 ], [ %phi-bad-kw-idx, %not-seen-before-kw-block ], [ %phi-bad-kw-idx, %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test" ], [ %phi-bad-kw-idx, %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test" ]
  %140 = add i64 %phi-reg-arg-idx, 2
  %141 = icmp slt i64 %140, %nargs
  br i1 %141, label %loop-kw-args, label %loop-cont

"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test":      ; preds = %normal-dest192
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 755), align 8
  %143 = call i64 @cc_matchKeywordOnce({}* %142, {}* %vaarg188, {}* %G108282.0)
  switch i64 %143, label %not-seen-before-kw-block [
    i64 0, label %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test"
    i64 2, label %advance-arg-idx-block
  ]

not-seen-before-kw-block:                         ; preds = %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test"
  br label %advance-arg-idx-block

"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test":         ; preds = %"kw-:VOR_VORSCHLAGSBERECHNEN_FUNKTION-test"
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 757), align 8
  %145 = call i64 @cc_matchKeywordOnce({}* %144, {}* %vaarg188, {}* %G108281.0)
  switch i64 %145, label %not-seen-before-kw-block194 [
    i64 0, label %next-kw-block195
    i64 2, label %advance-arg-idx-block
  ]

not-seen-before-kw-block194:                      ; preds = %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test"
  br label %advance-arg-idx-block

next-kw-block195:                                 ; preds = %"kw-:VORSCHLAG_SEKUNDAERSCHLUESSEL-test"
  %146 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest197:                                   ; preds = %kw-exit-block
  %147 = invoke {}* @cc_makeCell()
          to label %normal-dest198 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest198:                                   ; preds = %normal-dest197
  %148 = invoke {}* @cc_makeCell()
          to label %normal-dest199 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest199:                                   ; preds = %normal-dest198
  %149 = invoke {}* @cc_makeCell()
          to label %normal-dest200 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest200:                                   ; preds = %normal-dest199
  %150 = invoke {}* @cc_makeCell()
          to label %normal-dest201 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest201:                                   ; preds = %normal-dest200
  call void @cc_writeCell({}* %147, {}* %vaarg)
  call void @cc_writeCell({}* %148, {}* %vaarg183)
  %151 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %152 = icmp eq {}* %G108282.1, %151
  %vor_vorschlagsberechnen_funktion.0 = select i1 %152, {}* %151, {}* %vor_vorschlagsberechnen_funktion.2
  call void @cc_writeCell({}* %137, {}* %vor_vorschlagsberechnen_funktion.0)
  %153 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %154 = icmp eq {}* %G108281.1, %153
  %.vorschlag_sekundaerschluessel.2 = select i1 %154, {}* %153, {}* %vorschlag_sekundaerschluessel.2
  call void @cc_writeCell({}* %150, {}* %.vorschlag_sekundaerschluessel.2)
  %155 = ptrtoint {}* %137 to i64
  %156 = add i64 %155, -3
  %157 = inttoptr i64 %156 to {}**
  %158 = load {}*, {}** %157, align 8, !tbaa !74
  %159 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %160 = icmp eq {}* %159, %158
  br i1 %160, label %tag8, label %tag94

normal-dest215:                                   ; preds = %tag7
  %ptrtoint = ptrtoint {}* %21 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %161 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %21, i64 2, {}* nonnull %.in819, {}* nonnull %.in823, {}* null, {}* null)
          to label %normal-dest218 unwind label %cleanup-lpad.loopexit

normal-dest218:                                   ; preds = %normal-dest215
  %.elt825 = extractvalue { {}*, i64 } %161, 0
  %.elt827 = extractvalue { {}*, i64 } %161, 1
  %cond765 = icmp eq i64 %.elt827, 0
  %162 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108475.1 = select i1 %cond765, {}* %162, {}* %.elt825
  br label %tag174

normal-dest222:                                   ; preds = %tag8
  %163 = ptrtoint {}* %147 to i64
  %164 = add i64 %163, -3
  %165 = inttoptr i64 %164 to {}**
  %166 = load {}*, {}** %165, align 8, !tbaa !74
  %167 = ptrtoint {}* %148 to i64
  %168 = add i64 %167, -3
  %169 = inttoptr i64 %168 to {}**
  %170 = load {}*, {}** %169, align 8, !tbaa !74
  %ptrtoint225 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint226 = add i64 %ptrtoint225, 7
  %entry-point-addr227 = inttoptr i64 %entry-point-addr-uint226 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point228 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr227, align 8
  %171 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point228({}* %24, i64 2, {}* %166, {}* %170, {}* null, {}* null)
          to label %normal-dest231 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest231:                                   ; preds = %normal-dest222
  %.elt784 = extractvalue { {}*, i64 } %171, 0
  %.elt786 = extractvalue { {}*, i64 } %171, 1
  %cond759 = icmp eq i64 %.elt786, 0
  %172 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR232.1" = select i1 %cond759, {}* %172, {}* %.elt784
  %173 = icmp eq {}* %"%DOLIST-VAR232.1", %172
  br i1 %173, label %tag137, label %tag140.preheader

tag140.preheader:                                 ; preds = %normal-dest231
  br label %tag140

header-check-br:                                  ; preds = %tag159
  %174 = load i64, i64* %irc-bit-cast247, align 8
  %175 = add i64 %174, -1309
  %176 = lshr i64 %175, 3
  %177 = shl i64 %175, 61
  %178 = or i64 %176, %177
  switch i64 %178, label %tag76 [
    i64 2, label %tag48
    i64 4, label %tag48
    i64 5, label %tag48
    i64 0, label %tag48
  ]

header-check-br276:                               ; preds = %tag48
  %gep281 = getelementptr inbounds i8, i8* %127, i64 -9
  %irc-bit-cast282 = bitcast i8* %gep281 to i64*
  %179 = load i64, i64* %irc-bit-cast282, align 8
  %180 = add i64 %179, -1309
  %181 = lshr i64 %180, 3
  %182 = shl i64 %180, 61
  %183 = or i64 %181, %182
  switch i64 %183, label %tag76 [
    i64 2, label %tag115
    i64 4, label %tag115
    i64 5, label %tag115
    i64 0, label %tag115
  ]

normal-dest284:                                   ; preds = %tag25
  %184 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %185 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %186 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %187 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint285 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint286 = add i64 %ptrtoint285, 7
  %entry-point-addr287 = inttoptr i64 %entry-point-addr-uint286 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point288 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr287, align 8
  %188 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point288({}* %31, i64 5, {}* %184, {}* %185, {}* %"%DOLIST-VAR.0979", {}* %186, {}* %187)
          to label %normal-dest291 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest291:                                   ; preds = %normal-dest284
  %.elt837 = extractvalue { {}*, i64 } %188, 0
  %.elt839 = extractvalue { {}*, i64 } %188, 1
  %cond768 = icmp eq i64 %.elt839, 0
  %189 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond768, {}* %189, {}* %.elt837
  %.val924973.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag105

normal-dest321:                                   ; preds = %tag39
  %190 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 728), align 16
  %191 = load {}*, {}** %165, align 8, !tbaa !74
  %ptrtoint323 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint324 = add i64 %ptrtoint323, 7
  %entry-point-addr325 = inttoptr i64 %entry-point-addr-uint324 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point326 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr325, align 8
  %192 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point326({}* %35, i64 3, {}* %METHODE.0, {}* %190, {}* %191, {}* null)
          to label %normal-dest329 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest329:                                   ; preds = %normal-dest321
  %.elt793 = extractvalue { {}*, i64 } %192, 0
  %.elt795 = extractvalue { {}*, i64 } %192, 1
  %cond761 = icmp eq i64 %.elt795, 0
  %193 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in858 = select i1 %cond761, {}* %193, {}* %.elt793
  %194 = bitcast {}* %.in858 to i8*
  %195 = icmp eq {}* %.in858, %193
  br i1 %195, label %tag21, label %tag61

normal-dest338:                                   ; preds = %tag46
  %ptrtoint339 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint340 = add i64 %ptrtoint339, 7
  %entry-point-addr341 = inttoptr i64 %entry-point-addr-uint340 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point342 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr341, align 8
  %196 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point342({}* %37, i64 1, {}* %ALLE-WERTE.3.lcssa, {}* null, {}* null, {}* null)
          to label %tag103 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest377:                                   ; preds = %normal-dest477
  call void @unreachableError()
  unreachable

normal-dest381:                                   ; preds = %tag61
  %ptrtoint382 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint383 = add i64 %ptrtoint382, 7
  %entry-point-addr384 = inttoptr i64 %entry-point-addr-uint383 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point385 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr384, align 8
  %197 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point385({}* %43, i64 1, {}* %.in858, {}* null, {}* null, {}* null)
          to label %normal-dest388 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest388:                                   ; preds = %normal-dest381
  %.elt797 = extractvalue { {}*, i64 } %197, 0
  %.elt799 = extractvalue { {}*, i64 } %197, 1
  %cond762 = icmp eq i64 %.elt799, 0
  %198 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108528.0 = select i1 %cond762, {}* %198, {}* %.elt797
  %199 = icmp eq {}* %G108528.0, %198
  br i1 %199, label %tag12, label %tag156

normal-dest399:                                   ; preds = %tag66
  %200 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %201 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %202 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %203 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint400 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint401 = add i64 %ptrtoint400, 7
  %entry-point-addr402 = inttoptr i64 %entry-point-addr-uint401 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point403 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr402, align 8
  %204 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point403({}* %45, i64 5, {}* %200, {}* %201, {}* %"%DOLIST-VAR.0979", {}* %202, {}* %203)
          to label %normal-dest406 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest406:                                   ; preds = %normal-dest399
  %.elt809 = extractvalue { {}*, i64 } %204, 0
  %.elt811 = extractvalue { {}*, i64 } %204, 1
  %cond763 = icmp eq i64 %.elt811, 0
  %205 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond763, {}* %205, {}* %.elt809
  br label %tag47.backedge

header-check-br421:                               ; preds = %tag5
  %206 = load i64, i64* %irc-bit-cast427, align 8
  %207 = add i64 %206, -1309
  %208 = lshr i64 %207, 3
  %209 = shl i64 %207, 61
  %210 = or i64 %208, %209
  switch i64 %210, label %tag80 [
    i64 2, label %tag135
    i64 4, label %tag135
    i64 5, label %tag135
    i64 0, label %tag135
  ]

normal-dest442:                                   ; preds = %normal-dest541
  call void @unreachableError()
  unreachable

normal-dest447:                                   ; preds = %tag84
  %211 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %212 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %213 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %214 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint448 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint449 = add i64 %ptrtoint448, 7
  %entry-point-addr450 = inttoptr i64 %entry-point-addr-uint449 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point451 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr450, align 8
  %215 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point451({}* %66, i64 5, {}* %211, {}* %212, {}* %"%SUBLIST108270.0983", {}* %213, {}* %214)
          to label %normal-dest454 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest454:                                   ; preds = %normal-dest447
  %.elt868 = extractvalue { {}*, i64 } %215, 0
  %.elt870 = extractvalue { {}*, i64 } %215, 1
  %cond771 = icmp eq i64 %.elt870, 0
  %216 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in861 = select i1 %cond771, {}* %216, {}* %.elt868
  %.val938.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag168

normal-dest477:                                   ; preds = %tag90
  %217 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %218 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %219 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %220 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint371 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint372 = add i64 %ptrtoint371, 7
  %entry-point-addr373 = inttoptr i64 %entry-point-addr-uint372 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point374 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr373, align 8
  %221 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point374({}* %70, i64 5, {}* %217, {}* %218, {}* %"%SUBLIST108259.0976", {}* %219, {}* %220)
          to label %normal-dest377 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest479:                                   ; preds = %tag94
  %ptrtoint480 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint481 = add i64 %ptrtoint480, 7
  %entry-point-addr482 = inttoptr i64 %entry-point-addr-uint481 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point483 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr482, align 8
  %222 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point483({}* %72, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest486 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest486:                                   ; preds = %normal-dest479
  %.elt = extractvalue { {}*, i64 } %222, 0
  %.elt778 = extractvalue { {}*, i64 } %222, 1
  %cond = icmp eq i64 %.elt778, 0
  %223 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108248.0 = select i1 %cond, {}* %223, {}* %.elt
  call void @cc_writeCell({}* %149, {}* %G108248.0)
  %224 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 386), align 16
  %225 = invoke {}* @cc_safe_fdefinition({}* %224)
          to label %normal-dest495 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest495:                                   ; preds = %normal-dest486
  %226 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure775.sub, {}* %226, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.20", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.20^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18401, i64 583, i64 0, i64 3, {}* %148, {}* %147, {}* %137)
  %227 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA501" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure500776.sub, {}* %227, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.21", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.21^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18401, i64 583, i64 0, i64 1, {}* %149)
  %ptrtoint502 = ptrtoint {}* %225 to i64
  %entry-point-addr-uint503 = add i64 %ptrtoint502, 7
  %entry-point-addr504 = inttoptr i64 %entry-point-addr-uint503 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point505 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr504, align 8
  %228 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point505({}* %225, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA501", {}* null, {}* null)
          to label %normal-dest495.tag8_crit_edge unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest495.tag8_crit_edge:                    ; preds = %normal-dest495
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag8

normal-dest526:                                   ; preds = %tag98
  %229 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 734), align 16
  %230 = invoke {}* @cc_safe_fdefinition({}* %229)
          to label %normal-dest528 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest528:                                   ; preds = %normal-dest526
  %231 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 736), align 16
  %232 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA532" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %232, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.22", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.22^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18401, i64 583, i64 0, i64 2, {}* %150, {}* %147)
          to label %normal-dest531 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest531:                                   ; preds = %normal-dest528
  %ptrtoint533 = ptrtoint {}* %74 to i64
  %entry-point-addr-uint534 = add i64 %ptrtoint533, 7
  %entry-point-addr535 = inttoptr i64 %entry-point-addr-uint534 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point536 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr535, align 8
  %233 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point536({}* %74, i64 4, {}* %ALLE-WERTE.3.lcssa, {}* %230, {}* %231, {}* %"closure->LAMBDA532")
          to label %tag103 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest541:                                   ; preds = %tag102
  %234 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %235 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %236 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %237 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint436 = ptrtoint {}* %78 to i64
  %entry-point-addr-uint437 = add i64 %ptrtoint436, 7
  %entry-point-addr438 = inttoptr i64 %entry-point-addr-uint437 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point439 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr438, align 8
  %238 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point439({}* %78, i64 5, {}* %234, {}* %235, {}* %"%SUBLIST108270.0983", {}* %236, {}* %237)
          to label %normal-dest442 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

header-check-br544:                               ; preds = %tag150
  %gep549 = getelementptr inbounds i8, i8* %12, i64 -9
  %irc-bit-cast550 = bitcast i8* %gep549 to i64*
  %239 = load i64, i64* %irc-bit-cast550, align 8
  %240 = add i64 %239, -1309
  %241 = lshr i64 %240, 3
  %242 = shl i64 %240, 61
  %243 = or i64 %241, %242
  switch i64 %243, label %tag80 [
    i64 2, label %tag7
    i64 4, label %tag7
    i64 5, label %tag7
    i64 0, label %tag7
  ]

normal-dest552:                                   ; preds = %tag111
  %244 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %245 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %246 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %247 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint553 = ptrtoint {}* %89 to i64
  %entry-point-addr-uint554 = add i64 %ptrtoint553, 7
  %entry-point-addr555 = inttoptr i64 %entry-point-addr-uint554 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point556 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr555, align 8
  %248 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point556({}* %89, i64 5, {}* %244, {}* %245, {}* %"%DOLIST-VAR232.0986", {}* %246, {}* %247)
          to label %normal-dest559 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest559:                                   ; preds = %normal-dest552
  %.elt876 = extractvalue { {}*, i64 } %248, 0
  %.elt878 = extractvalue { {}*, i64 } %248, 1
  %cond774 = icmp eq i64 %.elt878, 0
  %249 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %METHODE.1 = select i1 %cond774, {}* %249, {}* %.elt876
  br label %tag151

normal-dest566:                                   ; preds = %tag115
  %ptrtoint568 = ptrtoint {}* %91 to i64
  %entry-point-addr-uint569 = add i64 %ptrtoint568, 7
  %entry-point-addr570 = inttoptr i64 %entry-point-addr-uint569 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point571 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr570, align 8
  %250 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point571({}* %91, i64 2, {}* nonnull %.in858, {}* nonnull %.in862, {}* null, {}* null)
          to label %normal-dest574 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest574:                                   ; preds = %normal-dest566
  %.elt864 = extractvalue { {}*, i64 } %250, 0
  %.elt866 = extractvalue { {}*, i64 } %250, 1
  %cond770 = icmp eq i64 %.elt866, 0
  %251 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108393.1 = select i1 %cond770, {}* %251, {}* %.elt864
  br label %tag38

normal-dest590:                                   ; preds = %tag126
  %ptrtoint591 = ptrtoint {}* %97 to i64
  %entry-point-addr-uint592 = add i64 %ptrtoint591, 7
  %entry-point-addr593 = inttoptr i64 %entry-point-addr-uint592 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point594 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr593, align 8
  %252 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point594({}* %97, i64 2, {}* %.in858, {}* %ALLE-WERTE.3984, {}* null, {}* null)
          to label %normal-dest597 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest597:                                   ; preds = %normal-dest590
  %.elt872 = extractvalue { {}*, i64 } %252, 0
  %.elt874 = extractvalue { {}*, i64 } %252, 1
  %cond772 = icmp eq i64 %.elt874, 0
  %253 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ALLE-WERTE.4 = select i1 %cond772, {}* %253, {}* %.elt872
  br label %tag21

normal-dest616:                                   ; preds = %tag131
  %254 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %255 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %256 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %257 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint617 = ptrtoint {}* %100 to i64
  %entry-point-addr-uint618 = add i64 %ptrtoint617, 7
  %entry-point-addr619 = inttoptr i64 %entry-point-addr-uint618 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point620 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr619, align 8
  %258 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point620({}* %100, i64 5, {}* %254, {}* %255, {}* %"%SUBLIST108259.0976", {}* %256, {}* %257)
          to label %normal-dest623 unwind label %cleanup-lpad.loopexit

normal-dest623:                                   ; preds = %normal-dest616
  %.elt829 = extractvalue { {}*, i64 } %258, 0
  %.elt831 = extractvalue { {}*, i64 } %258, 1
  %cond766 = icmp eq i64 %.elt831, 0
  %259 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in822 = select i1 %cond766, {}* %259, {}* %.elt829
  %.val928.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag4

normal-dest632:                                   ; preds = %tag134
  %260 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %261 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %262 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %263 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint633 = ptrtoint {}* %102 to i64
  %entry-point-addr-uint634 = add i64 %ptrtoint633, 7
  %entry-point-addr635 = inttoptr i64 %entry-point-addr-uint634 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point636 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr635, align 8
  %264 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point636({}* %102, i64 5, {}* %260, {}* %261, {}* %"%DOLIST-VAR232.0986", {}* %262, {}* %263)
          to label %normal-dest639 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest639:                                   ; preds = %normal-dest632
  %.elt842 = extractvalue { {}*, i64 } %264, 0
  %.elt844 = extractvalue { {}*, i64 } %264, 1
  %cond773 = icmp eq i64 %.elt844, 0
  %265 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR232.2" = select i1 %cond773, {}* %265, {}* %.elt842
  br label %tag144.backedge

normal-dest680:                                   ; preds = %tag151
  %266 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 726), align 16
  %ptrtoint681 = ptrtoint {}* %119 to i64
  %entry-point-addr-uint682 = add i64 %ptrtoint681, 7
  %entry-point-addr683 = inttoptr i64 %entry-point-addr-uint682 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point684 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr683, align 8
  %267 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point684({}* %119, i64 2, {}* %METHODE.0, {}* %266, {}* null, {}* null)
          to label %normal-dest687 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest687:                                   ; preds = %normal-dest680
  %.elt789 = extractvalue { {}*, i64 } %267, 0
  %.elt791 = extractvalue { {}*, i64 } %267, 1
  %cond760 = icmp eq i64 %.elt791, 0
  %268 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object688.0 = select i1 %cond760, {}* %268, {}* %.elt789
  %269 = icmp eq {}* %object688.0, %268
  %.val920 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G108540.0 = select i1 %269, {}* %.val920, {}* %268
  %270 = icmp eq {}* %G108540.0, %268
  br i1 %270, label %tag21, label %tag39

normal-dest728:                                   ; preds = %tag167
  %ptrtoint729 = ptrtoint {}* %125 to i64
  %entry-point-addr-uint730 = add i64 %ptrtoint729, 7
  %entry-point-addr731 = inttoptr i64 %entry-point-addr-uint730 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point732 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr731, align 8
  %271 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point732({}* %125, i64 2, {}* %.in819, {}* %ALLE-WERTE.1977, {}* null, {}* null)
          to label %normal-dest735 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest735:                                   ; preds = %normal-dest728
  %.elt833 = extractvalue { {}*, i64 } %271, 0
  %.elt835 = extractvalue { {}*, i64 } %271, 1
  %cond767 = icmp eq i64 %.elt835, 0
  %272 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ALLE-WERTE.5 = select i1 %cond767, {}* %272, {}* %.elt833
  br label %tag120
}

declare void @va_notEnoughArgumentsException(i8*, i64, i64) local_unnamed_addr #3

declare void @cc_ifNotKeywordException({}*, i64, { i32, i32, i8*, i8* }*, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @cc_allowOtherKeywords(i64, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @cc_matchKeywordOnce({}*, {}*, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @cc_trackFirstUnexpectedKeyword(i64, i64) local_unnamed_addr #1

declare void @cc_ifBadKeywordArgumentException(i64, i64, {}*, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }*) local_unnamed_addr #3

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.20"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !154 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.20^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest46, %normal-dest35, %header-check-br
  %G108611.0 = phi {}* [ %37, %header-check-br ], [ %G108611.1, %normal-dest35 ], [ %G108611.2, %normal-dest46 ]
  %11 = add i64 %29, -3
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8, !tbaa !74
  %14 = add i64 %32, -3
  %15 = inttoptr i64 %14 to {}**
  %16 = load {}*, {}** %15, align 8, !tbaa !74
  %ptrtoint15 = ptrtoint {}* %G108611.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint15, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G108611.0, i64 2, {}* %13, {}* %16, {}* null, {}* null)
          to label %normal-dest18 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest, %header-check-br19
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest39 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest39, %tag4, %normal-dest28, %maybe-more-tests27, %tag1
  %20 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %20

normal-dest:                                      ; preds = %entry
  %21 = ptrtoint {}* %closure-ptr to i64
  %22 = and i64 %21, -8
  %23 = inttoptr i64 %22 to %1*
  %24 = getelementptr inbounds %1, %1* %23, i64 0, i32 4, i32 1, i64 2, i32 0
  %25 = bitcast %"class.core::T_O"** %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !74
  %27 = getelementptr inbounds %1, %1* %23, i64 0, i32 4, i32 1, i64 1, i32 0
  %28 = bitcast %"class.core::T_O"** %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !74
  %30 = getelementptr inbounds %1, %1* %23, i64 0, i32 4, i32 1, i64 0, i32 0
  %31 = bitcast %"class.core::T_O"** %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !74
  %33 = add i64 %26, -3
  %34 = inttoptr i64 %33 to %"class.gctools::smart_ptr"*
  %35 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %34, i64 0, i32 0
  %36 = load %"class.core::T_O"*, %"class.core::T_O"** %35, align 8, !tbaa !74
  %37 = bitcast %"class.core::T_O"* %36 to {}*
  %ptrtoint = ptrtoint %"class.core::T_O"* %36 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest
  %gep = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %36, i64 -9, i32 0
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %38 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %38, -913
  %39 = icmp ult i64 %.off, 85
  br i1 %39, label %tag1, label %header-check-br19

normal-dest18:                                    ; preds = %tag1
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %17

header-check-br19:                                ; preds = %header-check-br
  %.off70 = add i64 %38, -1001
  %40 = icmp ult i64 %.off70, 5
  br i1 %40, label %maybe-more-tests27, label %tag4

maybe-more-tests27:                               ; preds = %header-check-br19
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %maybe-more-tests27
  %ptrtoint29 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %42, i64 1, {}* nonnull %37, {}* null, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %.elt64 = extractvalue { {}*, i64 } %43, 0
  %.elt66 = extractvalue { {}*, i64 } %43, 1
  %cond52 = icmp eq i64 %.elt66, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108611.1 = select i1 %cond52, {}* %44, {}* %.elt64
  br label %tag1

normal-dest39:                                    ; preds = %tag4
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 719), align 8
  %ptrtoint40 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint41 = add i64 %ptrtoint40, 7
  %entry-point-addr42 = inttoptr i64 %entry-point-addr-uint41 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point43 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr42, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point43({}* %19, i64 5, {}* %45, {}* %46, {}* %37, {}* %47, {}* %48)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest39
  %.elt = extractvalue { {}*, i64 } %49, 0
  %.elt54 = extractvalue { {}*, i64 } %49, 1
  %cond = icmp eq i64 %.elt54, 0
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108611.2 = select i1 %cond, {}* %50, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.21"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !155 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.21^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %tag16
  %11 = invoke float @from_object_float({}* %.in)
          to label %normal-dest38 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest32
  %12 = icmp eq i64 %tag-only, 6
  %fixnum-tag-only103133 = and i64 %ptrtoint35, 3
  %fixnump-test104 = icmp eq i64 %fixnum-tag-only103133, 0
  %or.cond = or i1 %12, %fixnump-test104
  br i1 %or.cond, label %tag11, label %tag15

tag5:                                             ; preds = %tag9
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest49 unwind label %cleanup-lpad

tag9:                                             ; preds = %tag13
  %15 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %17, i64 %ptrtoint35)
  %result = extractvalue { i64, i1 } %15, 0
  %overflow = extractvalue { i64, i1 } %15, 1
  %16 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag5, label %tag12

tag11:                                            ; preds = %switch.early.test, %switch.early.test, %header-check-br62, %header-check-br, %header-check-br, %tag3
  %17 = ptrtoint {}* %.in to i64
  %fixnum-tag-only139 = and i64 %17, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only139, 0
  br i1 %fixnump-test, label %tag13, label %tag14

tag12:                                            ; preds = %normal-dest127, %normal-dest120, %normal-dest56, %normal-dest39, %tag9
  %G108579.0 = phi {}* [ %16, %tag9 ], [ %48, %normal-dest39 ], [ %G108579.1, %normal-dest56 ], [ %G108579.2, %normal-dest120 ], [ %64, %normal-dest127 ]
  %ptrtoint90 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint91 = add i64 %ptrtoint90, 7
  %entry-point-addr92 = inttoptr i64 %entry-point-addr-uint91 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point93 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr92, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point93({}* %33, i64 3, {}* %34, {}* %G108579.0, {}* null, {}* null)
          to label %normal-dest96 unwind label %cleanup-lpad

tag13:                                            ; preds = %tag11
  %fixnum-tag-only97152 = and i64 %ptrtoint35, 3
  %fixnump-test98 = icmp eq i64 %fixnum-tag-only97152, 0
  br i1 %fixnump-test98, label %tag9, label %tag19

tag14:                                            ; preds = %tag11
  %trunc = trunc i64 %17 to i3
  switch i3 %trunc, label %tag19 [
    i3 -2, label %tag16
    i3 1, label %header-check-br76
  ]

tag15:                                            ; preds = %switch.early.test, %tag3
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest101 unwind label %cleanup-lpad

tag16:                                            ; preds = %tag14
  %21 = icmp eq i64 %tag-only, 6
  br i1 %21, label %tag, label %tag19

tag19:                                            ; preds = %tag14, %header-check-br76, %tag16, %tag13, %header-check-br69
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 328), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest113 unwind label %cleanup-lpad

tag20:                                            ; preds = %header-check-br69
  %24 = invoke double @from_object_double({}* nonnull %.in)
          to label %normal-dest126 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest127, %normal-dest126, %tag20, %normal-dest113, %tag19, %tag15, %tag12, %normal-dest49, %tag5, %normal-dest101, %normal-dest39, %normal-dest38, %tag, %normal-dest29, %normal-dest27, %normal-dest
  %25 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %25

normal-dest:                                      ; preds = %entry
  %26 = ptrtoint {}* %closure-ptr to i64
  %27 = and i64 %26, -8
  %28 = inttoptr i64 %27 to %1*
  %29 = getelementptr inbounds %1, %1* %28, i64 0, i32 4, i32 1, i64 0, i32 0
  %30 = bitcast %"class.core::T_O"** %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !74
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 720), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest27 unwind label %cleanup-lpad

normal-dest27:                                    ; preds = %normal-dest
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 722), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 717), align 8
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest29 unwind label %cleanup-lpad

normal-dest29:                                    ; preds = %normal-dest27
  %ptrtoint = ptrtoint {}* %36 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %36, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest29
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt132 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt132, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond, {}* %38, {}* %.elt
  %39 = bitcast {}* %.in to i8*
  %40 = add i64 %31, -3
  %41 = inttoptr i64 %40 to %"class.gctools::smart_ptr"*
  %42 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %41, i64 0, i32 0
  %43 = load %"class.core::T_O"*, %"class.core::T_O"** %42, align 8, !tbaa !74
  %44 = bitcast %"class.core::T_O"* %43 to {}*
  %ptrtoint35 = ptrtoint %"class.core::T_O"* %43 to i64
  %tag-only = and i64 %ptrtoint35, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest32
  %gep = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %43, i64 -9, i32 0
  %irc-bit-cast37 = bitcast i8* %gep to i64*
  %45 = load i64, i64* %irc-bit-cast37, align 8
  switch i64 %45, label %header-check-br62 [
    i64 1325, label %tag11
    i64 1341, label %tag11
  ]

normal-dest38:                                    ; preds = %tag
  %46 = invoke float @from_object_float({}* %44)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest38
  %47 = fsub float %11, %46
  %48 = invoke {}* @to_object_float(float %47)
          to label %tag12 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest101
  call void @unreachableError()
  unreachable

normal-dest49:                                    ; preds = %tag5
  %ptrtoint50 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint51 = add i64 %ptrtoint50, 7
  %entry-point-addr52 = inttoptr i64 %entry-point-addr-uint51 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point53 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr52, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point53({}* %14, i64 1, {}* %16, {}* null, {}* null, {}* null)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %normal-dest49
  %.elt154 = extractvalue { {}*, i64 } %49, 0
  %.elt156 = extractvalue { {}*, i64 } %49, 1
  %cond130 = icmp eq i64 %.elt156, 0
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108579.1 = select i1 %cond130, {}* %50, {}* %.elt154
  br label %tag12

header-check-br62:                                ; preds = %header-check-br
  %.old = and i64 %ptrtoint35, 3
  %fixnump-test104.old = icmp eq i64 %.old, 0
  br i1 %fixnump-test104.old, label %tag11, label %switch.early.test

switch.early.test:                                ; preds = %header-check-br62
  switch i64 %45, label %tag15 [
    i64 1349, label %tag11
    i64 1309, label %tag11
  ]

header-check-br69:                                ; preds = %header-check-br76
  %gep74 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %43, i64 -9, i32 0
  %irc-bit-cast75 = bitcast i8* %gep74 to i64*
  %51 = load i64, i64* %irc-bit-cast75, align 8
  %52 = icmp eq i64 %51, 1325
  br i1 %52, label %tag20, label %tag19

header-check-br76:                                ; preds = %tag14
  %gep81 = getelementptr inbounds i8, i8* %39, i64 -9
  %irc-bit-cast82 = bitcast i8* %gep81 to i64*
  %53 = load i64, i64* %irc-bit-cast82, align 8
  %54 = icmp ne i64 %53, 1325
  %test.not = xor i1 %test, true
  %brmerge = or i1 %54, %test.not
  br i1 %brmerge, label %tag19, label %header-check-br69

normal-dest96:                                    ; preds = %tag12
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18

normal-dest101:                                   ; preds = %tag15
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 750), align 16
  %ptrtoint41 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint42 = add i64 %ptrtoint41, 7
  %entry-point-addr43 = inttoptr i64 %entry-point-addr-uint42 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point44 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr43, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point44({}* %20, i64 5, {}* %55, {}* %56, {}* %44, {}* %57, {}* %58)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest113:                                   ; preds = %tag19
  %ptrtoint114 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint115 = add i64 %ptrtoint114, 7
  %entry-point-addr116 = inttoptr i64 %entry-point-addr-uint115 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point117 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr116, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point117({}* %23, i64 2, {}* %.in, {}* %44, {}* null, {}* null)
          to label %normal-dest120 unwind label %cleanup-lpad

normal-dest120:                                   ; preds = %normal-dest113
  %.elt141 = extractvalue { {}*, i64 } %60, 0
  %.elt143 = extractvalue { {}*, i64 } %60, 1
  %cond129 = icmp eq i64 %.elt143, 0
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108579.2 = select i1 %cond129, {}* %61, {}* %.elt141
  br label %tag12

normal-dest126:                                   ; preds = %tag20
  %62 = invoke double @from_object_double({}* nonnull %44)
          to label %normal-dest127 unwind label %cleanup-lpad

normal-dest127:                                   ; preds = %normal-dest126
  %63 = fsub double %24, %62
  %64 = invoke {}* @to_object_double(double %63)
          to label %tag12 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.22"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !156 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.22^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.22^DESC" to %0*)) #7
          to label %.noexc67 unwind label %cleanup-lpad

.noexc67:                                         ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest44, %normal-dest24, %header-check-br
  %G108325.0 = phi {}* [ %31, %header-check-br ], [ %G108325.1, %normal-dest24 ], [ %G108325.2, %normal-dest44 ]
  %11 = add i64 %23, -3
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8, !tbaa !74
  %ptrtoint13 = ptrtoint {}* %G108325.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G108325.0, i64 2, {}* %13, {}* %farg0, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest, %header-check-br27
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest37 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest37, %tag4, %normal-dest17, %maybe-more-tests35, %tag
  %17 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %17

normal-dest:                                      ; preds = %entry
  %18 = ptrtoint {}* %closure-ptr to i64
  %19 = and i64 %18, -8
  %20 = inttoptr i64 %19 to %1*
  %21 = getelementptr inbounds %1, %1* %20, i64 0, i32 4, i32 1, i64 1, i32 0
  %22 = bitcast %"class.core::T_O"** %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !74
  %24 = getelementptr inbounds %1, %1* %20, i64 0, i32 4, i32 1, i64 0, i32 0
  %25 = bitcast %"class.core::T_O"** %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !74
  %27 = add i64 %26, -3
  %28 = inttoptr i64 %27 to %"class.gctools::smart_ptr"*
  %29 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %28, i64 0, i32 0
  %30 = load %"class.core::T_O"*, %"class.core::T_O"** %29, align 8, !tbaa !74
  %31 = bitcast %"class.core::T_O"* %30 to {}*
  %ptrtoint = ptrtoint %"class.core::T_O"* %30 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest
  %gep = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %30, i64 -9, i32 0
  %irc-bit-cast11 = bitcast i8* %gep to i64*
  %32 = load i64, i64* %irc-bit-cast11, align 8
  %.off = add i64 %32, -913
  %33 = icmp ult i64 %.off, 85
  br i1 %33, label %tag, label %header-check-br27

normal-dest16:                                    ; preds = %tag
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %14

normal-dest17:                                    ; preds = %maybe-more-tests35
  %ptrtoint18 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint19 = add i64 %ptrtoint18, 7
  %entry-point-addr20 = inttoptr i64 %entry-point-addr-uint19 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point21 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr20, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point21({}* %38, i64 1, {}* nonnull %31, {}* null, {}* null, {}* null)
          to label %normal-dest24 unwind label %cleanup-lpad

normal-dest24:                                    ; preds = %normal-dest17
  %.elt62 = extractvalue { {}*, i64 } %34, 0
  %.elt64 = extractvalue { {}*, i64 } %34, 1
  %cond50 = icmp eq i64 %.elt64, 0
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108325.1 = select i1 %cond50, {}* %35, {}* %.elt62
  br label %tag

header-check-br27:                                ; preds = %header-check-br
  %.off69 = add i64 %32, -1001
  %36 = icmp ult i64 %.off69, 5
  br i1 %36, label %maybe-more-tests35, label %tag4

maybe-more-tests35:                               ; preds = %header-check-br27
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %tag4
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 738), align 16
  %ptrtoint38 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint39 = add i64 %ptrtoint38, 7
  %entry-point-addr40 = inttoptr i64 %entry-point-addr-uint39 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point41 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr40, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point41({}* %16, i64 5, {}* %39, {}* %40, {}* %31, {}* %41, {}* %42)
          to label %normal-dest44 unwind label %cleanup-lpad

normal-dest44:                                    ; preds = %normal-dest37
  %.elt = extractvalue { {}*, i64 } %43, 0
  %.elt52 = extractvalue { {}*, i64 } %43, 1
  %cond = icmp eq i64 %.elt52, 0
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108325.2 = select i1 %cond, {}* %44, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^608^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !157 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^608^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G108698.0 = phi {}* [ %18, %header-check-br ], [ %G108698.1, %normal-dest17 ], [ %G108698.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 763), align 8
  %ptrtoint34 = ptrtoint {}* %G108698.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G108698.0, i64 2, {}* %"closure->CWR=FUERE_UEBERWACHUNG_AUS", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag2, %normal-dest21, %maybe-more-tests81, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 763), align 8
  %"closure->CWR=FUERE_UEBERWACHUNG_AUS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 19449, i64 608, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br73

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 762), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108698.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest21:                                    ; preds = %maybe-more-tests81
  %ptrtoint22 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108698.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag2

normal-dest40:                                    ; preds = %tag2
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 765), align 8
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=FUERE_UEBERWACHUNG_AUS", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 766), align 16
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=FUERE_UEBERWACHUNG_AUS", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 2432 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 763), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !158 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest12, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 760), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest8
  %.elt21 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt21, 0
  %.elt = extractvalue { {}*, i64 } %17, 0
  %G108682.0 = select i1 %cond, {}* %18, {}* %.elt
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 728), align 16
  %ptrtoint13 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %20, i64 4, {}* %G108682.0, {}* %21, {}* %farg0, {}* %farg1)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest12
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^614^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !159 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^614^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G108743.0 = phi {}* [ %18, %header-check-br ], [ %G108743.1, %normal-dest17 ], [ %G108743.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 773), align 8
  %ptrtoint43 = ptrtoint {}* %G108743.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G108743.0, i64 2, {}* %"closure->CWR=FUERE_HEILMITTEL_AUS", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests28, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 773), align 8
  %"closure->CWR=FUERE_HEILMITTEL_AUS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 19617, i64 614, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 772), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108743.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %maybe-more-tests28
  %ptrtoint31 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108743.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 775), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=FUERE_HEILMITTEL_AUS", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 778), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=FUERE_HEILMITTEL_AUS", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2456 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 773), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !160 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 4
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 4
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc41 unwind label %cleanup-lpad

.noexc41:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest22, %normal-dest18, %normal-dest16, %normal-dest12, %normal-dest7, %normal-dest6, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = invoke {}* @cc_makeCell()
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %16 = invoke {}* @cc_makeCell()
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %17 = invoke {}* @cc_makeCell()
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest6
  call void @cc_writeCell({}* %15, {}* %farg1)
  call void @cc_writeCell({}* %16, {}* %farg2)
  call void @cc_writeCell({}* %17, {}* %farg3)
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 768), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest7
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %20, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.23", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.23^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 19617, i64 614, i64 0, i64 3, {}* %17, {}* %16, {}* %15)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 728), align 16
  %24 = ptrtoint {}* %15 to i64
  %25 = add i64 %24, -3
  %26 = inttoptr i64 %25 to {}**
  %27 = load {}*, {}** %26, align 8, !tbaa !74
  %ptrtoint = ptrtoint {}* %22 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %22, i64 3, {}* %farg0, {}* %23, {}* %27, {}* null)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %normal-dest18
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt33 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt33, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108763.0 = select i1 %cond, {}* %29, {}* %.elt
  %ptrtoint25 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint26 = add i64 %ptrtoint25, 7
  %entry-point-addr27 = inttoptr i64 %entry-point-addr-uint26 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point28 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr27, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point28({}* %19, i64 2, {}* %"closure->LAMBDA", {}* %G108763.0, {}* null, {}* null)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest22
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %30
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.23"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !161 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.23^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.23^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest12, %normal-dest41
  %return-value.sroa.7.0 = phi i64 [ %.elt52, %normal-dest41 ], [ 1, %normal-dest12 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt50, %normal-dest41 ], [ %farg0, %normal-dest12 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.7.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest12
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest18 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest29, %normal-dest20, %normal-dest18, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 2, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !74
  %22 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 1, i32 0
  %23 = bitcast %"class.core::T_O"** %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !74
  %25 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %26 = bitcast %"class.core::T_O"** %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !74
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 507), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %29 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %29, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt44 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt44, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108781.0 = select i1 %cond, {}* %31, {}* %.elt
  %32 = icmp eq {}* %G108781.0, %31
  br i1 %32, label %tag, label %tag2

normal-dest18:                                    ; preds = %tag2
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest20 unwind label %cleanup-lpad

normal-dest20:                                    ; preds = %normal-dest18
  %35 = add i64 %21, -3
  %36 = inttoptr i64 %35 to {}**
  %37 = load {}*, {}** %36, align 8, !tbaa !74
  %38 = add i64 %24, -3
  %39 = inttoptr i64 %38 to {}**
  %40 = load {}*, {}** %39, align 8, !tbaa !74
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 770), align 16
  %42 = add i64 %27, -3
  %43 = inttoptr i64 %42 to {}**
  %44 = load {}*, {}** %43, align 8, !tbaa !74
  %ptrtoint23 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint24 = add i64 %ptrtoint23, 7
  %entry-point-addr25 = inttoptr i64 %entry-point-addr-uint24 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point26 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr25, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point26({}* %34, i64 5, {}* %37, {}* %40, {}* %41, {}* %44, {}* %farg0)
          to label %normal-dest29 unwind label %cleanup-lpad

normal-dest29:                                    ; preds = %normal-dest20
  %.elt46 = extractvalue { {}*, i64 } %45, 0
  %.elt48 = extractvalue { {}*, i64 } %45, 1
  %cond42 = icmp eq i64 %.elt48, 0
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108772.0 = select i1 %cond42, {}* %46, {}* %.elt46
  %ptrtoint35 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint36 = add i64 %ptrtoint35, 7
  %entry-point-addr37 = inttoptr i64 %entry-point-addr-uint36 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point38 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr37, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point38({}* %14, i64 1, {}* %G108772.0, {}* null, {}* null, {}* null)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest29
  %.elt50 = extractvalue { {}*, i64 } %47, 0
  %.elt52 = extractvalue { {}*, i64 } %47, 1
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^622^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !162 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^622^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G108817.0 = phi {}* [ %18, %header-check-br ], [ %G108817.1, %normal-dest54 ], [ %G108817.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 782), align 16
  %ptrtoint13 = ptrtoint {}* %G108817.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G108817.0, i64 2, {}* %"closure->CWR=FUERE_CONSTRAINT_AUS", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag3, %normal-dest47, %maybe-more-tests67, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 782), align 16
  %"closure->CWR=FUERE_CONSTRAINT_AUS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 19906, i64 622, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 784), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=FUERE_CONSTRAINT_AUS", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 785), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=FUERE_CONSTRAINT_AUS", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2488 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 782), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %maybe-more-tests67
  %ptrtoint48 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %37, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt101 = extractvalue { {}*, i64 } %33, 0
  %.elt103 = extractvalue { {}*, i64 } %33, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108817.1 = select i1 %cond82, {}* %34, {}* %.elt101
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %35 = icmp ult i64 %.off106, 5
  br i1 %35, label %maybe-more-tests67, label %tag3

maybe-more-tests67:                               ; preds = %header-check-br59
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag3
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 781), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108817.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !163 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 728), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 3, {}* %farg2, {}* %17, {}* %farg0, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^628^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !164 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^628^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G108857.0 = phi {}* [ %18, %header-check-br ], [ %G108857.1, %normal-dest54 ], [ %G108857.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 788), align 16
  %ptrtoint13 = ptrtoint {}* %G108857.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G108857.0, i64 2, {}* %"closure->CWR=HOLE_AKTIVE_VORSCHLAEGE", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest47, %tag1, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 788), align 16
  %"closure->CWR=HOLE_AKTIVE_VORSCHLAEGE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20053, i64 628, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 790), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=HOLE_AKTIVE_VORSCHLAEGE", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 793), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=HOLE_AKTIVE_VORSCHLAEGE", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2512 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 788), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag1
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 787), align 8
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108857.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag1

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108857.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !165 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc30 unwind label %cleanup-lpad

.noexc30:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest11, %normal-dest8, %normal-dest6, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 622), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %17, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.24", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.24^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20053, i64 628, i64 0, i64 0)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 724), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest6
  %ptrtoint = ptrtoint {}* %19 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %19, i64 2, {}* %farg0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest8
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt22 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt22, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108877.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint14 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint15 = add i64 %ptrtoint14, 7
  %entry-point-addr16 = inttoptr i64 %entry-point-addr-uint15 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point17 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr16, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point17({}* %16, i64 2, {}* %"closure->LAMBDA", {}* %G108877.0, {}* null, {}* null)
          to label %normal-dest20 unwind label %cleanup-lpad

normal-dest20:                                    ; preds = %normal-dest11
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.24"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !166 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.24^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.24^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 726), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* %14, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^633^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !167 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^633^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G108905.0 = phi {}* [ %18, %header-check-br ], [ %G108905.1, %normal-dest17 ], [ %G108905.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 724), align 16
  %ptrtoint29 = ptrtoint {}* %G108905.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G108905.0, i64 2, {}* %"closure->CWR=HOLE_VORSCHLAEGE", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 724), align 16
  %"closure->CWR=HOLE_VORSCHLAEGE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20252, i64 633, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 796), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108905.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 797), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR=HOLE_VORSCHLAEGE", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 798), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR=HOLE_VORSCHLAEGE", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 2532 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 724), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108905.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !168 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %19, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt21 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt21, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108924.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G108924.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^637^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !169 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^637^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G108956.0 = phi {}* [ %18, %header-check-br ], [ %G108956.1, %normal-dest17 ], [ %G108956.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 803), align 8
  %ptrtoint43 = ptrtoint {}* %G108956.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G108956.0, i64 2, {}* %"closure->CWR=SETZE_VORSCHLAEGE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests28, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 803), align 8
  %"closure->CWR=SETZE_VORSCHLAEGE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20361, i64 637, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 802), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108956.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %maybe-more-tests28
  %ptrtoint31 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108956.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 805), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=SETZE_VORSCHLAEGE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 806), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=SETZE_VORSCHLAEGE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2548 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 803), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !170 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest8
  %.elt44 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt44, 0
  %.elt = extractvalue { {}*, i64 } %18, 0
  %G108933.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint20 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %21, i64 3, {}* %G108933.0, {}* %farg2, {}* %farg1, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt48 = extractvalue { {}*, i64 } %22, 1
  %cond42 = icmp eq i64 %.elt48, 0
  %.elt46 = extractvalue { {}*, i64 } %22, 0
  %G108940.0 = select i1 %cond42, {}* %23, {}* %.elt46
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 800), align 16
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint34 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %25, i64 7, {}* %farg0, {}* %26, {}* %G108940.0, {}* %27, {}* %28, {}* %29, {}* %30)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %31
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^644^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !171 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^644^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G109027.0 = phi {}* [ %18, %header-check-br ], [ %G109027.1, %normal-dest63 ], [ %G109027.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 809), align 8
  %ptrtoint22 = ptrtoint {}* %G109027.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G109027.0, i64 2, {}* %"closure->CWR=SETZE-EINEN-VORSCHLAG", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests21, %normal-dest56, %tag3, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 809), align 8
  %"closure->CWR=SETZE-EINEN-VORSCHLAG" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20615, i64 644, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 811), align 8
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR=SETZE-EINEN-VORSCHLAG", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 812), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR=SETZE-EINEN-VORSCHLAG", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 2576 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 809), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %tag3
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 808), align 16
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109027.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag2

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109027.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !172 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc321 unwind label %cleanup-lpad.loopexit.split-lp

.noexc321:                                        ; preds = %13
  unreachable

tag4:                                             ; preds = %tag43, %normal-dest78
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest99 unwind label %cleanup-lpad.loopexit.split-lp

tag5:                                             ; preds = %tag38
  %16 = add i64 %21, -3
  %17 = inttoptr i64 %16 to {}**
  %18 = load {}*, {}** %17, align 8
  br label %tag18

tag6:                                             ; preds = %tag6.lr.ph, %tag43
  %G109118.0 = phi {}* [ %.val338, %tag6.lr.ph ], [ %.val, %tag43 ]
  %19 = phi i1 [ %56, %tag6.lr.ph ], [ %41, %tag43 ]
  %20 = phi {}* [ %54, %tag6.lr.ph ], [ %36, %tag43 ]
  %"%SUBLIST109002.0341" = phi {}* [ %G109007.0, %tag6.lr.ph ], [ %39, %tag43 ]
  %21 = ptrtoint {}* %"%SUBLIST109002.0341" to i64
  %tag-only278 = and i64 %21, 7
  %consp-test = icmp eq i64 %tag-only278, 3
  br i1 %consp-test, label %tag38, label %tag33

tag18:                                            ; preds = %tag57, %normal-dest218, %tag5
  %.val334 = phi {}* [ %20, %tag5 ], [ %88, %normal-dest218 ], [ %G109118.0, %tag57 ]
  %22 = phi {}* [ %G109118.0, %tag5 ], [ %.val333.pre, %normal-dest218 ], [ %G109118.0, %tag57 ]
  %.in304 = phi {}* [ %18, %tag5 ], [ %.in, %normal-dest218 ], [ %G109118.0, %tag57 ]
  %23 = bitcast {}* %.in304 to i8*
  %24 = icmp eq {}* %.in304, %farg2
  %G109098.0 = select i1 %24, {}* %22, {}* %.val334
  %25 = icmp eq {}* %G109098.0, %.val334
  br i1 %25, label %tag50, label %tag54

tag23:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %26 = ptrtoint {}* %.in304 to i64
  %single-float-tag-only158 = and i64 %26, 7
  %fixnum-tag-only131302 = and i64 %26, 3
  %fixnump-test132 = icmp ne i64 %fixnum-tag-only131302, 0
  %test152 = icmp eq i64 %single-float-tag-only158, 1
  %or.cond329 = and i1 %fixnump-test132, %test152
  br i1 %or.cond329, label %header-check-br149, label %tag43

tag25:                                            ; preds = %header-check-br149, %header-check-br149, %header-check-br149, %header-check-br149
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest167 unwind label %cleanup-lpad.loopexit

tag28:                                            ; preds = %tag54, %normal-dest106
  %store108998.0 = phi {}* [ %store108998.1, %normal-dest106 ], [ %G109007.0, %tag54 ]
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest188 unwind label %cleanup-lpad.loopexit.split-lp

tag30:                                            ; preds = %tag57
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest211 unwind label %cleanup-lpad.loopexit

tag33:                                            ; preds = %tag6
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest225 unwind label %cleanup-lpad.loopexit.split-lp

tag38:                                            ; preds = %tag6
  %35 = icmp eq {}* %G109118.0, %20
  br i1 %35, label %tag57, label %tag5

tag43:                                            ; preds = %tag54.tag43_crit_edge, %header-check-br, %header-check-br149, %tag23, %tag50
  %.val = phi {}* [ %.val.pre, %tag54.tag43_crit_edge ], [ %22, %tag50 ], [ %22, %tag23 ], [ %22, %header-check-br149 ], [ %22, %header-check-br ]
  %36 = phi {}* [ %43, %tag54.tag43_crit_edge ], [ %.val334, %tag50 ], [ %.val334, %tag23 ], [ %.val334, %header-check-br149 ], [ %.val334, %header-check-br ]
  %37 = add i64 %21, 5
  %38 = inttoptr i64 %37 to {}**
  %39 = load {}*, {}** %38, align 8
  %40 = icmp eq {}* %39, %36
  %object.0 = select i1 %40, {}* %.val, {}* %36
  %41 = icmp eq {}* %object.0, %36
  %G109064.0 = select i1 %41, {}* %.val, {}* %36
  %42 = icmp eq {}* %G109064.0, %36
  br i1 %42, label %tag4, label %tag6

tag50:                                            ; preds = %tag18
  br i1 %brmerge, label %tag43, label %header-check-br

tag54:                                            ; preds = %tag18, %normal-dest174
  %43 = phi {}* [ %72, %normal-dest174 ], [ %.val334, %tag18 ]
  %G109089.0 = phi {}* [ %G109089.1, %normal-dest174 ], [ %22, %tag18 ]
  %44 = icmp eq {}* %G109089.0, %43
  br i1 %44, label %tag54.tag43_crit_edge, label %tag28

tag54.tag43_crit_edge:                            ; preds = %tag54
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag43

tag57:                                            ; preds = %tag38
  br i1 %19, label %tag30, label %tag18

cleanup-lpad.loopexit:                            ; preds = %tag25, %normal-dest167, %tag30, %normal-dest211
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest64, %normal-dest67, %normal-dest71, %tag4, %normal-dest99, %tag28, %normal-dest188, %normal-dest195, %normal-dest202, %tag33, %normal-dest225, %10, %13
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest64 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest64:                                    ; preds = %normal-dest
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint = ptrtoint {}* %46 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %46, i64 2, {}* %farg0, {}* %47, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest67:                                    ; preds = %normal-dest64
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt273 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt273, 0
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G108995.0 = select i1 %cond, {}* %49, {}* %.elt
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest71 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest71:                                    ; preds = %normal-dest67
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint72 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint73 = add i64 %ptrtoint72, 7
  %entry-point-addr74 = inttoptr i64 %entry-point-addr-uint73 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point75 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr74, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point75({}* %51, i64 3, {}* %G108995.0, {}* %farg1, {}* %52, {}* null)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest78:                                    ; preds = %normal-dest71
  %.elt275 = extractvalue { {}*, i64 } %53, 0
  %.elt277 = extractvalue { {}*, i64 } %53, 1
  %cond266 = icmp eq i64 %.elt277, 0
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109007.0 = select i1 %cond266, {}* %54, {}* %.elt275
  %55 = icmp eq {}* %G109007.0, %54
  %.val338 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0339 = select i1 %55, {}* %.val338, {}* %54
  %56 = icmp eq {}* %object.0339, %54
  %G109064.0340 = select i1 %56, {}* %.val338, {}* %54
  %57 = icmp eq {}* %G109064.0340, %54
  br i1 %57, label %tag4, label %tag6.lr.ph

tag6.lr.ph:                                       ; preds = %normal-dest78
  %58 = ptrtoint {}* %farg2 to i64
  %single-float-tag-only245 = and i64 %58, 7
  %fixnum-tag-only300 = and i64 %58, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only300, 0
  %test = icmp ne i64 %single-float-tag-only245, 1
  %irc-bit-cast115 = bitcast {}* %farg2 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast115, i64 -9
  %irc-bit-cast116 = bitcast i8* %gep to i64*
  %brmerge = or i1 %test, %fixnump-test
  br label %tag6

normal-dest99:                                    ; preds = %tag4
  %ptrtoint100 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint101 = add i64 %ptrtoint100, 7
  %entry-point-addr102 = inttoptr i64 %entry-point-addr-uint101 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point103 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr102, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point103({}* %15, i64 2, {}* %farg2, {}* %G109007.0, {}* null, {}* null)
          to label %normal-dest106 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest106:                                   ; preds = %normal-dest99
  %.elt314 = extractvalue { {}*, i64 } %59, 0
  %.elt316 = extractvalue { {}*, i64 } %59, 1
  %cond271 = icmp eq i64 %.elt316, 0
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %store108998.1 = select i1 %cond271, {}* %60, {}* %.elt314
  br label %tag28

header-check-br:                                  ; preds = %tag50
  %61 = load i64, i64* %irc-bit-cast116, align 8
  %62 = add i64 %61, -1309
  %63 = lshr i64 %62, 3
  %64 = shl i64 %62, 61
  %65 = or i64 %63, %64
  switch i64 %65, label %tag43 [
    i64 2, label %tag23
    i64 4, label %tag23
    i64 5, label %tag23
    i64 0, label %tag23
  ]

header-check-br149:                               ; preds = %tag23
  %gep154 = getelementptr inbounds i8, i8* %23, i64 -9
  %irc-bit-cast155 = bitcast i8* %gep154 to i64*
  %66 = load i64, i64* %irc-bit-cast155, align 8
  %67 = add i64 %66, -1309
  %68 = lshr i64 %67, 3
  %69 = shl i64 %67, 61
  %70 = or i64 %68, %69
  switch i64 %70, label %tag43 [
    i64 2, label %tag25
    i64 4, label %tag25
    i64 5, label %tag25
    i64 0, label %tag25
  ]

normal-dest167:                                   ; preds = %tag25
  %ptrtoint168 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint169 = add i64 %ptrtoint168, 7
  %entry-point-addr170 = inttoptr i64 %entry-point-addr-uint169 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point171 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr170, align 8
  %71 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point171({}* %28, i64 2, {}* nonnull %farg2, {}* nonnull %.in304, {}* null, {}* null)
          to label %normal-dest174 unwind label %cleanup-lpad.loopexit

normal-dest174:                                   ; preds = %normal-dest167
  %.elt306 = extractvalue { {}*, i64 } %71, 0
  %.elt308 = extractvalue { {}*, i64 } %71, 1
  %cond269 = icmp eq i64 %.elt308, 0
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109089.1 = select i1 %cond269, {}* %72, {}* %.elt306
  br label %tag54

normal-dest188:                                   ; preds = %tag28
  %ptrtoint189 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint190 = add i64 %ptrtoint189, 7
  %entry-point-addr191 = inttoptr i64 %entry-point-addr-uint190 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point192 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr191, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point192({}* %30, i64 3, {}* %G108995.0, {}* %store108998.0, {}* %farg1, {}* null)
          to label %normal-dest195 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest195:                                   ; preds = %normal-dest188
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %76 = invoke {}* @cc_safe_fdefinition({}* %75)
          to label %normal-dest202 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest202:                                   ; preds = %normal-dest195
  %.elt287 = extractvalue { {}*, i64 } %73, 1
  %cond267 = icmp eq i64 %.elt287, 0
  %.elt285 = extractvalue { {}*, i64 } %73, 0
  %G109011.0 = select i1 %cond267, {}* %74, {}* %.elt285
  %77 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 800), align 16
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint203 = ptrtoint {}* %76 to i64
  %entry-point-addr-uint204 = add i64 %ptrtoint203, 7
  %entry-point-addr205 = inttoptr i64 %entry-point-addr-uint204 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point206 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr205, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point206({}* %76, i64 7, {}* %farg0, {}* %77, {}* %G109011.0, {}* %78, {}* %79, {}* %80, {}* %81)
          to label %normal-dest209 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest209:                                   ; preds = %normal-dest202
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %82

normal-dest211:                                   ; preds = %tag30
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint212 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint213 = add i64 %ptrtoint212, 7
  %entry-point-addr214 = inttoptr i64 %entry-point-addr-uint213 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point215 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr214, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point215({}* %32, i64 5, {}* %83, {}* %84, {}* %"%SUBLIST109002.0341", {}* %85, {}* %86)
          to label %normal-dest218 unwind label %cleanup-lpad.loopexit

normal-dest218:                                   ; preds = %normal-dest211
  %.elt310 = extractvalue { {}*, i64 } %87, 0
  %.elt312 = extractvalue { {}*, i64 } %87, 1
  %cond270 = icmp eq i64 %.elt312, 0
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond270, {}* %88, {}* %.elt310
  %.val333.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag18

normal-dest225:                                   ; preds = %tag33
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %92 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint252 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint253 = add i64 %ptrtoint252, 7
  %entry-point-addr254 = inttoptr i64 %entry-point-addr-uint253 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point255 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr254, align 8
  %93 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point255({}* %34, i64 5, {}* %89, {}* %90, {}* %"%SUBLIST109002.0341", {}* %91, {}* %92)
          to label %normal-dest258 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest258:                                   ; preds = %normal-dest225
  call void @unreachableError()
  unreachable
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^650^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !173 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^650^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G109162.0 = phi {}* [ %18, %header-check-br ], [ %G109162.1, %normal-dest17 ], [ %G109162.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 817), align 8
  %ptrtoint29 = ptrtoint {}* %G109162.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G109162.0, i64 2, {}* %"closure->CWR=LOESCHE-EINEN-VORSCHLAG", {}* %11, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br20
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag2, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 817), align 8
  %"closure->CWR=LOESCHE-EINEN-VORSCHLAG" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20862, i64 650, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109162.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag2

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag4

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag2
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 819), align 8
  %ptrtoint42 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %27, i64 2, {}* %"closure->CWR=LOESCHE-EINEN-VORSCHLAG", {}* %28, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 820), align 16
  %ptrtoint55 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %31, i64 2, {}* %"closure->CWR=LOESCHE-EINEN-VORSCHLAG", {}* %32, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %34, {}* inttoptr (i64 2600 to {}*))
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 817), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %36 = insertvalue { {}*, i64 } undef, {}* %35, 0
  %37 = insertvalue { {}*, i64 } %36, i64 1, 1
  ret { {}*, i64 } %37

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 816), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109162.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !174 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc86 unwind label %cleanup-lpad

.noexc86:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest54, %normal-dest47, %normal-dest40, %normal-dest33, %normal-dest21, %normal-dest14, %normal-dest12, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %.elt = extractvalue { {}*, i64 } %18, 0
  %.elt66 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt66, 0
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109139.0 = select i1 %cond, {}* %19, {}* %.elt
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 814), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest8
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest12
  %ptrtoint15 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %23, i64 2, {}* %G109139.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest14
  %.elt68 = extractvalue { {}*, i64 } %24, 0
  %.elt70 = extractvalue { {}*, i64 } %24, 1
  %cond62 = icmp eq i64 %.elt70, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109196.0 = select i1 %cond62, {}* %25, {}* %.elt68
  %ptrtoint27 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint28 = add i64 %ptrtoint27, 7
  %entry-point-addr29 = inttoptr i64 %entry-point-addr-uint28 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point30 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr29, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point30({}* %21, i64 2, {}* %farg2, {}* %G109196.0, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest21
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt74 = extractvalue { {}*, i64 } %26, 1
  %cond63 = icmp eq i64 %.elt74, 0
  %.elt72 = extractvalue { {}*, i64 } %26, 0
  %store109142109144.0 = select i1 %cond63, {}* %27, {}* %.elt72
  %ptrtoint41 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint42 = add i64 %ptrtoint41, 7
  %entry-point-addr43 = inttoptr i64 %entry-point-addr-uint42 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point44 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr43, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point44({}* %29, i64 3, {}* %G109139.0, {}* %store109142109144.0, {}* %farg1, {}* null)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt78 = extractvalue { {}*, i64 } %30, 1
  %cond64 = icmp eq i64 %.elt78, 0
  %.elt76 = extractvalue { {}*, i64 } %30, 0
  %G109146.0 = select i1 %cond64, {}* %31, {}* %.elt76
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 800), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 7, {}* %farg0, {}* %34, {}* %G109146.0, {}* %35, {}* %36, {}* %37, {}* %38)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %39
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^656^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !175 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^656^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G109240.0 = phi {}* [ %18, %header-check-br ], [ %G109240.1, %normal-dest17 ], [ %G109240.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 823), align 8
  %ptrtoint34 = ptrtoint {}* %G109240.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G109240.0, i64 2, {}* %"closure->CWR=SETZE-EIN-CONSTRAINT", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %maybe-more-tests81, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 823), align 8
  %"closure->CWR=SETZE-EIN-CONSTRAINT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21138, i64 656, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br73

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 822), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109240.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

normal-dest21:                                    ; preds = %maybe-more-tests81
  %ptrtoint22 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109240.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 825), align 8
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=SETZE-EIN-CONSTRAINT", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 826), align 16
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=SETZE-EIN-CONSTRAINT", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 2624 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 823), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !176 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc319 unwind label %cleanup-lpad.loopexit.split-lp

.noexc319:                                        ; preds = %13
  unreachable

tag4:                                             ; preds = %header-check-br214, %header-check-br214, %header-check-br214, %header-check-br214
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest89 unwind label %cleanup-lpad.loopexit

tag8:                                             ; preds = %tag38, %normal-dest78
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest111 unwind label %cleanup-lpad.loopexit.split-lp

tag10:                                            ; preds = %tag10.lr.ph, %tag38
  %G109331.0 = phi {}* [ %.val336, %tag10.lr.ph ], [ %.val, %tag38 ]
  %18 = phi i1 [ %56, %tag10.lr.ph ], [ %34, %tag38 ]
  %19 = phi {}* [ %54, %tag10.lr.ph ], [ %29, %tag38 ]
  %"%SUBLIST109215.0339" = phi {}* [ %G109220.0, %tag10.lr.ph ], [ %32, %tag38 ]
  %20 = ptrtoint {}* %"%SUBLIST109215.0339" to i64
  %tag-only132278 = and i64 %20, 7
  %consp-test133 = icmp eq i64 %tag-only132278, 3
  br i1 %consp-test133, label %tag19, label %tag44

tag16:                                            ; preds = %tag24, %normal-dest118
  %store109211.0 = phi {}* [ %store109211.1, %normal-dest118 ], [ %G109220.0, %tag24 ]
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest140 unwind label %cleanup-lpad.loopexit.split-lp

tag19:                                            ; preds = %tag10
  %23 = icmp eq {}* %G109331.0, %19
  br i1 %23, label %tag56, label %tag29

tag24:                                            ; preds = %tag54, %normal-dest97
  %24 = phi {}* [ %60, %normal-dest97 ], [ %.val332, %tag54 ]
  %G109302.0 = phi {}* [ %G109302.1, %normal-dest97 ], [ %39, %tag54 ]
  %25 = icmp eq {}* %G109302.0, %24
  br i1 %25, label %tag24.tag38_crit_edge, label %tag16

tag24.tag38_crit_edge:                            ; preds = %tag24
  %.val.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag38

tag29:                                            ; preds = %tag19
  %26 = add i64 %20, -3
  %27 = inttoptr i64 %26 to {}**
  %28 = load {}*, {}** %27, align 8
  br label %tag54

tag38:                                            ; preds = %tag24.tag38_crit_edge, %header-check-br167, %header-check-br214, %tag42, %tag55
  %.val = phi {}* [ %.val.pre, %tag24.tag38_crit_edge ], [ %39, %tag55 ], [ %39, %tag42 ], [ %39, %header-check-br214 ], [ %39, %header-check-br167 ]
  %29 = phi {}* [ %24, %tag24.tag38_crit_edge ], [ %.val332, %tag55 ], [ %.val332, %tag42 ], [ %.val332, %header-check-br214 ], [ %.val332, %header-check-br167 ]
  %30 = add i64 %20, 5
  %31 = inttoptr i64 %30 to {}**
  %32 = load {}*, {}** %31, align 8
  %33 = icmp eq {}* %32, %29
  %object.0 = select i1 %33, {}* %.val, {}* %29
  %34 = icmp eq {}* %object.0, %29
  %G109277.0 = select i1 %34, {}* %.val, {}* %29
  %35 = icmp eq {}* %G109277.0, %29
  br i1 %35, label %tag8, label %tag10

tag42:                                            ; preds = %header-check-br167, %header-check-br167, %header-check-br167, %header-check-br167
  %36 = ptrtoint {}* %.in304 to i64
  %single-float-tag-only221 = and i64 %36, 7
  %fixnum-tag-only212302 = and i64 %36, 3
  %fixnump-test213 = icmp ne i64 %fixnum-tag-only212302, 0
  %test217 = icmp eq i64 %single-float-tag-only221, 1
  %or.cond327 = and i1 %fixnump-test213, %test217
  br i1 %or.cond327, label %header-check-br214, label %tag38

tag44:                                            ; preds = %tag10
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest223 unwind label %cleanup-lpad.loopexit.split-lp

tag54:                                            ; preds = %tag56, %normal-dest260, %tag29
  %.val332 = phi {}* [ %19, %tag29 ], [ %93, %normal-dest260 ], [ %G109331.0, %tag56 ]
  %39 = phi {}* [ %G109331.0, %tag29 ], [ %.val331.pre, %normal-dest260 ], [ %G109331.0, %tag56 ]
  %.in304 = phi {}* [ %28, %tag29 ], [ %.in, %normal-dest260 ], [ %G109331.0, %tag56 ]
  %40 = bitcast {}* %.in304 to i8*
  %41 = icmp eq {}* %.in304, %farg2
  %G109311.0 = select i1 %41, {}* %39, {}* %.val332
  %42 = icmp eq {}* %G109311.0, %.val332
  br i1 %42, label %tag55, label %tag24

tag55:                                            ; preds = %tag54
  br i1 %brmerge, label %tag38, label %header-check-br167

tag56:                                            ; preds = %tag19
  br i1 %18, label %tag57, label %tag54

tag57:                                            ; preds = %tag56
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest253 unwind label %cleanup-lpad.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag4, %normal-dest89, %tag57, %normal-dest253
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest64, %normal-dest67, %normal-dest71, %tag8, %normal-dest111, %tag16, %normal-dest140, %normal-dest147, %normal-dest154, %normal-dest223, %tag44, %10, %13
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest64 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest64:                                    ; preds = %normal-dest
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %46 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %46, i64 2, {}* %farg0, {}* %47, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest67:                                    ; preds = %normal-dest64
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt273 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt273, 0
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109208.0 = select i1 %cond, {}* %49, {}* %.elt
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest71 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest71:                                    ; preds = %normal-dest67
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint72 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint73 = add i64 %ptrtoint72, 7
  %entry-point-addr74 = inttoptr i64 %entry-point-addr-uint73 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point75 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr74, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point75({}* %51, i64 3, {}* %G109208.0, {}* %farg1, {}* %52, {}* null)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest78:                                    ; preds = %normal-dest71
  %.elt275 = extractvalue { {}*, i64 } %53, 0
  %.elt277 = extractvalue { {}*, i64 } %53, 1
  %cond266 = icmp eq i64 %.elt277, 0
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109220.0 = select i1 %cond266, {}* %54, {}* %.elt275
  %55 = icmp eq {}* %G109220.0, %54
  %.val336 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.0337 = select i1 %55, {}* %.val336, {}* %54
  %56 = icmp eq {}* %object.0337, %54
  %G109277.0338 = select i1 %56, {}* %.val336, {}* %54
  %57 = icmp eq {}* %G109277.0338, %54
  br i1 %57, label %tag8, label %tag10.lr.ph

tag10.lr.ph:                                      ; preds = %normal-dest78
  %58 = ptrtoint {}* %farg2 to i64
  %single-float-tag-only245 = and i64 %58, 7
  %fixnum-tag-only224300 = and i64 %58, 3
  %fixnump-test225 = icmp eq i64 %fixnum-tag-only224300, 0
  %test170 = icmp ne i64 %single-float-tag-only245, 1
  %irc-bit-cast171 = bitcast {}* %farg2 to i8*
  %gep172 = getelementptr inbounds i8, i8* %irc-bit-cast171, i64 -9
  %irc-bit-cast173 = bitcast i8* %gep172 to i64*
  %brmerge = or i1 %test170, %fixnump-test225
  br label %tag10

normal-dest89:                                    ; preds = %tag4
  %ptrtoint91 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint92 = add i64 %ptrtoint91, 7
  %entry-point-addr93 = inttoptr i64 %entry-point-addr-uint92 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point94 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr93, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point94({}* %15, i64 2, {}* nonnull %farg2, {}* nonnull %.in304, {}* null, {}* null)
          to label %normal-dest97 unwind label %cleanup-lpad.loopexit

normal-dest97:                                    ; preds = %normal-dest89
  %.elt306 = extractvalue { {}*, i64 } %59, 0
  %.elt308 = extractvalue { {}*, i64 } %59, 1
  %cond269 = icmp eq i64 %.elt308, 0
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109302.1 = select i1 %cond269, {}* %60, {}* %.elt306
  br label %tag24

normal-dest111:                                   ; preds = %tag8
  %ptrtoint112 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint113 = add i64 %ptrtoint112, 7
  %entry-point-addr114 = inttoptr i64 %entry-point-addr-uint113 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point115 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr114, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point115({}* %17, i64 2, {}* %farg2, {}* %G109220.0, {}* null, {}* null)
          to label %normal-dest118 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest118:                                   ; preds = %normal-dest111
  %.elt314 = extractvalue { {}*, i64 } %61, 0
  %.elt316 = extractvalue { {}*, i64 } %61, 1
  %cond271 = icmp eq i64 %.elt316, 0
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %store109211.1 = select i1 %cond271, {}* %62, {}* %.elt314
  br label %tag16

normal-dest140:                                   ; preds = %tag16
  %ptrtoint141 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint142 = add i64 %ptrtoint141, 7
  %entry-point-addr143 = inttoptr i64 %entry-point-addr-uint142 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point144 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr143, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point144({}* %22, i64 3, {}* %G109208.0, {}* %store109211.0, {}* %farg1, {}* null)
          to label %normal-dest147 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest147:                                   ; preds = %normal-dest140
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest154 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest154:                                   ; preds = %normal-dest147
  %.elt287 = extractvalue { {}*, i64 } %63, 1
  %cond267 = icmp eq i64 %.elt287, 0
  %.elt285 = extractvalue { {}*, i64 } %63, 0
  %G109224.0 = select i1 %cond267, {}* %64, {}* %.elt285
  %67 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 800), align 16
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint155 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint156 = add i64 %ptrtoint155, 7
  %entry-point-addr157 = inttoptr i64 %entry-point-addr-uint156 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point158 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr157, align 8
  %72 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point158({}* %66, i64 7, {}* %farg0, {}* %67, {}* %G109224.0, {}* %68, {}* %69, {}* %70, {}* %71)
          to label %normal-dest161 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest161:                                   ; preds = %normal-dest154
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %72

header-check-br167:                               ; preds = %tag55
  %73 = load i64, i64* %irc-bit-cast173, align 8
  %74 = add i64 %73, -1309
  %75 = lshr i64 %74, 3
  %76 = shl i64 %74, 61
  %77 = or i64 %75, %76
  switch i64 %77, label %tag38 [
    i64 2, label %tag42
    i64 4, label %tag42
    i64 5, label %tag42
    i64 0, label %tag42
  ]

normal-dest187:                                   ; preds = %normal-dest223
  call void @unreachableError()
  unreachable

header-check-br214:                               ; preds = %tag42
  %gep219 = getelementptr inbounds i8, i8* %40, i64 -9
  %irc-bit-cast220 = bitcast i8* %gep219 to i64*
  %78 = load i64, i64* %irc-bit-cast220, align 8
  %79 = add i64 %78, -1309
  %80 = lshr i64 %79, 3
  %81 = shl i64 %79, 61
  %82 = or i64 %80, %81
  switch i64 %82, label %tag38 [
    i64 2, label %tag4
    i64 4, label %tag4
    i64 5, label %tag4
    i64 0, label %tag4
  ]

normal-dest223:                                   ; preds = %tag44
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint181 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint182 = add i64 %ptrtoint181, 7
  %entry-point-addr183 = inttoptr i64 %entry-point-addr-uint182 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point184 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr183, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point184({}* %38, i64 5, {}* %83, {}* %84, {}* %"%SUBLIST109215.0339", {}* %85, {}* %86)
          to label %normal-dest187 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest253:                                   ; preds = %tag57
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint254 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint255 = add i64 %ptrtoint254, 7
  %entry-point-addr256 = inttoptr i64 %entry-point-addr-uint255 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point257 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr256, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point257({}* %44, i64 5, {}* %88, {}* %89, {}* %"%SUBLIST109215.0339", {}* %90, {}* %91)
          to label %normal-dest260 unwind label %cleanup-lpad.loopexit

normal-dest260:                                   ; preds = %normal-dest253
  %.elt310 = extractvalue { {}*, i64 } %92, 0
  %.elt312 = extractvalue { {}*, i64 } %92, 1
  %cond270 = icmp eq i64 %.elt312, 0
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond270, {}* %93, {}* %.elt310
  %.val331.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag54
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^662^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !177 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^662^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G109375.0 = phi {}* [ %18, %header-check-br ], [ %G109375.1, %normal-dest54 ], [ %G109375.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 829), align 8
  %ptrtoint13 = ptrtoint {}* %G109375.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G109375.0, i64 2, {}* %"closure->CWR=LOESCHE-EIN-CONSTRAINT", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest47, %tag1, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 829), align 8
  %"closure->CWR=LOESCHE-EIN-CONSTRAINT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21388, i64 662, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 831), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=LOESCHE-EIN-CONSTRAINT", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 832), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=LOESCHE-EIN-CONSTRAINT", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2648 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 829), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag1
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 828), align 16
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109375.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag1

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109375.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !178 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc86 unwind label %cleanup-lpad

.noexc86:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest54, %normal-dest47, %normal-dest40, %normal-dest33, %normal-dest21, %normal-dest14, %normal-dest12, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %.elt = extractvalue { {}*, i64 } %18, 0
  %.elt66 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt66, 0
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109352.0 = select i1 %cond, {}* %19, {}* %.elt
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 814), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest8
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest12
  %ptrtoint15 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %23, i64 2, {}* %G109352.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest14
  %.elt68 = extractvalue { {}*, i64 } %24, 0
  %.elt70 = extractvalue { {}*, i64 } %24, 1
  %cond62 = icmp eq i64 %.elt70, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109409.0 = select i1 %cond62, {}* %25, {}* %.elt68
  %ptrtoint27 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint28 = add i64 %ptrtoint27, 7
  %entry-point-addr29 = inttoptr i64 %entry-point-addr-uint28 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point30 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr29, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point30({}* %21, i64 2, {}* %farg2, {}* %G109409.0, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest21
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt74 = extractvalue { {}*, i64 } %26, 1
  %cond63 = icmp eq i64 %.elt74, 0
  %.elt72 = extractvalue { {}*, i64 } %26, 0
  %store109355109357.0 = select i1 %cond63, {}* %27, {}* %.elt72
  %ptrtoint41 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint42 = add i64 %ptrtoint41, 7
  %entry-point-addr43 = inttoptr i64 %entry-point-addr-uint42 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point44 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr43, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point44({}* %29, i64 3, {}* %G109352.0, {}* %store109355109357.0, {}* %farg1, {}* null)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt78 = extractvalue { {}*, i64 } %30, 1
  %cond64 = icmp eq i64 %.elt78, 0
  %.elt76 = extractvalue { {}*, i64 } %30, 0
  %G109359.0 = select i1 %cond64, {}* %31, {}* %.elt76
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 800), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 7, {}* %farg0, {}* %34, {}* %G109359.0, {}* %35, {}* %36, {}* %37, {}* %38)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %39
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^667^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !179 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^667^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br86
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G109441.0 = phi {}* [ %18, %header-check-br ], [ %G109441.1, %normal-dest17 ], [ %G109441.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 837), align 8
  %ptrtoint34 = ptrtoint {}* %G109441.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G109441.0, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_LISTE", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest72, %normal-dest66, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %tag2, %normal-dest13, %maybe-more-tests94, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 837), align 8
  %"closure->CWR=HOLE_CONSTRAINT_LISTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21665, i64 667, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br86

normal-dest13:                                    ; preds = %maybe-more-tests94
  %ptrtoint14 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109441.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag3

normal-dest21:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 836), align 16
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt97 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt97, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109441.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 839), align 8
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_LISTE", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 840), align 16
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_LISTE", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 301), align 8
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest72 unwind label %cleanup-lpad

normal-dest72:                                    ; preds = %normal-dest66
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 837), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 841), align 8
  %ptrtoint73 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint74 = add i64 %ptrtoint73, 7
  %entry-point-addr75 = inttoptr i64 %entry-point-addr-uint74 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point76 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr75, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point76({}* %38, i64 3, {}* %39, {}* %40, {}* %41, {}* null)
          to label %normal-dest79 unwind label %cleanup-lpad

normal-dest79:                                    ; preds = %normal-dest72
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %43, {}* inttoptr (i64 2684 to {}*))
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 837), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %45 = insertvalue { {}*, i64 } undef, {}* %44, 0
  %46 = insertvalue { {}*, i64 } %45, i64 1, 1
  ret { {}*, i64 } %46

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag2

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !180 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc30 unwind label %cleanup-lpad

.noexc30:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest11, %normal-dest8, %normal-dest6, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 622), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %17, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.25", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.25^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21665, i64 667, i64 0, i64 0)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 834), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest6
  %ptrtoint = ptrtoint {}* %19 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %19, i64 2, {}* %farg0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest8
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt22 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt22, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109461.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint14 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint15 = add i64 %ptrtoint14, 7
  %entry-point-addr16 = inttoptr i64 %entry-point-addr-uint15 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point17 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr16, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point17({}* %16, i64 2, {}* %"closure->LAMBDA", {}* %G109461.0, {}* null, {}* null)
          to label %normal-dest20 unwind label %cleanup-lpad

normal-dest20:                                    ; preds = %normal-dest11
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.25"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !181 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.25^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.25^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 726), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* %14, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^679^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !182 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^679^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest26, %header-check-br
  %G109489.0 = phi {}* [ %18, %header-check-br ], [ %G109489.1, %normal-dest26 ], [ %G109489.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 834), align 16
  %ptrtoint29 = ptrtoint {}* %G109489.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G109489.0, i64 2, {}* %"closure->CWR=HOLE-POTENTIELLE-CONSTRAINTS", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests21, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest22, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 834), align 16
  %"closure->CWR=HOLE-POTENTIELLE-CONSTRAINTS" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21994, i64 679, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 844), align 16
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt84 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt84, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109489.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag3

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 845), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR=HOLE-POTENTIELLE-CONSTRAINTS", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 846), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR=HOLE-POTENTIELLE-CONSTRAINTS", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 2716 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 834), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109489.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !183 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %19, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt21 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt21, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109508.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G109508.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^684^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !184 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^684^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G109540.0 = phi {}* [ %18, %header-check-br ], [ %G109540.1, %normal-dest26 ], [ %G109540.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 849), align 8
  %ptrtoint43 = ptrtoint {}* %G109540.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G109540.0, i64 2, {}* %"closure->CWR=SETZE_CONSTRAINT_LISTE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag2, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 849), align 8
  %"closure->CWR=SETZE_CONSTRAINT_LISTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22125, i64 684, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt101 = extractvalue { {}*, i64 } %24, 0
  %.elt103 = extractvalue { {}*, i64 } %24, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109540.1 = select i1 %cond82, {}* %25, {}* %.elt101
  br label %tag4

normal-dest30:                                    ; preds = %tag2
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 848), align 16
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109540.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 851), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=SETZE_CONSTRAINT_LISTE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 852), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=SETZE_CONSTRAINT_LISTE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2736 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 849), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !185 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest8
  %.elt44 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt44, 0
  %.elt = extractvalue { {}*, i64 } %18, 0
  %G109517.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint20 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %21, i64 3, {}* %G109517.0, {}* %farg2, {}* %farg1, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt48 = extractvalue { {}*, i64 } %22, 1
  %cond42 = icmp eq i64 %.elt48, 0
  %.elt46 = extractvalue { {}*, i64 } %22, 0
  %G109524.0 = select i1 %cond42, {}* %23, {}* %.elt46
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint34 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %25, i64 5, {}* %farg0, {}* %26, {}* %G109524.0, {}* %27, {}* %28)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^690^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !186 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^690^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G109592.0 = phi {}* [ %18, %header-check-br ], [ %G109592.1, %normal-dest26 ], [ %G109592.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 857), align 8
  %ptrtoint43 = ptrtoint {}* %G109592.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G109592.0, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_FAKTOR", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 857), align 8
  %"closure->CWR=HOLE_CONSTRAINT_FAKTOR" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22349, i64 690, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt101 = extractvalue { {}*, i64 } %24, 0
  %.elt103 = extractvalue { {}*, i64 } %24, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109592.1 = select i1 %cond82, {}* %25, {}* %.elt101
  br label %tag4

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 856), align 16
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109592.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 859), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_FAKTOR", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 860), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_FAKTOR", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2760 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 857), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !187 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 854), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* %14, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^694^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !188 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^694^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br59
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G109631.0 = phi {}* [ %18, %header-check-br ], [ %G109631.1, %normal-dest17 ], [ %G109631.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 863), align 8
  %ptrtoint20 = ptrtoint {}* %G109631.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G109631.0, i64 2, {}* %"closure->CWR=HOLE_HEILMITTEL", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 863), align 8
  %"closure->CWR=HOLE_HEILMITTEL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22441, i64 694, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br59

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 862), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109631.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 865), align 8
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->CWR=HOLE_HEILMITTEL", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 866), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->CWR=HOLE_HEILMITTEL", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2776 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 863), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag1

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109631.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !189 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* %14, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^698^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !190 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^698^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G109670.0 = phi {}* [ %18, %header-check-br ], [ %G109670.1, %normal-dest17 ], [ %G109670.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 875), align 8
  %ptrtoint29 = ptrtoint {}* %G109670.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G109670.0, i64 2, {}* %"closure->CWR=HOLE_HEILMITTEL_SORTIERT", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag2, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 875), align 8
  %"closure->CWR=HOLE_HEILMITTEL_SORTIERT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22529, i64 698, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 874), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109670.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag2
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 877), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR=HOLE_HEILMITTEL_SORTIERT", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 878), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR=HOLE_HEILMITTEL_SORTIERT", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 2792 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 875), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109670.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !191 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc51 unwind label %cleanup-lpad

.noexc51:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest29, %normal-dest28, %normal-dest21, %normal-dest12, %normal-dest9, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 732), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 868), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest7
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 2, {}* %farg0, {}* %18, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt39 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt39, 0
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109700.0 = select i1 %cond, {}* %20, {}* %.elt
  %ptrtoint15 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %15, i64 1, {}* %G109700.0, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest12
  %.elt41 = extractvalue { {}*, i64 } %21, 0
  %.elt43 = extractvalue { {}*, i64 } %21, 1
  %cond37 = icmp eq i64 %.elt43, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109689.0 = select i1 %cond37, {}* %22, {}* %.elt41
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 870), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 736), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %26, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.26", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.26^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22529, i64 698, i64 0, i64 0)
          to label %normal-dest29 unwind label %cleanup-lpad

normal-dest29:                                    ; preds = %normal-dest28
  %ptrtoint30 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint31 = add i64 %ptrtoint30, 7
  %entry-point-addr32 = inttoptr i64 %entry-point-addr-uint31 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point33 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr32, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point33({}* %13, i64 4, {}* %G109689.0, {}* %24, {}* %25, {}* %"closure->LAMBDA")
          to label %normal-dest36 unwind label %cleanup-lpad

normal-dest36:                                    ; preds = %normal-dest29
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %27
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.26"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !192 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.26^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.26^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 872), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* %14, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^705^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !193 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^705^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G109724.0 = phi {}* [ %18, %header-check-br ], [ %G109724.1, %normal-dest54 ], [ %G109724.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 882), align 16
  %ptrtoint13 = ptrtoint {}* %G109724.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G109724.0, i64 2, {}* %"closure->CWR=SCHREIBE_HEILMITTEL", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest60 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %tag3, %normal-dest47, %maybe-more-tests81, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 882), align 16
  %"closure->CWR=SCHREIBE_HEILMITTEL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22755, i64 705, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br73

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 884), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=SCHREIBE_HEILMITTEL", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 887), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=SCHREIBE_HEILMITTEL", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2820 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 882), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %maybe-more-tests81
  %ptrtoint48 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt101 = extractvalue { {}*, i64 } %33, 0
  %.elt103 = extractvalue { {}*, i64 } %33, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109724.1 = select i1 %cond82, {}* %34, {}* %.elt101
  br label %tag

normal-dest60:                                    ; preds = %tag3
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 881), align 8
  %ptrtoint61 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %14, i64 5, {}* %35, {}* %36, {}* %18, {}* %37, {}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt = extractvalue { {}*, i64 } %39, 0
  %.elt84 = extractvalue { {}*, i64 } %39, 1
  %cond = icmp eq i64 %.elt84, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109724.2 = select i1 %cond, {}* %40, {}* %.elt
  br label %tag

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag3

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest47 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !194 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 5, {}* %farg0, {}* %17, {}* %farg1, {}* %18, {}* %19)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %20
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^709^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !195 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^709^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G109768.0 = phi {}* [ %18, %header-check-br ], [ %G109768.1, %normal-dest54 ], [ %G109768.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 894), align 16
  %ptrtoint13 = ptrtoint {}* %G109768.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G109768.0, i64 2, {}* %"closure->CWR=NEUES_HEILMITTEL", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest47, %tag1, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 894), align 16
  %"closure->CWR=NEUES_HEILMITTEL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22898, i64 709, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br73

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 896), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=NEUES_HEILMITTEL", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 899), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=NEUES_HEILMITTEL", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2836 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 894), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag1
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 893), align 8
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109768.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109768.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !196 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc168 unwind label %cleanup-lpad.loopexit.split-lp

.noexc168:                                        ; preds = %13
  unreachable

tag14.backedge:                                   ; preds = %normal-dest40, %tag18
  %14 = phi {}* [ %.pre, %tag18 ], [ %47, %normal-dest40 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %35, %tag18 ], [ %"%DOLIST-VAR.1", %normal-dest40 ]
  %15 = icmp eq {}* %"%DOLIST-VAR.0.be", %14
  br i1 %15, label %tag13, label %tag9

tag6:                                             ; preds = %tag9
  %16 = add i64 %23, -3
  %17 = inttoptr i64 %16 to {}**
  %18 = load {}*, {}** %17, align 8
  br label %tag8

tag7:                                             ; preds = %tag17
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest32 unwind label %cleanup-lpad.loopexit

tag8:                                             ; preds = %normal-dest121, %tag6
  %CONSTRAINT.0 = phi {}* [ %18, %tag6 ], [ %CONSTRAINT.1, %normal-dest121 ]
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest46 unwind label %cleanup-lpad.loopexit

tag9:                                             ; preds = %tag9.preheader, %tag14.backedge
  %.val173 = phi {}* [ %14, %tag14.backedge ], [ %40, %tag9.preheader ]
  %"%DOLIST-VAR.0176" = phi {}* [ %"%DOLIST-VAR.0.be", %tag14.backedge ], [ %farg1, %tag9.preheader ]
  %23 = ptrtoint {}* %"%DOLIST-VAR.0176" to i64
  %tag-only105139 = and i64 %23, 7
  %consp-test106 = icmp eq i64 %tag-only105139, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G109840.0 = select i1 %consp-test106, {}* %.val, {}* %.val173
  %24 = icmp eq {}* %G109840.0, %.val173
  br i1 %24, label %tag16, label %tag6

tag13:                                            ; preds = %tag17, %tag14.backedge, %normal-dest28
  %25 = phi {}* [ %farg1, %normal-dest28 ], [ %14, %tag14.backedge ], [ %30, %tag17 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %26 = insertvalue { {}*, i64 } undef, {}* %25, 0
  %27 = insertvalue { {}*, i64 } %26, i64 1, 1
  ret { {}*, i64 } %27

tag16:                                            ; preds = %tag9
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest114 unwind label %cleanup-lpad.loopexit

tag17:                                            ; preds = %normal-dest95
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %31 = icmp eq {}* %"%DOLIST-VAR.0176", %30
  %.val174 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G109799.0 = select i1 %31, {}* %.val174, {}* %30
  %32 = icmp eq {}* %G109799.0, %30
  br i1 %32, label %tag7, label %tag13

tag18:                                            ; preds = %normal-dest95
  %33 = add i64 %23, 5
  %34 = inttoptr i64 %33 to {}**
  %35 = load {}*, {}** %34, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag14.backedge

cleanup-lpad.loopexit:                            ; preds = %tag7, %normal-dest32, %tag8, %normal-dest46, %normal-dest48, %normal-dest50, %normal-dest57, %normal-dest64, %normal-dest71, %normal-dest83, %tag16, %normal-dest114
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest25, %10, %13
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 889), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest25 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest25:                                    ; preds = %normal-dest
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint = ptrtoint {}* %37 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %37, i64 2, {}* %farg0, {}* %38, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest28:                                    ; preds = %normal-dest25
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %41 = icmp eq {}* %40, %farg1
  br i1 %41, label %tag13, label %tag9.preheader

tag9.preheader:                                   ; preds = %normal-dest28
  br label %tag9

normal-dest32:                                    ; preds = %tag7
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint34 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %20, i64 5, {}* %42, {}* %43, {}* %"%DOLIST-VAR.0176", {}* %44, {}* %45)
          to label %normal-dest40 unwind label %cleanup-lpad.loopexit

normal-dest40:                                    ; preds = %normal-dest32
  %.elt158 = extractvalue { {}*, i64 } %46, 0
  %.elt160 = extractvalue { {}*, i64 } %46, 1
  %cond135 = icmp eq i64 %.elt160, 0
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond135, {}* %47, {}* %.elt158
  br label %tag14.backedge

normal-dest46:                                    ; preds = %tag8
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 891), align 8
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest48 unwind label %cleanup-lpad.loopexit

normal-dest48:                                    ; preds = %normal-dest46
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest50 unwind label %cleanup-lpad.loopexit

normal-dest50:                                    ; preds = %normal-dest48
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint51 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint52 = add i64 %ptrtoint51, 7
  %entry-point-addr53 = inttoptr i64 %entry-point-addr-uint52 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point54 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr53, align 8
  %54 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point54({}* %52, i64 2, {}* %CONSTRAINT.0, {}* %53, {}* null, {}* null)
          to label %normal-dest57 unwind label %cleanup-lpad.loopexit

normal-dest57:                                    ; preds = %normal-dest50
  %.elt141 = extractvalue { {}*, i64 } %54, 0
  %.elt143 = extractvalue { {}*, i64 } %54, 1
  %cond = icmp eq i64 %.elt143, 0
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109813.0 = select i1 %cond, {}* %55, {}* %.elt141
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest64 unwind label %cleanup-lpad.loopexit

normal-dest64:                                    ; preds = %normal-dest57
  %ptrtoint65 = ptrtoint {}* %57 to i64
  %entry-point-addr-uint66 = add i64 %ptrtoint65, 7
  %entry-point-addr67 = inttoptr i64 %entry-point-addr-uint66 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point68 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr67, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point68({}* %57, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest71 unwind label %cleanup-lpad.loopexit

normal-dest71:                                    ; preds = %normal-dest64
  %.elt145 = extractvalue { {}*, i64 } %58, 0
  %.elt147 = extractvalue { {}*, i64 } %58, 1
  %cond133 = icmp eq i64 %.elt147, 0
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109814.0 = select i1 %cond133, {}* %59, {}* %.elt145
  %ptrtoint77 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint78 = add i64 %ptrtoint77, 7
  %entry-point-addr79 = inttoptr i64 %entry-point-addr-uint78 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point80 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr79, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point80({}* %50, i64 2, {}* %G109813.0, {}* %G109814.0, {}* null, {}* null)
          to label %normal-dest83 unwind label %cleanup-lpad.loopexit

normal-dest83:                                    ; preds = %normal-dest71
  %.elt149 = extractvalue { {}*, i64 } %60, 0
  %.elt151 = extractvalue { {}*, i64 } %60, 1
  %cond134 = icmp eq i64 %.elt151, 0
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109809.0 = select i1 %cond134, {}* %61, {}* %.elt149
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint89 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint90 = add i64 %ptrtoint89, 7
  %entry-point-addr91 = inttoptr i64 %entry-point-addr-uint90 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point92 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr91, align 8
  %64 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point92({}* %22, i64 5, {}* %CONSTRAINT.0, {}* %48, {}* %G109809.0, {}* %62, {}* %63)
          to label %normal-dest95 unwind label %cleanup-lpad.loopexit

normal-dest95:                                    ; preds = %normal-dest83
  br i1 %consp-test106, label %tag18, label %tag17

normal-dest114:                                   ; preds = %tag16
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %67 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint115 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint116 = add i64 %ptrtoint115, 7
  %entry-point-addr117 = inttoptr i64 %entry-point-addr-uint116 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point118 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr117, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point118({}* %29, i64 5, {}* %65, {}* %66, {}* %"%DOLIST-VAR.0176", {}* %67, {}* %68)
          to label %normal-dest121 unwind label %cleanup-lpad.loopexit

normal-dest121:                                   ; preds = %normal-dest114
  %.elt162 = extractvalue { {}*, i64 } %69, 0
  %.elt164 = extractvalue { {}*, i64 } %69, 1
  %cond136 = icmp eq i64 %.elt164, 0
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %CONSTRAINT.1 = select i1 %cond136, {}* %70, {}* %.elt162
  br label %tag8
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^721^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !197 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^721^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G109865.0 = phi {}* [ %18, %header-check-br ], [ %G109865.1, %normal-dest26 ], [ %G109865.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 760), align 16
  %ptrtoint43 = ptrtoint {}* %G109865.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G109865.0, i64 2, {}* %"closure->CWR=HOLE_UEBERWACHUNG", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 760), align 16
  %"closure->CWR=HOLE_UEBERWACHUNG" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23331, i64 721, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 901), align 8
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt84 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt84, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109865.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109865.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 902), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=HOLE_UEBERWACHUNG", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 903), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=HOLE_UEBERWACHUNG", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2884 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 760), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !198 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 548), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 96), align 16
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 2, {}* %farg0, {}* %19, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %20, 0
  %.elt21 = extractvalue { {}*, i64 } %20, 1
  %cond = icmp eq i64 %.elt21, 0
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109884.0 = select i1 %cond, {}* %21, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %16, i64 2, {}* %G109884.0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %22
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^725^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !199 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^725^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G109916.0 = phi {}* [ %18, %header-check-br ], [ %G109916.1, %normal-dest17 ], [ %G109916.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 906), align 16
  %ptrtoint29 = ptrtoint {}* %G109916.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G109916.0, i64 2, {}* %"closure->CWR=SETZE_UEBERWACHUNG", {}* %11, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br20
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 906), align 16
  %"closure->CWR=SETZE_UEBERWACHUNG" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23431, i64 725, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109916.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag4

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 908), align 16
  %ptrtoint42 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %27, i64 2, {}* %"closure->CWR=SETZE_UEBERWACHUNG", {}* %28, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 909), align 8
  %ptrtoint55 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %31, i64 2, {}* %"closure->CWR=SETZE_UEBERWACHUNG", {}* %32, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %34, {}* inttoptr (i64 2900 to {}*))
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 906), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %36 = insertvalue { {}*, i64 } undef, {}* %35, 0
  %37 = insertvalue { {}*, i64 } %36, i64 1, 1
  ret { {}*, i64 } %37

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 905), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109916.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !200 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest8, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 96), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %17, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 556), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest8
  %.elt44 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt44, 0
  %.elt = extractvalue { {}*, i64 } %18, 0
  %G109893.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint20 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %21, i64 3, {}* %G109893.0, {}* %farg2, {}* %farg1, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 234), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt48 = extractvalue { {}*, i64 } %22, 1
  %cond42 = icmp eq i64 %.elt48, 0
  %.elt46 = extractvalue { {}*, i64 } %22, 0
  %G109900.0 = select i1 %cond42, {}* %23, {}* %.elt46
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 96), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 224), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint34 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %25, i64 5, {}* %farg0, {}* %26, {}* %G109900.0, {}* %27, {}* %28)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^731^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !201 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^731^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G109968.0 = phi {}* [ %18, %header-check-br ], [ %G109968.1, %normal-dest17 ], [ %G109968.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 914), align 16
  %ptrtoint43 = ptrtoint {}* %G109968.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G109968.0, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_BEWERTUNG", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests28, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 914), align 16
  %"closure->CWR=HOLE_CONSTRAINT_BEWERTUNG" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23643, i64 731, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 913), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109968.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %maybe-more-tests28
  %ptrtoint31 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G109968.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 916), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_BEWERTUNG", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 917), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=HOLE_CONSTRAINT_BEWERTUNG", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2940 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 914), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !202 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 911), align 8
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* %14, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^739^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !203 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^739^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G110007.0 = phi {}* [ %18, %header-check-br ], [ %G110007.1, %normal-dest63 ], [ %G110007.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 922), align 16
  %ptrtoint22 = ptrtoint {}* %G110007.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110007.0, i64 2, {}* %"closure->CWR=CONSTRAINT_ERZEUGEN", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests21, %normal-dest56, %tag3, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 922), align 16
  %"closure->CWR=CONSTRAINT_ERZEUGEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23765, i64 739, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 924), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR=CONSTRAINT_ERZEUGEN", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 925), align 8
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR=CONSTRAINT_ERZEUGEN", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 2956 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 922), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %tag3
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 921), align 8
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110007.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag2

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110007.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !204 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 919), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %farg0, {}* %farg1, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %17
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^745^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !205 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^745^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest67, %normal-dest17, %header-check-br
  %G110046.0 = phi {}* [ %18, %header-check-br ], [ %G110046.1, %normal-dest17 ], [ %G110046.2, %normal-dest67 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 928), align 16
  %ptrtoint20 = ptrtoint {}* %G110046.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G110046.0, i64 2, {}* %"closure->CWR=CONSTRAINT_FREIGEBEN", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 928), align 16
  %"closure->CWR=CONSTRAINT_FREIGEBEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23880, i64 745, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br73

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 927), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110046.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 930), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->CWR=CONSTRAINT_FREIGEBEN", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 931), align 8
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->CWR=CONSTRAINT_FREIGEBEN", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2980 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 928), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110046.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag2

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !206 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc9 unwind label %cleanup-lpad

.noexc9:                                          ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^748^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !207 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^748^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest67, %normal-dest54, %header-check-br
  %G110082.0 = phi {}* [ %18, %header-check-br ], [ %G110082.1, %normal-dest54 ], [ %G110082.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 934), align 16
  %ptrtoint13 = ptrtoint {}* %G110082.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110082.0, i64 2, {}* %"closure->CWR=CONSTRAINTS_FREIGEBEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %maybe-more-tests81, %normal-dest47, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 934), align 16
  %"closure->CWR=CONSTRAINTS_FREIGEBEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23962, i64 748, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br73

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 936), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=CONSTRAINTS_FREIGEBEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 939), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=CONSTRAINTS_FREIGEBEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2992 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 934), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag2
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 933), align 8
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110082.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag1

normal-dest60:                                    ; preds = %maybe-more-tests81
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt101 = extractvalue { {}*, i64 } %39, 0
  %.elt103 = extractvalue { {}*, i64 } %39, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110082.2 = select i1 %cond82, {}* %40, {}* %.elt101
  br label %tag1

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag2

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !208 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc9 unwind label %cleanup-lpad

.noexc9:                                          ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %12, 0
  %14 = insertvalue { {}*, i64 } %13, i64 1, 1
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^751^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !209 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^751^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest67, %normal-dest17, %header-check-br
  %G110118.0 = phi {}* [ %18, %header-check-br ], [ %G110118.1, %normal-dest17 ], [ %G110118.2, %normal-dest67 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  %ptrtoint20 = ptrtoint {}* %G110118.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G110118.0, i64 2, {}* %"closure->CWR=CONSTRAINT-CONSTRAINT", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br73
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest60 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest60, %tag3, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %maybe-more-tests81, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  %"closure->CWR=CONSTRAINT-CONSTRAINT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24047, i64 751, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br73

normal-dest13:                                    ; preds = %maybe-more-tests81
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110118.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 946), align 16
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->CWR=CONSTRAINT-CONSTRAINT", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 947), align 8
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->CWR=CONSTRAINT-CONSTRAINT", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %31, {}* inttoptr (i64 3004 to {}*))
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %33 = insertvalue { {}*, i64 } undef, {}* %32, 0
  %34 = insertvalue { {}*, i64 } %33, i64 1, 1
  ret { {}*, i64 } %34

normal-dest60:                                    ; preds = %tag3
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 943), align 8
  %ptrtoint61 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %14, i64 5, {}* %35, {}* %36, {}* %18, {}* %37, {}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt = extractvalue { {}*, i64 } %39, 0
  %.elt84 = extractvalue { {}*, i64 } %39, 1
  %cond = icmp eq i64 %.elt84, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110118.2 = select i1 %cond, {}* %40, {}* %.elt
  br label %tag1

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag3

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !210 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc85 unwind label %cleanup-lpad

.noexc85:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest40
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest47 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest40
  %ptrtoint55 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %13 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %16, i64 2, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %tag5, %normal-dest47, %tag1, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest15, %normal-dest12, %normal-dest10, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %entry
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest10
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest12
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt65 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt65, 0
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110142.0 = select i1 %cond, {}* %20, {}* %.elt
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 950), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest15
  %ptrtoint20 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %23, i64 1, {}* %21, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt69 = extractvalue { {}*, i64 } %24, 1
  %cond62 = icmp eq i64 %.elt69, 0
  %.elt67 = extractvalue { {}*, i64 } %24, 0
  %G110143.0 = select i1 %cond62, {}* %25, {}* %.elt67
  %ptrtoint34 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %27, i64 2, {}* %G110142.0, {}* %G110143.0, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt71 = extractvalue { {}*, i64 } %28, 0
  %.elt73 = extractvalue { {}*, i64 } %28, 1
  %cond63 = icmp eq i64 %.elt73, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110146.0 = select i1 %cond63, {}* %29, {}* %.elt71
  %30 = icmp eq {}* %G110146.0, %29
  br i1 %30, label %tag1, label %tag5

normal-dest47:                                    ; preds = %tag1
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 956), align 16
  %ptrtoint48 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %12, i64 5, {}* %31, {}* %32, {}* %farg0, {}* %33, {}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  call void @unreachableError()
  unreachable

normal-dest61:                                    ; preds = %tag5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %13
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^754^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !211 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^754^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G110176.0 = phi {}* [ %18, %header-check-br ], [ %G110176.1, %normal-dest63 ], [ %G110176.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  %ptrtoint13 = ptrtoint {}* %G110176.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110176.0, i64 2, {}* %"closure->CWR=CONSTRAINT-OBJEKT", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests54, %normal-dest56, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  %"closure->CWR=CONSTRAINT-OBJEKT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24143, i64 754, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br46

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 964), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=CONSTRAINT-OBJEKT", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 965), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=CONSTRAINT-OBJEKT", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 3016 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag2

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %tag2
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 961), align 8
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110176.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag

normal-dest69:                                    ; preds = %maybe-more-tests54
  %ptrtoint70 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110176.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !212 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc85 unwind label %cleanup-lpad

.noexc85:                                         ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest40
  %ptrtoint46 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %11 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %16, i64 2, {}* %farg0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest40
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest54 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest54, %tag2, %tag, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest15, %normal-dest12, %normal-dest10, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %entry
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest10
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest12
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt65 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt65, 0
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110200.0 = select i1 %cond, {}* %20, {}* %.elt
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 950), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest15
  %ptrtoint20 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %23, i64 1, {}* %21, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %.elt69 = extractvalue { {}*, i64 } %24, 1
  %cond62 = icmp eq i64 %.elt69, 0
  %.elt67 = extractvalue { {}*, i64 } %24, 0
  %G110201.0 = select i1 %cond62, {}* %25, {}* %.elt67
  %ptrtoint34 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %27, i64 2, {}* %G110200.0, {}* %G110201.0, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt71 = extractvalue { {}*, i64 } %28, 0
  %.elt73 = extractvalue { {}*, i64 } %28, 1
  %cond63 = icmp eq i64 %.elt73, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110204.0 = select i1 %cond63, {}* %29, {}* %.elt71
  %30 = icmp eq {}* %G110204.0, %29
  br i1 %30, label %tag2, label %tag

normal-dest52:                                    ; preds = %tag
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %11

normal-dest54:                                    ; preds = %tag2
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 966), align 16
  %ptrtoint55 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %13, i64 5, {}* %31, {}* %32, {}* %farg0, {}* %33, {}* %34)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  call void @unreachableError()
  unreachable
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^757^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !213 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^757^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G110234.0 = phi {}* [ %18, %header-check-br ], [ %G110234.1, %normal-dest54 ], [ %G110234.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 970), align 16
  %ptrtoint13 = ptrtoint {}* %G110234.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110234.0, i64 2, {}* %"closure->CWR=TESTCONSTRAINT-EQUAL", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest47, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 970), align 16
  %"closure->CWR=TESTCONSTRAINT-EQUAL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24231, i64 757, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 972), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=TESTCONSTRAINT-EQUAL", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 977), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=TESTCONSTRAINT-EQUAL", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 3028 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 970), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag2
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 969), align 8
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110234.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag2

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110234.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !214 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc91 unwind label %cleanup-lpad

.noexc91:                                         ; preds = %13
  unreachable

tag:                                              ; preds = %normal-dest26
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest33 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest55, %normal-dest26
  %.sink96 = phi {}* [ %26, %normal-dest26 ], [ %.sink96.pre, %normal-dest55 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %16 = insertvalue { {}*, i64 } undef, {}* %.sink96, 0
  %17 = insertvalue { {}*, i64 } %16, i64 1, 1
  ret { {}*, i64 } %17

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest48, %normal-dest40, %normal-dest33, %tag, %normal-dest19, %normal-dest15, %normal-dest12, %normal-dest
  %18 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %18

normal-dest:                                      ; preds = %11
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest12
  %.elt = extractvalue { {}*, i64 } %21, 0
  %.elt74 = extractvalue { {}*, i64 } %21, 1
  %cond = icmp eq i64 %.elt74, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x.0 = select i1 %cond, {}* %22, {}* %.elt
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest15
  %ptrtoint20 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %24, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %.elt76 = extractvalue { {}*, i64 } %25, 0
  %.elt78 = extractvalue { {}*, i64 } %25, 1
  %cond70 = icmp eq i64 %.elt78, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y.0 = select i1 %cond70, {}* %26, {}* %.elt76
  %27 = icmp eq {}* %x.0, %y.0
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110264.0 = select i1 %27, {}* %.val, {}* %26
  %28 = icmp eq {}* %G110264.0, %26
  br i1 %28, label %tag3, label %tag

normal-dest33:                                    ; preds = %tag
  %ptrtoint34 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %15, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt80 = extractvalue { {}*, i64 } %29, 0
  %.elt82 = extractvalue { {}*, i64 } %29, 1
  %cond71 = icmp eq i64 %.elt82, 0
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x41.0 = select i1 %cond71, {}* %30, {}* %.elt80
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest40
  %ptrtoint49 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint50 = add i64 %ptrtoint49, 7
  %entry-point-addr51 = inttoptr i64 %entry-point-addr-uint50 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point52 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr51, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point52({}* %32, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest48
  %.elt84 = extractvalue { {}*, i64 } %33, 0
  %.elt86 = extractvalue { {}*, i64 } %33, 1
  %cond72 = icmp eq i64 %.elt86, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y56.0 = select i1 %cond72, {}* %34, {}* %.elt84
  %35 = icmp eq {}* %x41.0, %y56.0
  %.val98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %.sink96.pre = select i1 %35, {}* %.val98, {}* %34
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^761^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !215 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^761^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G110292.0 = phi {}* [ %18, %header-check-br ], [ %G110292.1, %normal-dest17 ], [ %G110292.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 984), align 16
  %ptrtoint29 = ptrtoint {}* %G110292.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G110292.0, i64 2, {}* %"closure->CWR=CONSTRAINTSAGENDA_LOESCHEN", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 984), align 16
  %"closure->CWR=CONSTRAINTSAGENDA_LOESCHEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24470, i64 761, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 983), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110292.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag1

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR=CONSTRAINTSAGENDA_LOESCHEN", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 986), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR=CONSTRAINTSAGENDA_LOESCHEN", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 3044 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 984), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110292.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !216 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest25, %normal-dest19, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 934), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 979), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 1, {}* %16, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt34 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt34, 0
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110314.0 = select i1 %cond, {}* %18, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %13, i64 1, {}* %G110314.0, {}* null, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 981), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest19
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint26 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint27 = add i64 %ptrtoint26, 7
  %entry-point-addr28 = inttoptr i64 %entry-point-addr-uint27 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point29 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr28, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point29({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest25
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^766^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !217 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^766^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G110336.0 = phi {}* [ %18, %header-check-br ], [ %G110336.1, %normal-dest17 ], [ %G110336.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 990), align 16
  %ptrtoint43 = ptrtoint {}* %G110336.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G110336.0, i64 2, {}* %"closure->CWR=TESTCONSTRAINT_VERMERKEN", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag2, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 990), align 16
  %"closure->CWR=TESTCONSTRAINT_VERMERKEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24612, i64 766, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110336.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag2

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag2
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 989), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110336.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 992), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=TESTCONSTRAINT_VERMERKEN", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 995), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=TESTCONSTRAINT_VERMERKEN", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 3064 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 990), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !218 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc16 unwind label %cleanup-lpad

.noexc16:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 987), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 970), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 3, {}* %14, {}* %farg0, {}* %16, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %17
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^770^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !219 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^770^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br73
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G110379.0 = phi {}* [ %18, %header-check-br ], [ %G110379.1, %normal-dest17 ], [ %G110379.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 998), align 16
  %ptrtoint34 = ptrtoint {}* %G110379.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G110379.0, i64 2, {}* %"closure->CWR=TESTCONSTRAINTS_VERMERKEN", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag3, %normal-dest21, %tag1, %normal-dest13, %maybe-more-tests81, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 998), align 16
  %"closure->CWR=TESTCONSTRAINTS_VERMERKEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24762, i64 770, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br73

normal-dest13:                                    ; preds = %maybe-more-tests81
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110379.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag3

normal-dest21:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 997), align 8
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt84 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt84, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110379.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag3

normal-dest40:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1000), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->CWR=TESTCONSTRAINTS_VERMERKEN", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1003), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->CWR=TESTCONSTRAINTS_VERMERKEN", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 3080 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 998), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br73:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %41 = icmp ult i64 %.off106, 5
  br i1 %41, label %maybe-more-tests81, label %tag1

maybe-more-tests81:                               ; preds = %header-check-br73
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !220 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc94 unwind label %cleanup-lpad.loopexit.split-lp

.noexc94:                                         ; preds = %10
  unreachable

tag:                                              ; preds = %tag9
  %11 = add i64 %23, -3
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8
  br label %tag7

tag3:                                             ; preds = %normal-dest40
  %14 = add i64 %23, 5
  %15 = inttoptr i64 %14 to {}**
  %16 = load {}*, {}** %15, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag18.backedge

tag18.backedge:                                   ; preds = %tag3, %normal-dest72
  %17 = phi {}* [ %.pre, %tag3 ], [ %47, %normal-dest72 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %16, %tag3 ], [ %"%DOLIST-VAR.1", %normal-dest72 ]
  %18 = icmp eq {}* %"%DOLIST-VAR.0.be", %17
  br i1 %18, label %tag11, label %tag9

tag6:                                             ; preds = %tag9
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest26 unwind label %cleanup-lpad.loopexit

tag7:                                             ; preds = %normal-dest29, %tag
  %C.0 = phi {}* [ %13, %tag ], [ %C.1, %normal-dest29 ]
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 990), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest33 unwind label %cleanup-lpad.loopexit

tag9:                                             ; preds = %tag9.preheader, %tag18.backedge
  %.val96 = phi {}* [ %17, %tag18.backedge ], [ %33, %tag9.preheader ]
  %"%DOLIST-VAR.099" = phi {}* [ %"%DOLIST-VAR.0.be", %tag18.backedge ], [ %farg0, %tag9.preheader ]
  %23 = ptrtoint {}* %"%DOLIST-VAR.099" to i64
  %tag-only5079 = and i64 %23, 7
  %consp-test51 = icmp eq i64 %tag-only5079, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110436.0 = select i1 %consp-test51, {}* %.val, {}* %.val96
  %24 = icmp eq {}* %G110436.0, %.val96
  br i1 %24, label %tag6, label %tag

tag11:                                            ; preds = %tag16, %tag18.backedge, %normal-dest
  %25 = phi {}* [ %farg0, %normal-dest ], [ %17, %tag18.backedge ], [ %28, %tag16 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %26 = insertvalue { {}*, i64 } undef, {}* %25, 0
  %27 = insertvalue { {}*, i64 } %26, i64 1, 1
  ret { {}*, i64 } %27

tag16:                                            ; preds = %normal-dest40
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %29 = icmp eq {}* %"%DOLIST-VAR.099", %28
  %.val97 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110410.0 = select i1 %29, {}* %.val97, {}* %28
  %30 = icmp eq {}* %G110410.0, %28
  br i1 %30, label %tag17, label %tag11

tag17:                                            ; preds = %tag16
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest65 unwind label %cleanup-lpad.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag6, %normal-dest26, %tag7, %normal-dest33, %tag17, %normal-dest65
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %34 = icmp eq {}* %33, %farg0
  br i1 %34, label %tag11, label %tag9.preheader

tag9.preheader:                                   ; preds = %normal-dest
  br label %tag9

normal-dest26:                                    ; preds = %tag6
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 5, {}* %35, {}* %36, {}* %"%DOLIST-VAR.099", {}* %37, {}* %38)
          to label %normal-dest29 unwind label %cleanup-lpad.loopexit

normal-dest29:                                    ; preds = %normal-dest26
  %.elt88 = extractvalue { {}*, i64 } %39, 0
  %.elt90 = extractvalue { {}*, i64 } %39, 1
  %cond78 = icmp eq i64 %.elt90, 0
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %C.1 = select i1 %cond78, {}* %40, {}* %.elt88
  br label %tag7

normal-dest33:                                    ; preds = %tag7
  %ptrtoint34 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %22, i64 1, {}* %C.0, {}* null, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad.loopexit

normal-dest40:                                    ; preds = %normal-dest33
  br i1 %consp-test51, label %tag3, label %tag16

normal-dest65:                                    ; preds = %tag17
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint66 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint67 = add i64 %ptrtoint66, 7
  %entry-point-addr68 = inttoptr i64 %entry-point-addr-uint67 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point69 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr68, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point69({}* %32, i64 5, {}* %42, {}* %43, {}* %"%DOLIST-VAR.099", {}* %44, {}* %45)
          to label %normal-dest72 unwind label %cleanup-lpad.loopexit

normal-dest72:                                    ; preds = %normal-dest65
  %.elt84 = extractvalue { {}*, i64 } %46, 0
  %.elt86 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt86, 0
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %47, {}* %.elt84
  br label %tag18.backedge
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^775^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !221 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^775^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G110459.0 = phi {}* [ %18, %header-check-br ], [ %G110459.1, %normal-dest54 ], [ %G110459.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1006), align 16
  %ptrtoint13 = ptrtoint {}* %G110459.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110459.0, i64 2, {}* %"closure->CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest47 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest47, %tag1, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1006), align 16
  %"closure->CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24895, i64 775, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1008), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1009), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 3100 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1006), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %tag1
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1005), align 8
  %ptrtoint48 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %14, i64 5, {}* %33, {}* %34, {}* %18, {}* %35, {}* %36)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt = extractvalue { {}*, i64 } %37, 0
  %.elt84 = extractvalue { {}*, i64 } %37, 1
  %cond = icmp eq i64 %.elt84, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110459.1 = select i1 %cond, {}* %38, {}* %.elt
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag1

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110459.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !222 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc122 unwind label %cleanup-lpad.loopexit.split-lp

.noexc122:                                        ; preds = %10
  unreachable

tag2:                                             ; preds = %tag2.preheader, %tag3.backedge
  %.val126 = phi {}* [ %23, %tag3.backedge ], [ %35, %tag2.preheader ]
  %"%DOLIST-VAR.0130" = phi {}* [ %"%DOLIST-VAR.0.be", %tag3.backedge ], [ %"%DOLIST-VAR.1", %tag2.preheader ]
  %11 = ptrtoint {}* %"%DOLIST-VAR.0130" to i64
  %tag-only103 = and i64 %11, 7
  %consp-test = icmp eq i64 %tag-only103, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110520.0 = select i1 %consp-test, {}* %.val, {}* %.val126
  %12 = icmp eq {}* %G110520.0, %.val126
  br i1 %12, label %tag18, label %tag5

tag5:                                             ; preds = %tag2
  %13 = add i64 %11, -3
  %14 = inttoptr i64 %13 to {}**
  %15 = load {}*, {}** %14, align 8
  br label %tag9

tag7:                                             ; preds = %tag12
  %16 = icmp eq {}* %"%DOLIST-VAR.0130", %38
  %.val128 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110490.0 = select i1 %16, {}* %.val128, {}* %38
  %17 = icmp eq {}* %G110490.0, %38
  br i1 %17, label %tag21, label %tag14.loopexit

tag9:                                             ; preds = %normal-dest76, %tag5
  %C.0 = phi {}* [ %15, %tag5 ], [ %C.1, %normal-dest76 ]
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 970), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest50 unwind label %cleanup-lpad.loopexit

tag11:                                            ; preds = %tag12
  %20 = add i64 %11, 5
  %21 = inttoptr i64 %20 to {}**
  %22 = load {}*, {}** %21, align 8
  br label %tag3.backedge

tag3.backedge:                                    ; preds = %tag11, %normal-dest92
  %23 = phi {}* [ %38, %tag11 ], [ %51, %normal-dest92 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %22, %tag11 ], [ %"%DOLIST-VAR.2", %normal-dest92 ]
  %24 = icmp eq {}* %"%DOLIST-VAR.0.be", %23
  br i1 %24, label %tag14.loopexit, label %tag2

tag12:                                            ; preds = %normal-dest57
  br i1 %consp-test, label %tag11, label %tag7

tag14.loopexit:                                   ; preds = %tag7, %tag3.backedge, %normal-dest57
  %.ph = phi {}** [ getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), %normal-dest57 ], [ getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), %tag3.backedge ], [ getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), %tag7 ]
  %.sink127.pre = load {}*, {}** %.ph, align 8
  br label %tag14

tag14:                                            ; preds = %tag14.loopexit, %normal-dest31
  %.sink127 = phi {}* [ %35, %normal-dest31 ], [ %.sink127.pre, %tag14.loopexit ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %25 = insertvalue { {}*, i64 } undef, {}* %.sink127, 0
  %26 = insertvalue { {}*, i64 } %25, i64 1, 1
  ret { {}*, i64 } %26

tag18:                                            ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest69 unwind label %cleanup-lpad.loopexit

tag21:                                            ; preds = %tag7
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest85 unwind label %cleanup-lpad.loopexit

cleanup-lpad.loopexit:                            ; preds = %tag9, %normal-dest50, %tag18, %normal-dest69, %tag21, %normal-dest85
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest28, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 979), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest28 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest28:                                    ; preds = %normal-dest
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %32 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %32, i64 1, {}* %33, {}* null, {}* null, {}* null)
          to label %normal-dest31 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest31:                                    ; preds = %normal-dest28
  %.elt = extractvalue { {}*, i64 } %34, 0
  %.elt102 = extractvalue { {}*, i64 } %34, 1
  %cond = icmp eq i64 %.elt102, 0
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %35, {}* %.elt
  %36 = icmp eq {}* %"%DOLIST-VAR.1", %35
  br i1 %36, label %tag14, label %tag2.preheader

tag2.preheader:                                   ; preds = %normal-dest31
  br label %tag2

normal-dest50:                                    ; preds = %tag9
  %ptrtoint51 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint52 = add i64 %ptrtoint51, 7
  %entry-point-addr53 = inttoptr i64 %entry-point-addr-uint52 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point54 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr53, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point54({}* %19, i64 2, {}* %C.0, {}* %farg0, {}* null, {}* null)
          to label %normal-dest57 unwind label %cleanup-lpad.loopexit

normal-dest57:                                    ; preds = %normal-dest50
  %.elt105 = extractvalue { {}*, i64 } %37, 0
  %.elt107 = extractvalue { {}*, i64 } %37, 1
  %cond98 = icmp eq i64 %.elt107, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110498.0 = select i1 %cond98, {}* %38, {}* %.elt105
  %39 = icmp eq {}* %G110498.0, %38
  br i1 %39, label %tag12, label %tag14.loopexit

normal-dest69:                                    ; preds = %tag18
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint70 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %44 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %28, i64 5, {}* %40, {}* %41, {}* %"%DOLIST-VAR.0130", {}* %42, {}* %43)
          to label %normal-dest76 unwind label %cleanup-lpad.loopexit

normal-dest76:                                    ; preds = %normal-dest69
  %.elt117 = extractvalue { {}*, i64 } %44, 0
  %.elt119 = extractvalue { {}*, i64 } %44, 1
  %cond100 = icmp eq i64 %.elt119, 0
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %C.1 = select i1 %cond100, {}* %45, {}* %.elt117
  br label %tag9

normal-dest85:                                    ; preds = %tag21
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint86 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint87 = add i64 %ptrtoint86, 7
  %entry-point-addr88 = inttoptr i64 %entry-point-addr-uint87 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point89 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr88, align 8
  %50 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point89({}* %30, i64 5, {}* %46, {}* %47, {}* %"%DOLIST-VAR.0130", {}* %48, {}* %49)
          to label %normal-dest92 unwind label %cleanup-lpad.loopexit

normal-dest92:                                    ; preds = %normal-dest85
  %.elt113 = extractvalue { {}*, i64 } %50, 0
  %.elt115 = extractvalue { {}*, i64 } %50, 1
  %cond99 = icmp eq i64 %.elt115, 0
  %51 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond99, {}* %51, {}* %.elt113
  br label %tag3.backedge
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^780^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !223 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^780^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G110544.0 = phi {}* [ %18, %header-check-br ], [ %G110544.1, %normal-dest63 ], [ %G110544.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1016), align 16
  %ptrtoint13 = ptrtoint {}* %G110544.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110544.0, i64 2, {}* %"closure->CWR=CONSTRAINTSAGENDA_INITIALISIEREN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests54, %normal-dest56, %tag2, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1016), align 16
  %"closure->CWR=CONSTRAINTSAGENDA_INITIALISIEREN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 25071, i64 780, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br46

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->CWR=CONSTRAINTSAGENDA_INITIALISIEREN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1018), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->CWR=CONSTRAINTSAGENDA_INITIALISIEREN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 3120 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1016), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag2

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %tag2
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1015), align 8
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110544.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag

normal-dest69:                                    ; preds = %maybe-more-tests54
  %ptrtoint70 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110544.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !224 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest12
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 979), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest16 unwind label %cleanup-lpad

tag2:                                             ; preds = %tag4
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 984), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest30 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest12, %normal-dest30, %tag4
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1013), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest43 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest16
  %.elt55 = extractvalue { {}*, i64 } %27, 0
  %.elt57 = extractvalue { {}*, i64 } %27, 1
  %cond51 = icmp eq i64 %.elt57, 0
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110567.1 = select i1 %cond51, {}* %17, {}* %.elt55
  %18 = icmp eq {}* %G110567.1, %17
  br i1 %18, label %tag3, label %tag2

cleanup-lpad:                                     ; preds = %10, %normal-dest43, %tag3, %normal-dest30, %tag2, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %19 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %19

normal-dest:                                      ; preds = %entry
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1011), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %21 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %21, i64 1, {}* %22, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %23, 0
  %.elt53 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt53, 0
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110572.0 = select i1 %cond, {}* %24, {}* %.elt
  %25 = icmp eq {}* %G110572.0, %24
  br i1 %25, label %tag3, label %tag1

normal-dest16:                                    ; preds = %tag1
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint17 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %12, i64 1, {}* %26, {}* null, {}* null, {}* null)
          to label %tag4 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag2
  %ptrtoint31 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %14, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %tag3 unwind label %cleanup-lpad

normal-dest43:                                    ; preds = %tag3
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint44 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint45 = add i64 %ptrtoint44, 7
  %entry-point-addr46 = inttoptr i64 %entry-point-addr-uint45 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point47 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr46, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point47({}* %16, i64 1, {}* %29, {}* null, {}* null, {}* null)
          to label %normal-dest50 unwind label %cleanup-lpad

normal-dest50:                                    ; preds = %normal-dest43
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %30
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^786^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !225 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^786^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br59
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G110600.0 = phi {}* [ %18, %header-check-br ], [ %G110600.1, %normal-dest17 ], [ %G110600.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1026), align 16
  %ptrtoint20 = ptrtoint {}* %G110600.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G110600.0, i64 2, {}* %"closure->CWR=CONSTRAINTS_ABARBEITEN", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests67, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1026), align 16
  %"closure->CWR=CONSTRAINTS_ABARBEITEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 25263, i64 786, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br59

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1025), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110600.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->CWR=CONSTRAINTS_ABARBEITEN", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1028), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->CWR=CONSTRAINTS_ABARBEITEN", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 3144 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1026), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %39 = icmp ult i64 %.off106, 5
  br i1 %39, label %maybe-more-tests67, label %tag1

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110600.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !226 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %tag4.preheader, label %10

tag4.preheader:                                   ; preds = %entry
  br label %tag4

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %tag27
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest34 unwind label %cleanup-lpad.loopexit

tag4:                                             ; preds = %tag4.preheader, %normal-dest200
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1023), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest48 unwind label %cleanup-lpad.loopexit

tag7:                                             ; preds = %normal-dest265, %normal-dest37, %tag27
  %G110583.0 = phi {}* [ %30, %tag27 ], [ %G110583.1, %normal-dest37 ], [ %G110583.2, %normal-dest265 ]
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1019), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest65 unwind label %cleanup-lpad.loopexit

tag8:                                             ; preds = %normal-dest55
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %17 = insertvalue { {}*, i64 } undef, {}* %35, 0
  %18 = insertvalue { {}*, i64 } %17, i64 1, 1
  ret { {}*, i64 } %18

tag10:                                            ; preds = %normal-dest251
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest111 unwind label %cleanup-lpad.loopexit.split-lp

tag11:                                            ; preds = %normal-dest251
  %ptrtoint112 = ptrtoint {}* %85 to i64
  %entry-point-addr-uint113 = add i64 %ptrtoint112, 7
  %entry-point-addr114 = inttoptr i64 %entry-point-addr-uint113 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point115 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr114, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point115({}* %85, i64 2, {}* %26, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest118 unwind label %cleanup-lpad.loopexit

tag16:                                            ; preds = %normal-dest102
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest125 unwind label %cleanup-lpad.loopexit.split-lp

tag18:                                            ; preds = %normal-dest102
  %ptrtoint133 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint134 = add i64 %ptrtoint133, 7
  %entry-point-addr135 = inttoptr i64 %entry-point-addr-uint134 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point136 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr135, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point136({}* %16, i64 3, {}* %26, {}* inttoptr (i64 8 to {}*), {}* %G110583.0, {}* null)
          to label %normal-dest139 unwind label %cleanup-lpad.loopexit

tag20:                                            ; preds = %normal-dest55
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 40), align 16
  %26 = invoke {}* @cc_safe_symbol_value({}* %25)
          to label %normal-dest212 unwind label %cleanup-lpad.loopexit

tag21:                                            ; preds = %normal-dest118
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest258 unwind label %cleanup-lpad.loopexit

tag27:                                            ; preds = %normal-dest118
  %29 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %58, i64 4)
  %result = extractvalue { i64, i1 } %29, 0
  %overflow = extractvalue { i64, i1 } %29, 1
  %30 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag2, label %tag7

cleanup-lpad.loopexit:                            ; preds = %tag2, %normal-dest34, %tag4, %normal-dest48, %tag7, %normal-dest65, %normal-dest67, %normal-dest74, %normal-dest81, %normal-dest88, %normal-dest95, %tag11, %tag18, %normal-dest139, %normal-dest145, %normal-dest152, %normal-dest159, %normal-dest161, %normal-dest168, %normal-dest175, %normal-dest182, %normal-dest194, %normal-dest200, %tag20, %normal-dest212, %normal-dest214, %normal-dest216, %normal-dest223, %normal-dest230, %normal-dest237, %normal-dest244, %tag21, %normal-dest258
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest125, %tag10, %tag16, %normal-dest111, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest34:                                    ; preds = %tag2
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 1, {}* %30, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad.loopexit

normal-dest37:                                    ; preds = %normal-dest34
  %.elt363 = extractvalue { {}*, i64 } %31, 0
  %.elt365 = extractvalue { {}*, i64 } %31, 1
  %cond298 = icmp eq i64 %.elt365, 0
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110583.1 = select i1 %cond298, {}* %32, {}* %.elt363
  br label %tag7

normal-dest46:                                    ; preds = %normal-dest125
  call void @unreachableError()
  unreachable

normal-dest48:                                    ; preds = %tag4
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint49 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint50 = add i64 %ptrtoint49, 7
  %entry-point-addr51 = inttoptr i64 %entry-point-addr-uint50 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point52 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr51, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point52({}* %14, i64 1, {}* %33, {}* null, {}* null, {}* null)
          to label %normal-dest55 unwind label %cleanup-lpad.loopexit

normal-dest55:                                    ; preds = %normal-dest48
  %.elt = extractvalue { {}*, i64 } %34, 0
  %.elt300 = extractvalue { {}*, i64 } %34, 1
  %cond = icmp eq i64 %.elt300, 0
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %object.0 = select i1 %cond, {}* %35, {}* %.elt
  %36 = icmp eq {}* %object.0, %35
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110620.0 = select i1 %36, {}* %.val, {}* %35
  %37 = icmp eq {}* %G110620.0, %35
  br i1 %37, label %tag8, label %tag20

normal-dest65:                                    ; preds = %tag7
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad.loopexit

normal-dest67:                                    ; preds = %normal-dest65
  %ptrtoint68 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %39, i64 1, {}* %26, {}* null, {}* null, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad.loopexit

normal-dest74:                                    ; preds = %normal-dest67
  %.elt323 = extractvalue { {}*, i64 } %40, 0
  %.elt325 = extractvalue { {}*, i64 } %40, 1
  %cond292 = icmp eq i64 %.elt325, 0
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110692.0 = select i1 %cond292, {}* %41, {}* %.elt323
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest81 unwind label %cleanup-lpad.loopexit

normal-dest81:                                    ; preds = %normal-dest74
  %ptrtoint82 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %44, i64 1, {}* %42, {}* null, {}* null, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad.loopexit

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest95 unwind label %cleanup-lpad.loopexit

normal-dest95:                                    ; preds = %normal-dest88
  %.elt329 = extractvalue { {}*, i64 } %45, 1
  %cond293 = icmp eq i64 %.elt329, 0
  %.elt327 = extractvalue { {}*, i64 } %45, 0
  %G110693.0 = select i1 %cond293, {}* %46, {}* %.elt327
  %ptrtoint96 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint97 = add i64 %ptrtoint96, 7
  %entry-point-addr98 = inttoptr i64 %entry-point-addr-uint97 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point99 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr98, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point99({}* %48, i64 2, {}* %G110692.0, {}* %G110693.0, {}* null, {}* null)
          to label %normal-dest102 unwind label %cleanup-lpad.loopexit

normal-dest102:                                   ; preds = %normal-dest95
  %.elt331 = extractvalue { {}*, i64 } %49, 0
  %.elt333 = extractvalue { {}*, i64 } %49, 1
  %cond294 = icmp eq i64 %.elt333, 0
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110696.0 = select i1 %cond294, {}* %50, {}* %.elt331
  %51 = icmp eq {}* %G110696.0, %50
  br i1 %51, label %tag16, label %tag18

normal-dest111:                                   ; preds = %tag10
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1031), align 8
  %ptrtoint126 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint127 = add i64 %ptrtoint126, 7
  %entry-point-addr128 = inttoptr i64 %entry-point-addr-uint127 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point129 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr128, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point129({}* %20, i64 5, {}* %52, {}* %53, {}* %26, {}* %54, {}* %55)
          to label %normal-dest132 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest118:                                   ; preds = %tag11
  %.elt314 = extractvalue { {}*, i64 } %21, 0
  %.elt316 = extractvalue { {}*, i64 } %21, 1
  %cond290 = icmp eq i64 %.elt316, 0
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond290, {}* %57, {}* %.elt314
  %58 = ptrtoint {}* %.in to i64
  %fixnum-tag-only317 = and i64 %58, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only317, 0
  br i1 %fixnump-test, label %tag27, label %tag21

normal-dest125:                                   ; preds = %tag16
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  %ptrtoint40 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint41 = add i64 %ptrtoint40, 7
  %entry-point-addr42 = inttoptr i64 %entry-point-addr-uint41 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point43 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr42, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point43({}* %23, i64 5, {}* %59, {}* %60, {}* %26, {}* %61, {}* %62)
          to label %normal-dest46 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest132:                                   ; preds = %normal-dest111
  call void @unreachableError()
  unreachable

normal-dest139:                                   ; preds = %tag18
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1021), align 8
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest145 unwind label %cleanup-lpad.loopexit

normal-dest145:                                   ; preds = %normal-dest139
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint146 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint147 = add i64 %ptrtoint146, 7
  %entry-point-addr148 = inttoptr i64 %entry-point-addr-uint147 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point149 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr148, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point149({}* %65, i64 1, {}* %66, {}* null, {}* null, {}* null)
          to label %normal-dest152 unwind label %cleanup-lpad.loopexit

normal-dest152:                                   ; preds = %normal-dest145
  %.elt339 = extractvalue { {}*, i64 } %67, 0
  %.elt341 = extractvalue { {}*, i64 } %67, 1
  %cond295 = icmp eq i64 %.elt341, 0
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ELEMENT.0 = select i1 %cond295, {}* %68, {}* %.elt339
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest159 unwind label %cleanup-lpad.loopexit

normal-dest159:                                   ; preds = %normal-dest152
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest161 unwind label %cleanup-lpad.loopexit

normal-dest161:                                   ; preds = %normal-dest159
  %ptrtoint162 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint163 = add i64 %ptrtoint162, 7
  %entry-point-addr164 = inttoptr i64 %entry-point-addr-uint163 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point165 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr164, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point165({}* %72, i64 1, {}* %ELEMENT.0, {}* null, {}* null, {}* null)
          to label %normal-dest168 unwind label %cleanup-lpad.loopexit

normal-dest168:                                   ; preds = %normal-dest161
  %.elt343 = extractvalue { {}*, i64 } %73, 0
  %.elt345 = extractvalue { {}*, i64 } %73, 1
  %cond296 = icmp eq i64 %.elt345, 0
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110632.0 = select i1 %cond296, {}* %74, {}* %.elt343
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 728), align 16
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest175 unwind label %cleanup-lpad.loopexit

normal-dest175:                                   ; preds = %normal-dest168
  %ptrtoint176 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint177 = add i64 %ptrtoint176, 7
  %entry-point-addr178 = inttoptr i64 %entry-point-addr-uint177 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point179 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr178, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point179({}* %77, i64 1, {}* %ELEMENT.0, {}* null, {}* null, {}* null)
          to label %normal-dest182 unwind label %cleanup-lpad.loopexit

normal-dest182:                                   ; preds = %normal-dest175
  %.elt347 = extractvalue { {}*, i64 } %78, 0
  %.elt349 = extractvalue { {}*, i64 } %78, 1
  %cond297 = icmp eq i64 %.elt349, 0
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110634.0 = select i1 %cond297, {}* %79, {}* %.elt347
  %ptrtoint188 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint189 = add i64 %ptrtoint188, 7
  %entry-point-addr190 = inttoptr i64 %entry-point-addr-uint189 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point191 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr190, align 8
  %80 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point191({}* %70, i64 3, {}* %G110632.0, {}* %75, {}* %G110634.0, {}* null)
          to label %normal-dest194 unwind label %cleanup-lpad.loopexit

normal-dest194:                                   ; preds = %normal-dest182
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 928), align 16
  %82 = invoke {}* @cc_safe_fdefinition({}* %81)
          to label %normal-dest200 unwind label %cleanup-lpad.loopexit

normal-dest200:                                   ; preds = %normal-dest194
  %ptrtoint201 = ptrtoint {}* %82 to i64
  %entry-point-addr-uint202 = add i64 %ptrtoint201, 7
  %entry-point-addr203 = inttoptr i64 %entry-point-addr-uint202 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point204 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr203, align 8
  %83 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point204({}* %82, i64 1, {}* %ELEMENT.0, {}* null, {}* null, {}* null)
          to label %tag4 unwind label %cleanup-lpad.loopexit

normal-dest212:                                   ; preds = %tag20
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %85 = invoke {}* @cc_safe_fdefinition({}* %84)
          to label %normal-dest214 unwind label %cleanup-lpad.loopexit

normal-dest214:                                   ; preds = %normal-dest212
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %87 = invoke {}* @cc_safe_fdefinition({}* %86)
          to label %normal-dest216 unwind label %cleanup-lpad.loopexit

normal-dest216:                                   ; preds = %normal-dest214
  %ptrtoint217 = ptrtoint {}* %87 to i64
  %entry-point-addr-uint218 = add i64 %ptrtoint217, 7
  %entry-point-addr219 = inttoptr i64 %entry-point-addr-uint218 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point220 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr219, align 8
  %88 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point220({}* %87, i64 1, {}* %26, {}* null, {}* null, {}* null)
          to label %normal-dest223 unwind label %cleanup-lpad.loopexit

normal-dest223:                                   ; preds = %normal-dest216
  %.elt302 = extractvalue { {}*, i64 } %88, 0
  %.elt304 = extractvalue { {}*, i64 } %88, 1
  %cond287 = icmp eq i64 %.elt304, 0
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110685.0 = select i1 %cond287, {}* %89, {}* %.elt302
  %90 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %92 = invoke {}* @cc_safe_fdefinition({}* %91)
          to label %normal-dest230 unwind label %cleanup-lpad.loopexit

normal-dest230:                                   ; preds = %normal-dest223
  %ptrtoint231 = ptrtoint {}* %92 to i64
  %entry-point-addr-uint232 = add i64 %ptrtoint231, 7
  %entry-point-addr233 = inttoptr i64 %entry-point-addr-uint232 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point234 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr233, align 8
  %93 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point234({}* %92, i64 1, {}* %90, {}* null, {}* null, {}* null)
          to label %normal-dest237 unwind label %cleanup-lpad.loopexit

normal-dest237:                                   ; preds = %normal-dest230
  %94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %95 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %96 = invoke {}* @cc_safe_fdefinition({}* %95)
          to label %normal-dest244 unwind label %cleanup-lpad.loopexit

normal-dest244:                                   ; preds = %normal-dest237
  %.elt308 = extractvalue { {}*, i64 } %93, 1
  %cond288 = icmp eq i64 %.elt308, 0
  %.elt306 = extractvalue { {}*, i64 } %93, 0
  %G110686.0 = select i1 %cond288, {}* %94, {}* %.elt306
  %ptrtoint245 = ptrtoint {}* %96 to i64
  %entry-point-addr-uint246 = add i64 %ptrtoint245, 7
  %entry-point-addr247 = inttoptr i64 %entry-point-addr-uint246 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point248 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr247, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point248({}* %96, i64 2, {}* %G110685.0, {}* %G110686.0, {}* null, {}* null)
          to label %normal-dest251 unwind label %cleanup-lpad.loopexit

normal-dest251:                                   ; preds = %normal-dest244
  %.elt310 = extractvalue { {}*, i64 } %97, 0
  %.elt312 = extractvalue { {}*, i64 } %97, 1
  %cond289 = icmp eq i64 %.elt312, 0
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110689.0 = select i1 %cond289, {}* %98, {}* %.elt310
  %99 = icmp eq {}* %G110689.0, %98
  br i1 %99, label %tag10, label %tag11

normal-dest258:                                   ; preds = %tag21
  %ptrtoint259 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint260 = add i64 %ptrtoint259, 7
  %entry-point-addr261 = inttoptr i64 %entry-point-addr-uint260 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point262 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr261, align 8
  %100 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point262({}* %28, i64 2, {}* %.in, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest265 unwind label %cleanup-lpad.loopexit

normal-dest265:                                   ; preds = %normal-dest258
  %.elt319 = extractvalue { {}*, i64 } %100, 0
  %.elt321 = extractvalue { {}*, i64 } %100, 1
  %cond291 = icmp eq i64 %.elt321, 0
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110583.2 = select i1 %cond291, {}* %101, {}* %.elt319
  br label %tag7
}

declare {}* @cc_safe_symbol_value({}*) local_unnamed_addr #3

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^797^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !227 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^797^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G110739.0 = phi {}* [ %18, %header-check-br ], [ %G110739.1, %normal-dest26 ], [ %G110739.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1034), align 16
  %ptrtoint43 = ptrtoint {}* %G110739.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G110739.0, i64 2, {}* %"closure->CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1034), align 16
  %"closure->CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 25652, i64 797, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag1

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1033), align 8
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt84 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt84, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110739.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110739.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1036), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1037), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 3188 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1034), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !228 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc306 unwind label %cleanup-lpad

.noexc306:                                        ; preds = %10
  unreachable

tag8:                                             ; preds = %tag9
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest83 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest210
  %13 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %80, i64 4)
  %result = extractvalue { i64, i1 } %13, 0
  %overflow = extractvalue { i64, i1 } %13, 1
  %14 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag8, label %tag13

tag11:                                            ; preds = %normal-dest185
  %ptrtoint96 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint97 = add i64 %ptrtoint96, 7
  %entry-point-addr98 = inttoptr i64 %entry-point-addr-uint97 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point99 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr98, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point99({}* %17, i64 3, {}* %27, {}* inttoptr (i64 8 to {}*), {}* %G110722.0, {}* null)
          to label %normal-dest102 unwind label %cleanup-lpad

tag13:                                            ; preds = %normal-dest90, %normal-dest76, %tag9
  %G110722.0 = phi {}* [ %14, %tag9 ], [ %G110722.1, %normal-dest76 ], [ %G110722.2, %normal-dest90 ]
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1019), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest148 unwind label %cleanup-lpad

tag15:                                            ; preds = %normal-dest210
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest69 unwind label %cleanup-lpad

tag18:                                            ; preds = %normal-dest185
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest200 unwind label %cleanup-lpad

tag20:                                            ; preds = %normal-dest59
  %ptrtoint204 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint205 = add i64 %ptrtoint204, 7
  %entry-point-addr206 = inttoptr i64 %entry-point-addr-uint205 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point207 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr206, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point207({}* %29, i64 2, {}* %27, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest210 unwind label %cleanup-lpad

tag22:                                            ; preds = %normal-dest59
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest226 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %tag22, %normal-dest200, %tag20, %tag18, %normal-dest226, %normal-dest178, %normal-dest171, %normal-dest164, %normal-dest157, %normal-dest150, %normal-dest148, %tag13, %normal-dest131, %normal-dest124, %normal-dest117, %normal-dest110, %normal-dest108, %normal-dest102, %tag11, %normal-dest83, %tag8, %normal-dest69, %tag15, %normal-dest52, %normal-dest45, %normal-dest38, %normal-dest34, %normal-dest31, %normal-dest29, %normal-dest28, %normal-dest
  %25 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %25

normal-dest:                                      ; preds = %entry
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 40), align 16
  %27 = invoke {}* @cc_safe_symbol_value({}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest29 unwind label %cleanup-lpad

normal-dest29:                                    ; preds = %normal-dest28
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest29
  %ptrtoint = ptrtoint {}* %31 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %31, i64 1, {}* %27, {}* null, {}* null, {}* null)
          to label %normal-dest34 unwind label %cleanup-lpad

normal-dest34:                                    ; preds = %normal-dest31
  %.elt = extractvalue { {}*, i64 } %32, 0
  %.elt245 = extractvalue { {}*, i64 } %32, 1
  %cond = icmp eq i64 %.elt245, 0
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110808.0 = select i1 %cond, {}* %33, {}* %.elt
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest34
  %ptrtoint39 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint40 = add i64 %ptrtoint39, 7
  %entry-point-addr41 = inttoptr i64 %entry-point-addr-uint40 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point42 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr41, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point42({}* %36, i64 1, {}* %34, {}* null, {}* null, {}* null)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest38
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %.elt249 = extractvalue { {}*, i64 } %37, 1
  %cond234 = icmp eq i64 %.elt249, 0
  %.elt247 = extractvalue { {}*, i64 } %37, 0
  %G110809.0 = select i1 %cond234, {}* %38, {}* %.elt247
  %ptrtoint53 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint54 = add i64 %ptrtoint53, 7
  %entry-point-addr55 = inttoptr i64 %entry-point-addr-uint54 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point56 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr55, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point56({}* %40, i64 2, {}* %G110808.0, {}* %G110809.0, {}* null, {}* null)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest52
  %.elt251 = extractvalue { {}*, i64 } %41, 0
  %.elt253 = extractvalue { {}*, i64 } %41, 1
  %cond235 = icmp eq i64 %.elt253, 0
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110812.0 = select i1 %cond235, {}* %42, {}* %.elt251
  %43 = icmp eq {}* %G110812.0, %42
  br i1 %43, label %tag22, label %tag20

normal-dest69:                                    ; preds = %tag15
  %ptrtoint70 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %44 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %19, i64 2, {}* %.in, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt260 = extractvalue { {}*, i64 } %44, 0
  %.elt262 = extractvalue { {}*, i64 } %44, 1
  %cond237 = icmp eq i64 %.elt262, 0
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110722.1 = select i1 %cond237, {}* %45, {}* %.elt260
  br label %tag13

normal-dest83:                                    ; preds = %tag8
  %ptrtoint84 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint85 = add i64 %ptrtoint84, 7
  %entry-point-addr86 = inttoptr i64 %entry-point-addr-uint85 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point87 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr86, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point87({}* %12, i64 1, {}* %14, {}* null, {}* null, {}* null)
          to label %normal-dest90 unwind label %cleanup-lpad

normal-dest90:                                    ; preds = %normal-dest83
  %.elt299 = extractvalue { {}*, i64 } %46, 0
  %.elt301 = extractvalue { {}*, i64 } %46, 1
  %cond243 = icmp eq i64 %.elt301, 0
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110722.2 = select i1 %cond243, {}* %47, {}* %.elt299
  br label %tag13

normal-dest102:                                   ; preds = %tag11
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest108 unwind label %cleanup-lpad

normal-dest108:                                   ; preds = %normal-dest102
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 944), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest110 unwind label %cleanup-lpad

normal-dest110:                                   ; preds = %normal-dest108
  %ptrtoint111 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint112 = add i64 %ptrtoint111, 7
  %entry-point-addr113 = inttoptr i64 %entry-point-addr-uint112 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point114 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr113, align 8
  %52 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point114({}* %51, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest117 unwind label %cleanup-lpad

normal-dest117:                                   ; preds = %normal-dest110
  %.elt280 = extractvalue { {}*, i64 } %52, 0
  %.elt282 = extractvalue { {}*, i64 } %52, 1
  %cond241 = icmp eq i64 %.elt282, 0
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110758.0 = select i1 %cond241, {}* %53, {}* %.elt280
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 728), align 16
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 962), align 16
  %56 = invoke {}* @cc_safe_fdefinition({}* %55)
          to label %normal-dest124 unwind label %cleanup-lpad

normal-dest124:                                   ; preds = %normal-dest117
  %ptrtoint125 = ptrtoint {}* %56 to i64
  %entry-point-addr-uint126 = add i64 %ptrtoint125, 7
  %entry-point-addr127 = inttoptr i64 %entry-point-addr-uint126 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point128 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr127, align 8
  %57 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point128({}* %56, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest131 unwind label %cleanup-lpad

normal-dest131:                                   ; preds = %normal-dest124
  %.elt284 = extractvalue { {}*, i64 } %57, 0
  %.elt286 = extractvalue { {}*, i64 } %57, 1
  %cond242 = icmp eq i64 %.elt286, 0
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110760.0 = select i1 %cond242, {}* %58, {}* %.elt284
  %ptrtoint137 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint138 = add i64 %ptrtoint137, 7
  %entry-point-addr139 = inttoptr i64 %entry-point-addr-uint138 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point140 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr139, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point140({}* %49, i64 3, {}* %G110758.0, {}* %54, {}* %G110760.0, {}* null)
          to label %normal-dest143 unwind label %cleanup-lpad

normal-dest143:                                   ; preds = %normal-dest131
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %59

normal-dest148:                                   ; preds = %tag13
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %61 = invoke {}* @cc_safe_fdefinition({}* %60)
          to label %normal-dest150 unwind label %cleanup-lpad

normal-dest150:                                   ; preds = %normal-dest148
  %ptrtoint151 = ptrtoint {}* %61 to i64
  %entry-point-addr-uint152 = add i64 %ptrtoint151, 7
  %entry-point-addr153 = inttoptr i64 %entry-point-addr-uint152 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point154 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr153, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point154({}* %61, i64 1, {}* %27, {}* null, {}* null, {}* null)
          to label %normal-dest157 unwind label %cleanup-lpad

normal-dest157:                                   ; preds = %normal-dest150
  %.elt264 = extractvalue { {}*, i64 } %62, 0
  %.elt266 = extractvalue { {}*, i64 } %62, 1
  %cond238 = icmp eq i64 %.elt266, 0
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110815.0 = select i1 %cond238, {}* %63, {}* %.elt264
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest164 unwind label %cleanup-lpad

normal-dest164:                                   ; preds = %normal-dest157
  %ptrtoint165 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint166 = add i64 %ptrtoint165, 7
  %entry-point-addr167 = inttoptr i64 %entry-point-addr-uint166 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point168 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr167, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point168({}* %66, i64 1, {}* %64, {}* null, {}* null, {}* null)
          to label %normal-dest171 unwind label %cleanup-lpad

normal-dest171:                                   ; preds = %normal-dest164
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest178 unwind label %cleanup-lpad

normal-dest178:                                   ; preds = %normal-dest171
  %.elt270 = extractvalue { {}*, i64 } %67, 1
  %cond239 = icmp eq i64 %.elt270, 0
  %.elt268 = extractvalue { {}*, i64 } %67, 0
  %G110816.0 = select i1 %cond239, {}* %68, {}* %.elt268
  %ptrtoint179 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint180 = add i64 %ptrtoint179, 7
  %entry-point-addr181 = inttoptr i64 %entry-point-addr-uint180 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point182 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr181, align 8
  %71 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point182({}* %70, i64 2, {}* %G110815.0, {}* %G110816.0, {}* null, {}* null)
          to label %normal-dest185 unwind label %cleanup-lpad

normal-dest185:                                   ; preds = %normal-dest178
  %.elt272 = extractvalue { {}*, i64 } %71, 0
  %.elt274 = extractvalue { {}*, i64 } %71, 1
  %cond240 = icmp eq i64 %.elt274, 0
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110819.0 = select i1 %cond240, {}* %72, {}* %.elt272
  %73 = icmp eq {}* %G110819.0, %72
  br i1 %73, label %tag18, label %tag11

normal-dest198:                                   ; preds = %normal-dest226
  call void @unreachableError()
  unreachable

normal-dest200:                                   ; preds = %tag18
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %77 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  %ptrtoint218 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint219 = add i64 %ptrtoint218, 7
  %entry-point-addr220 = inttoptr i64 %entry-point-addr-uint219 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point221 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr220, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point221({}* %21, i64 5, {}* %74, {}* %75, {}* %27, {}* %76, {}* %77)
          to label %normal-dest224 unwind label %cleanup-lpad

normal-dest210:                                   ; preds = %tag20
  %.elt255 = extractvalue { {}*, i64 } %22, 0
  %.elt257 = extractvalue { {}*, i64 } %22, 1
  %cond236 = icmp eq i64 %.elt257, 0
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond236, {}* %79, {}* %.elt255
  %80 = ptrtoint {}* %.in to i64
  %fixnum-tag-only216258 = and i64 %80, 3
  %fixnump-test217 = icmp eq i64 %fixnum-tag-only216258, 0
  br i1 %fixnump-test217, label %tag9, label %tag15

normal-dest224:                                   ; preds = %normal-dest200
  call void @unreachableError()
  unreachable

normal-dest226:                                   ; preds = %tag22
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1038), align 16
  %ptrtoint192 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint193 = add i64 %ptrtoint192, 7
  %entry-point-addr194 = inttoptr i64 %entry-point-addr-uint193 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point195 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr194, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point195({}* %24, i64 5, {}* %81, {}* %82, {}* %27, {}* %83, {}* %84)
          to label %normal-dest198 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^802^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !229 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^802^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G110860.0 = phi {}* [ %18, %header-check-br ], [ %G110860.1, %normal-dest17 ], [ %G110860.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1044), align 16
  %ptrtoint29 = ptrtoint {}* %G110860.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G110860.0, i64 2, {}* %"closure->CWR-VERLETZTES-CONSTRAINT-ERZEUGEN", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests28, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag2, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1044), align 16
  %"closure->CWR-VERLETZTES-CONSTRAINT-ERZEUGEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 25893, i64 802, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1043), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110860.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag2
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1046), align 16
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR-VERLETZTES-CONSTRAINT-ERZEUGEN", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1049), align 8
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR-VERLETZTES-CONSTRAINT-ERZEUGEN", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 3228 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1044), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests28
  %ptrtoint70 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110860.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !230 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %cond = icmp eq i64 %nargs, 4
  br i1 %cond, label %case-opt1-bb, label %case-opt0-bb

cleanup-lpad:                                     ; preds = %17, %14, %normal-dest6, %req-bb
  %10 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %10

req-bb:                                           ; preds = %15, %case-opt1-bb
  %G110844.0 = phi {}* [ %18, %case-opt1-bb ], [ %9, %15 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1041), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest6 unwind label %cleanup-lpad

case-opt0-bb:                                     ; preds = %entry
  %13 = icmp ult i64 %nargs, 3
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %case-opt0-bb
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %14
  unreachable

; <label>:15:                                     ; preds = %case-opt0-bb
  %16 = icmp ugt i64 %nargs, 4
  br i1 %16, label %17, label %req-bb

; <label>:17:                                     ; preds = %15
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc15 unwind label %cleanup-lpad

.noexc15:                                         ; preds = %17
  unreachable

case-opt1-bb:                                     ; preds = %entry
  %18 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %req-bb

normal-dest6:                                     ; preds = %req-bb
  %19 = icmp eq {}* %G110844.0, %9
  %anzahl.0 = select i1 %19, {}* %9, {}* %farg3
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 4, {}* %farg0, {}* %farg1, {}* %farg2, {}* %anzahl.0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %20
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^814^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !231 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^814^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G110903.0 = phi {}* [ %18, %header-check-br ], [ %G110903.1, %normal-dest63 ], [ %G110903.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1052), align 16
  %ptrtoint22 = ptrtoint {}* %G110903.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G110903.0, i64 2, {}* %"closure->CWR-VERLETZTES-CONSTRAINTS-EQUAL", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest56, %maybe-more-tests21, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1052), align 16
  %"closure->CWR-VERLETZTES-CONSTRAINTS-EQUAL" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26097, i64 814, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1054), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR-VERLETZTES-CONSTRAINTS-EQUAL", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1059), align 8
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR-VERLETZTES-CONSTRAINTS-EQUAL", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 3256 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1052), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %maybe-more-tests21
  %ptrtoint57 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110903.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag1

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1051), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G110903.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !232 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc811 unwind label %cleanup-lpad

.noexc811:                                        ; preds = %13
  unreachable

tag2:                                             ; preds = %normal-dest579
  %ptrtoint106 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint107 = add i64 %ptrtoint106, 7
  %entry-point-addr108 = inttoptr i64 %entry-point-addr-uint107 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point109 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr108, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point109({}* %42, i64 2, {}* %farg0, {}* inttoptr (i64 12 to {}*), {}* null, {}* null)
          to label %normal-dest112 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest513
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest167 unwind label %cleanup-lpad

tag6:                                             ; preds = %normal-dest488
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest211 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest579
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest213 unwind label %cleanup-lpad

tag16:                                            ; preds = %normal-dest204
  %ptrtoint221 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint222 = add i64 %ptrtoint221, 7
  %entry-point-addr223 = inttoptr i64 %entry-point-addr-uint222 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point224 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr223, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point224({}* %16, i64 2, {}* %farg0, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest227 unwind label %cleanup-lpad

tag19:                                            ; preds = %normal-dest204
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest281 unwind label %cleanup-lpad

tag22:                                            ; preds = %normal-dest274
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest290 unwind label %cleanup-lpad

tag29:                                            ; preds = %normal-dest158
  %ptrtoint305 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint306 = add i64 %ptrtoint305, 7
  %entry-point-addr307 = inttoptr i64 %entry-point-addr-uint306 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point308 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr307, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point308({}* %65, i64 2, {}* %farg1, {}* inttoptr (i64 12 to {}*), {}* null, {}* null)
          to label %normal-dest311 unwind label %cleanup-lpad

tag31:                                            ; preds = %normal-dest425
  %ptrtoint319 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint320 = add i64 %ptrtoint319, 7
  %entry-point-addr321 = inttoptr i64 %entry-point-addr-uint320 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point322 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr321, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point322({}* %29, i64 2, {}* %farg0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest325 unwind label %cleanup-lpad

tag35:                                            ; preds = %normal-dest528
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest388 unwind label %cleanup-lpad

tag36:                                            ; preds = %normal-dest158
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest432 unwind label %cleanup-lpad

tag42:                                            ; preds = %normal-dest100
  %ptrtoint435 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint436 = add i64 %ptrtoint435, 7
  %entry-point-addr437 = inttoptr i64 %entry-point-addr-uint436 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point438 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr437, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point438({}* %48, i64 2, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest441 unwind label %cleanup-lpad

tag44:                                            ; preds = %normal-dest425
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest495 unwind label %cleanup-lpad

tag45:                                            ; preds = %normal-dest100
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest497 unwind label %cleanup-lpad

tag48:                                            ; preds = %normal-dest372
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest506 unwind label %cleanup-lpad

tag49:                                            ; preds = %normal-dest372
  %ptrtoint507 = ptrtoint {}* %135 to i64
  %entry-point-addr-uint508 = add i64 %ptrtoint507, 7
  %entry-point-addr509 = inttoptr i64 %entry-point-addr-uint508 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point510 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr509, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point510({}* %135, i64 2, {}* %farg1, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest513 unwind label %cleanup-lpad

tag50:                                            ; preds = %normal-dest488
  %ptrtoint522 = ptrtoint {}* %171 to i64
  %entry-point-addr-uint523 = add i64 %ptrtoint522, 7
  %entry-point-addr524 = inttoptr i64 %entry-point-addr-uint523 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point525 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr524, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point525({}* %171, i64 2, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest528 unwind label %cleanup-lpad

tag52:                                            ; preds = %normal-dest607
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest542 unwind label %cleanup-lpad

tag61:                                            ; preds = %normal-dest274
  %ptrtoint601 = ptrtoint {}* %106 to i64
  %entry-point-addr-uint602 = add i64 %ptrtoint601, 7
  %entry-point-addr603 = inttoptr i64 %entry-point-addr-uint602 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point604 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr603, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point604({}* %106, i64 2, {}* %farg1, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest607 unwind label %cleanup-lpad

tag62:                                            ; preds = %normal-dest311, %normal-dest607, %normal-dest528, %normal-dest513
  %.sink848 = phi {}* [ %201, %normal-dest513 ], [ %204, %normal-dest528 ], [ %221, %normal-dest607 ], [ %.sink848.pre, %normal-dest311 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %44 = insertvalue { {}*, i64 } undef, {}* %.sink848, 0
  %45 = insertvalue { {}*, i64 } %44, i64 1, 1
  ret { {}*, i64 } %45

cleanup-lpad:                                     ; preds = %13, %10, %tag61, %normal-dest290, %normal-dest211, %normal-dest572, %normal-dest565, %normal-dest558, %normal-dest551, %normal-dest544, %normal-dest542, %tag52, %tag50, %tag49, %tag48, %normal-dest497, %tag45, %tag44, %normal-dest481, %normal-dest474, %normal-dest467, %normal-dest460, %normal-dest453, %normal-dest451, %normal-dest441, %tag42, %tag36, %normal-dest418, %normal-dest411, %normal-dest404, %normal-dest397, %normal-dest390, %normal-dest388, %tag35, %normal-dest432, %normal-dest365, %normal-dest358, %normal-dest351, %normal-dest344, %normal-dest337, %normal-dest335, %normal-dest325, %tag31, %tag29, %normal-dest506, %normal-dest213, %tag22, %normal-dest281, %tag19, %normal-dest267, %normal-dest260, %normal-dest253, %normal-dest246, %normal-dest239, %normal-dest237, %normal-dest227, %tag16, %normal-dest495, %tag9, %tag6, %normal-dest197, %normal-dest190, %normal-dest183, %normal-dest176, %normal-dest169, %normal-dest167, %tag4, %normal-dest151, %normal-dest144, %normal-dest137, %normal-dest130, %normal-dest123, %normal-dest121, %normal-dest112, %tag2, %normal-dest93, %normal-dest86, %normal-dest79, %normal-dest75, %normal-dest72, %normal-dest70, %normal-dest
  %46 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %46

normal-dest:                                      ; preds = %11
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest70 unwind label %cleanup-lpad

normal-dest70:                                    ; preds = %normal-dest
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest72 unwind label %cleanup-lpad

normal-dest72:                                    ; preds = %normal-dest70
  %ptrtoint = ptrtoint {}* %50 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %50, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest72
  %.elt = extractvalue { {}*, i64 } %51, 0
  %.elt650 = extractvalue { {}*, i64 } %51, 1
  %cond = icmp eq i64 %.elt650, 0
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111000.0 = select i1 %cond, {}* %52, {}* %.elt
  %53 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest79 unwind label %cleanup-lpad

normal-dest79:                                    ; preds = %normal-dest75
  %ptrtoint80 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint81 = add i64 %ptrtoint80, 7
  %entry-point-addr82 = inttoptr i64 %entry-point-addr-uint81 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point83 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr82, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point83({}* %55, i64 1, {}* %53, {}* null, {}* null, {}* null)
          to label %normal-dest86 unwind label %cleanup-lpad

normal-dest86:                                    ; preds = %normal-dest79
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest93 unwind label %cleanup-lpad

normal-dest93:                                    ; preds = %normal-dest86
  %.elt654 = extractvalue { {}*, i64 } %56, 1
  %cond618 = icmp eq i64 %.elt654, 0
  %.elt652 = extractvalue { {}*, i64 } %56, 0
  %G111001.0 = select i1 %cond618, {}* %57, {}* %.elt652
  %ptrtoint94 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint95 = add i64 %ptrtoint94, 7
  %entry-point-addr96 = inttoptr i64 %entry-point-addr-uint95 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point97 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr96, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point97({}* %59, i64 2, {}* %G111000.0, {}* %G111001.0, {}* null, {}* null)
          to label %normal-dest100 unwind label %cleanup-lpad

normal-dest100:                                   ; preds = %normal-dest93
  %.elt656 = extractvalue { {}*, i64 } %60, 0
  %.elt658 = extractvalue { {}*, i64 } %60, 1
  %cond619 = icmp eq i64 %.elt658, 0
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111004.0 = select i1 %cond619, {}* %61, {}* %.elt656
  %62 = icmp eq {}* %G111004.0, %61
  br i1 %62, label %tag45, label %tag42

normal-dest112:                                   ; preds = %tag2
  %.elt756 = extractvalue { {}*, i64 } %14, 0
  %.elt758 = extractvalue { {}*, i64 } %14, 1
  %cond644 = icmp eq i64 %.elt758, 0
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x.0 = select i1 %cond644, {}* %63, {}* %.elt756
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest121 unwind label %cleanup-lpad

normal-dest121:                                   ; preds = %normal-dest112
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %67 = invoke {}* @cc_safe_fdefinition({}* %66)
          to label %normal-dest123 unwind label %cleanup-lpad

normal-dest123:                                   ; preds = %normal-dest121
  %ptrtoint124 = ptrtoint {}* %67 to i64
  %entry-point-addr-uint125 = add i64 %ptrtoint124, 7
  %entry-point-addr126 = inttoptr i64 %entry-point-addr-uint125 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point127 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr126, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point127({}* %67, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest130 unwind label %cleanup-lpad

normal-dest130:                                   ; preds = %normal-dest123
  %.elt760 = extractvalue { {}*, i64 } %68, 0
  %.elt762 = extractvalue { {}*, i64 } %68, 1
  %cond645 = icmp eq i64 %.elt762, 0
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111049.0 = select i1 %cond645, {}* %69, {}* %.elt760
  %70 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest137 unwind label %cleanup-lpad

normal-dest137:                                   ; preds = %normal-dest130
  %ptrtoint138 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint139 = add i64 %ptrtoint138, 7
  %entry-point-addr140 = inttoptr i64 %entry-point-addr-uint139 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point141 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr140, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point141({}* %72, i64 1, {}* %70, {}* null, {}* null, {}* null)
          to label %normal-dest144 unwind label %cleanup-lpad

normal-dest144:                                   ; preds = %normal-dest137
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %76 = invoke {}* @cc_safe_fdefinition({}* %75)
          to label %normal-dest151 unwind label %cleanup-lpad

normal-dest151:                                   ; preds = %normal-dest144
  %.elt766 = extractvalue { {}*, i64 } %73, 1
  %cond646 = icmp eq i64 %.elt766, 0
  %.elt764 = extractvalue { {}*, i64 } %73, 0
  %G111050.0 = select i1 %cond646, {}* %74, {}* %.elt764
  %ptrtoint152 = ptrtoint {}* %76 to i64
  %entry-point-addr-uint153 = add i64 %ptrtoint152, 7
  %entry-point-addr154 = inttoptr i64 %entry-point-addr-uint153 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point155 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr154, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point155({}* %76, i64 2, {}* %G111049.0, {}* %G111050.0, {}* null, {}* null)
          to label %normal-dest158 unwind label %cleanup-lpad

normal-dest158:                                   ; preds = %normal-dest151
  %.elt768 = extractvalue { {}*, i64 } %77, 0
  %.elt770 = extractvalue { {}*, i64 } %77, 1
  %cond647 = icmp eq i64 %.elt770, 0
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111053.0 = select i1 %cond647, {}* %78, {}* %.elt768
  %79 = icmp eq {}* %G111053.0, %78
  br i1 %79, label %tag36, label %tag29

normal-dest167:                                   ; preds = %tag4
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest169 unwind label %cleanup-lpad

normal-dest169:                                   ; preds = %normal-dest167
  %ptrtoint170 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint171 = add i64 %ptrtoint170, 7
  %entry-point-addr172 = inttoptr i64 %entry-point-addr-uint171 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point173 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr172, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point173({}* %81, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest176 unwind label %cleanup-lpad

normal-dest176:                                   ; preds = %normal-dest169
  %.elt712 = extractvalue { {}*, i64 } %82, 0
  %.elt714 = extractvalue { {}*, i64 } %82, 1
  %cond633 = icmp eq i64 %.elt714, 0
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111028.0 = select i1 %cond633, {}* %83, {}* %.elt712
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest183 unwind label %cleanup-lpad

normal-dest183:                                   ; preds = %normal-dest176
  %ptrtoint184 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint185 = add i64 %ptrtoint184, 7
  %entry-point-addr186 = inttoptr i64 %entry-point-addr-uint185 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point187 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr186, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point187({}* %86, i64 1, {}* %84, {}* null, {}* null, {}* null)
          to label %normal-dest190 unwind label %cleanup-lpad

normal-dest190:                                   ; preds = %normal-dest183
  %88 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest197 unwind label %cleanup-lpad

normal-dest197:                                   ; preds = %normal-dest190
  %.elt718 = extractvalue { {}*, i64 } %87, 1
  %cond634 = icmp eq i64 %.elt718, 0
  %.elt716 = extractvalue { {}*, i64 } %87, 0
  %G111029.0 = select i1 %cond634, {}* %88, {}* %.elt716
  %ptrtoint198 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint199 = add i64 %ptrtoint198, 7
  %entry-point-addr200 = inttoptr i64 %entry-point-addr-uint199 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point201 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr200, align 8
  %91 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point201({}* %90, i64 2, {}* %G111028.0, {}* %G111029.0, {}* null, {}* null)
          to label %normal-dest204 unwind label %cleanup-lpad

normal-dest204:                                   ; preds = %normal-dest197
  %.elt720 = extractvalue { {}*, i64 } %91, 0
  %.elt722 = extractvalue { {}*, i64 } %91, 1
  %cond635 = icmp eq i64 %.elt722, 0
  %92 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111032.0 = select i1 %cond635, {}* %92, {}* %.elt720
  %93 = icmp eq {}* %G111032.0, %92
  br i1 %93, label %tag19, label %tag16

normal-dest211:                                   ; preds = %tag6
  %94 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %95 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %97 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1074), align 16
  %ptrtoint585 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint586 = add i64 %ptrtoint585, 7
  %entry-point-addr587 = inttoptr i64 %entry-point-addr-uint586 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point588 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr587, align 8
  %98 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point588({}* %18, i64 5, {}* %94, {}* %95, {}* %farg1, {}* %96, {}* %97)
          to label %normal-dest591 unwind label %cleanup-lpad

normal-dest213:                                   ; preds = %tag9
  %99 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %100 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %102 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1064), align 16
  %ptrtoint291 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint292 = add i64 %ptrtoint291, 7
  %entry-point-addr293 = inttoptr i64 %entry-point-addr-uint292 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point294 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr293, align 8
  %103 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point294({}* %20, i64 5, {}* %99, {}* %100, {}* %farg0, {}* %101, {}* %102)
          to label %normal-dest297 unwind label %cleanup-lpad

normal-dest220:                                   ; preds = %normal-dest495
  call void @unreachableError()
  unreachable

normal-dest227:                                   ; preds = %tag16
  %.elt724 = extractvalue { {}*, i64 } %21, 0
  %.elt726 = extractvalue { {}*, i64 } %21, 1
  %cond636 = icmp eq i64 %.elt726, 0
  %104 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x228.0 = select i1 %cond636, {}* %104, {}* %.elt724
  %105 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %106 = invoke {}* @cc_safe_fdefinition({}* %105)
          to label %normal-dest237 unwind label %cleanup-lpad

normal-dest237:                                   ; preds = %normal-dest227
  %107 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %108 = invoke {}* @cc_safe_fdefinition({}* %107)
          to label %normal-dest239 unwind label %cleanup-lpad

normal-dest239:                                   ; preds = %normal-dest237
  %ptrtoint240 = ptrtoint {}* %108 to i64
  %entry-point-addr-uint241 = add i64 %ptrtoint240, 7
  %entry-point-addr242 = inttoptr i64 %entry-point-addr-uint241 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point243 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr242, align 8
  %109 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point243({}* %108, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest246 unwind label %cleanup-lpad

normal-dest246:                                   ; preds = %normal-dest239
  %.elt728 = extractvalue { {}*, i64 } %109, 0
  %.elt730 = extractvalue { {}*, i64 } %109, 1
  %cond637 = icmp eq i64 %.elt730, 0
  %110 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111035.0 = select i1 %cond637, {}* %110, {}* %.elt728
  %111 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %112 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %113 = invoke {}* @cc_safe_fdefinition({}* %112)
          to label %normal-dest253 unwind label %cleanup-lpad

normal-dest253:                                   ; preds = %normal-dest246
  %ptrtoint254 = ptrtoint {}* %113 to i64
  %entry-point-addr-uint255 = add i64 %ptrtoint254, 7
  %entry-point-addr256 = inttoptr i64 %entry-point-addr-uint255 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point257 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr256, align 8
  %114 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point257({}* %113, i64 1, {}* %111, {}* null, {}* null, {}* null)
          to label %normal-dest260 unwind label %cleanup-lpad

normal-dest260:                                   ; preds = %normal-dest253
  %115 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %117 = invoke {}* @cc_safe_fdefinition({}* %116)
          to label %normal-dest267 unwind label %cleanup-lpad

normal-dest267:                                   ; preds = %normal-dest260
  %.elt734 = extractvalue { {}*, i64 } %114, 1
  %cond638 = icmp eq i64 %.elt734, 0
  %.elt732 = extractvalue { {}*, i64 } %114, 0
  %G111036.0 = select i1 %cond638, {}* %115, {}* %.elt732
  %ptrtoint268 = ptrtoint {}* %117 to i64
  %entry-point-addr-uint269 = add i64 %ptrtoint268, 7
  %entry-point-addr270 = inttoptr i64 %entry-point-addr-uint269 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point271 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr270, align 8
  %118 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point271({}* %117, i64 2, {}* %G111035.0, {}* %G111036.0, {}* null, {}* null)
          to label %normal-dest274 unwind label %cleanup-lpad

normal-dest274:                                   ; preds = %normal-dest267
  %.elt736 = extractvalue { {}*, i64 } %118, 0
  %.elt738 = extractvalue { {}*, i64 } %118, 1
  %cond639 = icmp eq i64 %.elt738, 0
  %119 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111039.0 = select i1 %cond639, {}* %119, {}* %.elt736
  %120 = icmp eq {}* %G111039.0, %119
  br i1 %120, label %tag22, label %tag61

normal-dest281:                                   ; preds = %tag19
  %121 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %122 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %123 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %124 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1068), align 16
  %ptrtoint282 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint283 = add i64 %ptrtoint282, 7
  %entry-point-addr284 = inttoptr i64 %entry-point-addr-uint283 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point285 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr284, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point285({}* %23, i64 5, {}* %121, {}* %122, {}* %farg0, {}* %123, {}* %124)
          to label %normal-dest288 unwind label %cleanup-lpad

normal-dest288:                                   ; preds = %normal-dest281
  call void @unreachableError()
  unreachable

normal-dest290:                                   ; preds = %tag22
  %126 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %127 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %128 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %129 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1066), align 16
  %ptrtoint594 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint595 = add i64 %ptrtoint594, 7
  %entry-point-addr596 = inttoptr i64 %entry-point-addr-uint595 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point597 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr596, align 8
  %130 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point597({}* %25, i64 5, {}* %126, {}* %127, {}* %farg1, {}* %128, {}* %129)
          to label %normal-dest600 unwind label %cleanup-lpad

normal-dest297:                                   ; preds = %normal-dest213
  call void @unreachableError()
  unreachable

normal-dest304:                                   ; preds = %normal-dest506
  call void @unreachableError()
  unreachable

normal-dest311:                                   ; preds = %tag29
  %.elt772 = extractvalue { {}*, i64 } %26, 0
  %.elt774 = extractvalue { {}*, i64 } %26, 1
  %cond648 = icmp eq i64 %.elt774, 0
  %131 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y.0 = select i1 %cond648, {}* %131, {}* %.elt772
  %132 = icmp eq {}* %x.0, %y.0
  %.val850 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %.sink848.pre = select i1 %132, {}* %.val850, {}* %131
  br label %tag62

normal-dest325:                                   ; preds = %tag31
  %.elt692 = extractvalue { {}*, i64 } %27, 0
  %.elt694 = extractvalue { {}*, i64 } %27, 1
  %cond628 = icmp eq i64 %.elt694, 0
  %133 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x326.0 = select i1 %cond628, {}* %133, {}* %.elt692
  %134 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %135 = invoke {}* @cc_safe_fdefinition({}* %134)
          to label %normal-dest335 unwind label %cleanup-lpad

normal-dest335:                                   ; preds = %normal-dest325
  %136 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %137 = invoke {}* @cc_safe_fdefinition({}* %136)
          to label %normal-dest337 unwind label %cleanup-lpad

normal-dest337:                                   ; preds = %normal-dest335
  %ptrtoint338 = ptrtoint {}* %137 to i64
  %entry-point-addr-uint339 = add i64 %ptrtoint338, 7
  %entry-point-addr340 = inttoptr i64 %entry-point-addr-uint339 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point341 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr340, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point341({}* %137, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest344 unwind label %cleanup-lpad

normal-dest344:                                   ; preds = %normal-dest337
  %.elt696 = extractvalue { {}*, i64 } %138, 0
  %.elt698 = extractvalue { {}*, i64 } %138, 1
  %cond629 = icmp eq i64 %.elt698, 0
  %139 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111021.0 = select i1 %cond629, {}* %139, {}* %.elt696
  %140 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %141 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %142 = invoke {}* @cc_safe_fdefinition({}* %141)
          to label %normal-dest351 unwind label %cleanup-lpad

normal-dest351:                                   ; preds = %normal-dest344
  %ptrtoint352 = ptrtoint {}* %142 to i64
  %entry-point-addr-uint353 = add i64 %ptrtoint352, 7
  %entry-point-addr354 = inttoptr i64 %entry-point-addr-uint353 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point355 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr354, align 8
  %143 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point355({}* %142, i64 1, {}* %140, {}* null, {}* null, {}* null)
          to label %normal-dest358 unwind label %cleanup-lpad

normal-dest358:                                   ; preds = %normal-dest351
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %145 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %146 = invoke {}* @cc_safe_fdefinition({}* %145)
          to label %normal-dest365 unwind label %cleanup-lpad

normal-dest365:                                   ; preds = %normal-dest358
  %.elt702 = extractvalue { {}*, i64 } %143, 1
  %cond630 = icmp eq i64 %.elt702, 0
  %.elt700 = extractvalue { {}*, i64 } %143, 0
  %G111022.0 = select i1 %cond630, {}* %144, {}* %.elt700
  %ptrtoint366 = ptrtoint {}* %146 to i64
  %entry-point-addr-uint367 = add i64 %ptrtoint366, 7
  %entry-point-addr368 = inttoptr i64 %entry-point-addr-uint367 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point369 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr368, align 8
  %147 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point369({}* %146, i64 2, {}* %G111021.0, {}* %G111022.0, {}* null, {}* null)
          to label %normal-dest372 unwind label %cleanup-lpad

normal-dest372:                                   ; preds = %normal-dest365
  %.elt704 = extractvalue { {}*, i64 } %147, 0
  %.elt706 = extractvalue { {}*, i64 } %147, 1
  %cond631 = icmp eq i64 %.elt706, 0
  %148 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111025.0 = select i1 %cond631, {}* %148, {}* %.elt704
  %149 = icmp eq {}* %G111025.0, %148
  br i1 %149, label %tag48, label %tag49

normal-dest384:                                   ; preds = %normal-dest432
  call void @unreachableError()
  unreachable

normal-dest388:                                   ; preds = %tag35
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %151 = invoke {}* @cc_safe_fdefinition({}* %150)
          to label %normal-dest390 unwind label %cleanup-lpad

normal-dest390:                                   ; preds = %normal-dest388
  %ptrtoint391 = ptrtoint {}* %151 to i64
  %entry-point-addr-uint392 = add i64 %ptrtoint391, 7
  %entry-point-addr393 = inttoptr i64 %entry-point-addr-uint392 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point394 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr393, align 8
  %152 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point394({}* %151, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest397 unwind label %cleanup-lpad

normal-dest397:                                   ; preds = %normal-dest390
  %.elt680 = extractvalue { {}*, i64 } %152, 0
  %.elt682 = extractvalue { {}*, i64 } %152, 1
  %cond625 = icmp eq i64 %.elt682, 0
  %153 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111014.0 = select i1 %cond625, {}* %153, {}* %.elt680
  %154 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %156 = invoke {}* @cc_safe_fdefinition({}* %155)
          to label %normal-dest404 unwind label %cleanup-lpad

normal-dest404:                                   ; preds = %normal-dest397
  %ptrtoint405 = ptrtoint {}* %156 to i64
  %entry-point-addr-uint406 = add i64 %ptrtoint405, 7
  %entry-point-addr407 = inttoptr i64 %entry-point-addr-uint406 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point408 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr407, align 8
  %157 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point408({}* %156, i64 1, {}* %154, {}* null, {}* null, {}* null)
          to label %normal-dest411 unwind label %cleanup-lpad

normal-dest411:                                   ; preds = %normal-dest404
  %158 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %159 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %160 = invoke {}* @cc_safe_fdefinition({}* %159)
          to label %normal-dest418 unwind label %cleanup-lpad

normal-dest418:                                   ; preds = %normal-dest411
  %.elt686 = extractvalue { {}*, i64 } %157, 1
  %cond626 = icmp eq i64 %.elt686, 0
  %.elt684 = extractvalue { {}*, i64 } %157, 0
  %G111015.0 = select i1 %cond626, {}* %158, {}* %.elt684
  %ptrtoint419 = ptrtoint {}* %160 to i64
  %entry-point-addr-uint420 = add i64 %ptrtoint419, 7
  %entry-point-addr421 = inttoptr i64 %entry-point-addr-uint420 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point422 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr421, align 8
  %161 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point422({}* %160, i64 2, {}* %G111014.0, {}* %G111015.0, {}* null, {}* null)
          to label %normal-dest425 unwind label %cleanup-lpad

normal-dest425:                                   ; preds = %normal-dest418
  %.elt688 = extractvalue { {}*, i64 } %161, 0
  %.elt690 = extractvalue { {}*, i64 } %161, 1
  %cond627 = icmp eq i64 %.elt690, 0
  %162 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111018.0 = select i1 %cond627, {}* %162, {}* %.elt688
  %163 = icmp eq {}* %G111018.0, %162
  br i1 %163, label %tag44, label %tag31

normal-dest432:                                   ; preds = %tag36
  %164 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %165 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %166 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %167 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1062), align 16
  %ptrtoint378 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint379 = add i64 %ptrtoint378, 7
  %entry-point-addr380 = inttoptr i64 %entry-point-addr-uint379 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point381 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr380, align 8
  %168 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point381({}* %31, i64 5, {}* %164, {}* %165, {}* %farg1, {}* %166, {}* %167)
          to label %normal-dest384 unwind label %cleanup-lpad

normal-dest441:                                   ; preds = %tag42
  %.elt660 = extractvalue { {}*, i64 } %32, 0
  %.elt662 = extractvalue { {}*, i64 } %32, 1
  %cond620 = icmp eq i64 %.elt662, 0
  %169 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %x442.0 = select i1 %cond620, {}* %169, {}* %.elt660
  %170 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %171 = invoke {}* @cc_safe_fdefinition({}* %170)
          to label %normal-dest451 unwind label %cleanup-lpad

normal-dest451:                                   ; preds = %normal-dest441
  %172 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %173 = invoke {}* @cc_safe_fdefinition({}* %172)
          to label %normal-dest453 unwind label %cleanup-lpad

normal-dest453:                                   ; preds = %normal-dest451
  %ptrtoint454 = ptrtoint {}* %173 to i64
  %entry-point-addr-uint455 = add i64 %ptrtoint454, 7
  %entry-point-addr456 = inttoptr i64 %entry-point-addr-uint455 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point457 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr456, align 8
  %174 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point457({}* %173, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest460 unwind label %cleanup-lpad

normal-dest460:                                   ; preds = %normal-dest453
  %.elt664 = extractvalue { {}*, i64 } %174, 0
  %.elt666 = extractvalue { {}*, i64 } %174, 1
  %cond621 = icmp eq i64 %.elt666, 0
  %175 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111007.0 = select i1 %cond621, {}* %175, {}* %.elt664
  %176 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %177 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %178 = invoke {}* @cc_safe_fdefinition({}* %177)
          to label %normal-dest467 unwind label %cleanup-lpad

normal-dest467:                                   ; preds = %normal-dest460
  %ptrtoint468 = ptrtoint {}* %178 to i64
  %entry-point-addr-uint469 = add i64 %ptrtoint468, 7
  %entry-point-addr470 = inttoptr i64 %entry-point-addr-uint469 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point471 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr470, align 8
  %179 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point471({}* %178, i64 1, {}* %176, {}* null, {}* null, {}* null)
          to label %normal-dest474 unwind label %cleanup-lpad

normal-dest474:                                   ; preds = %normal-dest467
  %180 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %181 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %182 = invoke {}* @cc_safe_fdefinition({}* %181)
          to label %normal-dest481 unwind label %cleanup-lpad

normal-dest481:                                   ; preds = %normal-dest474
  %.elt670 = extractvalue { {}*, i64 } %179, 1
  %cond622 = icmp eq i64 %.elt670, 0
  %.elt668 = extractvalue { {}*, i64 } %179, 0
  %G111008.0 = select i1 %cond622, {}* %180, {}* %.elt668
  %ptrtoint482 = ptrtoint {}* %182 to i64
  %entry-point-addr-uint483 = add i64 %ptrtoint482, 7
  %entry-point-addr484 = inttoptr i64 %entry-point-addr-uint483 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point485 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr484, align 8
  %183 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point485({}* %182, i64 2, {}* %G111007.0, {}* %G111008.0, {}* null, {}* null)
          to label %normal-dest488 unwind label %cleanup-lpad

normal-dest488:                                   ; preds = %normal-dest481
  %.elt672 = extractvalue { {}*, i64 } %183, 0
  %.elt674 = extractvalue { {}*, i64 } %183, 1
  %cond623 = icmp eq i64 %.elt674, 0
  %184 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111011.0 = select i1 %cond623, {}* %184, {}* %.elt672
  %185 = icmp eq {}* %G111011.0, %184
  br i1 %185, label %tag6, label %tag50

normal-dest495:                                   ; preds = %tag44
  %186 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %187 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %188 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %189 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1072), align 16
  %ptrtoint214 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint215 = add i64 %ptrtoint214, 7
  %entry-point-addr216 = inttoptr i64 %entry-point-addr-uint215 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point217 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr216, align 8
  %190 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point217({}* %34, i64 5, {}* %186, {}* %187, {}* %farg0, {}* %188, {}* %189)
          to label %normal-dest220 unwind label %cleanup-lpad

normal-dest497:                                   ; preds = %tag45
  %191 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %192 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %193 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %194 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1076), align 16
  %ptrtoint498 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint499 = add i64 %ptrtoint498, 7
  %entry-point-addr500 = inttoptr i64 %entry-point-addr-uint499 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point501 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr500, align 8
  %195 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point501({}* %36, i64 5, {}* %191, {}* %192, {}* %farg0, {}* %193, {}* %194)
          to label %normal-dest504 unwind label %cleanup-lpad

normal-dest504:                                   ; preds = %normal-dest497
  call void @unreachableError()
  unreachable

normal-dest506:                                   ; preds = %tag48
  %196 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %197 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %198 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %199 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1070), align 16
  %ptrtoint298 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint299 = add i64 %ptrtoint298, 7
  %entry-point-addr300 = inttoptr i64 %entry-point-addr-uint299 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point301 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr300, align 8
  %200 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point301({}* %38, i64 5, {}* %196, {}* %197, {}* %farg1, {}* %198, {}* %199)
          to label %normal-dest304 unwind label %cleanup-lpad

normal-dest513:                                   ; preds = %tag49
  %.elt708 = extractvalue { {}*, i64 } %39, 0
  %.elt710 = extractvalue { {}*, i64 } %39, 1
  %cond632 = icmp eq i64 %.elt710, 0
  %201 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y514.0 = select i1 %cond632, {}* %201, {}* %.elt708
  %202 = icmp eq {}* %x326.0, %y514.0
  %.val844 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110954.0 = select i1 %202, {}* %.val844, {}* %201
  %203 = icmp eq {}* %G110954.0, %201
  br i1 %203, label %tag62, label %tag4

normal-dest528:                                   ; preds = %tag50
  %.elt676 = extractvalue { {}*, i64 } %40, 0
  %.elt678 = extractvalue { {}*, i64 } %40, 1
  %cond624 = icmp eq i64 %.elt678, 0
  %204 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y529.0 = select i1 %cond624, {}* %204, {}* %.elt676
  %205 = icmp eq {}* %x442.0, %y529.0
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110969.0 = select i1 %205, {}* %.val, {}* %204
  %206 = icmp eq {}* %G110969.0, %204
  br i1 %206, label %tag62, label %tag35

normal-dest542:                                   ; preds = %tag52
  %207 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %208 = invoke {}* @cc_safe_fdefinition({}* %207)
          to label %normal-dest544 unwind label %cleanup-lpad

normal-dest544:                                   ; preds = %normal-dest542
  %ptrtoint545 = ptrtoint {}* %208 to i64
  %entry-point-addr-uint546 = add i64 %ptrtoint545, 7
  %entry-point-addr547 = inttoptr i64 %entry-point-addr-uint546 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point548 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr547, align 8
  %209 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point548({}* %208, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest551 unwind label %cleanup-lpad

normal-dest551:                                   ; preds = %normal-dest544
  %.elt744 = extractvalue { {}*, i64 } %209, 0
  %.elt746 = extractvalue { {}*, i64 } %209, 1
  %cond641 = icmp eq i64 %.elt746, 0
  %210 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111042.0 = select i1 %cond641, {}* %210, {}* %.elt744
  %211 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %212 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %213 = invoke {}* @cc_safe_fdefinition({}* %212)
          to label %normal-dest558 unwind label %cleanup-lpad

normal-dest558:                                   ; preds = %normal-dest551
  %ptrtoint559 = ptrtoint {}* %213 to i64
  %entry-point-addr-uint560 = add i64 %ptrtoint559, 7
  %entry-point-addr561 = inttoptr i64 %entry-point-addr-uint560 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point562 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr561, align 8
  %214 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point562({}* %213, i64 1, {}* %211, {}* null, {}* null, {}* null)
          to label %normal-dest565 unwind label %cleanup-lpad

normal-dest565:                                   ; preds = %normal-dest558
  %215 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %216 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %217 = invoke {}* @cc_safe_fdefinition({}* %216)
          to label %normal-dest572 unwind label %cleanup-lpad

normal-dest572:                                   ; preds = %normal-dest565
  %.elt750 = extractvalue { {}*, i64 } %214, 1
  %cond642 = icmp eq i64 %.elt750, 0
  %.elt748 = extractvalue { {}*, i64 } %214, 0
  %G111043.0 = select i1 %cond642, {}* %215, {}* %.elt748
  %ptrtoint573 = ptrtoint {}* %217 to i64
  %entry-point-addr-uint574 = add i64 %ptrtoint573, 7
  %entry-point-addr575 = inttoptr i64 %entry-point-addr-uint574 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point576 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr575, align 8
  %218 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point576({}* %217, i64 2, {}* %G111042.0, {}* %G111043.0, {}* null, {}* null)
          to label %normal-dest579 unwind label %cleanup-lpad

normal-dest579:                                   ; preds = %normal-dest572
  %.elt752 = extractvalue { {}*, i64 } %218, 0
  %.elt754 = extractvalue { {}*, i64 } %218, 1
  %cond643 = icmp eq i64 %.elt754, 0
  %219 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111046.0 = select i1 %cond643, {}* %219, {}* %.elt752
  %220 = icmp eq {}* %G111046.0, %219
  br i1 %220, label %tag9, label %tag2

normal-dest591:                                   ; preds = %normal-dest211
  call void @unreachableError()
  unreachable

normal-dest600:                                   ; preds = %normal-dest290
  call void @unreachableError()
  unreachable

normal-dest607:                                   ; preds = %tag61
  %.elt740 = extractvalue { {}*, i64 } %43, 0
  %.elt742 = extractvalue { {}*, i64 } %43, 1
  %cond640 = icmp eq i64 %.elt742, 0
  %221 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %y608.0 = select i1 %cond640, {}* %221, {}* %.elt740
  %222 = icmp eq {}* %x228.0, %y608.0
  %.val846 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G110939.0 = select i1 %222, {}* %.val846, {}* %221
  %223 = icmp eq {}* %G110939.0, %221
  br i1 %223, label %tag62, label %tag52
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^823^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !233 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^823^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G111154.0 = phi {}* [ %18, %header-check-br ], [ %G111154.1, %normal-dest17 ], [ %G111154.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1088), align 16
  %ptrtoint43 = ptrtoint {}* %G111154.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G111154.0, i64 2, {}* %"closure->CWR=MELDE_CONSTRAINT", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %maybe-more-tests42, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1088), align 16
  %"closure->CWR=MELDE_CONSTRAINT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26428, i64 823, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1087), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111154.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

normal-dest21:                                    ; preds = %maybe-more-tests42
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt101 = extractvalue { {}*, i64 } %27, 0
  %.elt103 = extractvalue { {}*, i64 } %27, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111154.2 = select i1 %cond82, {}* %28, {}* %.elt101
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %29 = icmp ult i64 %.off106, 5
  br i1 %29, label %maybe-more-tests42, label %tag

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1090), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=MELDE_CONSTRAINT", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1091), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=MELDE_CONSTRAINT", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 3292 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1088), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !234 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %cond = icmp eq i64 %nargs, 4
  br i1 %cond, label %case-opt1-bb, label %case-opt0-bb

tag1:                                             ; preds = %normal-dest111
  %10 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %11 = invoke {}* @cc_safe_fdefinition({}* %10)
          to label %normal-dest8 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest94, %normal-dest111
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1083), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest113 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %22, %19, %normal-dest122, %normal-dest115, %normal-dest113, %tag3, %req-bb, %normal-dest94, %normal-dest82, %normal-dest75, %normal-dest68, %normal-dest61, %normal-dest54, %normal-dest47, %normal-dest40, %normal-dest33, %normal-dest26, %normal-dest19, %normal-dest15, %normal-dest12, %normal-dest10, %normal-dest8, %tag1
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

req-bb:                                           ; preds = %20, %case-opt1-bb
  %G111138.0 = phi {}* [ %23, %case-opt1-bb ], [ %9, %20 ]
  %15 = icmp eq {}* %G111138.0, %9
  %anzahl.0 = select i1 %15, {}* %9, {}* %farg3
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 4), align 16
  %17 = invoke {}* @cc_safe_symbol_value({}* %16)
          to label %normal-dest111 unwind label %cleanup-lpad

case-opt0-bb:                                     ; preds = %entry
  %18 = icmp ult i64 %nargs, 3
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %case-opt0-bb
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %19
  unreachable

; <label>:20:                                     ; preds = %case-opt0-bb
  %21 = icmp ugt i64 %nargs, 4
  br i1 %21, label %22, label %req-bb

; <label>:22:                                     ; preds = %20
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 4, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc184 unwind label %cleanup-lpad

.noexc184:                                        ; preds = %22
  unreachable

case-opt1-bb:                                     ; preds = %entry
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %req-bb

normal-dest8:                                     ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest8
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest10
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %ptrtoint = ptrtoint {}* %27 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %27, i64 1, {}* %28, {}* null, {}* null, {}* null)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest12
  %.elt = extractvalue { {}*, i64 } %29, 0
  %.elt144 = extractvalue { {}*, i64 } %29, 1
  %cond135 = icmp eq i64 %.elt144, 0
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111185.0 = select i1 %cond135, {}* %30, {}* %.elt
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest15
  %ptrtoint20 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %32, i64 1, {}* %farg2, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %.elt146 = extractvalue { {}*, i64 } %33, 0
  %.elt148 = extractvalue { {}*, i64 } %33, 1
  %cond136 = icmp eq i64 %.elt148, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111186.0 = select i1 %cond136, {}* %34, {}* %.elt146
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest26
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1079), align 8
  %ptrtoint34 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %38 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %36, i64 1, {}* %37, {}* null, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt150 = extractvalue { {}*, i64 } %38, 0
  %.elt152 = extractvalue { {}*, i64 } %38, 1
  %cond137 = icmp eq i64 %.elt152, 0
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111187.0 = select i1 %cond137, {}* %39, {}* %.elt150
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest40
  %ptrtoint48 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %41, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt154 = extractvalue { {}*, i64 } %42, 0
  %.elt156 = extractvalue { {}*, i64 } %42, 1
  %cond138 = icmp eq i64 %.elt156, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111188.0 = select i1 %cond138, {}* %43, {}* %.elt154
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1081), align 8
  %ptrtoint62 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint63 = add i64 %ptrtoint62, 7
  %entry-point-addr64 = inttoptr i64 %entry-point-addr-uint63 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point65 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr64, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point65({}* %45, i64 1, {}* %46, {}* null, {}* null, {}* null)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest61
  %.elt158 = extractvalue { {}*, i64 } %47, 0
  %.elt160 = extractvalue { {}*, i64 } %47, 1
  %cond139 = icmp eq i64 %.elt160, 0
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111189.0 = select i1 %cond139, {}* %48, {}* %.elt158
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %ptrtoint76 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint77 = add i64 %ptrtoint76, 7
  %entry-point-addr78 = inttoptr i64 %entry-point-addr-uint77 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point79 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr78, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point79({}* %50, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %normal-dest75
  %.elt162 = extractvalue { {}*, i64 } %51, 0
  %.elt164 = extractvalue { {}*, i64 } %51, 1
  %cond140 = icmp eq i64 %.elt164, 0
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111190.0 = select i1 %cond140, {}* %52, {}* %.elt162
  %ptrtoint88 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint89 = add i64 %ptrtoint88, 7
  %entry-point-addr90 = inttoptr i64 %entry-point-addr-uint89 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point91 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr90, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point91({}* %25, i64 7, {}* %G111185.0, {}* %G111186.0, {}* %G111187.0, {}* %G111188.0, {}* %G111189.0, {}* %G111190.0, {}* %52)
          to label %normal-dest94 unwind label %cleanup-lpad

normal-dest94:                                    ; preds = %normal-dest82
  %.elt166 = extractvalue { {}*, i64 } %53, 0
  %.elt168 = extractvalue { {}*, i64 } %53, 1
  %cond141 = icmp eq i64 %.elt168, 0
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111183.0 = select i1 %cond141, {}* %54, {}* %.elt166
  %ptrtoint100 = ptrtoint {}* %11 to i64
  %entry-point-addr-uint101 = add i64 %ptrtoint100, 7
  %entry-point-addr102 = inttoptr i64 %entry-point-addr-uint101 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point103 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr102, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point103({}* %11, i64 1, {}* %G111183.0, {}* null, {}* null, {}* null)
          to label %tag3 unwind label %cleanup-lpad

normal-dest111:                                   ; preds = %req-bb
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %57 = icmp eq {}* %17, %56
  br i1 %57, label %tag3, label %tag1

normal-dest113:                                   ; preds = %tag3
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1085), align 8
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1044), align 16
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest115 unwind label %cleanup-lpad

normal-dest115:                                   ; preds = %normal-dest113
  %ptrtoint116 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint117 = add i64 %ptrtoint116, 7
  %entry-point-addr118 = inttoptr i64 %entry-point-addr-uint117 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point119 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr118, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point119({}* %60, i64 4, {}* %farg0, {}* %farg1, {}* %farg2, {}* %anzahl.0)
          to label %normal-dest122 unwind label %cleanup-lpad

normal-dest122:                                   ; preds = %normal-dest115
  %.elt174 = extractvalue { {}*, i64 } %61, 0
  %.elt176 = extractvalue { {}*, i64 } %61, 1
  %cond142 = icmp eq i64 %.elt176, 0
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111174.0 = select i1 %cond142, {}* %62, {}* %.elt174
  %ptrtoint128 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint129 = add i64 %ptrtoint128, 7
  %entry-point-addr130 = inttoptr i64 %entry-point-addr-uint129 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point131 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr130, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point131({}* %13, i64 2, {}* %58, {}* %G111174.0, {}* null, {}* null)
          to label %normal-dest134 unwind label %cleanup-lpad

normal-dest134:                                   ; preds = %normal-dest122
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %63
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^829^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !235 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^829^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G111234.0 = phi {}* [ %18, %header-check-br ], [ %G111234.1, %normal-dest17 ], [ %G111234.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1094), align 16
  %ptrtoint43 = ptrtoint {}* %G111234.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G111234.0, i64 2, {}* %"closure->CWR=VERBALISIERE-CONSTRAINT-FAKTOR", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests28, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1094), align 16
  %"closure->CWR=VERBALISIERE-CONSTRAINT-FAKTOR" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26718, i64 829, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1093), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt84 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt84, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111234.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %27 = icmp ult i64 %.off106, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %maybe-more-tests28
  %ptrtoint31 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt101 = extractvalue { {}*, i64 } %30, 0
  %.elt103 = extractvalue { {}*, i64 } %30, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111234.2 = select i1 %cond82, {}* %31, {}* %.elt101
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1096), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->CWR=VERBALISIERE-CONSTRAINT-FAKTOR", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1097), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->CWR=VERBALISIERE-CONSTRAINT-FAKTOR", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 3316 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1094), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !236 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 170), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^833^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !237 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^833^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G111392.0 = phi {}* [ %18, %header-check-br ], [ %G111392.1, %normal-dest63 ], [ %G111392.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1166), align 16
  %ptrtoint22 = ptrtoint {}* %G111392.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G111392.0, i64 2, {}* %"closure->CWR=VERBALISIERE_CONSTRAINT", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag3, %normal-dest56, %maybe-more-tests21, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1166), align 16
  %"closure->CWR=VERBALISIERE_CONSTRAINT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26803, i64 833, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1168), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->CWR=VERBALISIERE_CONSTRAINT", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1171), align 8
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->CWR=VERBALISIERE_CONSTRAINT", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 3332 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1166), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %maybe-more-tests21
  %ptrtoint57 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111392.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag1

normal-dest69:                                    ; preds = %tag3
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1165), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111392.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !238 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc3145 unwind label %cleanup-lpad

.noexc3145:                                       ; preds = %10
  unreachable

tag:                                              ; preds = %header-check-br2412, %normal-dest1856, %normal-dest879
  %G111564.0 = phi {}* [ %G111564.1, %normal-dest879 ], [ %G111564.2, %normal-dest1856 ], [ %"closure->LAMBDA2271", %header-check-br2412 ]
  %ptrtoint272 = ptrtoint {}* %G111564.0 to i64
  %entry-point-addr-uint273 = add i64 %ptrtoint272, 7
  %entry-point-addr274 = inttoptr i64 %entry-point-addr-uint273 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point275 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr274, align 8
  %11 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point275({}* %G111564.0, i64 2, {}* %OUT111342.0, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest278 unwind label %cleanup-lpad

tag7:                                             ; preds = %normal-dest2310
  %12 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %12, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.27", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.27^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26803, i64 833, i64 0, i64 0)
          to label %normal-dest323 unwind label %cleanup-lpad

tag8:                                             ; preds = %normal-dest865
  %ptrtoint324 = ptrtoint {}* %248 to i64
  %entry-point-addr-uint325 = add i64 %ptrtoint324, 7
  %entry-point-addr326 = inttoptr i64 %entry-point-addr-uint325 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point327 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr326, align 8
  %13 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point327({}* %248, i64 2, {}* %farg0, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest330 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest564, %normal-dest1896, %normal-dest1531, %tag107
  %G111414.0 = phi {}* [ %60, %tag107 ], [ %423, %normal-dest1896 ], [ %352, %normal-dest1531 ], [ %G111414.1, %normal-dest564 ]
  %ptrtoint382 = ptrtoint {}* %G111411.0 to i64
  %entry-point-addr-uint383 = add i64 %ptrtoint382, 7
  %entry-point-addr384 = inttoptr i64 %entry-point-addr-uint383 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point385 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr384, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point385({}* %G111411.0, i64 4, {}* %323, {}* %G111413.0, {}* %G111414.0, {}* %TEXT.0)
          to label %normal-dest388 unwind label %cleanup-lpad

tag11:                                            ; preds = %tag164, %header-check-br674
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest399 unwind label %cleanup-lpad

tag12:                                            ; preds = %header-check-br1802, %normal-dest1761, %normal-dest406
  %G111411.0 = phi {}* [ %G111411.1, %normal-dest406 ], [ %G111411.2, %normal-dest1761 ], [ %"closure->LAMBDA1351", %header-check-br1802 ]
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1138), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest413 unwind label %cleanup-lpad

tag14:                                            ; preds = %normal-dest728, %header-check-br2247
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest441 unwind label %cleanup-lpad

tag16:                                            ; preds = %normal-dest2270
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1122), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest455 unwind label %cleanup-lpad

tag17:                                            ; preds = %normal-dest1775
  %ptrtoint479 = ptrtoint {}* %"closure->LAMBDA1471" to i64
  %tag-only480 = and i64 %ptrtoint479, 7
  %test481 = icmp eq i64 %tag-only480, 1
  br i1 %test481, label %header-check-br478, label %tag139

tag18:                                            ; preds = %normal-dest1957, %normal-dest1571, %normal-dest905, %tag29
  %G111690.0 = phi {}* [ %28, %tag29 ], [ %265, %normal-dest905 ], [ %365, %normal-dest1571 ], [ %G111690.1, %normal-dest1957 ]
  %ptrtoint487 = ptrtoint {}* %G111687.0 to i64
  %entry-point-addr-uint488 = add i64 %ptrtoint487, 7
  %entry-point-addr489 = inttoptr i64 %entry-point-addr-uint488 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point490 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr489, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point490({}* %G111687.0, i64 4, {}* %G111318.0, {}* %G111689.0, {}* %G111690.0, {}* %TEXT.0)
          to label %normal-dest493 unwind label %cleanup-lpad

tag21:                                            ; preds = %normal-dest434
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA526" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %24, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.28", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.28^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26803, i64 833, i64 0, i64 0)
          to label %normal-dest525 unwind label %cleanup-lpad

tag25:                                            ; preds = %header-check-br734, %normal-dest632, %normal-dest448
  %G111457.0 = phi {}* [ %G111457.1, %normal-dest448 ], [ %G111457.2, %normal-dest632 ], [ %"closure->LAMBDA526", %header-check-br734 ]
  %ptrtoint545 = ptrtoint {}* %G111457.0 to i64
  %entry-point-addr-uint546 = add i64 %ptrtoint545, 7
  %entry-point-addr547 = inttoptr i64 %entry-point-addr-uint546 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point548 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr547, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point548({}* %G111457.0, i64 2, {}* %G111369.0, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest551 unwind label %cleanup-lpad

tag27:                                            ; preds = %tag81, %header-check-br697
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest571 unwind label %cleanup-lpad

tag29:                                            ; preds = %normal-dest1747
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1140), align 16
  br label %tag18

tag35:                                            ; preds = %normal-dest1350
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1116), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest597 unwind label %cleanup-lpad

tag36:                                            ; preds = %normal-dest323
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1116), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest611 unwind label %cleanup-lpad

tag39:                                            ; preds = %normal-dest2055, %header-check-br2238
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest639 unwind label %cleanup-lpad

tag46:                                            ; preds = %normal-dest2458, %header-check-br1901
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest684 unwind label %cleanup-lpad

tag51:                                            ; preds = %normal-dest525
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1122), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest721 unwind label %cleanup-lpad

tag52:                                            ; preds = %normal-dest2264, %normal-dest1819, %header-check-br1199
  %G112090.0 = phi {}* [ %"closure->LAMBDA", %header-check-br1199 ], [ %G112090.1, %normal-dest1819 ], [ %G112090.2, %normal-dest2264 ]
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest744 unwind label %cleanup-lpad

tag62:                                            ; preds = %normal-dest1155, %normal-dest506, %normal-dest388
  %return-value.sroa.235.0 = phi i64 [ 1, %normal-dest388 ], [ 1, %normal-dest1155 ], [ %.elt2761, %normal-dest506 ]
  %return-value.sroa.0.0 = phi i64 [ %160, %normal-dest388 ], [ %303, %normal-dest1155 ], [ %189, %normal-dest506 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %41 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 %return-value.sroa.235.0, 1
  ret { {}*, i64 } %43

tag65:                                            ; preds = %normal-dest2207
  %ptrtoint813 = ptrtoint {}* %461 to i64
  %entry-point-addr-uint814 = add i64 %ptrtoint813, 7
  %entry-point-addr815 = inttoptr i64 %entry-point-addr-uint814 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point816 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr815, align 8
  %44 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point816({}* %461, i64 2, {}* %farg0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest819 unwind label %cleanup-lpad

tag68:                                            ; preds = %normal-dest2032, %normal-dest1558, %header-check-br478
  %G111692.0 = phi {}* [ %"closure->LAMBDA1471", %header-check-br478 ], [ %G111692.1, %normal-dest1558 ], [ %G111692.2, %normal-dest2032 ]
  %ptrtoint899 = ptrtoint {}* %G111692.0 to i64
  %entry-point-addr-uint900 = add i64 %ptrtoint899, 7
  %entry-point-addr901 = inttoptr i64 %entry-point-addr-uint900 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point902 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr901, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point902({}* %G111692.0, i64 2, {}* %347, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest905 unwind label %cleanup-lpad

tag71:                                            ; preds = %normal-dest1719
  %ptrtoint924 = ptrtoint {}* %"closure->LAMBDA2271" to i64
  %tag-only925 = and i64 %ptrtoint924, 7
  %test926 = icmp eq i64 %tag-only925, 1
  br i1 %test926, label %header-check-br923, label %tag84

tag72:                                            ; preds = %normal-dest865
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest933 unwind label %cleanup-lpad

tag75:                                            ; preds = %normal-dest2310
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 240), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest947 unwind label %cleanup-lpad

tag77:                                            ; preds = %normal-dest462, %header-check-br2038
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest961 unwind label %cleanup-lpad

tag81:                                            ; preds = %normal-dest2369
  %ptrtoint1003 = ptrtoint {}* %"closure->LAMBDA526" to i64
  %tag-only1004 = and i64 %ptrtoint1003, 7
  %test1005 = icmp eq i64 %tag-only1004, 1
  br i1 %test1005, label %header-check-br1002, label %tag27

tag84:                                            ; preds = %tag71, %header-check-br2001
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest1026 unwind label %cleanup-lpad

tag91:                                            ; preds = %normal-dest2149, %normal-dest968, %header-check-br469
  %G111590.0 = phi {}* [ %"closure->LAMBDA2271", %header-check-br469 ], [ %G111590.1, %normal-dest968 ], [ %G111590.2, %normal-dest2149 ]
  %ptrtoint1115 = ptrtoint {}* %G111590.0 to i64
  %entry-point-addr-uint1116 = add i64 %ptrtoint1115, 7
  %entry-point-addr1117 = inttoptr i64 %entry-point-addr-uint1116 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1118 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1117, align 8
  %54 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1118({}* %G111590.0, i64 2, {}* %G111350.0, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest1121 unwind label %cleanup-lpad

tag95:                                            ; preds = %normal-dest1134, %tag148, %normal-dest1419, %normal-dest278
  %G111547.0 = phi {}* [ %80, %tag148 ], [ %335, %normal-dest1419 ], [ %137, %normal-dest278 ], [ %G111547.1, %normal-dest1134 ]
  %ptrtoint1149 = ptrtoint {}* %G111544.0 to i64
  %entry-point-addr-uint1150 = add i64 %ptrtoint1149, 7
  %entry-point-addr1151 = inttoptr i64 %entry-point-addr-uint1150 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1152 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1151, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1152({}* %G111544.0, i64 4, {}* %OUT1112811632.0, {}* %G111546.0, {}* %G111547.0, {}* %TEXT.0)
          to label %normal-dest1155 unwind label %cleanup-lpad

tag99:                                            ; preds = %normal-dest323
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1122), align 16
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest1186 unwind label %cleanup-lpad

tag102:                                           ; preds = %normal-dest1470
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1122), align 16
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest1209 unwind label %cleanup-lpad

tag107:                                           ; preds = %normal-dest434
  %60 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1140), align 16
  br label %tag9

tag110:                                           ; preds = %normal-dest1350
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1122), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest1290 unwind label %cleanup-lpad

tag118:                                           ; preds = %normal-dest954, %normal-dest776, %normal-dest1704, %normal-dest1378
  %TEXT.0 = phi {}* [ %334, %normal-dest1378 ], [ %385, %normal-dest1704 ], [ %TEXT.1, %normal-dest776 ], [ %TEXT.2, %normal-dest954 ]
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA1351" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %63, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.30", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.30^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26803, i64 833, i64 0, i64 0)
          to label %normal-dest1350 unwind label %cleanup-lpad

tag119:                                           ; preds = %normal-dest266
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest1357 unwind label %cleanup-lpad

tag120:                                           ; preds = %normal-dest1918, %header-check-br1661, %normal-dest1019
  %G112035.0 = phi {}* [ %G112035.1, %normal-dest1019 ], [ %"closure->LAMBDA", %header-check-br1661 ], [ %G112035.2, %normal-dest1918 ]
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %67 = invoke {}* @cc_safe_fdefinition({}* %66)
          to label %normal-dest1359 unwind label %cleanup-lpad

tag122:                                           ; preds = %normal-dest1033, %normal-dest996, %header-check-br923
  %G111549.0 = phi {}* [ %"closure->LAMBDA2271", %header-check-br923 ], [ %G111549.1, %normal-dest996 ], [ %G111549.2, %normal-dest1033 ]
  %ptrtoint1413 = ptrtoint {}* %G111549.0 to i64
  %entry-point-addr-uint1414 = add i64 %ptrtoint1413, 7
  %entry-point-addr1415 = inttoptr i64 %entry-point-addr-uint1414 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1416 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1415, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1416({}* %G111549.0, i64 2, {}* %484, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest1419 unwind label %cleanup-lpad

tag126:                                           ; preds = %normal-dest1297, %header-check-br1623
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest1448 unwind label %cleanup-lpad

tag129:                                           ; preds = %normal-dest1747
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA1471" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %71, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.31", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.31^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26803, i64 833, i64 0, i64 0)
          to label %normal-dest1470 unwind label %cleanup-lpad

tag136:                                           ; preds = %header-check-br2389, %normal-dest1544, %normal-dest1246
  %G111431.0 = phi {}* [ %G111431.1, %normal-dest1246 ], [ %G111431.2, %normal-dest1544 ], [ %"closure->LAMBDA526", %header-check-br2389 ]
  %ptrtoint1525 = ptrtoint {}* %G111431.0 to i64
  %entry-point-addr-uint1526 = add i64 %ptrtoint1525, 7
  %entry-point-addr1527 = inttoptr i64 %entry-point-addr-uint1526 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1528 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1527, align 8
  %72 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1528({}* %G111431.0, i64 2, {}* %OUT1113611524.0, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest1531 unwind label %cleanup-lpad

tag138:                                           ; preds = %normal-dest2383, %header-check-br2441
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %74 = invoke {}* @cc_safe_fdefinition({}* %73)
          to label %normal-dest1537 unwind label %cleanup-lpad

tag139:                                           ; preds = %tag17, %header-check-br782
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %76 = invoke {}* @cc_safe_fdefinition({}* %75)
          to label %normal-dest1551 unwind label %cleanup-lpad

tag141:                                           ; preds = %header-check-br2464, %normal-dest1269, %normal-dest691
  %G111707.0 = phi {}* [ %G111707.1, %normal-dest691 ], [ %G111707.2, %normal-dest1269 ], [ %"closure->LAMBDA1471", %header-check-br2464 ]
  %ptrtoint1565 = ptrtoint {}* %G111707.0 to i64
  %entry-point-addr-uint1566 = add i64 %ptrtoint1565, 7
  %entry-point-addr1567 = inttoptr i64 %entry-point-addr-uint1566 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1568 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1567, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1568({}* %G111707.0, i64 2, {}* %OUT1113221564.0, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest1571 unwind label %cleanup-lpad

tag144:                                           ; preds = %normal-dest618
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1119), align 8
  %79 = invoke {}* @cc_safe_fdefinition({}* %78)
          to label %normal-dest1600 unwind label %cleanup-lpad

tag148:                                           ; preds = %normal-dest1655
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1140), align 16
  br label %tag95

tag150:                                           ; preds = %header-check-br2061, %normal-dest1432, %normal-dest646
  %G111544.0 = phi {}* [ %G111544.1, %normal-dest646 ], [ %G111544.2, %normal-dest1432 ], [ %"closure->LAMBDA1351", %header-check-br2061 ]
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1138), align 16
  %82 = invoke {}* @cc_safe_fdefinition({}* %81)
          to label %normal-dest1634 unwind label %cleanup-lpad

tag151:                                           ; preds = %normal-dest618
  %ptrtoint1662 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only1663 = and i64 %ptrtoint1662, 7
  %test1664 = icmp eq i64 %tag-only1663, 1
  br i1 %test1664, label %header-check-br1661, label %tag179

tag153:                                           ; preds = %normal-dest2018, %header-check-br1614, %normal-dest303
  %G112057.0 = phi {}* [ %G112057.1, %normal-dest303 ], [ %"closure->LAMBDA", %header-check-br1614 ], [ %G112057.2, %normal-dest2018 ]
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %84 = invoke {}* @cc_safe_fdefinition({}* %83)
          to label %normal-dest1685 unwind label %cleanup-lpad

tag154:                                           ; preds = %normal-dest376
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest1710 unwind label %cleanup-lpad

tag156:                                           ; preds = %normal-dest2270
  %87 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1116), align 16
  %88 = invoke {}* @cc_safe_fdefinition({}* %87)
          to label %normal-dest1712 unwind label %cleanup-lpad

tag157:                                           ; preds = %normal-dest1495, %normal-dest1455, %header-check-br1303
  %G111687.0 = phi {}* [ %"closure->LAMBDA1351", %header-check-br1303 ], [ %G111687.1, %normal-dest1455 ], [ %G111687.2, %normal-dest1495 ]
  %89 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1138), align 16
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest1726 unwind label %cleanup-lpad

tag160:                                           ; preds = %normal-dest1470
  %91 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1116), align 16
  %92 = invoke {}* @cc_safe_fdefinition({}* %91)
          to label %normal-dest1768 unwind label %cleanup-lpad

tag164:                                           ; preds = %normal-dest604
  %ptrtoint1803 = ptrtoint {}* %"closure->LAMBDA1351" to i64
  %tag-only1804 = and i64 %ptrtoint1803, 7
  %test1805 = icmp eq i64 %tag-only1804, 1
  br i1 %test1805, label %header-check-br1802, label %tag11

tag166:                                           ; preds = %normal-dest1193, %header-check-br1839
  %93 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %94 = invoke {}* @cc_safe_fdefinition({}* %93)
          to label %normal-dest1812 unwind label %cleanup-lpad

tag171:                                           ; preds = %normal-dest2406, %header-check-br1461
  %95 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %96 = invoke {}* @cc_safe_fdefinition({}* %95)
          to label %normal-dest1849 unwind label %cleanup-lpad

tag174:                                           ; preds = %normal-dest1932, %header-check-br1002, %normal-dest578
  %G111416.0 = phi {}* [ %G111416.1, %normal-dest578 ], [ %"closure->LAMBDA526", %header-check-br1002 ], [ %G111416.2, %normal-dest1932 ]
  %ptrtoint1890 = ptrtoint {}* %G111416.0 to i64
  %entry-point-addr-uint1891 = add i64 %ptrtoint1890, 7
  %entry-point-addr1892 = inttoptr i64 %entry-point-addr-uint1891 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1893 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1892, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1893({}* %G111416.0, i64 2, {}* %193, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest1896 unwind label %cleanup-lpad

tag179:                                           ; preds = %tag151, %header-check-br1335
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %99 = invoke {}* @cc_safe_fdefinition({}* %98)
          to label %normal-dest1911 unwind label %cleanup-lpad

tag181:                                           ; preds = %normal-dest2284, %header-check-br1222, %normal-dest1068
  %G111733.0 = phi {}* [ %G111733.1, %normal-dest1068 ], [ %"closure->LAMBDA1471", %header-check-br1222 ], [ %G111733.2, %normal-dest2284 ]
  %ptrtoint1938 = ptrtoint {}* %G111733.0 to i64
  %entry-point-addr-uint1939 = add i64 %ptrtoint1938, 7
  %entry-point-addr1940 = inttoptr i64 %entry-point-addr-uint1939 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1941 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1940, align 8
  %100 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1941({}* %G111733.0, i64 2, {}* %G111330.0, {}* %ANZAHL.0, {}* null, {}* null)
          to label %normal-dest1944 unwind label %cleanup-lpad

tag190:                                           ; preds = %normal-dest1607, %header-check-br1140
  %101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %102 = invoke {}* @cc_safe_fdefinition({}* %101)
          to label %normal-dest2011 unwind label %cleanup-lpad

tag196:                                           ; preds = %normal-dest604
  %103 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1119), align 8
  %104 = invoke {}* @cc_safe_fdefinition({}* %103)
          to label %normal-dest2048 unwind label %cleanup-lpad

tag205:                                           ; preds = %normal-dest266
  %ptrtoint2155 = ptrtoint {}* %122 to i64
  %entry-point-addr-uint2156 = add i64 %ptrtoint2155, 7
  %entry-point-addr2157 = inttoptr i64 %entry-point-addr-uint2156 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2158 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2157, align 8
  %105 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2158({}* %122, i64 2, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest2161 unwind label %cleanup-lpad

tag212:                                           ; preds = %normal-dest1655
  %106 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 279), align 8
  %"closure->LAMBDA2271" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %106, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.32", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.32^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 26803, i64 833, i64 0, i64 0)
          to label %normal-dest2270 unwind label %cleanup-lpad

tag214:                                           ; preds = %normal-dest1216, %header-check-br516
  %107 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %108 = invoke {}* @cc_safe_fdefinition({}* %107)
          to label %normal-dest2277 unwind label %cleanup-lpad

tag215:                                           ; preds = %normal-dest376
  %ptrtoint2290 = ptrtoint {}* %145 to i64
  %entry-point-addr-uint2291 = add i64 %ptrtoint2290, 7
  %entry-point-addr2292 = inttoptr i64 %entry-point-addr-uint2291 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2293 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2292, align 8
  %109 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2293({}* %145, i64 2, {}* %farg0, {}* inttoptr (i64 12 to {}*), {}* null, {}* null)
          to label %normal-dest2296 unwind label %cleanup-lpad

tag221:                                           ; preds = %normal-dest525
  %110 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1116), align 16
  %111 = invoke {}* @cc_safe_fdefinition({}* %110)
          to label %normal-dest2362 unwind label %cleanup-lpad

tag222:                                           ; preds = %normal-dest2369
  %112 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1119), align 8
  %113 = invoke {}* @cc_safe_fdefinition({}* %112)
          to label %normal-dest2376 unwind label %cleanup-lpad

tag223:                                           ; preds = %normal-dest1719
  %114 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1119), align 8
  %115 = invoke {}* @cc_safe_fdefinition({}* %114)
          to label %normal-dest2399 unwind label %cleanup-lpad

tag226:                                           ; preds = %normal-dest2207
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %117 = invoke {}* @cc_safe_fdefinition({}* %116)
          to label %normal-dest2431 unwind label %cleanup-lpad

tag230:                                           ; preds = %normal-dest1775
  %118 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1119), align 8
  %119 = invoke {}* @cc_safe_fdefinition({}* %118)
          to label %normal-dest2451 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest2451, %tag230, %tag226, %normal-dest2399, %tag223, %normal-dest2376, %tag222, %normal-dest2362, %tag221, %normal-dest2303, %normal-dest2296, %tag215, %normal-dest2277, %tag214, %tag212, %normal-dest2257, %maybe-more-tests1847, %normal-dest2200, %normal-dest2193, %normal-dest2186, %normal-dest2179, %normal-dest2172, %normal-dest2170, %normal-dest2161, %tag205, %normal-dest2142, %maybe-more-tests2046, %normal-dest1357, %normal-dest2048, %tag196, %normal-dest2025, %maybe-more-tests790, %normal-dest2011, %tag190, %normal-dest1950, %normal-dest1944, %tag181, %normal-dest1925, %maybe-more-tests705, %normal-dest1911, %tag179, %tag174, %normal-dest1849, %tag171, %normal-dest1812, %tag166, %normal-dest1710, %normal-dest1768, %tag160, %normal-dest1754, %maybe-more-tests682, %normal-dest1735, %normal-dest1728, %normal-dest1726, %tag157, %normal-dest1712, %tag156, %tag154, %normal-dest1692, %normal-dest1685, %tag153, %normal-dest1643, %normal-dest1636, %normal-dest1634, %tag150, %normal-dest1600, %tag144, %tag141, %normal-dest1551, %tag139, %normal-dest1537, %tag138, %tag136, %normal-dest1488, %maybe-more-tests1631, %tag129, %normal-dest1448, %tag126, %normal-dest1425, %maybe-more-tests2246, %tag122, %normal-dest1366, %normal-dest1359, %tag120, %tag119, %tag118, %normal-dest1290, %tag110, %normal-dest1262, %maybe-more-tests1909, %normal-dest1239, %maybe-more-tests2449, %normal-dest2431, %normal-dest1209, %tag102, %normal-dest1186, %tag99, %tag95, %normal-dest1127, %normal-dest1121, %tag91, %normal-dest1061, %maybe-more-tests524, %normal-dest933, %normal-dest1026, %tag84, %normal-dest1012, %maybe-more-tests1343, %normal-dest989, %maybe-more-tests2009, %normal-dest961, %tag77, %normal-dest947, %tag75, %tag72, %tag68, %normal-dest872, %maybe-more-tests1469, %normal-dest858, %normal-dest851, %normal-dest844, %normal-dest837, %normal-dest830, %normal-dest828, %normal-dest819, %tag65, %normal-dest769, %normal-dest763, %normal-dest751, %normal-dest744, %tag52, %normal-dest721, %tag51, %normal-dest684, %tag46, %normal-dest639, %tag39, %normal-dest625, %maybe-more-tests2255, %normal-dest611, %tag36, %normal-dest597, %tag35, %normal-dest571, %tag27, %normal-dest557, %normal-dest551, %tag25, %tag21, %normal-dest499, %normal-dest493, %tag18, %normal-dest455, %tag16, %normal-dest441, %tag14, %normal-dest422, %normal-dest415, %normal-dest413, %tag12, %normal-dest399, %tag11, %tag9, %normal-dest369, %normal-dest362, %normal-dest355, %normal-dest348, %normal-dest341, %normal-dest339, %normal-dest330, %tag8, %tag7, %normal-dest296, %maybe-more-tests1148, %tag, %normal-dest259, %normal-dest252, %normal-dest245, %normal-dest241, %normal-dest238, %normal-dest236, %normal-dest
  %120 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %120

normal-dest:                                      ; preds = %entry
  %121 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %122 = invoke {}* @cc_safe_fdefinition({}* %121)
          to label %normal-dest236 unwind label %cleanup-lpad

normal-dest236:                                   ; preds = %normal-dest
  %123 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %124 = invoke {}* @cc_safe_fdefinition({}* %123)
          to label %normal-dest238 unwind label %cleanup-lpad

normal-dest238:                                   ; preds = %normal-dest236
  %ptrtoint = ptrtoint {}* %124 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %124, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest241 unwind label %cleanup-lpad

normal-dest241:                                   ; preds = %normal-dest238
  %.elt = extractvalue { {}*, i64 } %125, 0
  %.elt2574 = extractvalue { {}*, i64 } %125, 1
  %cond = icmp eq i64 %.elt2574, 0
  %126 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112264.0 = select i1 %cond, {}* %126, {}* %.elt
  %127 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %128 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %129 = invoke {}* @cc_safe_fdefinition({}* %128)
          to label %normal-dest245 unwind label %cleanup-lpad

normal-dest245:                                   ; preds = %normal-dest241
  %ptrtoint246 = ptrtoint {}* %129 to i64
  %entry-point-addr-uint247 = add i64 %ptrtoint246, 7
  %entry-point-addr248 = inttoptr i64 %entry-point-addr-uint247 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point249 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr248, align 8
  %130 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point249({}* %129, i64 1, {}* %127, {}* null, {}* null, {}* null)
          to label %normal-dest252 unwind label %cleanup-lpad

normal-dest252:                                   ; preds = %normal-dest245
  %131 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %132 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %133 = invoke {}* @cc_safe_fdefinition({}* %132)
          to label %normal-dest259 unwind label %cleanup-lpad

normal-dest259:                                   ; preds = %normal-dest252
  %.elt2578 = extractvalue { {}*, i64 } %130, 1
  %cond2473 = icmp eq i64 %.elt2578, 0
  %.elt2576 = extractvalue { {}*, i64 } %130, 0
  %G112265.0 = select i1 %cond2473, {}* %131, {}* %.elt2576
  %ptrtoint260 = ptrtoint {}* %133 to i64
  %entry-point-addr-uint261 = add i64 %ptrtoint260, 7
  %entry-point-addr262 = inttoptr i64 %entry-point-addr-uint261 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point263 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr262, align 8
  %134 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point263({}* %133, i64 2, {}* %G112264.0, {}* %G112265.0, {}* null, {}* null)
          to label %normal-dest266 unwind label %cleanup-lpad

normal-dest266:                                   ; preds = %normal-dest259
  %.elt2580 = extractvalue { {}*, i64 } %134, 0
  %.elt2582 = extractvalue { {}*, i64 } %134, 1
  %cond2474 = icmp eq i64 %.elt2582, 0
  %135 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112268.0 = select i1 %cond2474, {}* %135, {}* %.elt2580
  %136 = icmp eq {}* %G112268.0, %135
  br i1 %136, label %tag119, label %tag205

normal-dest278:                                   ; preds = %tag
  %137 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag95

normal-dest296:                                   ; preds = %maybe-more-tests1148
  %ptrtoint297 = ptrtoint {}* %302 to i64
  %entry-point-addr-uint298 = add i64 %ptrtoint297, 7
  %entry-point-addr299 = inttoptr i64 %entry-point-addr-uint298 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point300 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr299, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point300({}* %302, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest303 unwind label %cleanup-lpad

normal-dest303:                                   ; preds = %normal-dest296
  %.elt3059 = extractvalue { {}*, i64 } %138, 0
  %.elt3061 = extractvalue { {}*, i64 } %138, 1
  %cond2569 = icmp eq i64 %.elt3061, 0
  %139 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112057.1 = select i1 %cond2569, {}* %139, {}* %.elt3059
  br label %tag153

normal-dest323:                                   ; preds = %tag7
  %140 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %141 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %142 = icmp eq {}* %140, %141
  br i1 %142, label %tag36, label %tag99

normal-dest330:                                   ; preds = %tag8
  %.elt2616 = extractvalue { {}*, i64 } %13, 0
  %.elt2618 = extractvalue { {}*, i64 } %13, 1
  %cond2483 = icmp eq i64 %.elt2618, 0
  %143 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %CONSTRAINT.0 = select i1 %cond2483, {}* %143, {}* %.elt2616
  %144 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %145 = invoke {}* @cc_safe_fdefinition({}* %144)
          to label %normal-dest339 unwind label %cleanup-lpad

normal-dest339:                                   ; preds = %normal-dest330
  %146 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %147 = invoke {}* @cc_safe_fdefinition({}* %146)
          to label %normal-dest341 unwind label %cleanup-lpad

normal-dest341:                                   ; preds = %normal-dest339
  %ptrtoint342 = ptrtoint {}* %147 to i64
  %entry-point-addr-uint343 = add i64 %ptrtoint342, 7
  %entry-point-addr344 = inttoptr i64 %entry-point-addr-uint343 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point345 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr344, align 8
  %148 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point345({}* %147, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest348 unwind label %cleanup-lpad

normal-dest348:                                   ; preds = %normal-dest341
  %.elt2620 = extractvalue { {}*, i64 } %148, 0
  %.elt2622 = extractvalue { {}*, i64 } %148, 1
  %cond2484 = icmp eq i64 %.elt2622, 0
  %149 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112285.0 = select i1 %cond2484, {}* %149, {}* %.elt2620
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %151 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %152 = invoke {}* @cc_safe_fdefinition({}* %151)
          to label %normal-dest355 unwind label %cleanup-lpad

normal-dest355:                                   ; preds = %normal-dest348
  %ptrtoint356 = ptrtoint {}* %152 to i64
  %entry-point-addr-uint357 = add i64 %ptrtoint356, 7
  %entry-point-addr358 = inttoptr i64 %entry-point-addr-uint357 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point359 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr358, align 8
  %153 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point359({}* %152, i64 1, {}* %150, {}* null, {}* null, {}* null)
          to label %normal-dest362 unwind label %cleanup-lpad

normal-dest362:                                   ; preds = %normal-dest355
  %154 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %155 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %156 = invoke {}* @cc_safe_fdefinition({}* %155)
          to label %normal-dest369 unwind label %cleanup-lpad

normal-dest369:                                   ; preds = %normal-dest362
  %.elt2626 = extractvalue { {}*, i64 } %153, 1
  %cond2485 = icmp eq i64 %.elt2626, 0
  %.elt2624 = extractvalue { {}*, i64 } %153, 0
  %G112286.0 = select i1 %cond2485, {}* %154, {}* %.elt2624
  %ptrtoint370 = ptrtoint {}* %156 to i64
  %entry-point-addr-uint371 = add i64 %ptrtoint370, 7
  %entry-point-addr372 = inttoptr i64 %entry-point-addr-uint371 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point373 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr372, align 8
  %157 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point373({}* %156, i64 2, {}* %G112285.0, {}* %G112286.0, {}* null, {}* null)
          to label %normal-dest376 unwind label %cleanup-lpad

normal-dest376:                                   ; preds = %normal-dest369
  %.elt2628 = extractvalue { {}*, i64 } %157, 0
  %.elt2630 = extractvalue { {}*, i64 } %157, 1
  %cond2486 = icmp eq i64 %.elt2630, 0
  %158 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112289.0 = select i1 %cond2486, {}* %158, {}* %.elt2628
  %159 = icmp eq {}* %G112289.0, %158
  br i1 %159, label %tag154, label %tag215

normal-dest388:                                   ; preds = %tag9
  %160 = load i64, i64* bitcast ({}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12) to i64*), align 16
  br label %tag62

normal-dest399:                                   ; preds = %tag11
  %161 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %162 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %163 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %164 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1137), align 8
  %ptrtoint400 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint401 = add i64 %ptrtoint400, 7
  %entry-point-addr402 = inttoptr i64 %entry-point-addr-uint401 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point403 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr402, align 8
  %165 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point403({}* %16, i64 5, {}* %161, {}* %162, {}* %"closure->LAMBDA1351", {}* %163, {}* %164)
          to label %normal-dest406 unwind label %cleanup-lpad

normal-dest406:                                   ; preds = %normal-dest399
  %.elt2915 = extractvalue { {}*, i64 } %165, 0
  %.elt2917 = extractvalue { {}*, i64 } %165, 1
  %cond2541 = icmp eq i64 %.elt2917, 0
  %166 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111411.1 = select i1 %cond2541, {}* %166, {}* %.elt2915
  br label %tag12

normal-dest413:                                   ; preds = %tag12
  %167 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %168 = invoke {}* @cc_safe_fdefinition({}* %167)
          to label %normal-dest415 unwind label %cleanup-lpad

normal-dest415:                                   ; preds = %normal-dest413
  %ptrtoint416 = ptrtoint {}* %168 to i64
  %entry-point-addr-uint417 = add i64 %ptrtoint416, 7
  %entry-point-addr418 = inttoptr i64 %entry-point-addr-uint417 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point419 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr418, align 8
  %169 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point419({}* %168, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest422 unwind label %cleanup-lpad

normal-dest422:                                   ; preds = %normal-dest415
  %.elt2919 = extractvalue { {}*, i64 } %169, 0
  %.elt2921 = extractvalue { {}*, i64 } %169, 1
  %cond2542 = icmp eq i64 %.elt2921, 0
  %170 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111526.0 = select i1 %cond2542, {}* %170, {}* %.elt2919
  %ptrtoint428 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint429 = add i64 %ptrtoint428, 7
  %entry-point-addr430 = inttoptr i64 %entry-point-addr-uint429 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point431 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr430, align 8
  %171 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point431({}* %18, i64 1, {}* %G111526.0, {}* null, {}* null, {}* null)
          to label %normal-dest434 unwind label %cleanup-lpad

normal-dest434:                                   ; preds = %normal-dest422
  %.elt2923 = extractvalue { {}*, i64 } %171, 0
  %.elt2925 = extractvalue { {}*, i64 } %171, 1
  %cond2543 = icmp eq i64 %.elt2925, 0
  %172 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111413.0 = select i1 %cond2543, {}* %172, {}* %.elt2923
  %173 = icmp eq {}* %ANZAHL.0, %172
  br i1 %173, label %tag107, label %tag21

normal-dest441:                                   ; preds = %tag14
  %174 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %175 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %176 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %177 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1145), align 8
  %ptrtoint442 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint443 = add i64 %ptrtoint442, 7
  %entry-point-addr444 = inttoptr i64 %entry-point-addr-uint443 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point445 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr444, align 8
  %178 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point445({}* %20, i64 5, {}* %174, {}* %175, {}* %"closure->LAMBDA526", {}* %176, {}* %177)
          to label %normal-dest448 unwind label %cleanup-lpad

normal-dest448:                                   ; preds = %normal-dest441
  %.elt2947 = extractvalue { {}*, i64 } %178, 0
  %.elt2949 = extractvalue { {}*, i64 } %178, 1
  %cond2547 = icmp eq i64 %.elt2949, 0
  %179 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111457.1 = select i1 %cond2547, {}* %179, {}* %.elt2947
  br label %tag25

normal-dest455:                                   ; preds = %tag16
  %ptrtoint456 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint457 = add i64 %ptrtoint456, 7
  %entry-point-addr458 = inttoptr i64 %entry-point-addr-uint457 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point459 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr458, align 8
  %180 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point459({}* %22, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest462 unwind label %cleanup-lpad

normal-dest462:                                   ; preds = %normal-dest455
  %.elt2859 = extractvalue { {}*, i64 } %180, 0
  %.elt2861 = extractvalue { {}*, i64 } %180, 1
  %cond2530 = icmp eq i64 %.elt2861, 0
  %181 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111350.0 = select i1 %cond2530, {}* %181, {}* %.elt2859
  %ptrtoint470 = ptrtoint {}* %"closure->LAMBDA2271" to i64
  %tag-only471 = and i64 %ptrtoint470, 7
  %test472 = icmp eq i64 %tag-only471, 1
  br i1 %test472, label %header-check-br469, label %tag77

header-check-br469:                               ; preds = %normal-dest462
  %irc-bit-cast473 = bitcast {}* %"closure->LAMBDA2271" to i8*
  %gep474 = getelementptr inbounds i8, i8* %irc-bit-cast473, i64 -9
  %irc-bit-cast475 = bitcast i8* %gep474 to i64*
  %182 = load i64, i64* %irc-bit-cast475, align 8
  %.off3271 = add i64 %182, -913
  %183 = icmp ult i64 %.off3271, 85
  br i1 %183, label %tag91, label %header-check-br2038

header-check-br478:                               ; preds = %tag17
  %irc-bit-cast482 = bitcast {}* %"closure->LAMBDA1471" to i8*
  %gep483 = getelementptr inbounds i8, i8* %irc-bit-cast482, i64 -9
  %irc-bit-cast484 = bitcast i8* %gep483 to i64*
  %184 = load i64, i64* %irc-bit-cast484, align 8
  %.off3264 = add i64 %184, -913
  %185 = icmp ult i64 %.off3264, 85
  br i1 %185, label %tag68, label %header-check-br782

normal-dest493:                                   ; preds = %tag18
  %186 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1125), align 8
  %187 = invoke {}* @cc_safe_fdefinition({}* %186)
          to label %normal-dest499 unwind label %cleanup-lpad

normal-dest499:                                   ; preds = %normal-dest493
  %ptrtoint500 = ptrtoint {}* %187 to i64
  %entry-point-addr-uint501 = add i64 %ptrtoint500, 7
  %entry-point-addr502 = inttoptr i64 %entry-point-addr-uint501 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point503 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr502, align 8
  %188 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point503({}* %187, i64 1, {}* %G111318.0, {}* null, {}* null, {}* null)
          to label %normal-dest506 unwind label %cleanup-lpad

normal-dest506:                                   ; preds = %normal-dest499
  %.elt2759 = extractvalue { {}*, i64 } %188, 0
  %189 = ptrtoint {}* %.elt2759 to i64
  %.elt2761 = extractvalue { {}*, i64 } %188, 1
  br label %tag62

header-check-br516:                               ; preds = %header-check-br1222
  %.off3261 = add i64 %310, -1001
  %190 = icmp ult i64 %.off3261, 5
  br i1 %190, label %maybe-more-tests524, label %tag214

maybe-more-tests524:                              ; preds = %header-check-br516
  %191 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %192 = invoke {}* @cc_safe_fdefinition({}* %191)
          to label %normal-dest1061 unwind label %cleanup-lpad

normal-dest525:                                   ; preds = %tag21
  %193 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %194 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %195 = icmp eq {}* %193, %194
  br i1 %195, label %tag221, label %tag51

normal-dest551:                                   ; preds = %tag25
  %196 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1125), align 8
  %197 = invoke {}* @cc_safe_fdefinition({}* %196)
          to label %normal-dest557 unwind label %cleanup-lpad

normal-dest557:                                   ; preds = %normal-dest551
  %ptrtoint558 = ptrtoint {}* %197 to i64
  %entry-point-addr-uint559 = add i64 %ptrtoint558, 7
  %entry-point-addr560 = inttoptr i64 %entry-point-addr-uint559 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point561 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr560, align 8
  %198 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point561({}* %197, i64 1, {}* %G111369.0, {}* null, {}* null, {}* null)
          to label %normal-dest564 unwind label %cleanup-lpad

normal-dest564:                                   ; preds = %normal-dest557
  %.elt2955 = extractvalue { {}*, i64 } %198, 0
  %.elt2957 = extractvalue { {}*, i64 } %198, 1
  %cond2548 = icmp eq i64 %.elt2957, 0
  %199 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111414.1 = select i1 %cond2548, {}* %199, {}* %.elt2955
  br label %tag9

normal-dest571:                                   ; preds = %tag27
  %200 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %201 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %202 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %203 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1143), align 8
  %ptrtoint572 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint573 = add i64 %ptrtoint572, 7
  %entry-point-addr574 = inttoptr i64 %entry-point-addr-uint573 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point575 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr574, align 8
  %204 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point575({}* %27, i64 5, {}* %200, {}* %201, {}* %"closure->LAMBDA526", {}* %202, {}* %203)
          to label %normal-dest578 unwind label %cleanup-lpad

normal-dest578:                                   ; preds = %normal-dest571
  %.elt2983 = extractvalue { {}*, i64 } %204, 0
  %.elt2985 = extractvalue { {}*, i64 } %204, 1
  %cond2554 = icmp eq i64 %.elt2985, 0
  %205 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111416.1 = select i1 %cond2554, {}* %205, {}* %.elt2983
  br label %tag174

normal-dest597:                                   ; preds = %tag35
  %ptrtoint598 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint599 = add i64 %ptrtoint598, 7
  %entry-point-addr600 = inttoptr i64 %entry-point-addr-uint599 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point601 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr600, align 8
  %206 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point601({}* %30, i64 1, {}* %323, {}* null, {}* null, {}* null)
          to label %normal-dest604 unwind label %cleanup-lpad

normal-dest604:                                   ; preds = %normal-dest597
  %.elt2823 = extractvalue { {}*, i64 } %206, 0
  %.elt2825 = extractvalue { {}*, i64 } %206, 1
  %cond2523 = icmp eq i64 %.elt2825, 0
  %207 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111679.0 = select i1 %cond2523, {}* %207, {}* %.elt2823
  %208 = icmp eq {}* %G111679.0, %207
  br i1 %208, label %tag164, label %tag196

normal-dest611:                                   ; preds = %tag36
  %ptrtoint612 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint613 = add i64 %ptrtoint612, 7
  %entry-point-addr614 = inttoptr i64 %entry-point-addr-uint613 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point615 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr614, align 8
  %209 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point615({}* %32, i64 1, {}* %140, {}* null, {}* null, {}* null)
          to label %normal-dest618 unwind label %cleanup-lpad

normal-dest618:                                   ; preds = %normal-dest611
  %.elt3039 = extractvalue { {}*, i64 } %209, 0
  %.elt3041 = extractvalue { {}*, i64 } %209, 1
  %cond2565 = icmp eq i64 %.elt3041, 0
  %210 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112082.0 = select i1 %cond2565, {}* %210, {}* %.elt3039
  %211 = icmp eq {}* %G112082.0, %210
  br i1 %211, label %tag151, label %tag144

normal-dest625:                                   ; preds = %maybe-more-tests2255
  %ptrtoint626 = ptrtoint {}* %481 to i64
  %entry-point-addr-uint627 = add i64 %ptrtoint626, 7
  %entry-point-addr628 = inttoptr i64 %entry-point-addr-uint627 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point629 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr628, align 8
  %212 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point629({}* %481, i64 1, {}* nonnull %"closure->LAMBDA526", {}* null, {}* null, {}* null)
          to label %normal-dest632 unwind label %cleanup-lpad

normal-dest632:                                   ; preds = %normal-dest625
  %.elt2959 = extractvalue { {}*, i64 } %212, 0
  %.elt2961 = extractvalue { {}*, i64 } %212, 1
  %cond2549 = icmp eq i64 %.elt2961, 0
  %213 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111457.2 = select i1 %cond2549, {}* %213, {}* %.elt2959
  br label %tag25

normal-dest639:                                   ; preds = %tag39
  %214 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %215 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %216 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %217 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1147), align 8
  %ptrtoint640 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint641 = add i64 %ptrtoint640, 7
  %entry-point-addr642 = inttoptr i64 %entry-point-addr-uint641 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point643 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr642, align 8
  %218 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point643({}* %34, i64 5, {}* %214, {}* %215, {}* %"closure->LAMBDA1351", {}* %216, {}* %217)
          to label %normal-dest646 unwind label %cleanup-lpad

normal-dest646:                                   ; preds = %normal-dest639
  %.elt2831 = extractvalue { {}*, i64 } %218, 0
  %.elt2833 = extractvalue { {}*, i64 } %218, 1
  %cond2525 = icmp eq i64 %.elt2833, 0
  %219 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111544.1 = select i1 %cond2525, {}* %219, {}* %.elt2831
  br label %tag150

header-check-br674:                               ; preds = %header-check-br1802
  %.off3289 = add i64 %406, -1001
  %220 = icmp ult i64 %.off3289, 5
  br i1 %220, label %maybe-more-tests682, label %tag11

maybe-more-tests682:                              ; preds = %header-check-br674
  %221 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %222 = invoke {}* @cc_safe_fdefinition({}* %221)
          to label %normal-dest1754 unwind label %cleanup-lpad

normal-dest684:                                   ; preds = %tag46
  %223 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %224 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %225 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %226 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1156), align 16
  %ptrtoint685 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint686 = add i64 %ptrtoint685, 7
  %entry-point-addr687 = inttoptr i64 %entry-point-addr-uint686 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point688 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr687, align 8
  %227 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point688({}* %36, i64 5, {}* %223, {}* %224, {}* %"closure->LAMBDA1471", {}* %225, {}* %226)
          to label %normal-dest691 unwind label %cleanup-lpad

normal-dest691:                                   ; preds = %normal-dest684
  %.elt2795 = extractvalue { {}*, i64 } %227, 0
  %.elt2797 = extractvalue { {}*, i64 } %227, 1
  %cond2518 = icmp eq i64 %.elt2797, 0
  %228 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111707.1 = select i1 %cond2518, {}* %228, {}* %.elt2795
  br label %tag141

header-check-br697:                               ; preds = %header-check-br1002
  %.off3287 = add i64 %284, -1001
  %229 = icmp ult i64 %.off3287, 5
  br i1 %229, label %maybe-more-tests705, label %tag27

maybe-more-tests705:                              ; preds = %header-check-br697
  %230 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %231 = invoke {}* @cc_safe_fdefinition({}* %230)
          to label %normal-dest1925 unwind label %cleanup-lpad

normal-dest721:                                   ; preds = %tag51
  %ptrtoint722 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint723 = add i64 %ptrtoint722, 7
  %entry-point-addr724 = inttoptr i64 %entry-point-addr-uint723 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point725 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr724, align 8
  %232 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point725({}* %38, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest728 unwind label %cleanup-lpad

normal-dest728:                                   ; preds = %normal-dest721
  %.elt2943 = extractvalue { {}*, i64 } %232, 0
  %.elt2945 = extractvalue { {}*, i64 } %232, 1
  %cond2546 = icmp eq i64 %.elt2945, 0
  %233 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111369.0 = select i1 %cond2546, {}* %233, {}* %.elt2943
  %ptrtoint735 = ptrtoint {}* %"closure->LAMBDA526" to i64
  %tag-only736 = and i64 %ptrtoint735, 7
  %test737 = icmp eq i64 %tag-only736, 1
  br i1 %test737, label %header-check-br734, label %tag14

header-check-br734:                               ; preds = %normal-dest728
  %irc-bit-cast738 = bitcast {}* %"closure->LAMBDA526" to i8*
  %gep739 = getelementptr inbounds i8, i8* %irc-bit-cast738, i64 -9
  %irc-bit-cast740 = bitcast i8* %gep739 to i64*
  %234 = load i64, i64* %irc-bit-cast740, align 8
  %.off3282 = add i64 %234, -913
  %235 = icmp ult i64 %.off3282, 85
  br i1 %235, label %tag25, label %header-check-br2247

normal-dest744:                                   ; preds = %tag52
  %ptrtoint745 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint746 = add i64 %ptrtoint745, 7
  %entry-point-addr747 = inttoptr i64 %entry-point-addr-uint746 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point748 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr747, align 8
  %236 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point748({}* %40, i64 2, {}* %OBJEKT.0, {}* %ATTRIBUT.0, {}* null, {}* null)
          to label %normal-dest751 unwind label %cleanup-lpad

normal-dest751:                                   ; preds = %normal-dest744
  %.elt3023 = extractvalue { {}*, i64 } %236, 0
  %.elt3025 = extractvalue { {}*, i64 } %236, 1
  %cond2562 = icmp eq i64 %.elt3025, 0
  %237 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112095.0 = select i1 %cond2562, {}* %237, {}* %.elt3023
  %ptrtoint757 = ptrtoint {}* %G112090.0 to i64
  %entry-point-addr-uint758 = add i64 %ptrtoint757, 7
  %entry-point-addr759 = inttoptr i64 %entry-point-addr-uint758 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point760 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr759, align 8
  %238 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point760({}* %G112090.0, i64 5, {}* %G111272.0, {}* %CONSTRAINT.0, {}* %OBJEKT.0, {}* %ATTRIBUT.0, {}* %G112095.0)
          to label %normal-dest763 unwind label %cleanup-lpad

normal-dest763:                                   ; preds = %normal-dest751
  %239 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1125), align 8
  %240 = invoke {}* @cc_safe_fdefinition({}* %239)
          to label %normal-dest769 unwind label %cleanup-lpad

normal-dest769:                                   ; preds = %normal-dest763
  %ptrtoint770 = ptrtoint {}* %240 to i64
  %entry-point-addr-uint771 = add i64 %ptrtoint770, 7
  %entry-point-addr772 = inttoptr i64 %entry-point-addr-uint771 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point773 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr772, align 8
  %241 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point773({}* %240, i64 1, {}* %G111272.0, {}* null, {}* null, {}* null)
          to label %normal-dest776 unwind label %cleanup-lpad

normal-dest776:                                   ; preds = %normal-dest769
  %.elt3031 = extractvalue { {}*, i64 } %241, 0
  %.elt3033 = extractvalue { {}*, i64 } %241, 1
  %cond2563 = icmp eq i64 %.elt3033, 0
  %242 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %TEXT.1 = select i1 %cond2563, {}* %242, {}* %.elt3031
  br label %tag118

header-check-br782:                               ; preds = %header-check-br478
  %.off3265 = add i64 %184, -1001
  %243 = icmp ult i64 %.off3265, 5
  br i1 %243, label %maybe-more-tests790, label %tag139

maybe-more-tests790:                              ; preds = %header-check-br782
  %244 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %245 = invoke {}* @cc_safe_fdefinition({}* %244)
          to label %normal-dest2025 unwind label %cleanup-lpad

normal-dest819:                                   ; preds = %tag65
  %.elt2600 = extractvalue { {}*, i64 } %44, 0
  %.elt2602 = extractvalue { {}*, i64 } %44, 1
  %cond2479 = icmp eq i64 %.elt2602, 0
  %246 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ATTRIBUT.0 = select i1 %cond2479, {}* %246, {}* %.elt2600
  %247 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %248 = invoke {}* @cc_safe_fdefinition({}* %247)
          to label %normal-dest828 unwind label %cleanup-lpad

normal-dest828:                                   ; preds = %normal-dest819
  %249 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %250 = invoke {}* @cc_safe_fdefinition({}* %249)
          to label %normal-dest830 unwind label %cleanup-lpad

normal-dest830:                                   ; preds = %normal-dest828
  %ptrtoint831 = ptrtoint {}* %250 to i64
  %entry-point-addr-uint832 = add i64 %ptrtoint831, 7
  %entry-point-addr833 = inttoptr i64 %entry-point-addr-uint832 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point834 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr833, align 8
  %251 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point834({}* %250, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest837 unwind label %cleanup-lpad

normal-dest837:                                   ; preds = %normal-dest830
  %.elt2604 = extractvalue { {}*, i64 } %251, 0
  %.elt2606 = extractvalue { {}*, i64 } %251, 1
  %cond2480 = icmp eq i64 %.elt2606, 0
  %252 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112278.0 = select i1 %cond2480, {}* %252, {}* %.elt2604
  %253 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %254 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %255 = invoke {}* @cc_safe_fdefinition({}* %254)
          to label %normal-dest844 unwind label %cleanup-lpad

normal-dest844:                                   ; preds = %normal-dest837
  %ptrtoint845 = ptrtoint {}* %255 to i64
  %entry-point-addr-uint846 = add i64 %ptrtoint845, 7
  %entry-point-addr847 = inttoptr i64 %entry-point-addr-uint846 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point848 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr847, align 8
  %256 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point848({}* %255, i64 1, {}* %253, {}* null, {}* null, {}* null)
          to label %normal-dest851 unwind label %cleanup-lpad

normal-dest851:                                   ; preds = %normal-dest844
  %257 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %258 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %259 = invoke {}* @cc_safe_fdefinition({}* %258)
          to label %normal-dest858 unwind label %cleanup-lpad

normal-dest858:                                   ; preds = %normal-dest851
  %.elt2610 = extractvalue { {}*, i64 } %256, 1
  %cond2481 = icmp eq i64 %.elt2610, 0
  %.elt2608 = extractvalue { {}*, i64 } %256, 0
  %G112279.0 = select i1 %cond2481, {}* %257, {}* %.elt2608
  %ptrtoint859 = ptrtoint {}* %259 to i64
  %entry-point-addr-uint860 = add i64 %ptrtoint859, 7
  %entry-point-addr861 = inttoptr i64 %entry-point-addr-uint860 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point862 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr861, align 8
  %260 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point862({}* %259, i64 2, {}* %G112278.0, {}* %G112279.0, {}* null, {}* null)
          to label %normal-dest865 unwind label %cleanup-lpad

normal-dest865:                                   ; preds = %normal-dest858
  %.elt2612 = extractvalue { {}*, i64 } %260, 0
  %.elt2614 = extractvalue { {}*, i64 } %260, 1
  %cond2482 = icmp eq i64 %.elt2614, 0
  %261 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112282.0 = select i1 %cond2482, {}* %261, {}* %.elt2612
  %262 = icmp eq {}* %G112282.0, %261
  br i1 %262, label %tag72, label %tag8

normal-dest872:                                   ; preds = %maybe-more-tests1469
  %ptrtoint873 = ptrtoint {}* %346 to i64
  %entry-point-addr-uint874 = add i64 %ptrtoint873, 7
  %entry-point-addr875 = inttoptr i64 %entry-point-addr-uint874 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point876 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr875, align 8
  %263 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point876({}* %346, i64 1, {}* nonnull %"closure->LAMBDA2271", {}* null, {}* null, {}* null)
          to label %normal-dest879 unwind label %cleanup-lpad

normal-dest879:                                   ; preds = %normal-dest872
  %.elt2895 = extractvalue { {}*, i64 } %263, 0
  %.elt2897 = extractvalue { {}*, i64 } %263, 1
  %cond2537 = icmp eq i64 %.elt2897, 0
  %264 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111564.1 = select i1 %cond2537, {}* %264, {}* %.elt2895
  br label %tag

normal-dest905:                                   ; preds = %tag68
  %265 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag18

header-check-br923:                               ; preds = %tag71
  %irc-bit-cast927 = bitcast {}* %"closure->LAMBDA2271" to i8*
  %gep928 = getelementptr inbounds i8, i8* %irc-bit-cast927, i64 -9
  %irc-bit-cast929 = bitcast i8* %gep928 to i64*
  %266 = load i64, i64* %irc-bit-cast929, align 8
  %.off3275 = add i64 %266, -913
  %267 = icmp ult i64 %.off3275, 85
  br i1 %267, label %tag122, label %header-check-br2001

normal-dest933:                                   ; preds = %tag72
  %268 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %269 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %270 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %271 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1174), align 16
  %ptrtoint1039 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint1040 = add i64 %ptrtoint1039, 7
  %entry-point-addr1041 = inttoptr i64 %entry-point-addr-uint1040 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1042 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1041, align 8
  %272 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1042({}* %47, i64 5, {}* %268, {}* %269, {}* %farg0, {}* %270, {}* %271)
          to label %normal-dest1045 unwind label %cleanup-lpad

normal-dest947:                                   ; preds = %tag75
  %273 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 238), align 16
  %ptrtoint948 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint949 = add i64 %ptrtoint948, 7
  %entry-point-addr950 = inttoptr i64 %entry-point-addr-uint949 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point951 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr950, align 8
  %274 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point951({}* %49, i64 5, {}* %CONSTRAINT.0, {}* %273, {}* %CONSTRAINT.0, {}* %OBJEKT.0, {}* %ATTRIBUT.0)
          to label %normal-dest954 unwind label %cleanup-lpad

normal-dest954:                                   ; preds = %normal-dest947
  %.elt2640 = extractvalue { {}*, i64 } %274, 0
  %.elt2642 = extractvalue { {}*, i64 } %274, 1
  %cond2489 = icmp eq i64 %.elt2642, 0
  %275 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %TEXT.2 = select i1 %cond2489, {}* %275, {}* %.elt2640
  br label %tag118

normal-dest961:                                   ; preds = %tag77
  %276 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %277 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %278 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %279 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1151), align 8
  %ptrtoint962 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint963 = add i64 %ptrtoint962, 7
  %entry-point-addr964 = inttoptr i64 %entry-point-addr-uint963 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point965 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr964, align 8
  %280 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point965({}* %51, i64 5, {}* %276, {}* %277, {}* %"closure->LAMBDA2271", {}* %278, {}* %279)
          to label %normal-dest968 unwind label %cleanup-lpad

normal-dest968:                                   ; preds = %normal-dest961
  %.elt2863 = extractvalue { {}*, i64 } %280, 0
  %.elt2865 = extractvalue { {}*, i64 } %280, 1
  %cond2531 = icmp eq i64 %.elt2865, 0
  %281 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111590.1 = select i1 %cond2531, {}* %281, {}* %.elt2863
  br label %tag91

normal-dest989:                                   ; preds = %maybe-more-tests2009
  %ptrtoint990 = ptrtoint {}* %441 to i64
  %entry-point-addr-uint991 = add i64 %ptrtoint990, 7
  %entry-point-addr992 = inttoptr i64 %entry-point-addr-uint991 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point993 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr992, align 8
  %282 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point993({}* %441, i64 1, {}* nonnull %"closure->LAMBDA2271", {}* null, {}* null, {}* null)
          to label %normal-dest996 unwind label %cleanup-lpad

normal-dest996:                                   ; preds = %normal-dest989
  %.elt2907 = extractvalue { {}*, i64 } %282, 0
  %.elt2909 = extractvalue { {}*, i64 } %282, 1
  %cond2539 = icmp eq i64 %.elt2909, 0
  %283 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111549.1 = select i1 %cond2539, {}* %283, {}* %.elt2907
  br label %tag122

header-check-br1002:                              ; preds = %tag81
  %irc-bit-cast1006 = bitcast {}* %"closure->LAMBDA526" to i8*
  %gep1007 = getelementptr inbounds i8, i8* %irc-bit-cast1006, i64 -9
  %irc-bit-cast1008 = bitcast i8* %gep1007 to i64*
  %284 = load i64, i64* %irc-bit-cast1008, align 8
  %.off3286 = add i64 %284, -913
  %285 = icmp ult i64 %.off3286, 85
  br i1 %285, label %tag174, label %header-check-br697

normal-dest1012:                                  ; preds = %maybe-more-tests1343
  %ptrtoint1013 = ptrtoint {}* %322 to i64
  %entry-point-addr-uint1014 = add i64 %ptrtoint1013, 7
  %entry-point-addr1015 = inttoptr i64 %entry-point-addr-uint1014 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1016 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1015, align 8
  %286 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1016({}* %322, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest1019 unwind label %cleanup-lpad

normal-dest1019:                                  ; preds = %normal-dest1012
  %.elt3075 = extractvalue { {}*, i64 } %286, 0
  %.elt3077 = extractvalue { {}*, i64 } %286, 1
  %cond2572 = icmp eq i64 %.elt3077, 0
  %287 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112035.1 = select i1 %cond2572, {}* %287, {}* %.elt3075
  br label %tag120

normal-dest1026:                                  ; preds = %tag84
  %288 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %289 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %290 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %291 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1149), align 8
  %ptrtoint1027 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint1028 = add i64 %ptrtoint1027, 7
  %entry-point-addr1029 = inttoptr i64 %entry-point-addr-uint1028 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1030 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1029, align 8
  %292 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1030({}* %53, i64 5, {}* %288, {}* %289, {}* %"closure->LAMBDA2271", {}* %290, {}* %291)
          to label %normal-dest1033 unwind label %cleanup-lpad

normal-dest1033:                                  ; preds = %normal-dest1026
  %.elt2899 = extractvalue { {}*, i64 } %292, 0
  %.elt2901 = extractvalue { {}*, i64 } %292, 1
  %cond2538 = icmp eq i64 %.elt2901, 0
  %293 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111549.2 = select i1 %cond2538, {}* %293, {}* %.elt2899
  br label %tag122

normal-dest1045:                                  ; preds = %normal-dest933
  call void @unreachableError()
  unreachable

normal-dest1061:                                  ; preds = %maybe-more-tests524
  %ptrtoint1062 = ptrtoint {}* %192 to i64
  %entry-point-addr-uint1063 = add i64 %ptrtoint1062, 7
  %entry-point-addr1064 = inttoptr i64 %entry-point-addr-uint1063 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1065 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1064, align 8
  %294 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1065({}* %192, i64 1, {}* nonnull %"closure->LAMBDA1471", {}* null, {}* null, {}* null)
          to label %normal-dest1068 unwind label %cleanup-lpad

normal-dest1068:                                  ; preds = %normal-dest1061
  %.elt2783 = extractvalue { {}*, i64 } %294, 0
  %.elt2785 = extractvalue { {}*, i64 } %294, 1
  %cond2515 = icmp eq i64 %.elt2785, 0
  %295 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111733.1 = select i1 %cond2515, {}* %295, {}* %.elt2783
  br label %tag181

normal-dest1121:                                  ; preds = %tag91
  %296 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1125), align 8
  %297 = invoke {}* @cc_safe_fdefinition({}* %296)
          to label %normal-dest1127 unwind label %cleanup-lpad

normal-dest1127:                                  ; preds = %normal-dest1121
  %ptrtoint1128 = ptrtoint {}* %297 to i64
  %entry-point-addr-uint1129 = add i64 %ptrtoint1128, 7
  %entry-point-addr1130 = inttoptr i64 %entry-point-addr-uint1129 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1131 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1130, align 8
  %298 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1131({}* %297, i64 1, {}* %G111350.0, {}* null, {}* null, {}* null)
          to label %normal-dest1134 unwind label %cleanup-lpad

normal-dest1134:                                  ; preds = %normal-dest1127
  %.elt2871 = extractvalue { {}*, i64 } %298, 0
  %.elt2873 = extractvalue { {}*, i64 } %298, 1
  %cond2532 = icmp eq i64 %.elt2873, 0
  %299 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111547.1 = select i1 %cond2532, {}* %299, {}* %.elt2871
  br label %tag95

header-check-br1140:                              ; preds = %header-check-br1614
  %.off3296 = add i64 %368, -1001
  %300 = icmp ult i64 %.off3296, 5
  br i1 %300, label %maybe-more-tests1148, label %tag190

maybe-more-tests1148:                             ; preds = %header-check-br1140
  %301 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %302 = invoke {}* @cc_safe_fdefinition({}* %301)
          to label %normal-dest296 unwind label %cleanup-lpad

normal-dest1155:                                  ; preds = %tag95
  %303 = load i64, i64* bitcast ({}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12) to i64*), align 16
  br label %tag62

normal-dest1186:                                  ; preds = %tag99
  %ptrtoint1187 = ptrtoint {}* %57 to i64
  %entry-point-addr-uint1188 = add i64 %ptrtoint1187, 7
  %entry-point-addr1189 = inttoptr i64 %entry-point-addr-uint1188 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1190 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1189, align 8
  %304 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1190({}* %57, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest1193 unwind label %cleanup-lpad

normal-dest1193:                                  ; preds = %normal-dest1186
  %.elt3015 = extractvalue { {}*, i64 } %304, 0
  %.elt3017 = extractvalue { {}*, i64 } %304, 1
  %cond2560 = icmp eq i64 %.elt3017, 0
  %305 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111272.0 = select i1 %cond2560, {}* %305, {}* %.elt3015
  %ptrtoint1200 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only1201 = and i64 %ptrtoint1200, 7
  %test1202 = icmp eq i64 %tag-only1201, 1
  br i1 %test1202, label %header-check-br1199, label %tag166

header-check-br1199:                              ; preds = %normal-dest1193
  %irc-bit-cast1203 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep1204 = getelementptr inbounds i8, i8* %irc-bit-cast1203, i64 -9
  %irc-bit-cast1205 = bitcast i8* %gep1204 to i64*
  %306 = load i64, i64* %irc-bit-cast1205, align 8
  %.off3293 = add i64 %306, -913
  %307 = icmp ult i64 %.off3293, 85
  br i1 %307, label %tag52, label %header-check-br1839

normal-dest1209:                                  ; preds = %tag102
  %ptrtoint1210 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint1211 = add i64 %ptrtoint1210, 7
  %entry-point-addr1212 = inttoptr i64 %entry-point-addr-uint1211 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1213 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1212, align 8
  %308 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1213({}* %59, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest1216 unwind label %cleanup-lpad

normal-dest1216:                                  ; preds = %normal-dest1209
  %.elt2767 = extractvalue { {}*, i64 } %308, 0
  %.elt2769 = extractvalue { {}*, i64 } %308, 1
  %cond2512 = icmp eq i64 %.elt2769, 0
  %309 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111330.0 = select i1 %cond2512, {}* %309, {}* %.elt2767
  %ptrtoint1223 = ptrtoint {}* %"closure->LAMBDA1471" to i64
  %tag-only1224 = and i64 %ptrtoint1223, 7
  %test1225 = icmp eq i64 %tag-only1224, 1
  br i1 %test1225, label %header-check-br1222, label %tag214

header-check-br1222:                              ; preds = %normal-dest1216
  %irc-bit-cast1226 = bitcast {}* %"closure->LAMBDA1471" to i8*
  %gep1227 = getelementptr inbounds i8, i8* %irc-bit-cast1226, i64 -9
  %irc-bit-cast1228 = bitcast i8* %gep1227 to i64*
  %310 = load i64, i64* %irc-bit-cast1228, align 8
  %.off3260 = add i64 %310, -913
  %311 = icmp ult i64 %.off3260, 85
  br i1 %311, label %tag181, label %header-check-br516

normal-dest1237:                                  ; preds = %normal-dest2431
  call void @unreachableError()
  unreachable

normal-dest1239:                                  ; preds = %maybe-more-tests2449
  %ptrtoint1240 = ptrtoint {}* %518 to i64
  %entry-point-addr-uint1241 = add i64 %ptrtoint1240, 7
  %entry-point-addr1242 = inttoptr i64 %entry-point-addr-uint1241 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1243 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1242, align 8
  %312 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1243({}* %518, i64 1, {}* nonnull %"closure->LAMBDA526", {}* null, {}* null, {}* null)
          to label %normal-dest1246 unwind label %cleanup-lpad

normal-dest1246:                                  ; preds = %normal-dest1239
  %.elt2979 = extractvalue { {}*, i64 } %312, 0
  %.elt2981 = extractvalue { {}*, i64 } %312, 1
  %cond2553 = icmp eq i64 %.elt2981, 0
  %313 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111431.1 = select i1 %cond2553, {}* %313, {}* %.elt2979
  br label %tag136

normal-dest1262:                                  ; preds = %maybe-more-tests1909
  %ptrtoint1263 = ptrtoint {}* %426 to i64
  %entry-point-addr-uint1264 = add i64 %ptrtoint1263, 7
  %entry-point-addr1265 = inttoptr i64 %entry-point-addr-uint1264 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1266 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1265, align 8
  %314 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1266({}* %426, i64 1, {}* nonnull %"closure->LAMBDA1471", {}* null, {}* null, {}* null)
          to label %normal-dest1269 unwind label %cleanup-lpad

normal-dest1269:                                  ; preds = %normal-dest1262
  %.elt2803 = extractvalue { {}*, i64 } %314, 0
  %.elt2805 = extractvalue { {}*, i64 } %314, 1
  %cond2519 = icmp eq i64 %.elt2805, 0
  %315 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111707.2 = select i1 %cond2519, {}* %315, {}* %.elt2803
  br label %tag141

normal-dest1290:                                  ; preds = %tag110
  %ptrtoint1291 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint1292 = add i64 %ptrtoint1291, 7
  %entry-point-addr1293 = inttoptr i64 %entry-point-addr-uint1292 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1294 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1293, align 8
  %316 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1294({}* %62, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest1297 unwind label %cleanup-lpad

normal-dest1297:                                  ; preds = %normal-dest1290
  %.elt2731 = extractvalue { {}*, i64 } %316, 0
  %.elt2733 = extractvalue { {}*, i64 } %316, 1
  %cond2506 = icmp eq i64 %.elt2733, 0
  %317 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111318.0 = select i1 %cond2506, {}* %317, {}* %.elt2731
  %ptrtoint1304 = ptrtoint {}* %"closure->LAMBDA1351" to i64
  %tag-only1305 = and i64 %ptrtoint1304, 7
  %test1306 = icmp eq i64 %tag-only1305, 1
  br i1 %test1306, label %header-check-br1303, label %tag126

header-check-br1303:                              ; preds = %normal-dest1297
  %irc-bit-cast1307 = bitcast {}* %"closure->LAMBDA1351" to i8*
  %gep1308 = getelementptr inbounds i8, i8* %irc-bit-cast1307, i64 -9
  %irc-bit-cast1309 = bitcast i8* %gep1308 to i64*
  %318 = load i64, i64* %irc-bit-cast1309, align 8
  %.off3266 = add i64 %318, -913
  %319 = icmp ult i64 %.off3266, 85
  br i1 %319, label %tag157, label %header-check-br1623

header-check-br1335:                              ; preds = %header-check-br1661
  %.off3298 = add i64 %380, -1001
  %320 = icmp ult i64 %.off3298, 5
  br i1 %320, label %maybe-more-tests1343, label %tag179

maybe-more-tests1343:                             ; preds = %header-check-br1335
  %321 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %322 = invoke {}* @cc_safe_fdefinition({}* %321)
          to label %normal-dest1012 unwind label %cleanup-lpad

normal-dest1350:                                  ; preds = %tag118
  %323 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %324 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %325 = icmp eq {}* %323, %324
  br i1 %325, label %tag35, label %tag110

normal-dest1357:                                  ; preds = %tag119
  %326 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %327 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %328 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %329 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1178), align 16
  %ptrtoint2125 = ptrtoint {}* %65 to i64
  %entry-point-addr-uint2126 = add i64 %ptrtoint2125, 7
  %entry-point-addr2127 = inttoptr i64 %entry-point-addr-uint2126 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2128 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2127, align 8
  %330 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2128({}* %65, i64 5, {}* %326, {}* %327, {}* %farg0, {}* %328, {}* %329)
          to label %normal-dest2131 unwind label %cleanup-lpad

normal-dest1359:                                  ; preds = %tag120
  %ptrtoint1360 = ptrtoint {}* %67 to i64
  %entry-point-addr-uint1361 = add i64 %ptrtoint1360, 7
  %entry-point-addr1362 = inttoptr i64 %entry-point-addr-uint1361 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1363 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1362, align 8
  %331 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1363({}* %67, i64 2, {}* %OBJEKT.0, {}* %ATTRIBUT.0, {}* null, {}* null)
          to label %normal-dest1366 unwind label %cleanup-lpad

normal-dest1366:                                  ; preds = %normal-dest1359
  %.elt3067 = extractvalue { {}*, i64 } %331, 0
  %.elt3069 = extractvalue { {}*, i64 } %331, 1
  %cond2571 = icmp eq i64 %.elt3069, 0
  %332 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112040.0 = select i1 %cond2571, {}* %332, {}* %.elt3067
  %ptrtoint1372 = ptrtoint {}* %G112035.0 to i64
  %entry-point-addr-uint1373 = add i64 %ptrtoint1372, 7
  %entry-point-addr1374 = inttoptr i64 %entry-point-addr-uint1373 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1375 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1374, align 8
  %333 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1375({}* %G112035.0, i64 5, {}* %140, {}* %CONSTRAINT.0, {}* %OBJEKT.0, {}* %ATTRIBUT.0, {}* %G112040.0)
          to label %normal-dest1378 unwind label %cleanup-lpad

normal-dest1378:                                  ; preds = %normal-dest1366
  %334 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag118

normal-dest1419:                                  ; preds = %tag122
  %335 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag95

normal-dest1425:                                  ; preds = %maybe-more-tests2246
  %ptrtoint1426 = ptrtoint {}* %478 to i64
  %entry-point-addr-uint1427 = add i64 %ptrtoint1426, 7
  %entry-point-addr1428 = inttoptr i64 %entry-point-addr-uint1427 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1429 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1428, align 8
  %336 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1429({}* %478, i64 1, {}* nonnull %"closure->LAMBDA1351", {}* null, {}* null, {}* null)
          to label %normal-dest1432 unwind label %cleanup-lpad

normal-dest1432:                                  ; preds = %normal-dest1425
  %.elt2911 = extractvalue { {}*, i64 } %336, 0
  %.elt2913 = extractvalue { {}*, i64 } %336, 1
  %cond2540 = icmp eq i64 %.elt2913, 0
  %337 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111544.2 = select i1 %cond2540, {}* %337, {}* %.elt2911
  br label %tag150

normal-dest1448:                                  ; preds = %tag126
  %338 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %339 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %340 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %341 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1153), align 8
  %ptrtoint1449 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint1450 = add i64 %ptrtoint1449, 7
  %entry-point-addr1451 = inttoptr i64 %entry-point-addr-uint1450 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1452 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1451, align 8
  %342 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1452({}* %70, i64 5, {}* %338, {}* %339, {}* %"closure->LAMBDA1351", {}* %340, {}* %341)
          to label %normal-dest1455 unwind label %cleanup-lpad

normal-dest1455:                                  ; preds = %normal-dest1448
  %.elt2735 = extractvalue { {}*, i64 } %342, 0
  %.elt2737 = extractvalue { {}*, i64 } %342, 1
  %cond2507 = icmp eq i64 %.elt2737, 0
  %343 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111687.1 = select i1 %cond2507, {}* %343, {}* %.elt2735
  br label %tag157

header-check-br1461:                              ; preds = %header-check-br2412
  %.off3274 = add i64 %509, -1001
  %344 = icmp ult i64 %.off3274, 5
  br i1 %344, label %maybe-more-tests1469, label %tag171

maybe-more-tests1469:                             ; preds = %header-check-br1461
  %345 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %346 = invoke {}* @cc_safe_fdefinition({}* %345)
          to label %normal-dest872 unwind label %cleanup-lpad

normal-dest1470:                                  ; preds = %tag129
  %347 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %348 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %349 = icmp eq {}* %347, %348
  br i1 %349, label %tag160, label %tag102

normal-dest1488:                                  ; preds = %maybe-more-tests1631
  %ptrtoint1489 = ptrtoint {}* %372 to i64
  %entry-point-addr-uint1490 = add i64 %ptrtoint1489, 7
  %entry-point-addr1491 = inttoptr i64 %entry-point-addr-uint1490 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1492 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1491, align 8
  %350 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1492({}* %372, i64 1, {}* nonnull %"closure->LAMBDA1351", {}* null, {}* null, {}* null)
          to label %normal-dest1495 unwind label %cleanup-lpad

normal-dest1495:                                  ; preds = %normal-dest1488
  %.elt2819 = extractvalue { {}*, i64 } %350, 0
  %.elt2821 = extractvalue { {}*, i64 } %350, 1
  %cond2522 = icmp eq i64 %.elt2821, 0
  %351 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111687.2 = select i1 %cond2522, {}* %351, {}* %.elt2819
  br label %tag157

normal-dest1531:                                  ; preds = %tag136
  %352 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag9

normal-dest1537:                                  ; preds = %tag138
  %353 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %354 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %355 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %356 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1144), align 16
  %ptrtoint1538 = ptrtoint {}* %74 to i64
  %entry-point-addr-uint1539 = add i64 %ptrtoint1538, 7
  %entry-point-addr1540 = inttoptr i64 %entry-point-addr-uint1539 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1541 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1540, align 8
  %357 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1541({}* %74, i64 5, {}* %353, {}* %354, {}* %"closure->LAMBDA526", {}* %355, {}* %356)
          to label %normal-dest1544 unwind label %cleanup-lpad

normal-dest1544:                                  ; preds = %normal-dest1537
  %.elt2971 = extractvalue { {}*, i64 } %357, 0
  %.elt2973 = extractvalue { {}*, i64 } %357, 1
  %cond2552 = icmp eq i64 %.elt2973, 0
  %358 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111431.2 = select i1 %cond2552, {}* %358, {}* %.elt2971
  br label %tag136

normal-dest1551:                                  ; preds = %tag139
  %359 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %360 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %361 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %362 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1155), align 8
  %ptrtoint1552 = ptrtoint {}* %76 to i64
  %entry-point-addr-uint1553 = add i64 %ptrtoint1552, 7
  %entry-point-addr1554 = inttoptr i64 %entry-point-addr-uint1553 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1555 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1554, align 8
  %363 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1555({}* %76, i64 5, {}* %359, {}* %360, {}* %"closure->LAMBDA1471", {}* %361, {}* %362)
          to label %normal-dest1558 unwind label %cleanup-lpad

normal-dest1558:                                  ; preds = %normal-dest1551
  %.elt2807 = extractvalue { {}*, i64 } %363, 0
  %.elt2809 = extractvalue { {}*, i64 } %363, 1
  %cond2520 = icmp eq i64 %.elt2809, 0
  %364 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111692.1 = select i1 %cond2520, {}* %364, {}* %.elt2807
  br label %tag68

normal-dest1571:                                  ; preds = %tag141
  %365 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag18

normal-dest1600:                                  ; preds = %tag144
  %ptrtoint1601 = ptrtoint {}* %79 to i64
  %entry-point-addr-uint1602 = add i64 %ptrtoint1601, 7
  %entry-point-addr1603 = inttoptr i64 %entry-point-addr-uint1602 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1604 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1603, align 8
  %366 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1604({}* %79, i64 1, {}* %140, {}* null, {}* null, {}* null)
          to label %normal-dest1607 unwind label %cleanup-lpad

normal-dest1607:                                  ; preds = %normal-dest1600
  %.elt3043 = extractvalue { {}*, i64 } %366, 0
  %.elt3045 = extractvalue { {}*, i64 } %366, 1
  %cond2566 = icmp eq i64 %.elt3045, 0
  %367 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OUT1112581608.0 = select i1 %cond2566, {}* %367, {}* %.elt3043
  %ptrtoint1615 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only1616 = and i64 %ptrtoint1615, 7
  %test1617 = icmp eq i64 %tag-only1616, 1
  br i1 %test1617, label %header-check-br1614, label %tag190

header-check-br1614:                              ; preds = %normal-dest1607
  %irc-bit-cast1618 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep1619 = getelementptr inbounds i8, i8* %irc-bit-cast1618, i64 -9
  %irc-bit-cast1620 = bitcast i8* %gep1619 to i64*
  %368 = load i64, i64* %irc-bit-cast1620, align 8
  %.off3295 = add i64 %368, -913
  %369 = icmp ult i64 %.off3295, 85
  br i1 %369, label %tag153, label %header-check-br1140

header-check-br1623:                              ; preds = %header-check-br1303
  %.off3267 = add i64 %318, -1001
  %370 = icmp ult i64 %.off3267, 5
  br i1 %370, label %maybe-more-tests1631, label %tag126

maybe-more-tests1631:                             ; preds = %header-check-br1623
  %371 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %372 = invoke {}* @cc_safe_fdefinition({}* %371)
          to label %normal-dest1488 unwind label %cleanup-lpad

normal-dest1634:                                  ; preds = %tag150
  %373 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %374 = invoke {}* @cc_safe_fdefinition({}* %373)
          to label %normal-dest1636 unwind label %cleanup-lpad

normal-dest1636:                                  ; preds = %normal-dest1634
  %ptrtoint1637 = ptrtoint {}* %374 to i64
  %entry-point-addr-uint1638 = add i64 %ptrtoint1637, 7
  %entry-point-addr1639 = inttoptr i64 %entry-point-addr-uint1638 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1640 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1639, align 8
  %375 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1640({}* %374, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest1643 unwind label %cleanup-lpad

normal-dest1643:                                  ; preds = %normal-dest1636
  %.elt2835 = extractvalue { {}*, i64 } %375, 0
  %.elt2837 = extractvalue { {}*, i64 } %375, 1
  %cond2526 = icmp eq i64 %.elt2837, 0
  %376 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111659.0 = select i1 %cond2526, {}* %376, {}* %.elt2835
  %ptrtoint1649 = ptrtoint {}* %82 to i64
  %entry-point-addr-uint1650 = add i64 %ptrtoint1649, 7
  %entry-point-addr1651 = inttoptr i64 %entry-point-addr-uint1650 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1652 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1651, align 8
  %377 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1652({}* %82, i64 1, {}* %G111659.0, {}* null, {}* null, {}* null)
          to label %normal-dest1655 unwind label %cleanup-lpad

normal-dest1655:                                  ; preds = %normal-dest1643
  %.elt2839 = extractvalue { {}*, i64 } %377, 0
  %.elt2841 = extractvalue { {}*, i64 } %377, 1
  %cond2527 = icmp eq i64 %.elt2841, 0
  %378 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111546.0 = select i1 %cond2527, {}* %378, {}* %.elt2839
  %379 = icmp eq {}* %ANZAHL.0, %378
  br i1 %379, label %tag148, label %tag212

header-check-br1661:                              ; preds = %tag151
  %irc-bit-cast1665 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep1666 = getelementptr inbounds i8, i8* %irc-bit-cast1665, i64 -9
  %irc-bit-cast1667 = bitcast i8* %gep1666 to i64*
  %380 = load i64, i64* %irc-bit-cast1667, align 8
  %.off3297 = add i64 %380, -913
  %381 = icmp ult i64 %.off3297, 85
  br i1 %381, label %tag120, label %header-check-br1335

normal-dest1685:                                  ; preds = %tag153
  %ptrtoint1686 = ptrtoint {}* %84 to i64
  %entry-point-addr-uint1687 = add i64 %ptrtoint1686, 7
  %entry-point-addr1688 = inttoptr i64 %entry-point-addr-uint1687 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1689 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1688, align 8
  %382 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1689({}* %84, i64 2, {}* %OBJEKT.0, {}* %ATTRIBUT.0, {}* null, {}* null)
          to label %normal-dest1692 unwind label %cleanup-lpad

normal-dest1692:                                  ; preds = %normal-dest1685
  %.elt3051 = extractvalue { {}*, i64 } %382, 0
  %.elt3053 = extractvalue { {}*, i64 } %382, 1
  %cond2568 = icmp eq i64 %.elt3053, 0
  %383 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112062.0 = select i1 %cond2568, {}* %383, {}* %.elt3051
  %ptrtoint1698 = ptrtoint {}* %G112057.0 to i64
  %entry-point-addr-uint1699 = add i64 %ptrtoint1698, 7
  %entry-point-addr1700 = inttoptr i64 %entry-point-addr-uint1699 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1701 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1700, align 8
  %384 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1701({}* %G112057.0, i64 5, {}* %OUT1112581608.0, {}* %CONSTRAINT.0, {}* %OBJEKT.0, {}* %ATTRIBUT.0, {}* %G112062.0)
          to label %normal-dest1704 unwind label %cleanup-lpad

normal-dest1704:                                  ; preds = %normal-dest1692
  %385 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag118

normal-dest1710:                                  ; preds = %tag154
  %386 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %387 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %388 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %389 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1172), align 16
  %ptrtoint1781 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint1782 = add i64 %ptrtoint1781, 7
  %entry-point-addr1783 = inttoptr i64 %entry-point-addr-uint1782 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1784 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1783, align 8
  %390 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1784({}* %86, i64 5, {}* %386, {}* %387, {}* %farg0, {}* %388, {}* %389)
          to label %normal-dest1787 unwind label %cleanup-lpad

normal-dest1712:                                  ; preds = %tag156
  %ptrtoint1713 = ptrtoint {}* %88 to i64
  %entry-point-addr-uint1714 = add i64 %ptrtoint1713, 7
  %entry-point-addr1715 = inttoptr i64 %entry-point-addr-uint1714 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1716 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1715, align 8
  %391 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1716({}* %88, i64 1, {}* %484, {}* null, {}* null, {}* null)
          to label %normal-dest1719 unwind label %cleanup-lpad

normal-dest1719:                                  ; preds = %normal-dest1712
  %.elt2879 = extractvalue { {}*, i64 } %391, 0
  %.elt2881 = extractvalue { {}*, i64 } %391, 1
  %cond2534 = icmp eq i64 %.elt2881, 0
  %392 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111582.0 = select i1 %cond2534, {}* %392, {}* %.elt2879
  %393 = icmp eq {}* %G111582.0, %392
  br i1 %393, label %tag71, label %tag223

normal-dest1726:                                  ; preds = %tag157
  %394 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %395 = invoke {}* @cc_safe_fdefinition({}* %394)
          to label %normal-dest1728 unwind label %cleanup-lpad

normal-dest1728:                                  ; preds = %normal-dest1726
  %ptrtoint1729 = ptrtoint {}* %395 to i64
  %entry-point-addr-uint1730 = add i64 %ptrtoint1729, 7
  %entry-point-addr1731 = inttoptr i64 %entry-point-addr-uint1730 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1732 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1731, align 8
  %396 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1732({}* %395, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest1735 unwind label %cleanup-lpad

normal-dest1735:                                  ; preds = %normal-dest1728
  %.elt2739 = extractvalue { {}*, i64 } %396, 0
  %.elt2741 = extractvalue { {}*, i64 } %396, 1
  %cond2508 = icmp eq i64 %.elt2741, 0
  %397 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111802.0 = select i1 %cond2508, {}* %397, {}* %.elt2739
  %ptrtoint1741 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint1742 = add i64 %ptrtoint1741, 7
  %entry-point-addr1743 = inttoptr i64 %entry-point-addr-uint1742 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1744 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1743, align 8
  %398 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1744({}* %90, i64 1, {}* %G111802.0, {}* null, {}* null, {}* null)
          to label %normal-dest1747 unwind label %cleanup-lpad

normal-dest1747:                                  ; preds = %normal-dest1735
  %.elt2743 = extractvalue { {}*, i64 } %398, 0
  %.elt2745 = extractvalue { {}*, i64 } %398, 1
  %cond2509 = icmp eq i64 %.elt2745, 0
  %399 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111689.0 = select i1 %cond2509, {}* %399, {}* %.elt2743
  %400 = icmp eq {}* %ANZAHL.0, %399
  br i1 %400, label %tag29, label %tag129

normal-dest1754:                                  ; preds = %maybe-more-tests682
  %ptrtoint1755 = ptrtoint {}* %222 to i64
  %entry-point-addr-uint1756 = add i64 %ptrtoint1755, 7
  %entry-point-addr1757 = inttoptr i64 %entry-point-addr-uint1756 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1758 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1757, align 8
  %401 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1758({}* %222, i64 1, {}* nonnull %"closure->LAMBDA1351", {}* null, {}* null, {}* null)
          to label %normal-dest1761 unwind label %cleanup-lpad

normal-dest1761:                                  ; preds = %normal-dest1754
  %.elt2995 = extractvalue { {}*, i64 } %401, 0
  %.elt2997 = extractvalue { {}*, i64 } %401, 1
  %cond2556 = icmp eq i64 %.elt2997, 0
  %402 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111411.2 = select i1 %cond2556, {}* %402, {}* %.elt2995
  br label %tag12

normal-dest1768:                                  ; preds = %tag160
  %ptrtoint1769 = ptrtoint {}* %92 to i64
  %entry-point-addr-uint1770 = add i64 %ptrtoint1769, 7
  %entry-point-addr1771 = inttoptr i64 %entry-point-addr-uint1770 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1772 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1771, align 8
  %403 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1772({}* %92, i64 1, {}* %347, {}* null, {}* null, {}* null)
          to label %normal-dest1775 unwind label %cleanup-lpad

normal-dest1775:                                  ; preds = %normal-dest1768
  %.elt2787 = extractvalue { {}*, i64 } %403, 0
  %.elt2789 = extractvalue { {}*, i64 } %403, 1
  %cond2516 = icmp eq i64 %.elt2789, 0
  %404 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111725.0 = select i1 %cond2516, {}* %404, {}* %.elt2787
  %405 = icmp eq {}* %G111725.0, %404
  br i1 %405, label %tag17, label %tag230

normal-dest1787:                                  ; preds = %normal-dest1710
  call void @unreachableError()
  unreachable

header-check-br1802:                              ; preds = %tag164
  %irc-bit-cast1806 = bitcast {}* %"closure->LAMBDA1351" to i8*
  %gep1807 = getelementptr inbounds i8, i8* %irc-bit-cast1806, i64 -9
  %irc-bit-cast1808 = bitcast i8* %gep1807 to i64*
  %406 = load i64, i64* %irc-bit-cast1808, align 8
  %.off3288 = add i64 %406, -913
  %407 = icmp ult i64 %.off3288, 85
  br i1 %407, label %tag12, label %header-check-br674

normal-dest1812:                                  ; preds = %tag166
  %408 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %409 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %410 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %411 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1124), align 16
  %ptrtoint1813 = ptrtoint {}* %94 to i64
  %entry-point-addr-uint1814 = add i64 %ptrtoint1813, 7
  %entry-point-addr1815 = inttoptr i64 %entry-point-addr-uint1814 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1816 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1815, align 8
  %412 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1816({}* %94, i64 5, {}* %408, {}* %409, {}* %"closure->LAMBDA", {}* %410, {}* %411)
          to label %normal-dest1819 unwind label %cleanup-lpad

normal-dest1819:                                  ; preds = %normal-dest1812
  %.elt3019 = extractvalue { {}*, i64 } %412, 0
  %.elt3021 = extractvalue { {}*, i64 } %412, 1
  %cond2561 = icmp eq i64 %.elt3021, 0
  %413 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112090.1 = select i1 %cond2561, {}* %413, {}* %.elt3019
  br label %tag52

header-check-br1839:                              ; preds = %header-check-br1199
  %.off3294 = add i64 %306, -1001
  %414 = icmp ult i64 %.off3294, 5
  br i1 %414, label %maybe-more-tests1847, label %tag166

maybe-more-tests1847:                             ; preds = %header-check-br1839
  %415 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %416 = invoke {}* @cc_safe_fdefinition({}* %415)
          to label %normal-dest2257 unwind label %cleanup-lpad

normal-dest1849:                                  ; preds = %tag171
  %417 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %418 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %419 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %420 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1150), align 16
  %ptrtoint1850 = ptrtoint {}* %96 to i64
  %entry-point-addr-uint1851 = add i64 %ptrtoint1850, 7
  %entry-point-addr1852 = inttoptr i64 %entry-point-addr-uint1851 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1853 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1852, align 8
  %421 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1853({}* %96, i64 5, {}* %417, {}* %418, {}* %"closure->LAMBDA2271", {}* %419, {}* %420)
          to label %normal-dest1856 unwind label %cleanup-lpad

normal-dest1856:                                  ; preds = %normal-dest1849
  %.elt2887 = extractvalue { {}*, i64 } %421, 0
  %.elt2889 = extractvalue { {}*, i64 } %421, 1
  %cond2536 = icmp eq i64 %.elt2889, 0
  %422 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111564.2 = select i1 %cond2536, {}* %422, {}* %.elt2887
  br label %tag

normal-dest1896:                                  ; preds = %tag174
  %423 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag9

header-check-br1901:                              ; preds = %header-check-br2464
  %.off3263 = add i64 %521, -1001
  %424 = icmp ult i64 %.off3263, 5
  br i1 %424, label %maybe-more-tests1909, label %tag46

maybe-more-tests1909:                             ; preds = %header-check-br1901
  %425 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %426 = invoke {}* @cc_safe_fdefinition({}* %425)
          to label %normal-dest1262 unwind label %cleanup-lpad

normal-dest1911:                                  ; preds = %tag179
  %427 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %428 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %429 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %430 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1118), align 16
  %ptrtoint1912 = ptrtoint {}* %99 to i64
  %entry-point-addr-uint1913 = add i64 %ptrtoint1912, 7
  %entry-point-addr1914 = inttoptr i64 %entry-point-addr-uint1913 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1915 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1914, align 8
  %431 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1915({}* %99, i64 5, {}* %427, {}* %428, {}* %"closure->LAMBDA", {}* %429, {}* %430)
          to label %normal-dest1918 unwind label %cleanup-lpad

normal-dest1918:                                  ; preds = %normal-dest1911
  %.elt3063 = extractvalue { {}*, i64 } %431, 0
  %.elt3065 = extractvalue { {}*, i64 } %431, 1
  %cond2570 = icmp eq i64 %.elt3065, 0
  %432 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112035.2 = select i1 %cond2570, {}* %432, {}* %.elt3063
  br label %tag120

normal-dest1925:                                  ; preds = %maybe-more-tests705
  %ptrtoint1926 = ptrtoint {}* %231 to i64
  %entry-point-addr-uint1927 = add i64 %ptrtoint1926, 7
  %entry-point-addr1928 = inttoptr i64 %entry-point-addr-uint1927 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1929 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1928, align 8
  %433 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1929({}* %231, i64 1, {}* nonnull %"closure->LAMBDA526", {}* null, {}* null, {}* null)
          to label %normal-dest1932 unwind label %cleanup-lpad

normal-dest1932:                                  ; preds = %normal-dest1925
  %.elt2991 = extractvalue { {}*, i64 } %433, 0
  %.elt2993 = extractvalue { {}*, i64 } %433, 1
  %cond2555 = icmp eq i64 %.elt2993, 0
  %434 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111416.2 = select i1 %cond2555, {}* %434, {}* %.elt2991
  br label %tag174

normal-dest1944:                                  ; preds = %tag181
  %435 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1125), align 8
  %436 = invoke {}* @cc_safe_fdefinition({}* %435)
          to label %normal-dest1950 unwind label %cleanup-lpad

normal-dest1950:                                  ; preds = %normal-dest1944
  %ptrtoint1951 = ptrtoint {}* %436 to i64
  %entry-point-addr-uint1952 = add i64 %ptrtoint1951, 7
  %entry-point-addr1953 = inttoptr i64 %entry-point-addr-uint1952 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1954 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1953, align 8
  %437 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1954({}* %436, i64 1, {}* %G111330.0, {}* null, {}* null, {}* null)
          to label %normal-dest1957 unwind label %cleanup-lpad

normal-dest1957:                                  ; preds = %normal-dest1950
  %.elt2779 = extractvalue { {}*, i64 } %437, 0
  %.elt2781 = extractvalue { {}*, i64 } %437, 1
  %cond2514 = icmp eq i64 %.elt2781, 0
  %438 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111690.1 = select i1 %cond2514, {}* %438, {}* %.elt2779
  br label %tag18

header-check-br2001:                              ; preds = %header-check-br923
  %.off3276 = add i64 %266, -1001
  %439 = icmp ult i64 %.off3276, 5
  br i1 %439, label %maybe-more-tests2009, label %tag84

maybe-more-tests2009:                             ; preds = %header-check-br2001
  %440 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %441 = invoke {}* @cc_safe_fdefinition({}* %440)
          to label %normal-dest989 unwind label %cleanup-lpad

normal-dest2011:                                  ; preds = %tag190
  %442 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %443 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %444 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %445 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1121), align 8
  %ptrtoint2012 = ptrtoint {}* %102 to i64
  %entry-point-addr-uint2013 = add i64 %ptrtoint2012, 7
  %entry-point-addr2014 = inttoptr i64 %entry-point-addr-uint2013 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2015 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2014, align 8
  %446 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2015({}* %102, i64 5, {}* %442, {}* %443, {}* %"closure->LAMBDA", {}* %444, {}* %445)
          to label %normal-dest2018 unwind label %cleanup-lpad

normal-dest2018:                                  ; preds = %normal-dest2011
  %.elt3047 = extractvalue { {}*, i64 } %446, 0
  %.elt3049 = extractvalue { {}*, i64 } %446, 1
  %cond2567 = icmp eq i64 %.elt3049, 0
  %447 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112057.2 = select i1 %cond2567, {}* %447, {}* %.elt3047
  br label %tag153

normal-dest2025:                                  ; preds = %maybe-more-tests790
  %ptrtoint2026 = ptrtoint {}* %245 to i64
  %entry-point-addr-uint2027 = add i64 %ptrtoint2026, 7
  %entry-point-addr2028 = inttoptr i64 %entry-point-addr-uint2027 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2029 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2028, align 8
  %448 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2029({}* %245, i64 1, {}* nonnull %"closure->LAMBDA1471", {}* null, {}* null, {}* null)
          to label %normal-dest2032 unwind label %cleanup-lpad

normal-dest2032:                                  ; preds = %normal-dest2025
  %.elt2815 = extractvalue { {}*, i64 } %448, 0
  %.elt2817 = extractvalue { {}*, i64 } %448, 1
  %cond2521 = icmp eq i64 %.elt2817, 0
  %449 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111692.2 = select i1 %cond2521, {}* %449, {}* %.elt2815
  br label %tag68

header-check-br2038:                              ; preds = %header-check-br469
  %.off3272 = add i64 %182, -1001
  %450 = icmp ult i64 %.off3272, 5
  br i1 %450, label %maybe-more-tests2046, label %tag77

maybe-more-tests2046:                             ; preds = %header-check-br2038
  %451 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %452 = invoke {}* @cc_safe_fdefinition({}* %451)
          to label %normal-dest2142 unwind label %cleanup-lpad

normal-dest2048:                                  ; preds = %tag196
  %ptrtoint2049 = ptrtoint {}* %104 to i64
  %entry-point-addr-uint2050 = add i64 %ptrtoint2049, 7
  %entry-point-addr2051 = inttoptr i64 %entry-point-addr-uint2050 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2052 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2051, align 8
  %453 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2052({}* %104, i64 1, {}* %323, {}* null, {}* null, {}* null)
          to label %normal-dest2055 unwind label %cleanup-lpad

normal-dest2055:                                  ; preds = %normal-dest2048
  %.elt2827 = extractvalue { {}*, i64 } %453, 0
  %.elt2829 = extractvalue { {}*, i64 } %453, 1
  %cond2524 = icmp eq i64 %.elt2829, 0
  %454 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OUT1112811632.0 = select i1 %cond2524, {}* %454, {}* %.elt2827
  %ptrtoint2062 = ptrtoint {}* %"closure->LAMBDA1351" to i64
  %tag-only2063 = and i64 %ptrtoint2062, 7
  %test2064 = icmp eq i64 %tag-only2063, 1
  br i1 %test2064, label %header-check-br2061, label %tag39

header-check-br2061:                              ; preds = %normal-dest2055
  %irc-bit-cast2065 = bitcast {}* %"closure->LAMBDA1351" to i8*
  %gep2066 = getelementptr inbounds i8, i8* %irc-bit-cast2065, i64 -9
  %irc-bit-cast2067 = bitcast i8* %gep2066 to i64*
  %455 = load i64, i64* %irc-bit-cast2067, align 8
  %.off3277 = add i64 %455, -913
  %456 = icmp ult i64 %.off3277, 85
  br i1 %456, label %tag150, label %header-check-br2238

normal-dest2131:                                  ; preds = %normal-dest1357
  call void @unreachableError()
  unreachable

normal-dest2142:                                  ; preds = %maybe-more-tests2046
  %ptrtoint2143 = ptrtoint {}* %452 to i64
  %entry-point-addr-uint2144 = add i64 %ptrtoint2143, 7
  %entry-point-addr2145 = inttoptr i64 %entry-point-addr-uint2144 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2146 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2145, align 8
  %457 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2146({}* %452, i64 1, {}* nonnull %"closure->LAMBDA2271", {}* null, {}* null, {}* null)
          to label %normal-dest2149 unwind label %cleanup-lpad

normal-dest2149:                                  ; preds = %normal-dest2142
  %.elt2875 = extractvalue { {}*, i64 } %457, 0
  %.elt2877 = extractvalue { {}*, i64 } %457, 1
  %cond2533 = icmp eq i64 %.elt2877, 0
  %458 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111590.2 = select i1 %cond2533, {}* %458, {}* %.elt2875
  br label %tag91

normal-dest2161:                                  ; preds = %tag205
  %.elt2584 = extractvalue { {}*, i64 } %105, 0
  %.elt2586 = extractvalue { {}*, i64 } %105, 1
  %cond2475 = icmp eq i64 %.elt2586, 0
  %459 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKT.0 = select i1 %cond2475, {}* %459, {}* %.elt2584
  %460 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 941), align 8
  %461 = invoke {}* @cc_safe_fdefinition({}* %460)
          to label %normal-dest2170 unwind label %cleanup-lpad

normal-dest2170:                                  ; preds = %normal-dest2161
  %462 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 948), align 16
  %463 = invoke {}* @cc_safe_fdefinition({}* %462)
          to label %normal-dest2172 unwind label %cleanup-lpad

normal-dest2172:                                  ; preds = %normal-dest2170
  %ptrtoint2173 = ptrtoint {}* %463 to i64
  %entry-point-addr-uint2174 = add i64 %ptrtoint2173, 7
  %entry-point-addr2175 = inttoptr i64 %entry-point-addr-uint2174 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2176 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2175, align 8
  %464 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2176({}* %463, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest2179 unwind label %cleanup-lpad

normal-dest2179:                                  ; preds = %normal-dest2172
  %.elt2588 = extractvalue { {}*, i64 } %464, 0
  %.elt2590 = extractvalue { {}*, i64 } %464, 1
  %cond2476 = icmp eq i64 %.elt2590, 0
  %465 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112271.0 = select i1 %cond2476, {}* %465, {}* %.elt2588
  %466 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  %467 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 952), align 16
  %468 = invoke {}* @cc_safe_fdefinition({}* %467)
          to label %normal-dest2186 unwind label %cleanup-lpad

normal-dest2186:                                  ; preds = %normal-dest2179
  %ptrtoint2187 = ptrtoint {}* %468 to i64
  %entry-point-addr-uint2188 = add i64 %ptrtoint2187, 7
  %entry-point-addr2189 = inttoptr i64 %entry-point-addr-uint2188 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2190 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2189, align 8
  %469 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2190({}* %468, i64 1, {}* %466, {}* null, {}* null, {}* null)
          to label %normal-dest2193 unwind label %cleanup-lpad

normal-dest2193:                                  ; preds = %normal-dest2186
  %470 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %471 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 954), align 16
  %472 = invoke {}* @cc_safe_fdefinition({}* %471)
          to label %normal-dest2200 unwind label %cleanup-lpad

normal-dest2200:                                  ; preds = %normal-dest2193
  %.elt2594 = extractvalue { {}*, i64 } %469, 1
  %cond2477 = icmp eq i64 %.elt2594, 0
  %.elt2592 = extractvalue { {}*, i64 } %469, 0
  %G112272.0 = select i1 %cond2477, {}* %470, {}* %.elt2592
  %ptrtoint2201 = ptrtoint {}* %472 to i64
  %entry-point-addr-uint2202 = add i64 %ptrtoint2201, 7
  %entry-point-addr2203 = inttoptr i64 %entry-point-addr-uint2202 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2204 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2203, align 8
  %473 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2204({}* %472, i64 2, {}* %G112271.0, {}* %G112272.0, {}* null, {}* null)
          to label %normal-dest2207 unwind label %cleanup-lpad

normal-dest2207:                                  ; preds = %normal-dest2200
  %.elt2596 = extractvalue { {}*, i64 } %473, 0
  %.elt2598 = extractvalue { {}*, i64 } %473, 1
  %cond2478 = icmp eq i64 %.elt2598, 0
  %474 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112275.0 = select i1 %cond2478, {}* %474, {}* %.elt2596
  %475 = icmp eq {}* %G112275.0, %474
  br i1 %475, label %tag226, label %tag65

header-check-br2238:                              ; preds = %header-check-br2061
  %.off3278 = add i64 %455, -1001
  %476 = icmp ult i64 %.off3278, 5
  br i1 %476, label %maybe-more-tests2246, label %tag39

maybe-more-tests2246:                             ; preds = %header-check-br2238
  %477 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %478 = invoke {}* @cc_safe_fdefinition({}* %477)
          to label %normal-dest1425 unwind label %cleanup-lpad

header-check-br2247:                              ; preds = %header-check-br734
  %.off3283 = add i64 %234, -1001
  %479 = icmp ult i64 %.off3283, 5
  br i1 %479, label %maybe-more-tests2255, label %tag14

maybe-more-tests2255:                             ; preds = %header-check-br2247
  %480 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %481 = invoke {}* @cc_safe_fdefinition({}* %480)
          to label %normal-dest625 unwind label %cleanup-lpad

normal-dest2257:                                  ; preds = %maybe-more-tests1847
  %ptrtoint2258 = ptrtoint {}* %416 to i64
  %entry-point-addr-uint2259 = add i64 %ptrtoint2258, 7
  %entry-point-addr2260 = inttoptr i64 %entry-point-addr-uint2259 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2261 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2260, align 8
  %482 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2261({}* %416, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest2264 unwind label %cleanup-lpad

normal-dest2264:                                  ; preds = %normal-dest2257
  %.elt3035 = extractvalue { {}*, i64 } %482, 0
  %.elt3037 = extractvalue { {}*, i64 } %482, 1
  %cond2564 = icmp eq i64 %.elt3037, 0
  %483 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112090.2 = select i1 %cond2564, {}* %483, {}* %.elt3035
  br label %tag52

normal-dest2270:                                  ; preds = %tag212
  %484 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %485 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %486 = icmp eq {}* %484, %485
  br i1 %486, label %tag156, label %tag16

normal-dest2277:                                  ; preds = %tag214
  %487 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %488 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %489 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %490 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1157), align 8
  %ptrtoint2278 = ptrtoint {}* %108 to i64
  %entry-point-addr-uint2279 = add i64 %ptrtoint2278, 7
  %entry-point-addr2280 = inttoptr i64 %entry-point-addr-uint2279 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2281 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2280, align 8
  %491 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2281({}* %108, i64 5, {}* %487, {}* %488, {}* %"closure->LAMBDA1471", {}* %489, {}* %490)
          to label %normal-dest2284 unwind label %cleanup-lpad

normal-dest2284:                                  ; preds = %normal-dest2277
  %.elt2771 = extractvalue { {}*, i64 } %491, 0
  %.elt2773 = extractvalue { {}*, i64 } %491, 1
  %cond2513 = icmp eq i64 %.elt2773, 0
  %492 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111733.2 = select i1 %cond2513, {}* %492, {}* %.elt2771
  br label %tag181

normal-dest2296:                                  ; preds = %tag215
  %.elt2632 = extractvalue { {}*, i64 } %109, 0
  %.elt2634 = extractvalue { {}*, i64 } %109, 1
  %cond2487 = icmp eq i64 %.elt2634, 0
  %493 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ANZAHL.0 = select i1 %cond2487, {}* %493, {}* %.elt2632
  %494 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 200), align 16
  %495 = invoke {}* @cc_safe_fdefinition({}* %494)
          to label %normal-dest2303 unwind label %cleanup-lpad

normal-dest2303:                                  ; preds = %normal-dest2296
  %496 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 238), align 16
  %ptrtoint2304 = ptrtoint {}* %495 to i64
  %entry-point-addr-uint2305 = add i64 %ptrtoint2304, 7
  %entry-point-addr2306 = inttoptr i64 %entry-point-addr-uint2305 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2307 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2306, align 8
  %497 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2307({}* %495, i64 2, {}* %CONSTRAINT.0, {}* %496, {}* null, {}* null)
          to label %normal-dest2310 unwind label %cleanup-lpad

normal-dest2310:                                  ; preds = %normal-dest2303
  %.elt2636 = extractvalue { {}*, i64 } %497, 0
  %.elt2638 = extractvalue { {}*, i64 } %497, 1
  %cond2488 = icmp eq i64 %.elt2638, 0
  %498 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112230.0 = select i1 %cond2488, {}* %498, {}* %.elt2636
  %499 = icmp eq {}* %G112230.0, %498
  br i1 %499, label %tag7, label %tag75

normal-dest2362:                                  ; preds = %tag221
  %ptrtoint2363 = ptrtoint {}* %111 to i64
  %entry-point-addr-uint2364 = add i64 %ptrtoint2363, 7
  %entry-point-addr2365 = inttoptr i64 %entry-point-addr-uint2364 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2366 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2365, align 8
  %500 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2366({}* %111, i64 1, {}* %193, {}* null, {}* null, {}* null)
          to label %normal-dest2369 unwind label %cleanup-lpad

normal-dest2369:                                  ; preds = %normal-dest2362
  %.elt2963 = extractvalue { {}*, i64 } %500, 0
  %.elt2965 = extractvalue { {}*, i64 } %500, 1
  %cond2550 = icmp eq i64 %.elt2965, 0
  %501 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G111449.0 = select i1 %cond2550, {}* %501, {}* %.elt2963
  %502 = icmp eq {}* %G111449.0, %501
  br i1 %502, label %tag81, label %tag222

normal-dest2376:                                  ; preds = %tag222
  %ptrtoint2377 = ptrtoint {}* %113 to i64
  %entry-point-addr-uint2378 = add i64 %ptrtoint2377, 7
  %entry-point-addr2379 = inttoptr i64 %entry-point-addr-uint2378 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2380 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2379, align 8
  %503 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2380({}* %113, i64 1, {}* %193, {}* null, {}* null, {}* null)
          to label %normal-dest2383 unwind label %cleanup-lpad

normal-dest2383:                                  ; preds = %normal-dest2376
  %.elt2967 = extractvalue { {}*, i64 } %503, 0
  %.elt2969 = extractvalue { {}*, i64 } %503, 1
  %cond2551 = icmp eq i64 %.elt2969, 0
  %504 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OUT1113611524.0 = select i1 %cond2551, {}* %504, {}* %.elt2967
  %ptrtoint2390 = ptrtoint {}* %"closure->LAMBDA526" to i64
  %tag-only2391 = and i64 %ptrtoint2390, 7
  %test2392 = icmp eq i64 %tag-only2391, 1
  br i1 %test2392, label %header-check-br2389, label %tag138

header-check-br2389:                              ; preds = %normal-dest2383
  %irc-bit-cast2393 = bitcast {}* %"closure->LAMBDA526" to i8*
  %gep2394 = getelementptr inbounds i8, i8* %irc-bit-cast2393, i64 -9
  %irc-bit-cast2395 = bitcast i8* %gep2394 to i64*
  %505 = load i64, i64* %irc-bit-cast2395, align 8
  %.off3284 = add i64 %505, -913
  %506 = icmp ult i64 %.off3284, 85
  br i1 %506, label %tag136, label %header-check-br2441

normal-dest2399:                                  ; preds = %tag223
  %ptrtoint2400 = ptrtoint {}* %115 to i64
  %entry-point-addr-uint2401 = add i64 %ptrtoint2400, 7
  %entry-point-addr2402 = inttoptr i64 %entry-point-addr-uint2401 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2403 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2402, align 8
  %507 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2403({}* %115, i64 1, {}* %484, {}* null, {}* null, {}* null)
          to label %normal-dest2406 unwind label %cleanup-lpad

normal-dest2406:                                  ; preds = %normal-dest2399
  %.elt2883 = extractvalue { {}*, i64 } %507, 0
  %.elt2885 = extractvalue { {}*, i64 } %507, 1
  %cond2535 = icmp eq i64 %.elt2885, 0
  %508 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OUT111342.0 = select i1 %cond2535, {}* %508, {}* %.elt2883
  %ptrtoint2413 = ptrtoint {}* %"closure->LAMBDA2271" to i64
  %tag-only2414 = and i64 %ptrtoint2413, 7
  %test2415 = icmp eq i64 %tag-only2414, 1
  br i1 %test2415, label %header-check-br2412, label %tag171

header-check-br2412:                              ; preds = %normal-dest2406
  %irc-bit-cast2416 = bitcast {}* %"closure->LAMBDA2271" to i8*
  %gep2417 = getelementptr inbounds i8, i8* %irc-bit-cast2416, i64 -9
  %irc-bit-cast2418 = bitcast i8* %gep2417 to i64*
  %509 = load i64, i64* %irc-bit-cast2418, align 8
  %.off3273 = add i64 %509, -913
  %510 = icmp ult i64 %.off3273, 85
  br i1 %510, label %tag, label %header-check-br1461

normal-dest2431:                                  ; preds = %tag226
  %511 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %512 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %513 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %514 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1176), align 16
  %ptrtoint1231 = ptrtoint {}* %117 to i64
  %entry-point-addr-uint1232 = add i64 %ptrtoint1231, 7
  %entry-point-addr1233 = inttoptr i64 %entry-point-addr-uint1232 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1234 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1233, align 8
  %515 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1234({}* %117, i64 5, {}* %511, {}* %512, {}* %farg0, {}* %513, {}* %514)
          to label %normal-dest1237 unwind label %cleanup-lpad

header-check-br2441:                              ; preds = %header-check-br2389
  %.off3285 = add i64 %505, -1001
  %516 = icmp ult i64 %.off3285, 5
  br i1 %516, label %maybe-more-tests2449, label %tag138

maybe-more-tests2449:                             ; preds = %header-check-br2441
  %517 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %518 = invoke {}* @cc_safe_fdefinition({}* %517)
          to label %normal-dest1239 unwind label %cleanup-lpad

normal-dest2451:                                  ; preds = %tag230
  %ptrtoint2452 = ptrtoint {}* %119 to i64
  %entry-point-addr-uint2453 = add i64 %ptrtoint2452, 7
  %entry-point-addr2454 = inttoptr i64 %entry-point-addr-uint2453 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2455 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2454, align 8
  %519 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2455({}* %119, i64 1, {}* %347, {}* null, {}* null, {}* null)
          to label %normal-dest2458 unwind label %cleanup-lpad

normal-dest2458:                                  ; preds = %normal-dest2451
  %.elt2791 = extractvalue { {}*, i64 } %519, 0
  %.elt2793 = extractvalue { {}*, i64 } %519, 1
  %cond2517 = icmp eq i64 %.elt2793, 0
  %520 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OUT1113221564.0 = select i1 %cond2517, {}* %520, {}* %.elt2791
  %ptrtoint2465 = ptrtoint {}* %"closure->LAMBDA1471" to i64
  %tag-only2466 = and i64 %ptrtoint2465, 7
  %test2467 = icmp eq i64 %tag-only2466, 1
  br i1 %test2467, label %header-check-br2464, label %tag46

header-check-br2464:                              ; preds = %normal-dest2458
  %irc-bit-cast2468 = bitcast {}* %"closure->LAMBDA1471" to i8*
  %gep2469 = getelementptr inbounds i8, i8* %irc-bit-cast2468, i64 -9
  %irc-bit-cast2470 = bitcast i8* %gep2469 to i64*
  %521 = load i64, i64* %irc-bit-cast2470, align 8
  %.off3262 = add i64 %521, -913
  %522 = icmp ult i64 %.off3262, 85
  br i1 %522, label %tag141, label %header-check-br1901
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.27"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !239 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %normal-dest165, %tag4
  %9 = phi {}* [ %17, %tag4 ], [ %78, %normal-dest165 ]
  %format-arg-111262.0 = phi {}* [ %format-arg-111262.1261, %tag4 ], [ %format-arg-111262.2, %normal-dest165 ]
  %10 = icmp eq {}* %G111266.0, %9
  br i1 %10, label %tag2, label %tag3

tag1:                                             ; preds = %tag6
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest44 unwind label %cleanup-lpad

tag2:                                             ; preds = %tag
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest51 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest58, %tag
  %format-arg-111263.0 = phi {}* [ %format-arg-111263.1, %tag ], [ %format-arg-111263.2, %normal-dest58 ]
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest65 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest47, %tag6
  %17 = phi {}* [ %21, %tag6 ], [ %38, %normal-dest47 ]
  %format-arg-111261.0 = phi {}* [ %format-arg-111261.1248251, %tag6 ], [ %format-arg-111261.2, %normal-dest47 ]
  %18 = icmp eq {}* %G111267.0259, %17
  br i1 %18, label %tag5, label %tag

tag5:                                             ; preds = %tag4
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest158 unwind label %cleanup-lpad

tag6:                                             ; preds = %normal-dest179, %process-rest-argument
  %21 = phi {}* [ %29, %process-rest-argument ], [ %86, %normal-dest179 ]
  %format-arg-111260.0 = phi {}* [ %format-arg-111260.1239242257, %process-rest-argument ], [ %format-arg-111260.2, %normal-dest179 ]
  %22 = icmp eq {}* %G111268.0246253, %21
  br i1 %22, label %tag1, label %tag4

tag7:                                             ; preds = %process-rest-argument
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest172 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest172, %tag7, %normal-dest158, %tag5, %normal-dest143, %normal-dest137, %normal-dest130, %normal-dest124, %normal-dest117, %normal-dest111, %normal-dest104, %normal-dest98, %normal-dest91, %normal-dest85, %normal-dest78, %normal-dest72, %normal-dest65, %tag3, %normal-dest51, %tag2, %normal-dest44, %tag1, %error
  %25 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %25

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-cont.thread, label %opt-cont

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-cont.thread:                                  ; preds = %continue
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-cont:                                         ; preds = %continue
  %rem-nargs12 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-113 = add i64 %rem-nargs12, -1
  store i64 %rem-nargs-113, i64* %"remaining-nargs*", align 8
  %vaarg14 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args19 = icmp sgt i64 %nargs, 2
  br i1 %enough-given-args19, label %opt-cont18, label %opt-cont.opt-cont18.thread_crit_edge

opt-cont.opt-cont18.thread_crit_edge:             ; preds = %opt-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-cont18:                                       ; preds = %opt-cont
  %rem-nargs20 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-121 = add i64 %rem-nargs20, -1
  store i64 %rem-nargs-121, i64* %"remaining-nargs*", align 8
  %vaarg22 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args27 = icmp eq i64 %nargs, 3
  br i1 %enough-given-args27, label %opt-cont18.opt-cont26.thread_crit_edge, label %opt-cont26

opt-cont18.opt-cont26.thread_crit_edge:           ; preds = %opt-cont18
  %.pre263 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-cont26:                                       ; preds = %opt-cont18
  %rem-nargs28 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-129 = add i64 %rem-nargs28, -1
  store i64 %rem-nargs-129, i64* %"remaining-nargs*", align 8
  %vaarg30 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args35 = icmp sgt i64 %nargs, 4
  br i1 %enough-given-args35, label %opt-arg32, label %opt-cont26.opt-init33_crit_edge

opt-cont26.opt-init33_crit_edge:                  ; preds = %opt-cont26
  %.pre264 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-arg32:                                        ; preds = %opt-cont26
  %rem-nargs36 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-137 = add i64 %rem-nargs36, -1
  store i64 %rem-nargs-137, i64* %"remaining-nargs*", align 8
  %vaarg38 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-cont26.opt-init33_crit_edge, %opt-cont.thread, %opt-cont.opt-cont18.thread_crit_edge, %opt-cont18.opt-cont26.thread_crit_edge, %opt-arg32
  %format-arg-111262.1261 = phi {}* [ %vaarg30, %opt-arg32 ], [ %vaarg30, %opt-cont26.opt-init33_crit_edge ], [ undef, %opt-cont.thread ], [ undef, %opt-cont.opt-cont18.thread_crit_edge ], [ undef, %opt-cont18.opt-cont26.thread_crit_edge ]
  %G111267.0259 = phi {}* [ %26, %opt-arg32 ], [ %26, %opt-cont26.opt-init33_crit_edge ], [ %27, %opt-cont.thread ], [ %.pre, %opt-cont.opt-cont18.thread_crit_edge ], [ %.pre263, %opt-cont18.opt-cont26.thread_crit_edge ]
  %format-arg-111260.1239242257 = phi {}* [ %vaarg14, %opt-arg32 ], [ %vaarg14, %opt-cont26.opt-init33_crit_edge ], [ undef, %opt-cont.thread ], [ %vaarg14, %opt-cont.opt-cont18.thread_crit_edge ], [ %vaarg14, %opt-cont18.opt-cont26.thread_crit_edge ]
  %G111269.0237244255 = phi {}* [ %26, %opt-arg32 ], [ %26, %opt-cont26.opt-init33_crit_edge ], [ %27, %opt-cont.thread ], [ %26, %opt-cont.opt-cont18.thread_crit_edge ], [ %26, %opt-cont18.opt-cont26.thread_crit_edge ]
  %G111268.0246253 = phi {}* [ %26, %opt-arg32 ], [ %26, %opt-cont26.opt-init33_crit_edge ], [ %27, %opt-cont.thread ], [ %.pre, %opt-cont.opt-cont18.thread_crit_edge ], [ %26, %opt-cont18.opt-cont26.thread_crit_edge ]
  %format-arg-111261.1248251 = phi {}* [ %vaarg22, %opt-arg32 ], [ %vaarg22, %opt-cont26.opt-init33_crit_edge ], [ undef, %opt-cont.thread ], [ undef, %opt-cont.opt-cont18.thread_crit_edge ], [ %vaarg22, %opt-cont18.opt-cont26.thread_crit_edge ]
  %format-arg-111263.1 = phi {}* [ %vaarg38, %opt-arg32 ], [ undef, %opt-cont26.opt-init33_crit_edge ], [ undef, %opt-cont.thread ], [ undef, %opt-cont.opt-cont18.thread_crit_edge ], [ undef, %opt-cont18.opt-cont26.thread_crit_edge ]
  %G111266.0 = phi {}* [ %26, %opt-arg32 ], [ %.pre264, %opt-cont26.opt-init33_crit_edge ], [ %27, %opt-cont.thread ], [ %.pre, %opt-cont.opt-cont18.thread_crit_edge ], [ %.pre263, %opt-cont18.opt-cont26.thread_crit_edge ]
  %28 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %30 = icmp eq {}* %G111269.0237244255, %29
  br i1 %30, label %tag7, label %tag6

normal-dest44:                                    ; preds = %tag1
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 7, {}* %31, {}* %32, {}* %33, {}* %34, {}* %35, {}* %36, {}* inttoptr (i64 16 to {}*))
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest44
  %.elt226 = extractvalue { {}*, i64 } %37, 0
  %.elt228 = extractvalue { {}*, i64 } %37, 1
  %cond186 = icmp eq i64 %.elt228, 0
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111261.2 = select i1 %cond186, {}* %38, {}* %.elt226
  br label %tag4

normal-dest51:                                    ; preds = %tag2
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %44 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint52 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint53 = add i64 %ptrtoint52, 7
  %entry-point-addr54 = inttoptr i64 %entry-point-addr-uint53 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point55 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr54, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point55({}* %14, i64 7, {}* %39, {}* %40, {}* %41, {}* %42, {}* %43, {}* %44, {}* inttoptr (i64 40 to {}*))
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest51
  %.elt218 = extractvalue { {}*, i64 } %45, 0
  %.elt220 = extractvalue { {}*, i64 } %45, 1
  %cond = icmp eq i64 %.elt220, 0
  %46 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111263.2 = select i1 %cond, {}* %46, {}* %.elt218
  br label %tag3

normal-dest65:                                    ; preds = %tag3
  %ptrtoint66 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint67 = add i64 %ptrtoint66, 7
  %entry-point-addr68 = inttoptr i64 %entry-point-addr-uint67 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point69 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr68, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point69({}* %16, i64 2, {}* %format-arg-111260.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest72 unwind label %cleanup-lpad

normal-dest72:                                    ; preds = %normal-dest65
  %48 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest78 unwind label %cleanup-lpad

normal-dest78:                                    ; preds = %normal-dest72
  %50 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1113), align 8
  %ptrtoint79 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint80 = add i64 %ptrtoint79, 7
  %entry-point-addr81 = inttoptr i64 %entry-point-addr-uint80 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point82 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr81, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point82({}* %49, i64 2, {}* %50, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest85 unwind label %cleanup-lpad

normal-dest85:                                    ; preds = %normal-dest78
  %52 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest91 unwind label %cleanup-lpad

normal-dest91:                                    ; preds = %normal-dest85
  %ptrtoint92 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint93 = add i64 %ptrtoint92, 7
  %entry-point-addr94 = inttoptr i64 %entry-point-addr-uint93 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point95 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr94, align 8
  %54 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point95({}* %53, i64 2, {}* %format-arg-111261.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest98 unwind label %cleanup-lpad

normal-dest98:                                    ; preds = %normal-dest91
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %56 = invoke {}* @cc_safe_fdefinition({}* %55)
          to label %normal-dest104 unwind label %cleanup-lpad

normal-dest104:                                   ; preds = %normal-dest98
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1114), align 16
  %ptrtoint105 = ptrtoint {}* %56 to i64
  %entry-point-addr-uint106 = add i64 %ptrtoint105, 7
  %entry-point-addr107 = inttoptr i64 %entry-point-addr-uint106 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point108 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr107, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point108({}* %56, i64 2, {}* %57, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest111 unwind label %cleanup-lpad

normal-dest111:                                   ; preds = %normal-dest104
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest117 unwind label %cleanup-lpad

normal-dest117:                                   ; preds = %normal-dest111
  %ptrtoint118 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint119 = add i64 %ptrtoint118, 7
  %entry-point-addr120 = inttoptr i64 %entry-point-addr-uint119 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point121 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr120, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point121({}* %60, i64 2, {}* %format-arg-111262.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest124 unwind label %cleanup-lpad

normal-dest124:                                   ; preds = %normal-dest117
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %63 = invoke {}* @cc_safe_fdefinition({}* %62)
          to label %normal-dest130 unwind label %cleanup-lpad

normal-dest130:                                   ; preds = %normal-dest124
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1115), align 8
  %ptrtoint131 = ptrtoint {}* %63 to i64
  %entry-point-addr-uint132 = add i64 %ptrtoint131, 7
  %entry-point-addr133 = inttoptr i64 %entry-point-addr-uint132 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point134 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr133, align 8
  %65 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point134({}* %63, i64 2, {}* %64, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest137 unwind label %cleanup-lpad

normal-dest137:                                   ; preds = %normal-dest130
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %67 = invoke {}* @cc_safe_fdefinition({}* %66)
          to label %normal-dest143 unwind label %cleanup-lpad

normal-dest143:                                   ; preds = %normal-dest137
  %ptrtoint144 = ptrtoint {}* %67 to i64
  %entry-point-addr-uint145 = add i64 %ptrtoint144, 7
  %entry-point-addr146 = inttoptr i64 %entry-point-addr-uint145 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point147 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr146, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point147({}* %67, i64 2, {}* %format-arg-111263.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest150 unwind label %cleanup-lpad

normal-dest150:                                   ; preds = %normal-dest143
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %69 = insertvalue { {}*, i64 } undef, {}* %28, 0
  %70 = insertvalue { {}*, i64 } %69, i64 1, 1
  ret { {}*, i64 } %70

normal-dest158:                                   ; preds = %tag5
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %72 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %73 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %74 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %75 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint159 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint160 = add i64 %ptrtoint159, 7
  %entry-point-addr161 = inttoptr i64 %entry-point-addr-uint160 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point162 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr161, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point162({}* %20, i64 7, {}* %71, {}* %72, {}* %73, {}* %74, {}* %75, {}* %76, {}* inttoptr (i64 28 to {}*))
          to label %normal-dest165 unwind label %cleanup-lpad

normal-dest165:                                   ; preds = %normal-dest158
  %.elt222 = extractvalue { {}*, i64 } %77, 0
  %.elt224 = extractvalue { {}*, i64 } %77, 1
  %cond185 = icmp eq i64 %.elt224, 0
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111262.2 = select i1 %cond185, {}* %78, {}* %.elt222
  br label %tag

normal-dest172:                                   ; preds = %tag7
  %79 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %80 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %81 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %82 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %84 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint173 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint174 = add i64 %ptrtoint173, 7
  %entry-point-addr175 = inttoptr i64 %entry-point-addr-uint174 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point176 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr175, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point176({}* %24, i64 7, {}* %79, {}* %80, {}* %81, {}* %82, {}* %83, {}* %84, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest179 unwind label %cleanup-lpad

normal-dest179:                                   ; preds = %normal-dest172
  %.elt230 = extractvalue { {}*, i64 } %85, 0
  %.elt232 = extractvalue { {}*, i64 } %85, 1
  %cond187 = icmp eq i64 %.elt232, 0
  %86 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111260.2 = select i1 %cond187, {}* %86, {}* %.elt230
  br label %tag6
}

; Function Attrs: nounwind
declare {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }*, i64*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.28"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !240 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %process-rest-argument
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest11 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest14, %process-rest-argument
  %format-arg-111363.0 = phi {}* [ %format-arg-111363.1, %process-rest-argument ], [ %format-arg-111363.2, %normal-dest14 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest18 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest31, %normal-dest25, %normal-dest18, %tag1, %normal-dest11, %tag, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-init, label %opt-arg

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-arg:                                          ; preds = %continue
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %rem-nargs6 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-17 = add i64 %rem-nargs6, -1
  store i64 %rem-nargs-17, i64* %"remaining-nargs*", align 8
  %vaarg8 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

opt-init:                                         ; preds = %continue
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-arg, %opt-init
  %format-arg-111363.1 = phi {}* [ %vaarg8, %opt-arg ], [ undef, %opt-init ]
  %G111366.0 = phi {}* [ %14, %opt-arg ], [ %15, %opt-init ]
  %16 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %18 = icmp eq {}* %G111366.0, %17
  br i1 %18, label %tag, label %tag1

normal-dest11:                                    ; preds = %tag
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %19, {}* %20, {}* %21, {}* %22, {}* %23, {}* %24, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest11
  %.elt55 = extractvalue { {}*, i64 } %25, 0
  %.elt57 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt57, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111363.2 = select i1 %cond, {}* %26, {}* %.elt55
  br label %tag1

normal-dest18:                                    ; preds = %tag1
  %ptrtoint19 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %12, i64 2, {}* %format-arg-111363.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest25
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1142), align 16
  %ptrtoint32 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint33 = add i64 %ptrtoint32, 7
  %entry-point-addr34 = inttoptr i64 %entry-point-addr-uint33 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point35 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr34, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point35({}* %29, i64 2, {}* %30, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest31
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %32 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %33 = insertvalue { {}*, i64 } %32, i64 1, 1
  ret { {}*, i64 } %33
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.30"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !241 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %process-rest-argument
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest33 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest114, %tag5
  %11 = phi {}* [ %19, %tag5 ], [ %61, %normal-dest114 ]
  %format-arg-111284.0 = phi {}* [ %format-arg-111284.1183, %tag5 ], [ %format-arg-111284.2, %normal-dest114 ]
  %12 = icmp eq {}* %G111296.0, %11
  br i1 %12, label %tag4, label %tag2

tag2:                                             ; preds = %normal-dest128, %tag1
  %format-arg-111285.0 = phi {}* [ %format-arg-111285.1, %tag1 ], [ %format-arg-111285.2, %normal-dest128 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1131), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest40 unwind label %cleanup-lpad

tag3:                                             ; preds = %tag5
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest107 unwind label %cleanup-lpad

tag4:                                             ; preds = %tag1
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest121 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest36, %process-rest-argument
  %19 = phi {}* [ %25, %process-rest-argument ], [ %34, %normal-dest36 ]
  %format-arg-111283.0 = phi {}* [ %format-arg-111283.1174177, %process-rest-argument ], [ %format-arg-111283.2, %normal-dest36 ]
  %20 = icmp eq {}* %G111297.0181, %19
  br i1 %20, label %tag3, label %tag1

cleanup-lpad:                                     ; preds = %normal-dest121, %tag4, %normal-dest107, %tag3, %normal-dest92, %normal-dest86, %normal-dest79, %normal-dest73, %normal-dest66, %normal-dest60, %normal-dest53, %normal-dest47, %normal-dest40, %tag2, %normal-dest33, %tag, %error
  %21 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %21

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-cont.thread, label %opt-cont

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-cont.thread:                                  ; preds = %continue
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-cont:                                         ; preds = %continue
  %rem-nargs10 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-111 = add i64 %rem-nargs10, -1
  store i64 %rem-nargs-111, i64* %"remaining-nargs*", align 8
  %vaarg12 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args17 = icmp sgt i64 %nargs, 2
  br i1 %enough-given-args17, label %opt-cont16, label %opt-cont.opt-cont16.thread_crit_edge

opt-cont.opt-cont16.thread_crit_edge:             ; preds = %opt-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-cont16:                                       ; preds = %opt-cont
  %rem-nargs18 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-119 = add i64 %rem-nargs18, -1
  store i64 %rem-nargs-119, i64* %"remaining-nargs*", align 8
  %vaarg20 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args25 = icmp eq i64 %nargs, 3
  br i1 %enough-given-args25, label %opt-cont16.opt-init23_crit_edge, label %opt-arg22

opt-cont16.opt-init23_crit_edge:                  ; preds = %opt-cont16
  %.pre185 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

opt-arg22:                                        ; preds = %opt-cont16
  %rem-nargs26 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-127 = add i64 %rem-nargs26, -1
  store i64 %rem-nargs-127, i64* %"remaining-nargs*", align 8
  %vaarg28 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-cont16.opt-init23_crit_edge, %opt-cont.opt-cont16.thread_crit_edge, %opt-cont.thread, %opt-arg22
  %format-arg-111284.1183 = phi {}* [ %vaarg20, %opt-arg22 ], [ %vaarg20, %opt-cont16.opt-init23_crit_edge ], [ undef, %opt-cont.opt-cont16.thread_crit_edge ], [ undef, %opt-cont.thread ]
  %G111297.0181 = phi {}* [ %22, %opt-arg22 ], [ %22, %opt-cont16.opt-init23_crit_edge ], [ %.pre, %opt-cont.opt-cont16.thread_crit_edge ], [ %23, %opt-cont.thread ]
  %G111298.0172179 = phi {}* [ %22, %opt-arg22 ], [ %22, %opt-cont16.opt-init23_crit_edge ], [ %22, %opt-cont.opt-cont16.thread_crit_edge ], [ %23, %opt-cont.thread ]
  %format-arg-111283.1174177 = phi {}* [ %vaarg12, %opt-arg22 ], [ %vaarg12, %opt-cont16.opt-init23_crit_edge ], [ %vaarg12, %opt-cont.opt-cont16.thread_crit_edge ], [ undef, %opt-cont.thread ]
  %format-arg-111285.1 = phi {}* [ %vaarg28, %opt-arg22 ], [ undef, %opt-cont16.opt-init23_crit_edge ], [ undef, %opt-cont.opt-cont16.thread_crit_edge ], [ undef, %opt-cont.thread ]
  %G111296.0 = phi {}* [ %22, %opt-arg22 ], [ %.pre185, %opt-cont16.opt-init23_crit_edge ], [ %.pre, %opt-cont.opt-cont16.thread_crit_edge ], [ %23, %opt-cont.thread ]
  %24 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %26 = icmp eq {}* %G111298.0172179, %25
  br i1 %26, label %tag, label %tag5

normal-dest33:                                    ; preds = %tag
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1130), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %27, {}* %28, {}* %29, {}* %30, {}* %31, {}* %32, {}* inttoptr (i64 8 to {}*))
          to label %normal-dest36 unwind label %cleanup-lpad

normal-dest36:                                    ; preds = %normal-dest33
  %.elt166 = extractvalue { {}*, i64 } %33, 0
  %.elt168 = extractvalue { {}*, i64 } %33, 1
  %cond135 = icmp eq i64 %.elt168, 0
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111283.2 = select i1 %cond135, {}* %34, {}* %.elt166
  br label %tag5

normal-dest40:                                    ; preds = %tag2
  %35 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint41 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint42 = add i64 %ptrtoint41, 7
  %entry-point-addr43 = inttoptr i64 %entry-point-addr-uint42 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point44 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr43, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point44({}* %14, i64 9, {}* %vaarg, {}* %format-arg-111283.0, {}* %35, {}* %35, {}* inttoptr (i64 40 to {}*), {}* inttoptr (i64 28 to {}*), {}* inttoptr (i64 258 to {}*), {}* inttoptr (i64 354 to {}*), {}* inttoptr (i64 12 to {}*))
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest40
  %37 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest47
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1133), align 8
  %ptrtoint54 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint55 = add i64 %ptrtoint54, 7
  %entry-point-addr56 = inttoptr i64 %entry-point-addr-uint55 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point57 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr56, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point57({}* %38, i64 2, {}* %39, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest60 unwind label %cleanup-lpad

normal-dest60:                                    ; preds = %normal-dest53
  %41 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1134), align 16
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest60
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint67 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint68 = add i64 %ptrtoint67, 7
  %entry-point-addr69 = inttoptr i64 %entry-point-addr-uint68 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point70 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr69, align 8
  %44 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point70({}* %42, i64 8, {}* %vaarg, {}* %format-arg-111284.0, {}* %43, {}* %43, {}* inttoptr (i64 20 to {}*), {}* inttoptr (i64 4 to {}*), {}* null, {}* inttoptr (i64 258 to {}*))
          to label %normal-dest73 unwind label %cleanup-lpad

normal-dest73:                                    ; preds = %normal-dest66
  %45 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest79 unwind label %cleanup-lpad

normal-dest79:                                    ; preds = %normal-dest73
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1136), align 16
  %ptrtoint80 = ptrtoint {}* %46 to i64
  %entry-point-addr-uint81 = add i64 %ptrtoint80, 7
  %entry-point-addr82 = inttoptr i64 %entry-point-addr-uint81 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point83 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr82, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point83({}* %46, i64 2, {}* %47, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest86 unwind label %cleanup-lpad

normal-dest86:                                    ; preds = %normal-dest79
  %49 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest92 unwind label %cleanup-lpad

normal-dest92:                                    ; preds = %normal-dest86
  %ptrtoint93 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint94 = add i64 %ptrtoint93, 7
  %entry-point-addr95 = inttoptr i64 %entry-point-addr-uint94 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point96 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr95, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point96({}* %50, i64 2, {}* %format-arg-111285.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest99 unwind label %cleanup-lpad

normal-dest99:                                    ; preds = %normal-dest92
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %52 = insertvalue { {}*, i64 } undef, {}* %24, 0
  %53 = insertvalue { {}*, i64 } %52, i64 1, 1
  ret { {}*, i64 } %53

normal-dest107:                                   ; preds = %tag3
  %54 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %56 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %57 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %58 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1130), align 16
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint108 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint109 = add i64 %ptrtoint108, 7
  %entry-point-addr110 = inttoptr i64 %entry-point-addr-uint109 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point111 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr110, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point111({}* %16, i64 7, {}* %54, {}* %55, {}* %56, {}* %57, {}* %58, {}* %59, {}* inttoptr (i64 24 to {}*))
          to label %normal-dest114 unwind label %cleanup-lpad

normal-dest114:                                   ; preds = %normal-dest107
  %.elt162 = extractvalue { {}*, i64 } %60, 0
  %.elt164 = extractvalue { {}*, i64 } %60, 1
  %cond134 = icmp eq i64 %.elt164, 0
  %61 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111284.2 = select i1 %cond134, {}* %61, {}* %.elt162
  br label %tag1

normal-dest121:                                   ; preds = %tag4
  %62 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %63 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %64 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %66 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1130), align 16
  %67 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint122 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint123 = add i64 %ptrtoint122, 7
  %entry-point-addr124 = inttoptr i64 %entry-point-addr-uint123 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point125 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr124, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point125({}* %18, i64 7, {}* %62, {}* %63, {}* %64, {}* %65, {}* %66, {}* %67, {}* inttoptr (i64 36 to {}*))
          to label %normal-dest128 unwind label %cleanup-lpad

normal-dest128:                                   ; preds = %normal-dest121
  %.elt158 = extractvalue { {}*, i64 } %68, 0
  %.elt160 = extractvalue { {}*, i64 } %68, 1
  %cond = icmp eq i64 %.elt160, 0
  %69 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111285.2 = select i1 %cond, {}* %69, {}* %.elt158
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.31"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !242 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %process-rest-argument
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest11 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest14, %process-rest-argument
  %format-arg-111324.0 = phi {}* [ %format-arg-111324.1, %process-rest-argument ], [ %format-arg-111324.2, %normal-dest14 ]
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest18 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest31, %normal-dest25, %normal-dest18, %tag1, %normal-dest11, %tag, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-init, label %opt-arg

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-arg:                                          ; preds = %continue
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %rem-nargs6 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-17 = add i64 %rem-nargs6, -1
  store i64 %rem-nargs-17, i64* %"remaining-nargs*", align 8
  %vaarg8 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

opt-init:                                         ; preds = %continue
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-arg, %opt-init
  %format-arg-111324.1 = phi {}* [ %vaarg8, %opt-arg ], [ undef, %opt-init ]
  %G111327.0 = phi {}* [ %14, %opt-arg ], [ %15, %opt-init ]
  %16 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %18 = icmp eq {}* %G111327.0, %17
  br i1 %18, label %tag, label %tag1

normal-dest11:                                    ; preds = %tag
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %21 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %23 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %19, {}* %20, {}* %21, {}* %22, {}* %23, {}* %24, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest11
  %.elt55 = extractvalue { {}*, i64 } %25, 0
  %.elt57 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt57, 0
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111324.2 = select i1 %cond, {}* %26, {}* %.elt55
  br label %tag1

normal-dest18:                                    ; preds = %tag1
  %ptrtoint19 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %12, i64 2, {}* %format-arg-111324.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest25
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1154), align 16
  %ptrtoint32 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint33 = add i64 %ptrtoint32, 7
  %entry-point-addr34 = inttoptr i64 %entry-point-addr-uint33 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point35 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr34, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point35({}* %29, i64 2, {}* %30, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest31
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %32 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %33 = insertvalue { {}*, i64 } %32, i64 1, 1
  ret { {}*, i64 } %33
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.32"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !243 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %normal-dest40, %process-rest-argument
  %format-arg-111344.0 = phi {}* [ %format-arg-111344.1, %process-rest-argument ], [ %format-arg-111344.2, %normal-dest40 ]
  %9 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1109), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest11 unwind label %cleanup-lpad

tag1:                                             ; preds = %process-rest-argument
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest33 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest33, %tag1, %normal-dest18, %normal-dest14, %normal-dest11, %tag, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-init, label %opt-arg

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-arg:                                          ; preds = %continue
  %14 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %rem-nargs6 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-17 = add i64 %rem-nargs6, -1
  store i64 %rem-nargs-17, i64* %"remaining-nargs*", align 8
  %vaarg8 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

opt-init:                                         ; preds = %continue
  %15 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-arg, %opt-init
  %format-arg-111344.1 = phi {}* [ %vaarg8, %opt-arg ], [ undef, %opt-init ]
  %G111347.0 = phi {}* [ %14, %opt-arg ], [ %15, %opt-init ]
  %16 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %18 = icmp eq {}* %G111347.0, %17
  br i1 %18, label %tag1, label %tag

normal-dest11:                                    ; preds = %tag
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 2, {}* %format-arg-111344.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest11
  %20 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1111), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest14
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1148), align 16
  %ptrtoint19 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %21, i64 2, {}* %22, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %24 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %25 = insertvalue { {}*, i64 } %24, i64 1, 1
  ret { {}*, i64 } %25

normal-dest33:                                    ; preds = %tag1
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %28 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %31 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  %ptrtoint34 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %12, i64 7, {}* %26, {}* %27, {}* %28, {}* %29, {}* %30, {}* %31, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest40 unwind label %cleanup-lpad

normal-dest40:                                    ; preds = %normal-dest33
  %.elt55 = extractvalue { {}*, i64 } %32, 0
  %.elt57 = extractvalue { {}*, i64 } %32, 1
  %cond = icmp eq i64 %.elt57, 0
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %format-arg-111344.2 = select i1 %cond, {}* %33, {}* %.elt55
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"cwr=objekte.lisp^851^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !244 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"cwr=objekte.lisp^851^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest76, %normal-dest26, %header-check-br
  %G112393.0 = phi {}* [ %18, %header-check-br ], [ %G112393.1, %normal-dest26 ], [ %G112393.2, %normal-dest76 ]
  %13 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1269), align 8
  %ptrtoint29 = ptrtoint {}* %G112393.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G112393.0, i64 2, {}* %"closure->CWR-STATISTIK", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests21, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest22, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1269), align 8
  %"closure->CWR-STATISTIK" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"CWR-STATISTIK^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-STATISTIK^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 27596, i64 851, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 52), align 16
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 58), align 16
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1268), align 16
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt84 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt84, 0
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112393.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag3

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 73), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->CWR-STATISTIK", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 75), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1271), align 8
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->CWR-STATISTIK", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 80), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 3404 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1269), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112393.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"CWR-STATISTIK^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !245 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"CWR-STATISTIK^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag7:                                             ; preds = %tag570, %normal-dest4188
  %.val6323 = phi {}* [ %953, %normal-dest4188 ], [ %.val63216722, %tag570 ]
  %G112972.0 = phi {}* [ %G112972.1, %normal-dest4188 ], [ %.val6320, %tag570 ]
  %11 = icmp eq {}* %G112972.0, %.val6323
  br i1 %11, label %tag7.tag395_crit_edge, label %tag596

tag7.tag395_crit_edge:                            ; preds = %tag7
  %.val6322.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag395

tag8:                                             ; preds = %tag141
  %12 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %70, i64 4)
  %result = extractvalue { i64, i1 } %12, 0
  %overflow = extractvalue { i64, i1 } %12, 1
  %13 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag15, label %tag67

tag12:                                            ; preds = %tag334
  %14 = ptrtoint {}* %.in to i64
  %single-float-tag-only920 = and i64 %14, 7
  %15 = icmp eq i64 %single-float-tag-only920, 6
  br i1 %15, label %tag268, label %tag417

tag13:                                            ; preds = %header-check-br1386, %header-check-br1386, %header-check-br1386, %header-check-br1386
  %16 = ptrtoint {}* %198 to i64
  %single-float-tag-only922 = and i64 %16, 7
  %fixnum-tag-only40985559 = and i64 %16, 3
  %fixnump-test4099 = icmp ne i64 %fixnum-tag-only40985559, 0
  %test4197 = icmp eq i64 %single-float-tag-only922, 1
  %or.cond6273 = and i1 %fixnump-test4099, %test4197
  br i1 %or.cond6273, label %header-check-br4194, label %tag307

tag15:                                            ; preds = %tag8
  %17 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest924 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag20:                                            ; preds = %normal-dest4843, %normal-dest4722, %tag259
  %STATISCH.0 = phi {}* [ %124, %tag259 ], [ %STATISCH.4, %normal-dest4722 ], [ %STATISCH.5, %normal-dest4843 ]
  %19 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest942 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag22:                                            ; preds = %tag661, %normal-dest4986
  %.val6303 = phi {}* [ %1072, %normal-dest4986 ], [ %.val63016721, %tag661 ]
  %G113391.0 = phi {}* [ %G113391.1, %normal-dest4986 ], [ %.val6300, %tag661 ]
  %21 = icmp eq {}* %G113391.0, %.val6303
  br i1 %21, label %tag22.tag379_crit_edge, label %tag804

tag22.tag379_crit_edge:                           ; preds = %tag22
  %.val6302.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag379

tag23:                                            ; preds = %tag865
  %22 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %425, i64 4)
  %result963 = extractvalue { i64, i1 } %22, 0
  %overflow964 = extractvalue { i64, i1 } %22, 1
  %23 = inttoptr i64 %result963 to {}*
  br i1 %overflow964, label %tag878, label %tag67

tag28:                                            ; preds = %tag67
  %24 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %25 = icmp eq {}* %"%DOLIST-VAR1028.06605", %24
  %.val6294 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G112645.0 = select i1 %25, {}* %.val6294, {}* %24
  %26 = icmp eq {}* %G112645.0, %24
  br i1 %26, label %tag814, label %tag633

tag32:                                            ; preds = %tag868
  %27 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest986 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag33:                                            ; preds = %tag223
  %29 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest1001 unwind label %cleanup-lpad.loopexit

tag39:                                            ; preds = %header-check-br5066, %header-check-br5066, %header-check-br5066, %header-check-br5066
  %31 = ptrtoint {}* %289 to i64
  %single-float-tag-only1025 = and i64 %31, 7
  %32 = icmp eq i64 %single-float-tag-only1025, 6
  br i1 %32, label %tag395, label %tag674

tag40:                                            ; preds = %tag365
  %33 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest1027 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag41:                                            ; preds = %tag67
  %35 = add i64 %158, 5
  %36 = inttoptr i64 %35 to {}**
  %37 = load {}*, {}** %36, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  br label %tag116.backedge

tag116.backedge:                                  ; preds = %tag41, %normal-dest4865
  %38 = phi {}* [ %.pre, %tag41 ], [ %1060, %normal-dest4865 ]
  %"%DOLIST-VAR1028.0.be" = phi {}* [ %37, %tag41 ], [ %"%DOLIST-VAR1028.2", %normal-dest4865 ]
  %39 = icmp eq {}* %"%DOLIST-VAR1028.0.be", %38
  br i1 %39, label %tag633, label %tag321

tag55:                                            ; preds = %tag633
  %40 = icmp eq {}* %"%DOLIST-VAR.06649", %.val6339
  %.val6338 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G112626.0 = select i1 %40, {}* %.val6338, {}* %.val6339
  %41 = icmp eq {}* %G112626.0, %.val6339
  br i1 %41, label %tag422, label %tag225

tag62:                                            ; preds = %header-check-br2623, %header-check-br2623, %header-check-br2623, %header-check-br2623
  %42 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest1088 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag63:                                            ; preds = %tag818
  %44 = add i64 %163, -3
  %45 = inttoptr i64 %44 to {}**
  %46 = load {}*, {}** %45, align 8
  br label %tag555

tag67:                                            ; preds = %normal-dest5197, %normal-dest4676, %normal-dest5222, %normal-dest5105, %normal-dest5001, %normal-dest4906, %normal-dest4487, %normal-dest4457, %normal-dest4347, %normal-dest4325, %normal-dest4283, %normal-dest4263, %normal-dest4249, %normal-dest4219, %normal-dest4067, %normal-dest4039, %normal-dest3995, %normal-dest3965, %normal-dest3851, %normal-dest3561, %normal-dest3364, %normal-dest3324, %normal-dest3201, %normal-dest3153, %normal-dest3139, %normal-dest3072, %normal-dest2992, %normal-dest2887, %normal-dest2816, %normal-dest2617, %normal-dest2577, %normal-dest1662, %normal-dest1576, %normal-dest1458, %normal-dest1344, %normal-dest1172, %normal-dest994, %normal-dest931, %tag827, %tag360, %tag8, %tag868, %tag23, %tag119, %tag86, %tag369, %tag512, %tag550, %tag815, %tag230, %tag862, %tag232, %tag857, %tag517, %tag503, %tag276, %tag83
  %SYSTEM.0 = phi {}* [ %SYSTEM.16606, %tag83 ], [ %SYSTEM.16606, %tag276 ], [ %SYSTEM.16606, %tag503 ], [ %SYSTEM.16606, %tag517 ], [ %SYSTEM.16606, %tag857 ], [ %SYSTEM.16606, %tag232 ], [ %SYSTEM.16606, %tag862 ], [ %SYSTEM.16606, %tag230 ], [ %SYSTEM.16606, %tag815 ], [ %SYSTEM.16606, %tag550 ], [ %SYSTEM.16606, %tag512 ], [ %SYSTEM.16606, %tag369 ], [ %SYSTEM.16606, %tag86 ], [ %SYSTEM.16606, %tag119 ], [ %SYSTEM.16606, %tag23 ], [ %SYSTEM.16606, %tag868 ], [ %13, %tag8 ], [ %SYSTEM.16606, %tag360 ], [ %SYSTEM.16606, %tag827 ], [ %SYSTEM.3, %normal-dest931 ], [ %SYSTEM.16606, %normal-dest994 ], [ %SYSTEM.4, %normal-dest1172 ], [ %SYSTEM.16606, %normal-dest1344 ], [ %SYSTEM.16606, %normal-dest1458 ], [ %SYSTEM.16606, %normal-dest1576 ], [ %SYSTEM.16606, %normal-dest1662 ], [ %SYSTEM.16606, %normal-dest2577 ], [ %SYSTEM.16606, %normal-dest2617 ], [ %SYSTEM.16606, %normal-dest2816 ], [ %SYSTEM.16606, %normal-dest2887 ], [ %SYSTEM.16606, %normal-dest2992 ], [ %SYSTEM.16606, %normal-dest3072 ], [ %SYSTEM.16606, %normal-dest3139 ], [ %SYSTEM.16606, %normal-dest3153 ], [ %SYSTEM.16606, %normal-dest3201 ], [ %SYSTEM.16606, %normal-dest3324 ], [ %SYSTEM.16606, %normal-dest3364 ], [ %SYSTEM.16606, %normal-dest3561 ], [ %SYSTEM.16606, %normal-dest3851 ], [ %SYSTEM.16606, %normal-dest3965 ], [ %SYSTEM.16606, %normal-dest3995 ], [ %SYSTEM.16606, %normal-dest4039 ], [ %SYSTEM.16606, %normal-dest4067 ], [ %SYSTEM.16606, %normal-dest4219 ], [ %SYSTEM.16606, %normal-dest4249 ], [ %SYSTEM.16606, %normal-dest4263 ], [ %SYSTEM.16606, %normal-dest4283 ], [ %SYSTEM.16606, %normal-dest4325 ], [ %SYSTEM.16606, %normal-dest4347 ], [ %SYSTEM.16606, %normal-dest4457 ], [ %SYSTEM.16606, %normal-dest4487 ], [ %SYSTEM.16606, %normal-dest4906 ], [ %SYSTEM.16606, %normal-dest5001 ], [ %SYSTEM.16606, %normal-dest5105 ], [ %SYSTEM.16606, %normal-dest5222 ], [ %SYSTEM.16606, %normal-dest4676 ], [ %SYSTEM.16606, %normal-dest5197 ]
  %PROPAGIERT.0 = phi {}* [ %PROPAGIERT.16607, %tag83 ], [ %PROPAGIERT.16607, %tag276 ], [ %PROPAGIERT.16607, %tag503 ], [ %260, %tag517 ], [ %PROPAGIERT.16607, %tag857 ], [ %PROPAGIERT.16607, %tag232 ], [ %PROPAGIERT.16607, %tag862 ], [ %PROPAGIERT.16607, %tag230 ], [ %PROPAGIERT.16607, %tag815 ], [ %PROPAGIERT.16607, %tag550 ], [ %PROPAGIERT.16607, %tag512 ], [ %PROPAGIERT.16607, %tag369 ], [ %PROPAGIERT.16607, %tag86 ], [ %PROPAGIERT.16607, %tag119 ], [ %PROPAGIERT.16607, %tag23 ], [ %PROPAGIERT.16607, %tag868 ], [ %PROPAGIERT.16607, %tag8 ], [ %PROPAGIERT.16607, %tag360 ], [ %PROPAGIERT.16607, %tag827 ], [ %PROPAGIERT.16607, %normal-dest931 ], [ %PROPAGIERT.16607, %normal-dest994 ], [ %PROPAGIERT.16607, %normal-dest1172 ], [ %PROPAGIERT.16607, %normal-dest1344 ], [ %PROPAGIERT.16607, %normal-dest1458 ], [ %PROPAGIERT.16607, %normal-dest1576 ], [ %PROPAGIERT.16607, %normal-dest1662 ], [ %PROPAGIERT.16607, %normal-dest2577 ], [ %PROPAGIERT.16607, %normal-dest2617 ], [ %PROPAGIERT.16607, %normal-dest2816 ], [ %PROPAGIERT.16607, %normal-dest2887 ], [ %PROPAGIERT.16607, %normal-dest2992 ], [ %PROPAGIERT.16607, %normal-dest3072 ], [ %PROPAGIERT.16607, %normal-dest3139 ], [ %PROPAGIERT.16607, %normal-dest3153 ], [ %PROPAGIERT.3, %normal-dest3201 ], [ %PROPAGIERT.16607, %normal-dest3324 ], [ %PROPAGIERT.16607, %normal-dest3364 ], [ %PROPAGIERT.16607, %normal-dest3561 ], [ %PROPAGIERT.16607, %normal-dest3851 ], [ %PROPAGIERT.16607, %normal-dest3965 ], [ %PROPAGIERT.16607, %normal-dest3995 ], [ %PROPAGIERT.16607, %normal-dest4039 ], [ %PROPAGIERT.16607, %normal-dest4067 ], [ %PROPAGIERT.16607, %normal-dest4219 ], [ %PROPAGIERT.16607, %normal-dest4249 ], [ %PROPAGIERT.16607, %normal-dest4263 ], [ %PROPAGIERT.16607, %normal-dest4283 ], [ %PROPAGIERT.16607, %normal-dest4325 ], [ %PROPAGIERT.16607, %normal-dest4347 ], [ %PROPAGIERT.16607, %normal-dest4457 ], [ %PROPAGIERT.16607, %normal-dest4487 ], [ %PROPAGIERT.16607, %normal-dest4906 ], [ %PROPAGIERT.4, %normal-dest5001 ], [ %PROPAGIERT.16607, %normal-dest5105 ], [ %PROPAGIERT.16607, %normal-dest5222 ], [ %PROPAGIERT.16607, %normal-dest4676 ], [ %PROPAGIERT.16607, %normal-dest5197 ]
  %HEILMITTEL.0 = phi {}* [ %HEILMITTEL.16608, %tag83 ], [ %HEILMITTEL.16608, %tag276 ], [ %HEILMITTEL.16608, %tag503 ], [ %HEILMITTEL.16608, %tag517 ], [ %421, %tag857 ], [ %HEILMITTEL.16608, %tag232 ], [ %HEILMITTEL.16608, %tag862 ], [ %HEILMITTEL.16608, %tag230 ], [ %HEILMITTEL.16608, %tag815 ], [ %HEILMITTEL.16608, %tag550 ], [ %HEILMITTEL.16608, %tag512 ], [ %HEILMITTEL.16608, %tag369 ], [ %HEILMITTEL.16608, %tag86 ], [ %HEILMITTEL.16608, %tag119 ], [ %HEILMITTEL.16608, %tag23 ], [ %HEILMITTEL.16608, %tag868 ], [ %HEILMITTEL.16608, %tag8 ], [ %HEILMITTEL.16608, %tag360 ], [ %HEILMITTEL.16608, %tag827 ], [ %HEILMITTEL.16608, %normal-dest931 ], [ %HEILMITTEL.16608, %normal-dest994 ], [ %HEILMITTEL.16608, %normal-dest1172 ], [ %HEILMITTEL.16608, %normal-dest1344 ], [ %HEILMITTEL.16608, %normal-dest1458 ], [ %HEILMITTEL.16608, %normal-dest1576 ], [ %HEILMITTEL.16608, %normal-dest1662 ], [ %HEILMITTEL.16608, %normal-dest2577 ], [ %HEILMITTEL.16608, %normal-dest2617 ], [ %HEILMITTEL.16608, %normal-dest2816 ], [ %HEILMITTEL.16608, %normal-dest2887 ], [ %HEILMITTEL.16608, %normal-dest2992 ], [ %HEILMITTEL.16608, %normal-dest3072 ], [ %HEILMITTEL.16608, %normal-dest3139 ], [ %HEILMITTEL.16608, %normal-dest3153 ], [ %HEILMITTEL.16608, %normal-dest3201 ], [ %HEILMITTEL.16608, %normal-dest3324 ], [ %HEILMITTEL.16608, %normal-dest3364 ], [ %HEILMITTEL.3, %normal-dest3561 ], [ %HEILMITTEL.16608, %normal-dest3851 ], [ %HEILMITTEL.4, %normal-dest3965 ], [ %HEILMITTEL.16608, %normal-dest3995 ], [ %HEILMITTEL.16608, %normal-dest4039 ], [ %HEILMITTEL.16608, %normal-dest4067 ], [ %HEILMITTEL.16608, %normal-dest4219 ], [ %HEILMITTEL.16608, %normal-dest4249 ], [ %HEILMITTEL.16608, %normal-dest4263 ], [ %HEILMITTEL.16608, %normal-dest4283 ], [ %HEILMITTEL.16608, %normal-dest4325 ], [ %HEILMITTEL.16608, %normal-dest4347 ], [ %HEILMITTEL.16608, %normal-dest4457 ], [ %HEILMITTEL.16608, %normal-dest4487 ], [ %HEILMITTEL.16608, %normal-dest4906 ], [ %HEILMITTEL.16608, %normal-dest5001 ], [ %HEILMITTEL.16608, %normal-dest5105 ], [ %HEILMITTEL.16608, %normal-dest5222 ], [ %HEILMITTEL.16608, %normal-dest4676 ], [ %HEILMITTEL.16608, %normal-dest5197 ]
  %VORSCHLAG.0 = phi {}* [ %VORSCHLAG.16609, %tag83 ], [ %VORSCHLAG.16609, %tag276 ], [ %VORSCHLAG.16609, %tag503 ], [ %VORSCHLAG.16609, %tag517 ], [ %VORSCHLAG.16609, %tag857 ], [ %VORSCHLAG.16609, %tag232 ], [ %VORSCHLAG.16609, %tag862 ], [ %VORSCHLAG.16609, %tag230 ], [ %VORSCHLAG.16609, %tag815 ], [ %VORSCHLAG.16609, %tag550 ], [ %VORSCHLAG.16609, %tag512 ], [ %VORSCHLAG.16609, %tag369 ], [ %52, %tag86 ], [ %VORSCHLAG.16609, %tag119 ], [ %VORSCHLAG.16609, %tag23 ], [ %VORSCHLAG.16609, %tag868 ], [ %VORSCHLAG.16609, %tag8 ], [ %VORSCHLAG.16609, %tag360 ], [ %VORSCHLAG.16609, %tag827 ], [ %VORSCHLAG.16609, %normal-dest931 ], [ %VORSCHLAG.16609, %normal-dest994 ], [ %VORSCHLAG.16609, %normal-dest1172 ], [ %VORSCHLAG.3, %normal-dest1344 ], [ %VORSCHLAG.16609, %normal-dest1458 ], [ %VORSCHLAG.16609, %normal-dest1576 ], [ %VORSCHLAG.16609, %normal-dest1662 ], [ %VORSCHLAG.16609, %normal-dest2577 ], [ %VORSCHLAG.16609, %normal-dest2617 ], [ %VORSCHLAG.16609, %normal-dest2816 ], [ %VORSCHLAG.16609, %normal-dest2887 ], [ %VORSCHLAG.16609, %normal-dest2992 ], [ %VORSCHLAG.16609, %normal-dest3072 ], [ %VORSCHLAG.16609, %normal-dest3139 ], [ %VORSCHLAG.16609, %normal-dest3153 ], [ %VORSCHLAG.16609, %normal-dest3201 ], [ %VORSCHLAG.16609, %normal-dest3324 ], [ %VORSCHLAG.16609, %normal-dest3364 ], [ %VORSCHLAG.16609, %normal-dest3561 ], [ %VORSCHLAG.16609, %normal-dest3851 ], [ %VORSCHLAG.16609, %normal-dest3965 ], [ %VORSCHLAG.16609, %normal-dest3995 ], [ %VORSCHLAG.16609, %normal-dest4039 ], [ %VORSCHLAG.16609, %normal-dest4067 ], [ %VORSCHLAG.16609, %normal-dest4219 ], [ %VORSCHLAG.4, %normal-dest4249 ], [ %VORSCHLAG.16609, %normal-dest4263 ], [ %VORSCHLAG.16609, %normal-dest4283 ], [ %VORSCHLAG.16609, %normal-dest4325 ], [ %VORSCHLAG.16609, %normal-dest4347 ], [ %VORSCHLAG.16609, %normal-dest4457 ], [ %VORSCHLAG.16609, %normal-dest4487 ], [ %VORSCHLAG.16609, %normal-dest4906 ], [ %VORSCHLAG.16609, %normal-dest5001 ], [ %VORSCHLAG.16609, %normal-dest5105 ], [ %VORSCHLAG.16609, %normal-dest5222 ], [ %VORSCHLAG.16609, %normal-dest4676 ], [ %VORSCHLAG.16609, %normal-dest5197 ]
  %EINGABE.0 = phi {}* [ %EINGABE.16610, %tag83 ], [ %EINGABE.16610, %tag276 ], [ %EINGABE.16610, %tag503 ], [ %EINGABE.16610, %tag517 ], [ %EINGABE.16610, %tag857 ], [ %EINGABE.16610, %tag232 ], [ %EINGABE.16610, %tag862 ], [ %EINGABE.16610, %tag230 ], [ %EINGABE.16610, %tag815 ], [ %281, %tag550 ], [ %EINGABE.16610, %tag512 ], [ %EINGABE.16610, %tag369 ], [ %EINGABE.16610, %tag86 ], [ %EINGABE.16610, %tag119 ], [ %EINGABE.16610, %tag23 ], [ %EINGABE.16610, %tag868 ], [ %EINGABE.16610, %tag8 ], [ %EINGABE.16610, %tag360 ], [ %EINGABE.16610, %tag827 ], [ %EINGABE.16610, %normal-dest931 ], [ %EINGABE.16610, %normal-dest994 ], [ %EINGABE.16610, %normal-dest1172 ], [ %EINGABE.16610, %normal-dest1344 ], [ %EINGABE.16610, %normal-dest1458 ], [ %EINGABE.16610, %normal-dest1576 ], [ %EINGABE.16610, %normal-dest1662 ], [ %EINGABE.16610, %normal-dest2577 ], [ %EINGABE.16610, %normal-dest2617 ], [ %EINGABE.16610, %normal-dest2816 ], [ %EINGABE.16610, %normal-dest2887 ], [ %EINGABE.16610, %normal-dest2992 ], [ %EINGABE.3, %normal-dest3072 ], [ %EINGABE.16610, %normal-dest3139 ], [ %EINGABE.16610, %normal-dest3153 ], [ %EINGABE.16610, %normal-dest3201 ], [ %EINGABE.16610, %normal-dest3324 ], [ %EINGABE.4, %normal-dest3364 ], [ %EINGABE.16610, %normal-dest3561 ], [ %EINGABE.16610, %normal-dest3851 ], [ %EINGABE.16610, %normal-dest3965 ], [ %EINGABE.16610, %normal-dest3995 ], [ %EINGABE.16610, %normal-dest4039 ], [ %EINGABE.16610, %normal-dest4067 ], [ %EINGABE.16610, %normal-dest4219 ], [ %EINGABE.16610, %normal-dest4249 ], [ %EINGABE.16610, %normal-dest4263 ], [ %EINGABE.16610, %normal-dest4283 ], [ %EINGABE.16610, %normal-dest4325 ], [ %EINGABE.16610, %normal-dest4347 ], [ %EINGABE.16610, %normal-dest4457 ], [ %EINGABE.16610, %normal-dest4487 ], [ %EINGABE.16610, %normal-dest4906 ], [ %EINGABE.16610, %normal-dest5001 ], [ %EINGABE.16610, %normal-dest5105 ], [ %EINGABE.16610, %normal-dest5222 ], [ %EINGABE.16610, %normal-dest4676 ], [ %EINGABE.16610, %normal-dest5197 ]
  %ERERBT.0 = phi {}* [ %ERERBT.16611, %tag83 ], [ %ERERBT.16611, %tag276 ], [ %ERERBT.16611, %tag503 ], [ %ERERBT.16611, %tag517 ], [ %ERERBT.16611, %tag857 ], [ %ERERBT.16611, %tag232 ], [ %ERERBT.16611, %tag862 ], [ %ERERBT.16611, %tag230 ], [ %ERERBT.16611, %tag815 ], [ %ERERBT.16611, %tag550 ], [ %ERERBT.16611, %tag512 ], [ %195, %tag369 ], [ %ERERBT.16611, %tag86 ], [ %ERERBT.16611, %tag119 ], [ %ERERBT.16611, %tag23 ], [ %ERERBT.16611, %tag868 ], [ %ERERBT.16611, %tag8 ], [ %ERERBT.16611, %tag360 ], [ %ERERBT.16611, %tag827 ], [ %ERERBT.16611, %normal-dest931 ], [ %ERERBT.16611, %normal-dest994 ], [ %ERERBT.16611, %normal-dest1172 ], [ %ERERBT.16611, %normal-dest1344 ], [ %ERERBT.16611, %normal-dest1458 ], [ %ERERBT.16611, %normal-dest1576 ], [ %ERERBT.16611, %normal-dest1662 ], [ %ERERBT.16611, %normal-dest2577 ], [ %ERERBT.3, %normal-dest2617 ], [ %ERERBT.16611, %normal-dest2816 ], [ %ERERBT.16611, %normal-dest2887 ], [ %ERERBT.16611, %normal-dest2992 ], [ %ERERBT.16611, %normal-dest3072 ], [ %ERERBT.16611, %normal-dest3139 ], [ %ERERBT.16611, %normal-dest3153 ], [ %ERERBT.16611, %normal-dest3201 ], [ %ERERBT.16611, %normal-dest3324 ], [ %ERERBT.16611, %normal-dest3364 ], [ %ERERBT.16611, %normal-dest3561 ], [ %ERERBT.16611, %normal-dest3851 ], [ %ERERBT.16611, %normal-dest3965 ], [ %ERERBT.16611, %normal-dest3995 ], [ %ERERBT.16611, %normal-dest4039 ], [ %ERERBT.16611, %normal-dest4067 ], [ %ERERBT.16611, %normal-dest4219 ], [ %ERERBT.16611, %normal-dest4249 ], [ %ERERBT.16611, %normal-dest4263 ], [ %ERERBT.16611, %normal-dest4283 ], [ %ERERBT.16611, %normal-dest4325 ], [ %ERERBT.16611, %normal-dest4347 ], [ %ERERBT.16611, %normal-dest4457 ], [ %ERERBT.4, %normal-dest4487 ], [ %ERERBT.16611, %normal-dest4906 ], [ %ERERBT.16611, %normal-dest5001 ], [ %ERERBT.16611, %normal-dest5105 ], [ %ERERBT.16611, %normal-dest5222 ], [ %ERERBT.16611, %normal-dest4676 ], [ %ERERBT.16611, %normal-dest5197 ]
  %INVERS.0 = phi {}* [ %INVERS.16612, %tag83 ], [ %INVERS.16612, %tag276 ], [ %INVERS.16612, %tag503 ], [ %INVERS.16612, %tag517 ], [ %INVERS.16612, %tag857 ], [ %INVERS.16612, %tag232 ], [ %INVERS.16612, %tag862 ], [ %INVERS.16612, %tag230 ], [ %398, %tag815 ], [ %INVERS.16612, %tag550 ], [ %INVERS.16612, %tag512 ], [ %INVERS.16612, %tag369 ], [ %INVERS.16612, %tag86 ], [ %INVERS.16612, %tag119 ], [ %INVERS.16612, %tag23 ], [ %INVERS.16612, %tag868 ], [ %INVERS.16612, %tag8 ], [ %INVERS.16612, %tag360 ], [ %INVERS.16612, %tag827 ], [ %INVERS.16612, %normal-dest931 ], [ %INVERS.16612, %normal-dest994 ], [ %INVERS.16612, %normal-dest1172 ], [ %INVERS.16612, %normal-dest1344 ], [ %INVERS.16612, %normal-dest1458 ], [ %INVERS.16612, %normal-dest1576 ], [ %INVERS.16612, %normal-dest1662 ], [ %INVERS.16612, %normal-dest2577 ], [ %INVERS.16612, %normal-dest2617 ], [ %INVERS.16612, %normal-dest2816 ], [ %INVERS.16612, %normal-dest2887 ], [ %INVERS.16612, %normal-dest2992 ], [ %INVERS.16612, %normal-dest3072 ], [ %INVERS.16612, %normal-dest3139 ], [ %INVERS.16612, %normal-dest3153 ], [ %INVERS.16612, %normal-dest3201 ], [ %INVERS.16612, %normal-dest3324 ], [ %INVERS.16612, %normal-dest3364 ], [ %INVERS.16612, %normal-dest3561 ], [ %INVERS.3, %normal-dest3851 ], [ %INVERS.16612, %normal-dest3965 ], [ %INVERS.4, %normal-dest3995 ], [ %INVERS.16612, %normal-dest4039 ], [ %INVERS.16612, %normal-dest4067 ], [ %INVERS.16612, %normal-dest4219 ], [ %INVERS.16612, %normal-dest4249 ], [ %INVERS.16612, %normal-dest4263 ], [ %INVERS.16612, %normal-dest4283 ], [ %INVERS.16612, %normal-dest4325 ], [ %INVERS.16612, %normal-dest4347 ], [ %INVERS.16612, %normal-dest4457 ], [ %INVERS.16612, %normal-dest4487 ], [ %INVERS.16612, %normal-dest4906 ], [ %INVERS.16612, %normal-dest5001 ], [ %INVERS.16612, %normal-dest5105 ], [ %INVERS.16612, %normal-dest5222 ], [ %INVERS.16612, %normal-dest4676 ], [ %INVERS.16612, %normal-dest5197 ]
  %PROGRAMM.0 = phi {}* [ %PROGRAMM.16613, %tag83 ], [ %PROGRAMM.16613, %tag276 ], [ %PROGRAMM.16613, %tag503 ], [ %PROGRAMM.16613, %tag517 ], [ %PROGRAMM.16613, %tag857 ], [ %PROGRAMM.16613, %tag232 ], [ %424, %tag862 ], [ %PROGRAMM.16613, %tag230 ], [ %PROGRAMM.16613, %tag815 ], [ %PROGRAMM.16613, %tag550 ], [ %PROGRAMM.16613, %tag512 ], [ %PROGRAMM.16613, %tag369 ], [ %PROGRAMM.16613, %tag86 ], [ %PROGRAMM.16613, %tag119 ], [ %PROGRAMM.16613, %tag23 ], [ %PROGRAMM.16613, %tag868 ], [ %PROGRAMM.16613, %tag8 ], [ %PROGRAMM.16613, %tag360 ], [ %PROGRAMM.16613, %tag827 ], [ %PROGRAMM.16613, %normal-dest931 ], [ %PROGRAMM.16613, %normal-dest994 ], [ %PROGRAMM.16613, %normal-dest1172 ], [ %PROGRAMM.16613, %normal-dest1344 ], [ %PROGRAMM.16613, %normal-dest1458 ], [ %PROGRAMM.16613, %normal-dest1576 ], [ %PROGRAMM.16613, %normal-dest1662 ], [ %PROGRAMM.16613, %normal-dest2577 ], [ %PROGRAMM.16613, %normal-dest2617 ], [ %PROGRAMM.16613, %normal-dest2816 ], [ %PROGRAMM.16613, %normal-dest2887 ], [ %PROGRAMM.16613, %normal-dest2992 ], [ %PROGRAMM.16613, %normal-dest3072 ], [ %PROGRAMM.16613, %normal-dest3139 ], [ %PROGRAMM.3, %normal-dest3153 ], [ %PROGRAMM.16613, %normal-dest3201 ], [ %PROGRAMM.16613, %normal-dest3324 ], [ %PROGRAMM.16613, %normal-dest3364 ], [ %PROGRAMM.16613, %normal-dest3561 ], [ %PROGRAMM.16613, %normal-dest3851 ], [ %PROGRAMM.16613, %normal-dest3965 ], [ %PROGRAMM.16613, %normal-dest3995 ], [ %PROGRAMM.16613, %normal-dest4039 ], [ %PROGRAMM.16613, %normal-dest4067 ], [ %PROGRAMM.16613, %normal-dest4219 ], [ %PROGRAMM.16613, %normal-dest4249 ], [ %PROGRAMM.16613, %normal-dest4263 ], [ %PROGRAMM.16613, %normal-dest4283 ], [ %PROGRAMM.16613, %normal-dest4325 ], [ %PROGRAMM.16613, %normal-dest4347 ], [ %PROGRAMM.16613, %normal-dest4457 ], [ %PROGRAMM.16613, %normal-dest4487 ], [ %PROGRAMM.16613, %normal-dest4906 ], [ %PROGRAMM.16613, %normal-dest5001 ], [ %PROGRAMM.4, %normal-dest5105 ], [ %PROGRAMM.16613, %normal-dest5222 ], [ %PROGRAMM.16613, %normal-dest4676 ], [ %PROGRAMM.16613, %normal-dest5197 ]
  %NICHTS.0 = phi {}* [ %NICHTS.16614, %tag83 ], [ %NICHTS.16614, %tag276 ], [ %NICHTS.16614, %tag503 ], [ %NICHTS.16614, %tag517 ], [ %NICHTS.16614, %tag857 ], [ %NICHTS.16614, %tag232 ], [ %NICHTS.16614, %tag862 ], [ %NICHTS.16614, %tag230 ], [ %NICHTS.16614, %tag815 ], [ %NICHTS.16614, %tag550 ], [ %NICHTS.16614, %tag512 ], [ %NICHTS.16614, %tag369 ], [ %NICHTS.16614, %tag86 ], [ %NICHTS.16614, %tag119 ], [ %23, %tag23 ], [ %NICHTS.16614, %tag868 ], [ %NICHTS.16614, %tag8 ], [ %NICHTS.16614, %tag360 ], [ %NICHTS.16614, %tag827 ], [ %NICHTS.16614, %normal-dest931 ], [ %NICHTS.16614, %normal-dest994 ], [ %NICHTS.16614, %normal-dest1172 ], [ %NICHTS.16614, %normal-dest1344 ], [ %NICHTS.16614, %normal-dest1458 ], [ %NICHTS.16614, %normal-dest1576 ], [ %NICHTS.16614, %normal-dest1662 ], [ %NICHTS.16614, %normal-dest2577 ], [ %NICHTS.16614, %normal-dest2617 ], [ %NICHTS.16614, %normal-dest2816 ], [ %NICHTS.16614, %normal-dest2887 ], [ %NICHTS.16614, %normal-dest2992 ], [ %NICHTS.16614, %normal-dest3072 ], [ %NICHTS.16614, %normal-dest3139 ], [ %NICHTS.16614, %normal-dest3153 ], [ %NICHTS.16614, %normal-dest3201 ], [ %NICHTS.16614, %normal-dest3324 ], [ %NICHTS.16614, %normal-dest3364 ], [ %NICHTS.16614, %normal-dest3561 ], [ %NICHTS.16614, %normal-dest3851 ], [ %NICHTS.16614, %normal-dest3965 ], [ %NICHTS.16614, %normal-dest3995 ], [ %NICHTS.16614, %normal-dest4039 ], [ %NICHTS.16614, %normal-dest4067 ], [ %NICHTS.16614, %normal-dest4219 ], [ %NICHTS.16614, %normal-dest4249 ], [ %NICHTS.3, %normal-dest4263 ], [ %NICHTS.16614, %normal-dest4283 ], [ %NICHTS.16614, %normal-dest4325 ], [ %NICHTS.16614, %normal-dest4347 ], [ %NICHTS.16614, %normal-dest4457 ], [ %NICHTS.16614, %normal-dest4487 ], [ %NICHTS.16614, %normal-dest4906 ], [ %NICHTS.16614, %normal-dest5001 ], [ %NICHTS.16614, %normal-dest5105 ], [ %NICHTS.4, %normal-dest5222 ], [ %NICHTS.16614, %normal-dest4676 ], [ %NICHTS.16614, %normal-dest5197 ]
  %S_SYSTEM.0 = phi {}* [ %S_SYSTEM.16615, %tag83 ], [ %136, %tag276 ], [ %S_SYSTEM.16615, %tag503 ], [ %S_SYSTEM.16615, %tag517 ], [ %S_SYSTEM.16615, %tag857 ], [ %S_SYSTEM.16615, %tag232 ], [ %S_SYSTEM.16615, %tag862 ], [ %S_SYSTEM.16615, %tag230 ], [ %S_SYSTEM.16615, %tag815 ], [ %S_SYSTEM.16615, %tag550 ], [ %S_SYSTEM.16615, %tag512 ], [ %S_SYSTEM.16615, %tag369 ], [ %S_SYSTEM.16615, %tag86 ], [ %S_SYSTEM.16615, %tag119 ], [ %S_SYSTEM.16615, %tag23 ], [ %S_SYSTEM.16615, %tag868 ], [ %S_SYSTEM.16615, %tag8 ], [ %S_SYSTEM.16615, %tag360 ], [ %S_SYSTEM.16615, %tag827 ], [ %S_SYSTEM.16615, %normal-dest931 ], [ %S_SYSTEM.16615, %normal-dest994 ], [ %S_SYSTEM.16615, %normal-dest1172 ], [ %S_SYSTEM.16615, %normal-dest1344 ], [ %S_SYSTEM.16615, %normal-dest1458 ], [ %S_SYSTEM.16615, %normal-dest1576 ], [ %S_SYSTEM.16615, %normal-dest1662 ], [ %S_SYSTEM.16615, %normal-dest2577 ], [ %S_SYSTEM.16615, %normal-dest2617 ], [ %S_SYSTEM.16615, %normal-dest2816 ], [ %S_SYSTEM.16615, %normal-dest2887 ], [ %S_SYSTEM.16615, %normal-dest2992 ], [ %S_SYSTEM.16615, %normal-dest3072 ], [ %S_SYSTEM.16615, %normal-dest3139 ], [ %S_SYSTEM.16615, %normal-dest3153 ], [ %S_SYSTEM.16615, %normal-dest3201 ], [ %S_SYSTEM.16615, %normal-dest3324 ], [ %S_SYSTEM.16615, %normal-dest3364 ], [ %S_SYSTEM.16615, %normal-dest3561 ], [ %S_SYSTEM.16615, %normal-dest3851 ], [ %S_SYSTEM.16615, %normal-dest3965 ], [ %S_SYSTEM.16615, %normal-dest3995 ], [ %S_SYSTEM.16615, %normal-dest4039 ], [ %S_SYSTEM.16615, %normal-dest4067 ], [ %S_SYSTEM.3, %normal-dest4219 ], [ %S_SYSTEM.16615, %normal-dest4249 ], [ %S_SYSTEM.16615, %normal-dest4263 ], [ %S_SYSTEM.16615, %normal-dest4283 ], [ %S_SYSTEM.4, %normal-dest4325 ], [ %S_SYSTEM.16615, %normal-dest4347 ], [ %S_SYSTEM.16615, %normal-dest4457 ], [ %S_SYSTEM.16615, %normal-dest4487 ], [ %S_SYSTEM.16615, %normal-dest4906 ], [ %S_SYSTEM.16615, %normal-dest5001 ], [ %S_SYSTEM.16615, %normal-dest5105 ], [ %S_SYSTEM.16615, %normal-dest5222 ], [ %S_SYSTEM.16615, %normal-dest4676 ], [ %S_SYSTEM.16615, %normal-dest5197 ]
  %S_PROPAGIERT.0 = phi {}* [ %S_PROPAGIERT.16616, %tag83 ], [ %S_PROPAGIERT.16616, %tag276 ], [ %254, %tag503 ], [ %S_PROPAGIERT.16616, %tag517 ], [ %S_PROPAGIERT.16616, %tag857 ], [ %S_PROPAGIERT.16616, %tag232 ], [ %S_PROPAGIERT.16616, %tag862 ], [ %S_PROPAGIERT.16616, %tag230 ], [ %S_PROPAGIERT.16616, %tag815 ], [ %S_PROPAGIERT.16616, %tag550 ], [ %S_PROPAGIERT.16616, %tag512 ], [ %S_PROPAGIERT.16616, %tag369 ], [ %S_PROPAGIERT.16616, %tag86 ], [ %S_PROPAGIERT.16616, %tag119 ], [ %S_PROPAGIERT.16616, %tag23 ], [ %S_PROPAGIERT.16616, %tag868 ], [ %S_PROPAGIERT.16616, %tag8 ], [ %S_PROPAGIERT.16616, %tag360 ], [ %S_PROPAGIERT.16616, %tag827 ], [ %S_PROPAGIERT.16616, %normal-dest931 ], [ %S_PROPAGIERT.16616, %normal-dest994 ], [ %S_PROPAGIERT.16616, %normal-dest1172 ], [ %S_PROPAGIERT.16616, %normal-dest1344 ], [ %S_PROPAGIERT.3, %normal-dest1458 ], [ %S_PROPAGIERT.4, %normal-dest1576 ], [ %S_PROPAGIERT.16616, %normal-dest1662 ], [ %S_PROPAGIERT.16616, %normal-dest2577 ], [ %S_PROPAGIERT.16616, %normal-dest2617 ], [ %S_PROPAGIERT.16616, %normal-dest2816 ], [ %S_PROPAGIERT.16616, %normal-dest2887 ], [ %S_PROPAGIERT.16616, %normal-dest2992 ], [ %S_PROPAGIERT.16616, %normal-dest3072 ], [ %S_PROPAGIERT.16616, %normal-dest3139 ], [ %S_PROPAGIERT.16616, %normal-dest3153 ], [ %S_PROPAGIERT.16616, %normal-dest3201 ], [ %S_PROPAGIERT.16616, %normal-dest3324 ], [ %S_PROPAGIERT.16616, %normal-dest3364 ], [ %S_PROPAGIERT.16616, %normal-dest3561 ], [ %S_PROPAGIERT.16616, %normal-dest3851 ], [ %S_PROPAGIERT.16616, %normal-dest3965 ], [ %S_PROPAGIERT.16616, %normal-dest3995 ], [ %S_PROPAGIERT.16616, %normal-dest4039 ], [ %S_PROPAGIERT.16616, %normal-dest4067 ], [ %S_PROPAGIERT.16616, %normal-dest4219 ], [ %S_PROPAGIERT.16616, %normal-dest4249 ], [ %S_PROPAGIERT.16616, %normal-dest4263 ], [ %S_PROPAGIERT.16616, %normal-dest4283 ], [ %S_PROPAGIERT.16616, %normal-dest4325 ], [ %S_PROPAGIERT.16616, %normal-dest4347 ], [ %S_PROPAGIERT.16616, %normal-dest4457 ], [ %S_PROPAGIERT.16616, %normal-dest4487 ], [ %S_PROPAGIERT.16616, %normal-dest4906 ], [ %S_PROPAGIERT.16616, %normal-dest5001 ], [ %S_PROPAGIERT.16616, %normal-dest5105 ], [ %S_PROPAGIERT.16616, %normal-dest5222 ], [ %S_PROPAGIERT.16616, %normal-dest4676 ], [ %S_PROPAGIERT.16616, %normal-dest5197 ]
  %S_HEILMITTEL.0 = phi {}* [ %S_HEILMITTEL.16617, %tag83 ], [ %S_HEILMITTEL.16617, %tag276 ], [ %S_HEILMITTEL.16617, %tag503 ], [ %S_HEILMITTEL.16617, %tag517 ], [ %S_HEILMITTEL.16617, %tag857 ], [ %S_HEILMITTEL.16617, %tag232 ], [ %S_HEILMITTEL.16617, %tag862 ], [ %S_HEILMITTEL.16617, %tag230 ], [ %S_HEILMITTEL.16617, %tag815 ], [ %S_HEILMITTEL.16617, %tag550 ], [ %S_HEILMITTEL.16617, %tag512 ], [ %S_HEILMITTEL.16617, %tag369 ], [ %S_HEILMITTEL.16617, %tag86 ], [ %S_HEILMITTEL.16617, %tag119 ], [ %S_HEILMITTEL.16617, %tag23 ], [ %427, %tag868 ], [ %S_HEILMITTEL.16617, %tag8 ], [ %S_HEILMITTEL.16617, %tag360 ], [ %S_HEILMITTEL.16617, %tag827 ], [ %S_HEILMITTEL.16617, %normal-dest931 ], [ %S_HEILMITTEL.3, %normal-dest994 ], [ %S_HEILMITTEL.16617, %normal-dest1172 ], [ %S_HEILMITTEL.16617, %normal-dest1344 ], [ %S_HEILMITTEL.16617, %normal-dest1458 ], [ %S_HEILMITTEL.16617, %normal-dest1576 ], [ %S_HEILMITTEL.16617, %normal-dest1662 ], [ %S_HEILMITTEL.16617, %normal-dest2577 ], [ %S_HEILMITTEL.16617, %normal-dest2617 ], [ %S_HEILMITTEL.16617, %normal-dest2816 ], [ %S_HEILMITTEL.16617, %normal-dest2887 ], [ %S_HEILMITTEL.16617, %normal-dest2992 ], [ %S_HEILMITTEL.16617, %normal-dest3072 ], [ %S_HEILMITTEL.16617, %normal-dest3139 ], [ %S_HEILMITTEL.16617, %normal-dest3153 ], [ %S_HEILMITTEL.16617, %normal-dest3201 ], [ %S_HEILMITTEL.16617, %normal-dest3324 ], [ %S_HEILMITTEL.16617, %normal-dest3364 ], [ %S_HEILMITTEL.16617, %normal-dest3561 ], [ %S_HEILMITTEL.16617, %normal-dest3851 ], [ %S_HEILMITTEL.16617, %normal-dest3965 ], [ %S_HEILMITTEL.16617, %normal-dest3995 ], [ %S_HEILMITTEL.16617, %normal-dest4039 ], [ %S_HEILMITTEL.16617, %normal-dest4067 ], [ %S_HEILMITTEL.16617, %normal-dest4219 ], [ %S_HEILMITTEL.16617, %normal-dest4249 ], [ %S_HEILMITTEL.16617, %normal-dest4263 ], [ %S_HEILMITTEL.16617, %normal-dest4283 ], [ %S_HEILMITTEL.16617, %normal-dest4325 ], [ %S_HEILMITTEL.4, %normal-dest4347 ], [ %S_HEILMITTEL.16617, %normal-dest4457 ], [ %S_HEILMITTEL.16617, %normal-dest4487 ], [ %S_HEILMITTEL.16617, %normal-dest4906 ], [ %S_HEILMITTEL.16617, %normal-dest5001 ], [ %S_HEILMITTEL.16617, %normal-dest5105 ], [ %S_HEILMITTEL.16617, %normal-dest5222 ], [ %S_HEILMITTEL.16617, %normal-dest4676 ], [ %S_HEILMITTEL.16617, %normal-dest5197 ]
  %S_VORSCHLAG.0 = phi {}* [ %S_VORSCHLAG.16618, %tag83 ], [ %S_VORSCHLAG.16618, %tag276 ], [ %S_VORSCHLAG.16618, %tag503 ], [ %S_VORSCHLAG.16618, %tag517 ], [ %S_VORSCHLAG.16618, %tag857 ], [ %113, %tag232 ], [ %S_VORSCHLAG.16618, %tag862 ], [ %S_VORSCHLAG.16618, %tag230 ], [ %S_VORSCHLAG.16618, %tag815 ], [ %S_VORSCHLAG.16618, %tag550 ], [ %S_VORSCHLAG.16618, %tag512 ], [ %S_VORSCHLAG.16618, %tag369 ], [ %S_VORSCHLAG.16618, %tag86 ], [ %S_VORSCHLAG.16618, %tag119 ], [ %S_VORSCHLAG.16618, %tag23 ], [ %S_VORSCHLAG.16618, %tag868 ], [ %S_VORSCHLAG.16618, %tag8 ], [ %S_VORSCHLAG.16618, %tag360 ], [ %S_VORSCHLAG.16618, %tag827 ], [ %S_VORSCHLAG.16618, %normal-dest931 ], [ %S_VORSCHLAG.16618, %normal-dest994 ], [ %S_VORSCHLAG.16618, %normal-dest1172 ], [ %S_VORSCHLAG.16618, %normal-dest1344 ], [ %S_VORSCHLAG.16618, %normal-dest1458 ], [ %S_VORSCHLAG.16618, %normal-dest1576 ], [ %S_VORSCHLAG.16618, %normal-dest1662 ], [ %S_VORSCHLAG.16618, %normal-dest2577 ], [ %S_VORSCHLAG.16618, %normal-dest2617 ], [ %S_VORSCHLAG.16618, %normal-dest2816 ], [ %S_VORSCHLAG.16618, %normal-dest2887 ], [ %S_VORSCHLAG.16618, %normal-dest2992 ], [ %S_VORSCHLAG.16618, %normal-dest3072 ], [ %S_VORSCHLAG.3, %normal-dest3139 ], [ %S_VORSCHLAG.16618, %normal-dest3153 ], [ %S_VORSCHLAG.16618, %normal-dest3201 ], [ %S_VORSCHLAG.16618, %normal-dest3324 ], [ %S_VORSCHLAG.16618, %normal-dest3364 ], [ %S_VORSCHLAG.16618, %normal-dest3561 ], [ %S_VORSCHLAG.16618, %normal-dest3851 ], [ %S_VORSCHLAG.16618, %normal-dest3965 ], [ %S_VORSCHLAG.16618, %normal-dest3995 ], [ %S_VORSCHLAG.16618, %normal-dest4039 ], [ %S_VORSCHLAG.4, %normal-dest4067 ], [ %S_VORSCHLAG.16618, %normal-dest4219 ], [ %S_VORSCHLAG.16618, %normal-dest4249 ], [ %S_VORSCHLAG.16618, %normal-dest4263 ], [ %S_VORSCHLAG.16618, %normal-dest4283 ], [ %S_VORSCHLAG.16618, %normal-dest4325 ], [ %S_VORSCHLAG.16618, %normal-dest4347 ], [ %S_VORSCHLAG.16618, %normal-dest4457 ], [ %S_VORSCHLAG.16618, %normal-dest4487 ], [ %S_VORSCHLAG.16618, %normal-dest4906 ], [ %S_VORSCHLAG.16618, %normal-dest5001 ], [ %S_VORSCHLAG.16618, %normal-dest5105 ], [ %S_VORSCHLAG.16618, %normal-dest5222 ], [ %S_VORSCHLAG.16618, %normal-dest4676 ], [ %S_VORSCHLAG.16618, %normal-dest5197 ]
  %S_EINGABE.0 = phi {}* [ %S_EINGABE.16619, %tag83 ], [ %S_EINGABE.16619, %tag276 ], [ %S_EINGABE.16619, %tag503 ], [ %S_EINGABE.16619, %tag517 ], [ %S_EINGABE.16619, %tag857 ], [ %S_EINGABE.16619, %tag232 ], [ %S_EINGABE.16619, %tag862 ], [ %S_EINGABE.16619, %tag230 ], [ %S_EINGABE.16619, %tag815 ], [ %S_EINGABE.16619, %tag550 ], [ %S_EINGABE.16619, %tag512 ], [ %S_EINGABE.16619, %tag369 ], [ %S_EINGABE.16619, %tag86 ], [ %64, %tag119 ], [ %S_EINGABE.16619, %tag23 ], [ %S_EINGABE.16619, %tag868 ], [ %S_EINGABE.16619, %tag8 ], [ %S_EINGABE.16619, %tag360 ], [ %S_EINGABE.16619, %tag827 ], [ %S_EINGABE.16619, %normal-dest931 ], [ %S_EINGABE.16619, %normal-dest994 ], [ %S_EINGABE.16619, %normal-dest1172 ], [ %S_EINGABE.16619, %normal-dest1344 ], [ %S_EINGABE.16619, %normal-dest1458 ], [ %S_EINGABE.16619, %normal-dest1576 ], [ %S_EINGABE.16619, %normal-dest1662 ], [ %S_EINGABE.16619, %normal-dest2577 ], [ %S_EINGABE.16619, %normal-dest2617 ], [ %S_EINGABE.16619, %normal-dest2816 ], [ %S_EINGABE.16619, %normal-dest2887 ], [ %S_EINGABE.3, %normal-dest2992 ], [ %S_EINGABE.16619, %normal-dest3072 ], [ %S_EINGABE.16619, %normal-dest3139 ], [ %S_EINGABE.16619, %normal-dest3153 ], [ %S_EINGABE.16619, %normal-dest3201 ], [ %S_EINGABE.16619, %normal-dest3324 ], [ %S_EINGABE.16619, %normal-dest3364 ], [ %S_EINGABE.16619, %normal-dest3561 ], [ %S_EINGABE.16619, %normal-dest3851 ], [ %S_EINGABE.16619, %normal-dest3965 ], [ %S_EINGABE.16619, %normal-dest3995 ], [ %S_EINGABE.4, %normal-dest4039 ], [ %S_EINGABE.16619, %normal-dest4067 ], [ %S_EINGABE.16619, %normal-dest4219 ], [ %S_EINGABE.16619, %normal-dest4249 ], [ %S_EINGABE.16619, %normal-dest4263 ], [ %S_EINGABE.16619, %normal-dest4283 ], [ %S_EINGABE.16619, %normal-dest4325 ], [ %S_EINGABE.16619, %normal-dest4347 ], [ %S_EINGABE.16619, %normal-dest4457 ], [ %S_EINGABE.16619, %normal-dest4487 ], [ %S_EINGABE.16619, %normal-dest4906 ], [ %S_EINGABE.16619, %normal-dest5001 ], [ %S_EINGABE.16619, %normal-dest5105 ], [ %S_EINGABE.16619, %normal-dest5222 ], [ %S_EINGABE.16619, %normal-dest4676 ], [ %S_EINGABE.16619, %normal-dest5197 ]
  %S_ERERBT.0 = phi {}* [ %S_ERERBT.16620, %tag83 ], [ %S_ERERBT.16620, %tag276 ], [ %S_ERERBT.16620, %tag503 ], [ %S_ERERBT.16620, %tag517 ], [ %S_ERERBT.16620, %tag857 ], [ %S_ERERBT.16620, %tag232 ], [ %S_ERERBT.16620, %tag862 ], [ %S_ERERBT.16620, %tag230 ], [ %S_ERERBT.16620, %tag815 ], [ %S_ERERBT.16620, %tag550 ], [ %257, %tag512 ], [ %S_ERERBT.16620, %tag369 ], [ %S_ERERBT.16620, %tag86 ], [ %S_ERERBT.16620, %tag119 ], [ %S_ERERBT.16620, %tag23 ], [ %S_ERERBT.16620, %tag868 ], [ %S_ERERBT.16620, %tag8 ], [ %S_ERERBT.16620, %tag360 ], [ %S_ERERBT.16620, %tag827 ], [ %S_ERERBT.16620, %normal-dest931 ], [ %S_ERERBT.16620, %normal-dest994 ], [ %S_ERERBT.16620, %normal-dest1172 ], [ %S_ERERBT.16620, %normal-dest1344 ], [ %S_ERERBT.16620, %normal-dest1458 ], [ %S_ERERBT.16620, %normal-dest1576 ], [ %S_ERERBT.16620, %normal-dest1662 ], [ %S_ERERBT.3, %normal-dest2577 ], [ %S_ERERBT.16620, %normal-dest2617 ], [ %S_ERERBT.4, %normal-dest2816 ], [ %S_ERERBT.16620, %normal-dest2887 ], [ %S_ERERBT.16620, %normal-dest2992 ], [ %S_ERERBT.16620, %normal-dest3072 ], [ %S_ERERBT.16620, %normal-dest3139 ], [ %S_ERERBT.16620, %normal-dest3153 ], [ %S_ERERBT.16620, %normal-dest3201 ], [ %S_ERERBT.16620, %normal-dest3324 ], [ %S_ERERBT.16620, %normal-dest3364 ], [ %S_ERERBT.16620, %normal-dest3561 ], [ %S_ERERBT.16620, %normal-dest3851 ], [ %S_ERERBT.16620, %normal-dest3965 ], [ %S_ERERBT.16620, %normal-dest3995 ], [ %S_ERERBT.16620, %normal-dest4039 ], [ %S_ERERBT.16620, %normal-dest4067 ], [ %S_ERERBT.16620, %normal-dest4219 ], [ %S_ERERBT.16620, %normal-dest4249 ], [ %S_ERERBT.16620, %normal-dest4263 ], [ %S_ERERBT.16620, %normal-dest4283 ], [ %S_ERERBT.16620, %normal-dest4325 ], [ %S_ERERBT.16620, %normal-dest4347 ], [ %S_ERERBT.16620, %normal-dest4457 ], [ %S_ERERBT.16620, %normal-dest4487 ], [ %S_ERERBT.16620, %normal-dest4906 ], [ %S_ERERBT.16620, %normal-dest5001 ], [ %S_ERERBT.16620, %normal-dest5105 ], [ %S_ERERBT.16620, %normal-dest5222 ], [ %S_ERERBT.16620, %normal-dest4676 ], [ %S_ERERBT.16620, %normal-dest5197 ]
  %S_INVERS.0 = phi {}* [ %S_INVERS.16621, %tag83 ], [ %S_INVERS.16621, %tag276 ], [ %S_INVERS.16621, %tag503 ], [ %S_INVERS.16621, %tag517 ], [ %S_INVERS.16621, %tag857 ], [ %S_INVERS.16621, %tag232 ], [ %S_INVERS.16621, %tag862 ], [ %S_INVERS.16621, %tag230 ], [ %S_INVERS.16621, %tag815 ], [ %S_INVERS.16621, %tag550 ], [ %S_INVERS.16621, %tag512 ], [ %S_INVERS.16621, %tag369 ], [ %S_INVERS.16621, %tag86 ], [ %S_INVERS.16621, %tag119 ], [ %S_INVERS.16621, %tag23 ], [ %S_INVERS.16621, %tag868 ], [ %S_INVERS.16621, %tag8 ], [ %187, %tag360 ], [ %S_INVERS.16621, %tag827 ], [ %S_INVERS.16621, %normal-dest931 ], [ %S_INVERS.16621, %normal-dest994 ], [ %S_INVERS.16621, %normal-dest1172 ], [ %S_INVERS.16621, %normal-dest1344 ], [ %S_INVERS.16621, %normal-dest1458 ], [ %S_INVERS.16621, %normal-dest1576 ], [ %S_INVERS.16621, %normal-dest1662 ], [ %S_INVERS.16621, %normal-dest2577 ], [ %S_INVERS.16621, %normal-dest2617 ], [ %S_INVERS.16621, %normal-dest2816 ], [ %S_INVERS.16621, %normal-dest2887 ], [ %S_INVERS.16621, %normal-dest2992 ], [ %S_INVERS.16621, %normal-dest3072 ], [ %S_INVERS.16621, %normal-dest3139 ], [ %S_INVERS.16621, %normal-dest3153 ], [ %S_INVERS.16621, %normal-dest3201 ], [ %S_INVERS.3, %normal-dest3324 ], [ %S_INVERS.16621, %normal-dest3364 ], [ %S_INVERS.16621, %normal-dest3561 ], [ %S_INVERS.16621, %normal-dest3851 ], [ %S_INVERS.16621, %normal-dest3965 ], [ %S_INVERS.16621, %normal-dest3995 ], [ %S_INVERS.16621, %normal-dest4039 ], [ %S_INVERS.16621, %normal-dest4067 ], [ %S_INVERS.16621, %normal-dest4219 ], [ %S_INVERS.16621, %normal-dest4249 ], [ %S_INVERS.16621, %normal-dest4263 ], [ %S_INVERS.4, %normal-dest4283 ], [ %S_INVERS.16621, %normal-dest4325 ], [ %S_INVERS.16621, %normal-dest4347 ], [ %S_INVERS.16621, %normal-dest4457 ], [ %S_INVERS.16621, %normal-dest4487 ], [ %S_INVERS.16621, %normal-dest4906 ], [ %S_INVERS.16621, %normal-dest5001 ], [ %S_INVERS.16621, %normal-dest5105 ], [ %S_INVERS.16621, %normal-dest5222 ], [ %S_INVERS.16621, %normal-dest4676 ], [ %S_INVERS.16621, %normal-dest5197 ]
  %S_NICHTS.0 = phi {}* [ %S_NICHTS.16622, %tag83 ], [ %S_NICHTS.16622, %tag276 ], [ %S_NICHTS.16622, %tag503 ], [ %S_NICHTS.16622, %tag517 ], [ %S_NICHTS.16622, %tag857 ], [ %S_NICHTS.16622, %tag232 ], [ %S_NICHTS.16622, %tag862 ], [ %S_NICHTS.16622, %tag230 ], [ %S_NICHTS.16622, %tag815 ], [ %S_NICHTS.16622, %tag550 ], [ %S_NICHTS.16622, %tag512 ], [ %S_NICHTS.16622, %tag369 ], [ %S_NICHTS.16622, %tag86 ], [ %S_NICHTS.16622, %tag119 ], [ %S_NICHTS.16622, %tag23 ], [ %S_NICHTS.16622, %tag868 ], [ %S_NICHTS.16622, %tag8 ], [ %S_NICHTS.16622, %tag360 ], [ %405, %tag827 ], [ %S_NICHTS.16622, %normal-dest931 ], [ %S_NICHTS.16622, %normal-dest994 ], [ %S_NICHTS.16622, %normal-dest1172 ], [ %S_NICHTS.16622, %normal-dest1344 ], [ %S_NICHTS.16622, %normal-dest1458 ], [ %S_NICHTS.16622, %normal-dest1576 ], [ %S_NICHTS.16622, %normal-dest1662 ], [ %S_NICHTS.16622, %normal-dest2577 ], [ %S_NICHTS.16622, %normal-dest2617 ], [ %S_NICHTS.16622, %normal-dest2816 ], [ %S_NICHTS.16622, %normal-dest2887 ], [ %S_NICHTS.16622, %normal-dest2992 ], [ %S_NICHTS.16622, %normal-dest3072 ], [ %S_NICHTS.16622, %normal-dest3139 ], [ %S_NICHTS.16622, %normal-dest3153 ], [ %S_NICHTS.16622, %normal-dest3201 ], [ %S_NICHTS.16622, %normal-dest3324 ], [ %S_NICHTS.16622, %normal-dest3364 ], [ %S_NICHTS.16622, %normal-dest3561 ], [ %S_NICHTS.16622, %normal-dest3851 ], [ %S_NICHTS.16622, %normal-dest3965 ], [ %S_NICHTS.16622, %normal-dest3995 ], [ %S_NICHTS.16622, %normal-dest4039 ], [ %S_NICHTS.16622, %normal-dest4067 ], [ %S_NICHTS.16622, %normal-dest4219 ], [ %S_NICHTS.16622, %normal-dest4249 ], [ %S_NICHTS.16622, %normal-dest4263 ], [ %S_NICHTS.16622, %normal-dest4283 ], [ %S_NICHTS.16622, %normal-dest4325 ], [ %S_NICHTS.16622, %normal-dest4347 ], [ %S_NICHTS.3, %normal-dest4457 ], [ %S_NICHTS.16622, %normal-dest4487 ], [ %S_NICHTS.4, %normal-dest4906 ], [ %S_NICHTS.16622, %normal-dest5001 ], [ %S_NICHTS.16622, %normal-dest5105 ], [ %S_NICHTS.16622, %normal-dest5222 ], [ %S_NICHTS.16622, %normal-dest4676 ], [ %S_NICHTS.16622, %normal-dest5197 ]
  %S_PROGRAMM.0 = phi {}* [ %S_PROGRAMM.16623, %tag83 ], [ %S_PROGRAMM.16623, %tag276 ], [ %S_PROGRAMM.16623, %tag503 ], [ %S_PROGRAMM.16623, %tag517 ], [ %S_PROGRAMM.16623, %tag857 ], [ %S_PROGRAMM.16623, %tag232 ], [ %S_PROGRAMM.16623, %tag862 ], [ %111, %tag230 ], [ %S_PROGRAMM.16623, %tag815 ], [ %S_PROGRAMM.16623, %tag550 ], [ %S_PROGRAMM.16623, %tag512 ], [ %S_PROGRAMM.16623, %tag369 ], [ %S_PROGRAMM.16623, %tag86 ], [ %S_PROGRAMM.16623, %tag119 ], [ %S_PROGRAMM.16623, %tag23 ], [ %S_PROGRAMM.16623, %tag868 ], [ %S_PROGRAMM.16623, %tag8 ], [ %S_PROGRAMM.16623, %tag360 ], [ %S_PROGRAMM.16623, %tag827 ], [ %S_PROGRAMM.16623, %normal-dest931 ], [ %S_PROGRAMM.16623, %normal-dest994 ], [ %S_PROGRAMM.16623, %normal-dest1172 ], [ %S_PROGRAMM.16623, %normal-dest1344 ], [ %S_PROGRAMM.16623, %normal-dest1458 ], [ %S_PROGRAMM.16623, %normal-dest1576 ], [ %S_PROGRAMM.3, %normal-dest1662 ], [ %S_PROGRAMM.16623, %normal-dest2577 ], [ %S_PROGRAMM.16623, %normal-dest2617 ], [ %S_PROGRAMM.16623, %normal-dest2816 ], [ %S_PROGRAMM.4, %normal-dest2887 ], [ %S_PROGRAMM.16623, %normal-dest2992 ], [ %S_PROGRAMM.16623, %normal-dest3072 ], [ %S_PROGRAMM.16623, %normal-dest3139 ], [ %S_PROGRAMM.16623, %normal-dest3153 ], [ %S_PROGRAMM.16623, %normal-dest3201 ], [ %S_PROGRAMM.16623, %normal-dest3324 ], [ %S_PROGRAMM.16623, %normal-dest3364 ], [ %S_PROGRAMM.16623, %normal-dest3561 ], [ %S_PROGRAMM.16623, %normal-dest3851 ], [ %S_PROGRAMM.16623, %normal-dest3965 ], [ %S_PROGRAMM.16623, %normal-dest3995 ], [ %S_PROGRAMM.16623, %normal-dest4039 ], [ %S_PROGRAMM.16623, %normal-dest4067 ], [ %S_PROGRAMM.16623, %normal-dest4219 ], [ %S_PROGRAMM.16623, %normal-dest4249 ], [ %S_PROGRAMM.16623, %normal-dest4263 ], [ %S_PROGRAMM.16623, %normal-dest4283 ], [ %S_PROGRAMM.16623, %normal-dest4325 ], [ %S_PROGRAMM.16623, %normal-dest4347 ], [ %S_PROGRAMM.16623, %normal-dest4457 ], [ %S_PROGRAMM.16623, %normal-dest4487 ], [ %S_PROGRAMM.16623, %normal-dest4906 ], [ %S_PROGRAMM.16623, %normal-dest5001 ], [ %S_PROGRAMM.16623, %normal-dest5105 ], [ %S_PROGRAMM.16623, %normal-dest5222 ], [ %S_PROGRAMM.16623, %normal-dest4676 ], [ %S_PROGRAMM.16623, %normal-dest5197 ]
  %DYNAMISCH.0 = phi {}* [ %DYNAMISCH.16624, %tag83 ], [ %DYNAMISCH.16624, %tag276 ], [ %DYNAMISCH.16624, %tag503 ], [ %DYNAMISCH.3, %tag517 ], [ %DYNAMISCH.3, %tag857 ], [ %DYNAMISCH.16624, %tag232 ], [ %DYNAMISCH.3, %tag862 ], [ %DYNAMISCH.16624, %tag230 ], [ %DYNAMISCH.3, %tag815 ], [ %DYNAMISCH.3, %tag550 ], [ %DYNAMISCH.16624, %tag512 ], [ %DYNAMISCH.3, %tag369 ], [ %DYNAMISCH.3, %tag86 ], [ %DYNAMISCH.16624, %tag119 ], [ %DYNAMISCH.3, %tag23 ], [ %DYNAMISCH.16624, %tag868 ], [ %DYNAMISCH.3, %tag8 ], [ %DYNAMISCH.16624, %tag360 ], [ %DYNAMISCH.16624, %tag827 ], [ %DYNAMISCH.3, %normal-dest931 ], [ %DYNAMISCH.16624, %normal-dest994 ], [ %DYNAMISCH.3, %normal-dest1172 ], [ %DYNAMISCH.3, %normal-dest1344 ], [ %DYNAMISCH.16624, %normal-dest1458 ], [ %DYNAMISCH.16624, %normal-dest1576 ], [ %DYNAMISCH.16624, %normal-dest1662 ], [ %DYNAMISCH.16624, %normal-dest2577 ], [ %DYNAMISCH.3, %normal-dest2617 ], [ %DYNAMISCH.16624, %normal-dest2816 ], [ %DYNAMISCH.16624, %normal-dest2887 ], [ %DYNAMISCH.16624, %normal-dest2992 ], [ %DYNAMISCH.3, %normal-dest3072 ], [ %DYNAMISCH.16624, %normal-dest3139 ], [ %DYNAMISCH.3, %normal-dest3153 ], [ %DYNAMISCH.3, %normal-dest3201 ], [ %DYNAMISCH.16624, %normal-dest3324 ], [ %DYNAMISCH.3, %normal-dest3364 ], [ %DYNAMISCH.3, %normal-dest3561 ], [ %DYNAMISCH.3, %normal-dest3851 ], [ %DYNAMISCH.3, %normal-dest3965 ], [ %DYNAMISCH.3, %normal-dest3995 ], [ %DYNAMISCH.16624, %normal-dest4039 ], [ %DYNAMISCH.16624, %normal-dest4067 ], [ %DYNAMISCH.16624, %normal-dest4219 ], [ %DYNAMISCH.3, %normal-dest4249 ], [ %DYNAMISCH.3, %normal-dest4263 ], [ %DYNAMISCH.16624, %normal-dest4283 ], [ %DYNAMISCH.16624, %normal-dest4325 ], [ %DYNAMISCH.16624, %normal-dest4347 ], [ %DYNAMISCH.16624, %normal-dest4457 ], [ %DYNAMISCH.3, %normal-dest4487 ], [ %DYNAMISCH.16624, %normal-dest4906 ], [ %DYNAMISCH.3, %normal-dest5001 ], [ %DYNAMISCH.3, %normal-dest5105 ], [ %DYNAMISCH.3, %normal-dest5222 ], [ %DYNAMISCH.3, %normal-dest4676 ], [ %DYNAMISCH.16624, %normal-dest5197 ]
  %STATISCH.1 = phi {}* [ %STATISCH.0, %tag83 ], [ %STATISCH.0, %tag276 ], [ %STATISCH.0, %tag503 ], [ %STATISCH.26625, %tag517 ], [ %STATISCH.26625, %tag857 ], [ %STATISCH.0, %tag232 ], [ %STATISCH.26625, %tag862 ], [ %STATISCH.0, %tag230 ], [ %STATISCH.26625, %tag815 ], [ %STATISCH.26625, %tag550 ], [ %STATISCH.0, %tag512 ], [ %STATISCH.26625, %tag369 ], [ %STATISCH.26625, %tag86 ], [ %STATISCH.0, %tag119 ], [ %STATISCH.26625, %tag23 ], [ %STATISCH.0, %tag868 ], [ %STATISCH.26625, %tag8 ], [ %STATISCH.0, %tag360 ], [ %STATISCH.0, %tag827 ], [ %STATISCH.26625, %normal-dest931 ], [ %STATISCH.0, %normal-dest994 ], [ %STATISCH.26625, %normal-dest1172 ], [ %STATISCH.26625, %normal-dest1344 ], [ %STATISCH.0, %normal-dest1458 ], [ %STATISCH.0, %normal-dest1576 ], [ %STATISCH.0, %normal-dest1662 ], [ %STATISCH.0, %normal-dest2577 ], [ %STATISCH.26625, %normal-dest2617 ], [ %STATISCH.0, %normal-dest2816 ], [ %STATISCH.0, %normal-dest2887 ], [ %STATISCH.0, %normal-dest2992 ], [ %STATISCH.26625, %normal-dest3072 ], [ %STATISCH.0, %normal-dest3139 ], [ %STATISCH.26625, %normal-dest3153 ], [ %STATISCH.26625, %normal-dest3201 ], [ %STATISCH.0, %normal-dest3324 ], [ %STATISCH.26625, %normal-dest3364 ], [ %STATISCH.26625, %normal-dest3561 ], [ %STATISCH.26625, %normal-dest3851 ], [ %STATISCH.26625, %normal-dest3965 ], [ %STATISCH.26625, %normal-dest3995 ], [ %STATISCH.0, %normal-dest4039 ], [ %STATISCH.0, %normal-dest4067 ], [ %STATISCH.0, %normal-dest4219 ], [ %STATISCH.26625, %normal-dest4249 ], [ %STATISCH.26625, %normal-dest4263 ], [ %STATISCH.0, %normal-dest4283 ], [ %STATISCH.0, %normal-dest4325 ], [ %STATISCH.0, %normal-dest4347 ], [ %STATISCH.0, %normal-dest4457 ], [ %STATISCH.26625, %normal-dest4487 ], [ %STATISCH.0, %normal-dest4906 ], [ %STATISCH.26625, %normal-dest5001 ], [ %STATISCH.26625, %normal-dest5105 ], [ %STATISCH.26625, %normal-dest5222 ], [ %STATISCH.26625, %normal-dest4676 ], [ %STATISCH.0, %normal-dest5197 ]
  br i1 %consp-test2782, label %tag41, label %tag28

tag78:                                            ; preds = %tag141
  %47 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest1165 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag83:                                            ; preds = %normal-dest3710, %normal-dest3663
  %49 = phi {}* [ %897, %normal-dest3663 ], [ %904, %normal-dest3710 ]
  %G112674.0 = phi {}* [ %G112674.1, %normal-dest3663 ], [ %.val6336, %normal-dest3710 ]
  %50 = icmp eq {}* %G112674.0, %49
  br i1 %50, label %tag877, label %tag67

tag86:                                            ; preds = %tag599
  %51 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %309, i64 4)
  %result1196 = extractvalue { i64, i1 } %51, 0
  %overflow1197 = extractvalue { i64, i1 } %51, 1
  %52 = inttoptr i64 %result1196 to {}*
  br i1 %overflow1197, label %tag126, label %tag67

tag91:                                            ; preds = %header-check-br4310, %header-check-br4310, %header-check-br4310, %header-check-br4310
  %53 = ptrtoint {}* %98 to i64
  %single-float-tag-only1217 = and i64 %53, 7
  %54 = icmp eq i64 %single-float-tag-only1217, 6
  br i1 %54, label %tag661, label %tag766

tag104:                                           ; preds = %header-check-br4849, %header-check-br4849, %header-check-br4849, %header-check-br4849
  %55 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %56 = invoke {}* @cc_safe_fdefinition({}* %55)
          to label %normal-dest1258 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag105:                                           ; preds = %tag707
  %57 = ptrtoint {}* %.in5748 to i64
  %single-float-tag-only1273 = and i64 %57, 7
  %58 = icmp eq i64 %single-float-tag-only1273, 6
  br i1 %58, label %tag877, label %tag870

tag110:                                           ; preds = %tag446.tag110_crit_edge, %header-check-br1134, %header-check-br3500, %tag211, %tag626, %tag587, %tag757
  %.val6306 = phi {}* [ %.val6306.pre, %tag446.tag110_crit_edge ], [ %.val6304, %tag757 ], [ %.val6304, %tag587 ], [ %.val6304, %tag626 ], [ %.val6304, %tag211 ], [ %.val6304, %header-check-br3500 ], [ %.val6304, %header-check-br1134 ]
  %.val63076724 = phi {}* [ %.val6307, %tag446.tag110_crit_edge ], [ %.val63056730, %tag757 ], [ %.val63056730, %tag587 ], [ %.val63056730, %tag626 ], [ %.val63056730, %tag211 ], [ %.val63056730, %header-check-br3500 ], [ %.val63056730, %header-check-br1134 ]
  %59 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %60 = icmp eq {}* %.in, %59
  %G113280.0 = select i1 %60, {}* %.val6306, {}* %.val63076724
  %61 = icmp eq {}* %G113280.0, %.val63076724
  br i1 %61, label %tag472, label %tag791

tag111:                                           ; preds = %tag661
  %62 = ptrtoint {}* %.in to i64
  %single-float-tag-only1285 = and i64 %62, 7
  %fixnum-tag-only35815565 = and i64 %62, 3
  %fixnump-test3582 = icmp ne i64 %fixnum-tag-only35815565, 0
  %test5035 = icmp eq i64 %single-float-tag-only1285, 1
  %or.cond6283 = and i1 %fixnump-test3582, %test5035
  br i1 %or.cond6283, label %header-check-br5032, label %tag379

tag119:                                           ; preds = %tag763
  %63 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %381, i64 4)
  %result1311 = extractvalue { i64, i1 } %63, 0
  %overflow1312 = extractvalue { i64, i1 } %63, 1
  %64 = inttoptr i64 %result1311 to {}*
  br i1 %overflow1312, label %tag388, label %tag67

tag126:                                           ; preds = %tag86
  %65 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest1337 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag135:                                           ; preds = %tag542
  %67 = icmp eq {}* %"%SUBLIST112372.06602", %272
  br i1 %67, label %tag135.tag338_crit_edge, label %tag543

tag135.tag338_crit_edge:                          ; preds = %tag135
  %.val6318.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag338

tag139:                                           ; preds = %tag325
  %68 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %69 = invoke {}* @cc_safe_fdefinition({}* %68)
          to label %normal-dest1395 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag141:                                           ; preds = %tag202
  %70 = ptrtoint {}* %SYSTEM.16606 to i64
  %fixnum-tag-only13205429 = and i64 %70, 3
  %fixnump-test1321 = icmp eq i64 %fixnum-tag-only13205429, 0
  br i1 %fixnump-test1321, label %tag8, label %tag78

tag149:                                           ; preds = %tag641.tag149_crit_edge, %header-check-br3585, %header-check-br2977, %tag150, %tag692, %tag317, %tag423
  %.val6324 = phi {}* [ %.val6324.pre, %tag641.tag149_crit_edge ], [ %.val6322, %tag423 ], [ %.val6322, %tag317 ], [ %.val6322, %tag692 ], [ %.val6322, %tag150 ], [ %.val6322, %header-check-br2977 ], [ %.val6322, %header-check-br3585 ]
  %.val63256728 = phi {}* [ %.val6325, %tag641.tag149_crit_edge ], [ %.val63236716, %tag423 ], [ %.val63236716, %tag317 ], [ %.val63236716, %tag692 ], [ %.val63236716, %tag150 ], [ %.val63236716, %header-check-br2977 ], [ %.val63236716, %header-check-br3585 ]
  %71 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %72 = icmp eq {}* %.in5757, %71
  %G112901.0 = select i1 %72, {}* %.val6324, {}* %.val63256728
  %73 = icmp eq {}* %G112901.0, %.val63256728
  br i1 %73, label %tag263, label %tag861

tag150:                                           ; preds = %tag395
  %74 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only1432 = and i64 %74, 7
  %75 = icmp eq i64 %single-float-tag-only1432, 6
  br i1 %75, label %tag149, label %tag692

tag155:                                           ; preds = %tag503
  %76 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest1451 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag157:                                           ; preds = %header-check-br1134, %header-check-br1134, %header-check-br1134, %header-check-br1134
  %78 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %79 = invoke {}* @cc_safe_fdefinition({}* %78)
          to label %normal-dest1467 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag158:                                           ; preds = %header-check-br912, %header-check-br912, %header-check-br912, %header-check-br912
  %80 = ptrtoint {}* %906 to i64
  %single-float-tag-only1483 = and i64 %80, 7
  %fixnum-tag-only27855739 = and i64 %80, 3
  %fixnump-test2786 = icmp ne i64 %fixnum-tag-only27855739, 0
  %test3517 = icmp eq i64 %single-float-tag-only1483, 1
  %or.cond6263 = and i1 %fixnump-test2786, %test3517
  br i1 %or.cond6263, label %header-check-br3514, label %tag877

tag174:                                           ; preds = %tag476
  %81 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only1543 = and i64 %81, 7
  %82 = icmp eq i64 %single-float-tag-only1543, 6
  br i1 %82, label %tag787, label %tag823

tag179:                                           ; preds = %tag528
  %83 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %84 = invoke {}* @cc_safe_fdefinition({}* %83)
          to label %normal-dest1554 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag183:                                           ; preds = %tag732
  %85 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest1569 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag192:                                           ; preds = %tag321
  %87 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %88 = invoke {}* @cc_safe_fdefinition({}* %87)
          to label %normal-dest1622 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag193:                                           ; preds = %tag321
  %89 = add i64 %158, -3
  %90 = inttoptr i64 %89 to {}**
  %91 = load {}*, {}** %90, align 8
  br label %tag368

tag194:                                           ; preds = %tag528
  %92 = add i64 %265, -3
  %93 = inttoptr i64 %92 to {}**
  %94 = load {}*, {}** %93, align 8
  br label %tag460

tag195:                                           ; preds = %tag787, %normal-dest2486
  %.val6335 = phi {}* [ %782, %normal-dest2486 ], [ %.val63336725, %tag787 ]
  %G112732.0 = phi {}* [ %G112732.1, %normal-dest2486 ], [ %.val6332, %tag787 ]
  %95 = icmp eq {}* %G112732.0, %.val6335
  br i1 %95, label %tag195.tag707_crit_edge, label %tag732

tag195.tag707_crit_edge:                          ; preds = %tag195
  %.val6334.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag707

tag199:                                           ; preds = %tag635
  %96 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %97 = invoke {}* @cc_safe_fdefinition({}* %96)
          to label %normal-dest1653 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag201:                                           ; preds = %tag202.tag201_crit_edge, %header-check-br4759, %header-check-br3669, %tag530, %tag724, %tag261
  %.val6298 = phi {}* [ %.val6298.pre, %tag202.tag201_crit_edge ], [ %.val6296, %tag261 ], [ %.val6296, %tag724 ], [ %.val6296, %tag530 ], [ %.val6296, %header-check-br3669 ], [ %.val6296, %header-check-br4759 ]
  %.val62996720 = phi {}* [ %.val6299, %tag202.tag201_crit_edge ], [ %.val62976723, %tag261 ], [ %.val62976723, %tag724 ], [ %.val62976723, %tag530 ], [ %.val62976723, %header-check-br3669 ], [ %.val62976723, %header-check-br4759 ]
  %98 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1251), align 8
  %99 = icmp eq {}* %.in, %98
  %G113440.0 = select i1 %99, {}* %.val6298, {}* %.val62996720
  %100 = icmp eq {}* %G113440.0, %.val62996720
  br i1 %100, label %tag600, label %tag216

tag202:                                           ; preds = %tag410, %normal-dest4521
  %.val6299 = phi {}* [ %1007, %normal-dest4521 ], [ %.val62976723, %tag410 ]
  %G113471.0 = phi {}* [ %G113471.1, %normal-dest4521 ], [ %.val6296, %tag410 ]
  %101 = icmp eq {}* %G113471.0, %.val6299
  br i1 %101, label %tag202.tag201_crit_edge, label %tag141

tag202.tag201_crit_edge:                          ; preds = %tag202
  %.val6298.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag201

tag211:                                           ; preds = %header-check-br3500, %header-check-br3500, %header-check-br3500, %header-check-br3500
  %102 = ptrtoint {}* %150 to i64
  %single-float-tag-only1684 = and i64 %102, 7
  %103 = icmp eq i64 %single-float-tag-only1684, 6
  br i1 %103, label %tag110, label %tag626

tag216:                                           ; preds = %tag201, %normal-dest2684
  %.val6301 = phi {}* [ %812, %normal-dest2684 ], [ %.val62996720, %tag201 ]
  %G113431.0 = phi {}* [ %G113431.1, %normal-dest2684 ], [ %.val6298, %tag201 ]
  %104 = icmp eq {}* %G113431.0, %.val6301
  br i1 %104, label %tag216.tag661_crit_edge, label %tag473

tag216.tag661_crit_edge:                          ; preds = %tag216
  %.val6300.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag661

tag221:                                           ; preds = %tag533
  %105 = ptrtoint {}* %S_HEILMITTEL.16617 to i64
  %fixnum-tag-only16985690 = and i64 %105, 3
  %fixnump-test1699 = icmp eq i64 %fixnum-tag-only16985690, 0
  br i1 %fixnump-test1699, label %tag868, label %tag706

tag223:                                           ; preds = %tag818
  br i1 %161, label %tag33, label %tag555

tag225:                                           ; preds = %tag55, %tag437.backedge, %normal-dest889
  %SYSTEM.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %SYSTEM.1.lcssa, %tag437.backedge ], [ %SYSTEM.1.lcssa, %tag55 ]
  %PROPAGIERT.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %PROPAGIERT.1.lcssa, %tag437.backedge ], [ %PROPAGIERT.1.lcssa, %tag55 ]
  %HEILMITTEL.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %HEILMITTEL.1.lcssa, %tag437.backedge ], [ %HEILMITTEL.1.lcssa, %tag55 ]
  %VORSCHLAG.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %VORSCHLAG.1.lcssa, %tag437.backedge ], [ %VORSCHLAG.1.lcssa, %tag55 ]
  %EINGABE.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %EINGABE.1.lcssa, %tag437.backedge ], [ %EINGABE.1.lcssa, %tag55 ]
  %ERERBT.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %ERERBT.1.lcssa, %tag437.backedge ], [ %ERERBT.1.lcssa, %tag55 ]
  %INVERS.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %INVERS.1.lcssa, %tag437.backedge ], [ %INVERS.1.lcssa, %tag55 ]
  %PROGRAMM.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %PROGRAMM.1.lcssa, %tag437.backedge ], [ %PROGRAMM.1.lcssa, %tag55 ]
  %NICHTS.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %NICHTS.1.lcssa, %tag437.backedge ], [ %NICHTS.1.lcssa, %tag55 ]
  %S_SYSTEM.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_SYSTEM.1.lcssa, %tag437.backedge ], [ %S_SYSTEM.1.lcssa, %tag55 ]
  %S_PROPAGIERT.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_PROPAGIERT.1.lcssa, %tag437.backedge ], [ %S_PROPAGIERT.1.lcssa, %tag55 ]
  %S_HEILMITTEL.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_HEILMITTEL.1.lcssa, %tag437.backedge ], [ %S_HEILMITTEL.1.lcssa, %tag55 ]
  %S_VORSCHLAG.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_VORSCHLAG.1.lcssa, %tag437.backedge ], [ %S_VORSCHLAG.1.lcssa, %tag55 ]
  %S_EINGABE.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_EINGABE.1.lcssa, %tag437.backedge ], [ %S_EINGABE.1.lcssa, %tag55 ]
  %S_ERERBT.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_ERERBT.1.lcssa, %tag437.backedge ], [ %S_ERERBT.1.lcssa, %tag55 ]
  %S_INVERS.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_INVERS.1.lcssa, %tag437.backedge ], [ %S_INVERS.1.lcssa, %tag55 ]
  %S_NICHTS.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_NICHTS.1.lcssa, %tag437.backedge ], [ %S_NICHTS.1.lcssa, %tag55 ]
  %S_PROGRAMM.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %S_PROGRAMM.1.lcssa, %tag437.backedge ], [ %S_PROGRAMM.1.lcssa, %tag55 ]
  %DYNAMISCH.2.lcssa = phi {}* [ null, %normal-dest889 ], [ %DYNAMISCH.1.lcssa, %tag437.backedge ], [ %DYNAMISCH.1.lcssa, %tag55 ]
  %STATISCH.3.lcssa = phi {}* [ null, %normal-dest889 ], [ %STATISCH.2.lcssa, %tag437.backedge ], [ %STATISCH.2.lcssa, %tag55 ]
  %GESAMT.1.lcssa = phi {}* [ null, %normal-dest889 ], [ %GESAMT.0.lcssa, %tag437.backedge ], [ %GESAMT.0.lcssa, %tag55 ]
  %OBJEKTE.0.lcssa = phi {}* [ null, %normal-dest889 ], [ %OBJEKTE.1, %tag437.backedge ], [ %OBJEKTE.1, %tag55 ]
  %106 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %107 = invoke {}* @cc_safe_fdefinition({}* %106)
          to label %normal-dest1715 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag229:                                           ; preds = %normal-dest3710
  %108 = ptrtoint {}* %.in5738 to i64
  %single-float-tag-only2452 = and i64 %108, 7
  %109 = icmp eq i64 %single-float-tag-only2452, 6
  br i1 %109, label %tag877, label %tag359

tag230:                                           ; preds = %tag635
  %110 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %323, i64 4)
  %result2453 = extractvalue { i64, i1 } %110, 0
  %overflow2454 = extractvalue { i64, i1 } %110, 1
  %111 = inttoptr i64 %result2453 to {}*
  br i1 %overflow2454, label %tag357, label %tag67

tag232:                                           ; preds = %tag461
  %112 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %236, i64 4)
  %result2460 = extractvalue { i64, i1 } %112, 0
  %overflow2461 = extractvalue { i64, i1 } %112, 1
  %113 = inttoptr i64 %result2460 to {}*
  br i1 %overflow2461, label %tag643, label %tag67

tag236:                                           ; preds = %header-check-br4582, %header-check-br4582, %header-check-br4582, %header-check-br4582
  %114 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %115 = invoke {}* @cc_safe_fdefinition({}* %114)
          to label %normal-dest2477 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag245:                                           ; preds = %tag836
  %116 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %117 = invoke {}* @cc_safe_fdefinition({}* %116)
          to label %normal-dest2523 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag250:                                           ; preds = %tag460
  %118 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %235, i64 4)
  %result2547 = extractvalue { i64, i1 } %118, 0
  %overflow2548 = extractvalue { i64, i1 } %118, 1
  %119 = inttoptr i64 %result2547 to {}*
  br i1 %overflow2548, label %tag281, label %tag658

tag251:                                           ; preds = %header-check-br3048, %header-check-br3048, %header-check-br3048, %header-check-br3048
  %120 = ptrtoint {}* %176 to i64
  %single-float-tag-only2550 = and i64 %120, 7
  %121 = icmp eq i64 %single-float-tag-only2550, 6
  br i1 %121, label %tag268, label %tag341

tag253:                                           ; preds = %header-check-br3286, %header-check-br3286, %header-check-br3286, %header-check-br3286
  %122 = ptrtoint {}* %246 to i64
  %single-float-tag-only2552 = and i64 %122, 7
  %fixnum-tag-only41005766 = and i64 %122, 3
  %fixnump-test4101 = icmp ne i64 %fixnum-tag-only41005766, 0
  %test4416 = icmp eq i64 %single-float-tag-only2552, 1
  %or.cond6276 = and i1 %fixnump-test4101, %test4416
  br i1 %or.cond6276, label %header-check-br4413, label %tag787

tag259:                                           ; preds = %tag728
  %123 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %367, i64 4)
  %result2563 = extractvalue { i64, i1 } %123, 0
  %overflow2564 = extractvalue { i64, i1 } %123, 1
  %124 = inttoptr i64 %result2563 to {}*
  br i1 %overflow2564, label %tag777, label %tag20

tag261:                                           ; preds = %tag410
  %125 = ptrtoint {}* %.in to i64
  %single-float-tag-only2568 = and i64 %125, 7
  %fixnum-tag-only31595581 = and i64 %125, 3
  %fixnump-test3160 = icmp ne i64 %fixnum-tag-only31595581, 0
  %test4762 = icmp eq i64 %single-float-tag-only2568, 1
  %or.cond6281 = and i1 %fixnump-test3160, %test4762
  br i1 %or.cond6281, label %header-check-br4759, label %tag201

tag262:                                           ; preds = %tag512
  %126 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %127 = invoke {}* @cc_safe_fdefinition({}* %126)
          to label %normal-dest2570 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag263:                                           ; preds = %tag149
  %128 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only2583 = and i64 %128, 7
  %129 = icmp eq i64 %single-float-tag-only2583, 6
  br i1 %129, label %tag462, label %tag708

tag268:                                           ; preds = %tag642.tag268_crit_edge, %header-check-br3048, %header-check-br1127, %tag251, %tag341, %tag12, %tag417
  %.val6310 = phi {}* [ %.val6310.pre, %tag642.tag268_crit_edge ], [ %.val6308, %tag417 ], [ %.val6308, %tag12 ], [ %.val6308, %tag341 ], [ %.val6308, %tag251 ], [ %.val6308, %header-check-br1127 ], [ %.val6308, %header-check-br3048 ]
  %.val63116729 = phi {}* [ %.val6311, %tag642.tag268_crit_edge ], [ %.val63096731, %tag417 ], [ %.val63096731, %tag12 ], [ %.val63096731, %tag341 ], [ %.val63096731, %tag251 ], [ %.val63096731, %header-check-br1127 ], [ %.val63096731, %header-check-br3048 ]
  %130 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 532), align 16
  %131 = icmp eq {}* %.in, %130
  %G113200.0 = select i1 %131, {}* %.val6310, {}* %.val63116729
  %132 = icmp eq {}* %G113200.0, %.val63116729
  br i1 %132, label %tag327, label %tag283

tag272:                                           ; preds = %tag369
  %133 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %134 = invoke {}* @cc_safe_fdefinition({}* %133)
          to label %normal-dest2610 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag276:                                           ; preds = %tag871
  %135 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %428, i64 4)
  %result2630 = extractvalue { i64, i1 } %135, 0
  %overflow2631 = extractvalue { i64, i1 } %135, 1
  %136 = inttoptr i64 %result2630 to {}*
  br i1 %overflow2631, label %tag703, label %tag67

tag279:                                           ; preds = %tag633
  %137 = add i64 %265, 5
  %138 = inttoptr i64 %137 to {}**
  %139 = load {}*, {}** %138, align 8
  br label %tag437.backedge

tag437.backedge:                                  ; preds = %tag279, %normal-dest3169
  %140 = phi {}* [ %.val6339, %tag279 ], [ %848, %normal-dest3169 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %139, %tag279 ], [ %"%DOLIST-VAR.2", %normal-dest3169 ]
  %141 = icmp eq {}* %"%DOLIST-VAR.0.be", %140
  br i1 %141, label %tag225, label %tag528

tag281:                                           ; preds = %tag250
  %142 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %143 = invoke {}* @cc_safe_fdefinition({}* %142)
          to label %normal-dest2649 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag283:                                           ; preds = %tag268, %normal-dest2802
  %144 = phi {}* [ %814, %normal-dest2802 ], [ %.val63116729, %tag268 ]
  %G113191.0 = phi {}* [ %G113191.1, %normal-dest2802 ], [ %.val6310, %tag268 ]
  %145 = icmp eq {}* %G113191.0, %144
  br i1 %145, label %tag769, label %tag381

tag288:                                           ; preds = %header-check-br3371, %header-check-br3371, %header-check-br3371, %header-check-br3371
  %146 = ptrtoint {}* %180 to i64
  %single-float-tag-only2667 = and i64 %146, 7
  %147 = icmp eq i64 %single-float-tag-only2667, 6
  br i1 %147, label %tag570, label %tag513

tag293:                                           ; preds = %header-check-br1605, %header-check-br1605, %header-check-br1605, %header-check-br1605
  %148 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %149 = invoke {}* @cc_safe_fdefinition({}* %148)
          to label %normal-dest2677 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag307:                                           ; preds = %tag668.tag307_crit_edge, %header-check-br1386, %header-check-br4194, %tag839, %tag13
  %.val6304 = phi {}* [ %.val6304.pre, %tag668.tag307_crit_edge ], [ %.val6302, %tag13 ], [ %.val6302, %tag839 ], [ %.val6302, %header-check-br4194 ], [ %.val6302, %header-check-br1386 ]
  %.val63056730 = phi {}* [ %.val6305, %tag668.tag307_crit_edge ], [ %.val63036717, %tag13 ], [ %.val63036717, %tag839 ], [ %.val63036717, %header-check-br4194 ], [ %.val63036717, %header-check-br1386 ]
  %150 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 530), align 16
  %151 = icmp eq {}* %.in, %150
  %G113320.0 = select i1 %151, {}* %.val6304, {}* %.val63056730
  %152 = icmp eq {}* %G113320.0, %.val63056730
  br i1 %152, label %tag587, label %tag446

tag309:                                           ; preds = %header-check-br2553, %header-check-br2553, %header-check-br2553, %header-check-br2553
  %153 = ptrtoint {}* %417 to i64
  %single-float-tag-only2735 = and i64 %153, 7
  %fixnum-tag-only9105774 = and i64 %153, 3
  %fixnump-test911 = icmp ne i64 %fixnum-tag-only9105774, 0
  %test3296 = icmp eq i64 %single-float-tag-only2735, 1
  %or.cond6259 = and i1 %fixnump-test911, %test3296
  br i1 %or.cond6259, label %header-check-br3293, label %tag476

tag310:                                           ; preds = %header-check-br1302, %header-check-br1302, %header-check-br1302, %header-check-br1302
  %154 = ptrtoint {}* %71 to i64
  %single-float-tag-only2736 = and i64 %154, 7
  %fixnum-tag-only10855790 = and i64 %154, 3
  %fixnump-test1086 = icmp ne i64 %fixnum-tag-only10855790, 0
  %test2671 = icmp eq i64 %single-float-tag-only2736, 1
  %or.cond6253 = and i1 %fixnump-test1086, %test2671
  br i1 %or.cond6253, label %header-check-br2668, label %tag462

tag314:                                           ; preds = %tag641
  %155 = ptrtoint {}* %S_INVERS.16621 to i64
  %fixnum-tag-only12335654 = and i64 %155, 3
  %fixnump-test1234 = icmp eq i64 %fixnum-tag-only12335654, 0
  br i1 %fixnump-test1234, label %tag360, label %tag452

tag317:                                           ; preds = %header-check-br3585, %header-check-br3585, %header-check-br3585, %header-check-br3585
  %156 = ptrtoint {}* %207 to i64
  %single-float-tag-only2758 = and i64 %156, 7
  %157 = icmp eq i64 %single-float-tag-only2758, 6
  br i1 %157, label %tag149, label %tag423

tag321:                                           ; preds = %tag321.preheader, %tag116.backedge
  %.val6287 = phi {}* [ %38, %tag116.backedge ], [ %950, %tag321.preheader ]
  %GESAMT.06626 = phi {}* [ %GESAMT.2, %tag116.backedge ], [ %GESAMT.16670, %tag321.preheader ]
  %STATISCH.26625 = phi {}* [ %STATISCH.1, %tag116.backedge ], [ %STATISCH.36669, %tag321.preheader ]
  %DYNAMISCH.16624 = phi {}* [ %DYNAMISCH.0, %tag116.backedge ], [ %DYNAMISCH.26668, %tag321.preheader ]
  %S_PROGRAMM.16623 = phi {}* [ %S_PROGRAMM.0, %tag116.backedge ], [ %S_PROGRAMM.26667, %tag321.preheader ]
  %S_NICHTS.16622 = phi {}* [ %S_NICHTS.0, %tag116.backedge ], [ %S_NICHTS.26666, %tag321.preheader ]
  %S_INVERS.16621 = phi {}* [ %S_INVERS.0, %tag116.backedge ], [ %S_INVERS.26665, %tag321.preheader ]
  %S_ERERBT.16620 = phi {}* [ %S_ERERBT.0, %tag116.backedge ], [ %S_ERERBT.26664, %tag321.preheader ]
  %S_EINGABE.16619 = phi {}* [ %S_EINGABE.0, %tag116.backedge ], [ %S_EINGABE.26663, %tag321.preheader ]
  %S_VORSCHLAG.16618 = phi {}* [ %S_VORSCHLAG.0, %tag116.backedge ], [ %S_VORSCHLAG.26662, %tag321.preheader ]
  %S_HEILMITTEL.16617 = phi {}* [ %S_HEILMITTEL.0, %tag116.backedge ], [ %S_HEILMITTEL.26661, %tag321.preheader ]
  %S_PROPAGIERT.16616 = phi {}* [ %S_PROPAGIERT.0, %tag116.backedge ], [ %S_PROPAGIERT.26660, %tag321.preheader ]
  %S_SYSTEM.16615 = phi {}* [ %S_SYSTEM.0, %tag116.backedge ], [ %S_SYSTEM.26659, %tag321.preheader ]
  %NICHTS.16614 = phi {}* [ %NICHTS.0, %tag116.backedge ], [ %NICHTS.26658, %tag321.preheader ]
  %PROGRAMM.16613 = phi {}* [ %PROGRAMM.0, %tag116.backedge ], [ %PROGRAMM.26657, %tag321.preheader ]
  %INVERS.16612 = phi {}* [ %INVERS.0, %tag116.backedge ], [ %INVERS.26656, %tag321.preheader ]
  %ERERBT.16611 = phi {}* [ %ERERBT.0, %tag116.backedge ], [ %ERERBT.26655, %tag321.preheader ]
  %EINGABE.16610 = phi {}* [ %EINGABE.0, %tag116.backedge ], [ %EINGABE.26654, %tag321.preheader ]
  %VORSCHLAG.16609 = phi {}* [ %VORSCHLAG.0, %tag116.backedge ], [ %VORSCHLAG.26653, %tag321.preheader ]
  %HEILMITTEL.16608 = phi {}* [ %HEILMITTEL.0, %tag116.backedge ], [ %HEILMITTEL.26652, %tag321.preheader ]
  %PROPAGIERT.16607 = phi {}* [ %PROPAGIERT.0, %tag116.backedge ], [ %PROPAGIERT.26651, %tag321.preheader ]
  %SYSTEM.16606 = phi {}* [ %SYSTEM.0, %tag116.backedge ], [ %SYSTEM.26650, %tag321.preheader ]
  %"%DOLIST-VAR1028.06605" = phi {}* [ %"%DOLIST-VAR1028.0.be", %tag116.backedge ], [ %"%DOLIST-VAR1028.1", %tag321.preheader ]
  %158 = ptrtoint {}* %"%DOLIST-VAR1028.06605" to i64
  %tag-only27815386 = and i64 %158, 7
  %consp-test2782 = icmp eq i64 %tag-only27815386, 3
  %.val6286 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G113653.0 = select i1 %consp-test2782, {}* %.val6286, {}* %.val6287
  %159 = icmp eq {}* %G113653.0, %.val6287
  br i1 %159, label %tag192, label %tag193

tag322:                                           ; preds = %header-check-br2499, %header-check-br2499, %header-check-br2499, %header-check-br2499
  %160 = ptrtoint {}* %.in5830 to i64
  %single-float-tag-only2784 = and i64 %160, 7
  %fixnum-tag-only8955827 = and i64 %160, 3
  %fixnump-test896 = icmp ne i64 %fixnum-tag-only8955827, 0
  %test3952 = icmp eq i64 %single-float-tag-only2784, 1
  %or.cond6269 = and i1 %fixnump-test896, %test3952
  br i1 %or.cond6269, label %header-check-br3949, label %tag332

tag325:                                           ; preds = %tag325.lr.ph, %tag332
  %G113109.0 = phi {}* [ %.val63126599, %tag325.lr.ph ], [ %.val6312, %tag332 ]
  %161 = phi i1 [ %452, %tag325.lr.ph ], [ %174, %tag332 ]
  %162 = phi {}* [ %449, %tag325.lr.ph ], [ %170, %tag332 ]
  %"%SUBLIST112372.06602" = phi {}* [ %"%SUBLIST112372.06598", %tag325.lr.ph ], [ %"%SUBLIST112372.0", %tag332 ]
  %163 = ptrtoint {}* %"%SUBLIST112372.06602" to i64
  %tag-only27875621 = and i64 %163, 7
  %consp-test2788 = icmp eq i64 %tag-only27875621, 3
  br i1 %consp-test2788, label %tag818, label %tag139

tag327:                                           ; preds = %tag268
  %164 = ptrtoint {}* %.in to i64
  %single-float-tag-only2790 = and i64 %164, 7
  %165 = icmp eq i64 %single-float-tag-only2790, 6
  br i1 %165, label %tag769, label %tag849

tag330:                                           ; preds = %header-check-br4499, %header-check-br4499, %header-check-br4499, %header-check-br4499
  %166 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %167 = invoke {}* @cc_safe_fdefinition({}* %166)
          to label %normal-dest2795 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag331:                                           ; preds = %tag596
  %168 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %169 = invoke {}* @cc_safe_fdefinition({}* %168)
          to label %normal-dest2809 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag332:                                           ; preds = %tag542.tag332_crit_edge, %header-check-br2499, %header-check-br3949, %tag841, %tag322
  %.val6312 = phi {}* [ %.val6312.pre, %tag542.tag332_crit_edge ], [ %282, %tag322 ], [ %282, %tag841 ], [ %282, %header-check-br3949 ], [ %282, %header-check-br2499 ]
  %170 = phi {}* [ %272, %tag542.tag332_crit_edge ], [ %.val6317, %tag322 ], [ %.val6317, %tag841 ], [ %.val6317, %header-check-br3949 ], [ %.val6317, %header-check-br2499 ]
  %171 = add i64 %163, 5
  %172 = inttoptr i64 %171 to {}**
  %"%SUBLIST112372.0" = load {}*, {}** %172, align 8
  %173 = icmp eq {}* %"%SUBLIST112372.0", %170
  %object3439.0 = select i1 %173, {}* %.val6312, {}* %170
  %174 = icmp eq {}* %object3439.0, %170
  %G113055.0 = select i1 %174, {}* %.val6312, {}* %170
  %175 = icmp eq {}* %G113055.0, %170
  br i1 %175, label %tag338, label %tag325

tag334:                                           ; preds = %tag791.tag334_crit_edge, %header-check-br1443, %header-check-br4422, %tag370, %tag547, %tag472
  %.val6308 = phi {}* [ %.val6308.pre, %tag791.tag334_crit_edge ], [ %.val6306, %tag472 ], [ %.val6306, %tag547 ], [ %.val6306, %tag370 ], [ %.val6306, %header-check-br4422 ], [ %.val6306, %header-check-br1443 ]
  %.val63096731 = phi {}* [ %.val6309, %tag791.tag334_crit_edge ], [ %.val63076724, %tag472 ], [ %.val63076724, %tag547 ], [ %.val63076724, %tag370 ], [ %.val63076724, %header-check-br4422 ], [ %.val63076724, %header-check-br1443 ]
  %176 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %177 = icmp eq {}* %.in, %176
  %G113240.0 = select i1 %177, {}* %.val6308, {}* %.val63096731
  %178 = icmp eq {}* %G113240.0, %.val63096731
  br i1 %178, label %tag12, label %tag642

tag335:                                           ; preds = %tag570
  %179 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only2830 = and i64 %179, 7
  %fixnum-tag-only26325804 = and i64 %179, 3
  %fixnump-test2633 = icmp ne i64 %fixnum-tag-only26325804, 0
  %test5069 = icmp eq i64 %single-float-tag-only2830, 1
  %or.cond6284 = and i1 %fixnump-test2633, %test5069
  br i1 %or.cond6284, label %header-check-br5066, label %tag395

tag338:                                           ; preds = %tag332, %tag135.tag338_crit_edge, %normal-dest949
  %.val6318 = phi {}* [ %.val6318.pre, %tag135.tag338_crit_edge ], [ %.val63126599, %normal-dest949 ], [ %.val6312, %tag332 ]
  %.val63196718 = phi {}* [ %"%SUBLIST112372.06602", %tag135.tag338_crit_edge ], [ %449, %normal-dest949 ], [ %170, %tag332 ]
  %180 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1249), align 8
  %181 = icmp eq {}* %.in5757, %180
  %G113021.0 = select i1 %181, {}* %.val6318, {}* %.val63196718
  %182 = icmp eq {}* %G113021.0, %.val63196718
  br i1 %182, label %tag681, label %tag353

tag341:                                           ; preds = %tag251
  %fixnum-tag-only28445535 = and i64 %120, 3
  %fixnump-test2845 = icmp ne i64 %fixnum-tag-only28445535, 0
  %test1130 = icmp eq i64 %single-float-tag-only2550, 1
  %or.cond6233 = and i1 %fixnump-test2845, %test1130
  br i1 %or.cond6233, label %header-check-br1127, label %tag268

tag353:                                           ; preds = %tag338, %normal-dest1097
  %.val6321 = phi {}* [ %469, %normal-dest1097 ], [ %.val63196718, %tag338 ]
  %G113012.0 = phi {}* [ %G113012.1, %normal-dest1097 ], [ %.val6318, %tag338 ]
  %183 = icmp eq {}* %G113012.0, %.val6321
  br i1 %183, label %tag353.tag570_crit_edge, label %tag871

tag353.tag570_crit_edge:                          ; preds = %tag353
  %.val6320.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag570

tag357:                                           ; preds = %tag230
  %184 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %185 = invoke {}* @cc_safe_fdefinition({}* %184)
          to label %normal-dest2880 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag359:                                           ; preds = %tag229
  %fixnum-tag-only28935736 = and i64 %108, 3
  %fixnump-test2894 = icmp ne i64 %fixnum-tag-only28935736, 0
  %test915 = icmp eq i64 %single-float-tag-only2452, 1
  %or.cond6229 = and i1 %fixnump-test2894, %test915
  br i1 %or.cond6229, label %header-check-br912, label %tag877

tag360:                                           ; preds = %tag314
  %186 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %155, i64 4)
  %result2896 = extractvalue { i64, i1 } %186, 0
  %overflow2897 = extractvalue { i64, i1 } %186, 1
  %187 = inttoptr i64 %result2896 to {}*
  br i1 %overflow2897, label %tag695, label %tag67

tag365:                                           ; preds = %tag365.lr.ph, %tag585
  %G113568.0 = phi {}* [ %.val62886594, %tag365.lr.ph ], [ %.val6288, %tag585 ]
  %188 = phi i1 [ %1080, %tag365.lr.ph ], [ %302, %tag585 ]
  %189 = phi {}* [ %1076, %tag365.lr.ph ], [ %297, %tag585 ]
  %190 = phi {}* [ %1078, %tag365.lr.ph ], [ %300, %tag585 ]
  %191 = ptrtoint {}* %190 to i64
  %tag-only29065409 = and i64 %191, 7
  %consp-test2907 = icmp eq i64 %tag-only29065409, 3
  br i1 %consp-test2907, label %tag541, label %tag40

tag368:                                           ; preds = %normal-dest1629, %tag193
  %.in5748 = phi {}* [ %91, %tag193 ], [ %.in5747, %normal-dest1629 ]
  %192 = bitcast {}* %.in5748 to i8*
  %193 = ptrtoint {}* %GESAMT.06626 to i64
  %fixnum-tag-only35115387 = and i64 %193, 3
  %fixnump-test3512 = icmp eq i64 %fixnum-tag-only35115387, 0
  br i1 %fixnump-test3512, label %tag836, label %tag451

tag369:                                           ; preds = %tag473
  %194 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %245, i64 4)
  %result2921 = extractvalue { i64, i1 } %194, 0
  %overflow2922 = extractvalue { i64, i1 } %194, 1
  %195 = inttoptr i64 %result2921 to {}*
  br i1 %overflow2922, label %tag272, label %tag67

tag370:                                           ; preds = %tag547
  %fixnum-tag-only29235543 = and i64 %276, 3
  %fixnump-test2924 = icmp ne i64 %fixnum-tag-only29235543, 0
  %test1446 = icmp eq i64 %single-float-tag-only3654, 1
  %or.cond6239 = and i1 %fixnump-test2924, %test1446
  br i1 %or.cond6239, label %header-check-br1443, label %tag334

tag375:                                           ; preds = %header-check-br2977, %header-check-br2977, %header-check-br2977, %header-check-br2977
  %196 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %197 = invoke {}* @cc_safe_fdefinition({}* %196)
          to label %normal-dest2934 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag379:                                           ; preds = %tag22.tag379_crit_edge, %header-check-br1295, %header-check-br5032, %tag111, %tag553, %tag811
  %.val6302 = phi {}* [ %.val6302.pre, %tag22.tag379_crit_edge ], [ %.val6300, %tag811 ], [ %.val6300, %tag553 ], [ %.val6300, %tag111 ], [ %.val6300, %header-check-br5032 ], [ %.val6300, %header-check-br1295 ]
  %.val63036717 = phi {}* [ %.val6303, %tag22.tag379_crit_edge ], [ %.val63016721, %tag811 ], [ %.val63016721, %tag553 ], [ %.val63016721, %tag111 ], [ %.val63016721, %header-check-br5032 ], [ %.val63016721, %header-check-br1295 ]
  %198 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %199 = icmp eq {}* %.in, %198
  %G113360.0 = select i1 %199, {}* %.val6302, {}* %.val63036717
  %200 = icmp eq {}* %G113360.0, %.val63036717
  br i1 %200, label %tag839, label %tag668

tag381:                                           ; preds = %tag283
  %201 = ptrtoint {}* %PROPAGIERT.16607 to i64
  %fixnum-tag-only29565492 = and i64 %201, 3
  %fixnump-test2957 = icmp eq i64 %fixnum-tag-only29565492, 0
  br i1 %fixnump-test2957, label %tag517, label %tag842

tag384:                                           ; preds = %header-check-br4378, %header-check-br4378, %header-check-br4378, %header-check-br4378
  %202 = ptrtoint {}* %130 to i64
  %single-float-tag-only2966 = and i64 %202, 7
  %fixnum-tag-only25135527 = and i64 %202, 3
  %fixnump-test2514 = icmp ne i64 %fixnum-tag-only25135527, 0
  %test4502 = icmp eq i64 %single-float-tag-only2966, 1
  %or.cond6278 = and i1 %fixnump-test2514, %test4502
  br i1 %or.cond6278, label %header-check-br4499, label %tag769

tag388:                                           ; preds = %tag119
  %203 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %204 = invoke {}* @cc_safe_fdefinition({}* %203)
          to label %normal-dest2985 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag393:                                           ; preds = %header-check-br3949, %header-check-br3949, %header-check-br3949, %header-check-br3949
  %205 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %206 = invoke {}* @cc_safe_fdefinition({}* %205)
          to label %normal-dest3012 unwind label %cleanup-lpad.loopexit

tag395:                                           ; preds = %tag7.tag395_crit_edge, %header-check-br5066, %header-check-br1313, %tag335, %tag39, %tag674
  %.val6322 = phi {}* [ %.val6322.pre, %tag7.tag395_crit_edge ], [ %.val6320, %tag674 ], [ %.val6320, %tag39 ], [ %.val6320, %tag335 ], [ %.val6320, %header-check-br1313 ], [ %.val6320, %header-check-br5066 ]
  %.val63236716 = phi {}* [ %.val6323, %tag7.tag395_crit_edge ], [ %.val63216722, %tag674 ], [ %.val63216722, %tag39 ], [ %.val63216722, %tag335 ], [ %.val63216722, %header-check-br1313 ], [ %.val63216722, %header-check-br5066 ]
  %207 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %208 = icmp eq {}* %.in5757, %207
  %G112941.0 = select i1 %208, {}* %.val6322, {}* %.val63236716
  %209 = icmp eq {}* %G112941.0, %.val63236716
  br i1 %209, label %tag150, label %tag641

tag397:                                           ; preds = %tag787
  %210 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only3039 = and i64 %210, 7
  %fixnum-tag-only9055755 = and i64 %210, 3
  %fixnump-test906 = icmp ne i64 %fixnum-tag-only9055755, 0
  %test1615 = icmp eq i64 %single-float-tag-only3039, 1
  %or.cond6241 = and i1 %fixnump-test906, %test1615
  br i1 %or.cond6241, label %header-check-br1612, label %tag707

tag401:                                           ; preds = %tag541
  %211 = add i64 %191, -3
  %212 = inttoptr i64 %211 to {}**
  %213 = load {}*, {}** %212, align 8
  br label %tag748

tag407:                                           ; preds = %tag510
  %214 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %215 = invoke {}* @cc_safe_fdefinition({}* %214)
          to label %normal-dest3065 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag410:                                           ; preds = %tag585, %tag432.tag410_crit_edge, %normal-dest5026
  %.val6296 = phi {}* [ %.val6296.pre, %tag432.tag410_crit_edge ], [ %.val62886594, %normal-dest5026 ], [ %.val6288, %tag585 ]
  %.val62976723 = phi {}* [ %190, %tag432.tag410_crit_edge ], [ %1076, %normal-dest5026 ], [ %297, %tag585 ]
  %216 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1249), align 8
  %217 = icmp eq {}* %.in, %216
  %G113480.0 = select i1 %217, {}* %.val6296, {}* %.val62976723
  %218 = icmp eq {}* %G113480.0, %.val62976723
  br i1 %218, label %tag261, label %tag202

tag411:                                           ; preds = %header-check-br2462, %header-check-br2462, %header-check-br2462, %header-check-br2462
  %219 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %220 = invoke {}* @cc_safe_fdefinition({}* %219)
          to label %normal-dest3093 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag417:                                           ; preds = %tag12
  %fixnum-tag-only31225533 = and i64 %14, 3
  %fixnump-test3123 = icmp ne i64 %fixnum-tag-only31225533, 0
  %test3051 = icmp eq i64 %single-float-tag-only920, 1
  %or.cond6256 = and i1 %fixnump-test3123, %test3051
  br i1 %or.cond6256, label %header-check-br3048, label %tag268

tag419:                                           ; preds = %tag461
  %221 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %222 = invoke {}* @cc_safe_fdefinition({}* %221)
          to label %normal-dest3132 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag420:                                           ; preds = %tag648
  %223 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %224 = invoke {}* @cc_safe_fdefinition({}* %223)
          to label %normal-dest3146 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag422:                                           ; preds = %tag55
  %225 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %226 = invoke {}* @cc_safe_fdefinition({}* %225)
          to label %normal-dest3162 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag423:                                           ; preds = %tag317
  %fixnum-tag-only31755798 = and i64 %156, 3
  %fixnump-test3176 = icmp ne i64 %fixnum-tag-only31755798, 0
  %test2980 = icmp eq i64 %single-float-tag-only2758, 1
  %or.cond6255 = and i1 %fixnump-test3176, %test2980
  br i1 %or.cond6255, label %header-check-br2977, label %tag149

tag428:                                           ; preds = %tag517
  %227 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %228 = invoke {}* @cc_safe_fdefinition({}* %227)
          to label %normal-dest3194 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag432:                                           ; preds = %tag645
  %229 = icmp eq {}* %190, %330
  br i1 %229, label %tag432.tag410_crit_edge, label %tag865

tag432.tag410_crit_edge:                          ; preds = %tag432
  %.val6296.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag410

tag446:                                           ; preds = %tag307, %normal-dest1476
  %.val6307 = phi {}* [ %519, %normal-dest1476 ], [ %.val63056730, %tag307 ]
  %G113311.0 = phi {}* [ %G113311.1, %normal-dest1476 ], [ %.val6304, %tag307 ]
  %230 = icmp eq {}* %G113311.0, %.val6307
  br i1 %230, label %tag446.tag110_crit_edge, label %tag648

tag446.tag110_crit_edge:                          ; preds = %tag446
  %.val6306.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag110

tag451:                                           ; preds = %tag368
  %231 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %232 = invoke {}* @cc_safe_fdefinition({}* %231)
          to label %normal-dest3303 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag452:                                           ; preds = %tag314
  %233 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %234 = invoke {}* @cc_safe_fdefinition({}* %233)
          to label %normal-dest3317 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag460:                                           ; preds = %normal-dest1562, %tag194
  %O.0 = phi {}* [ %94, %tag194 ], [ %O.1, %normal-dest1562 ]
  %235 = ptrtoint {}* %OBJEKTE.06671 to i64
  %fixnum-tag-only33365377 = and i64 %235, 3
  %fixnump-test3337 = icmp eq i64 %fixnum-tag-only33365377, 0
  br i1 %fixnump-test3337, label %tag250, label %tag583

tag461:                                           ; preds = %tag557
  %236 = ptrtoint {}* %S_VORSCHLAG.16618 to i64
  %fixnum-tag-only29155681 = and i64 %236, 3
  %fixnump-test2916 = icmp eq i64 %fixnum-tag-only29155681, 0
  br i1 %fixnump-test2916, label %tag232, label %tag419

tag462:                                           ; preds = %tag861.tag462_crit_edge, %header-check-br2668, %header-check-br1302, %tag263, %tag708, %tag310
  %.val6326 = phi {}* [ %.val6326.pre, %tag861.tag462_crit_edge ], [ %.val6324, %tag310 ], [ %.val6324, %tag708 ], [ %.val6324, %tag263 ], [ %.val6324, %header-check-br1302 ], [ %.val6324, %header-check-br2668 ]
  %.val63276732 = phi {}* [ %.val6327, %tag861.tag462_crit_edge ], [ %.val63256728, %tag310 ], [ %.val63256728, %tag708 ], [ %.val63256728, %tag263 ], [ %.val63256728, %header-check-br1302 ], [ %.val63256728, %header-check-br2668 ]
  %237 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 530), align 16
  %238 = icmp eq {}* %.in5757, %237
  %G112861.0 = select i1 %238, {}* %.val6326, {}* %.val63276732
  %239 = icmp eq {}* %G112861.0, %.val63276732
  br i1 %239, label %tag467, label %tag544

tag465:                                           ; preds = %tag550
  %240 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %241 = invoke {}* @cc_safe_fdefinition({}* %240)
          to label %normal-dest3357 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag467:                                           ; preds = %tag462
  %242 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only3370 = and i64 %242, 7
  %243 = icmp eq i64 %single-float-tag-only3370, 6
  br i1 %243, label %tag850, label %tag630

tag472:                                           ; preds = %tag110
  %244 = ptrtoint {}* %.in to i64
  %single-float-tag-only3392 = and i64 %244, 7
  %fixnum-tag-only25445541 = and i64 %244, 3
  %fixnump-test2545 = icmp ne i64 %fixnum-tag-only25445541, 0
  %test4425 = icmp eq i64 %single-float-tag-only3392, 1
  %or.cond6277 = and i1 %fixnump-test2545, %test4425
  br i1 %or.cond6277, label %header-check-br4422, label %tag334

tag473:                                           ; preds = %tag216
  %245 = ptrtoint {}* %ERERBT.16611 to i64
  %fixnum-tag-only33935438 = and i64 %245, 3
  %fixnump-test3394 = icmp eq i64 %fixnum-tag-only33935438, 0
  br i1 %fixnump-test3394, label %tag369, label %tag735

tag476:                                           ; preds = %tag557.tag476_crit_edge, %header-check-br2553, %header-check-br3293, %tag614, %tag309
  %.val6330 = phi {}* [ %.val6330.pre, %tag557.tag476_crit_edge ], [ %.val6328, %tag309 ], [ %.val6328, %tag614 ], [ %.val6328, %header-check-br3293 ], [ %.val6328, %header-check-br2553 ]
  %.val63316727 = phi {}* [ %.val6331, %tag557.tag476_crit_edge ], [ %.val63296726, %tag309 ], [ %.val63296726, %tag614 ], [ %.val63296726, %header-check-br3293 ], [ %.val63296726, %header-check-br2553 ]
  %246 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %247 = icmp eq {}* %.in5757, %246
  %G112781.0 = select i1 %247, {}* %.val6330, {}* %.val63316727
  %248 = icmp eq {}* %G112781.0, %.val63316727
  br i1 %248, label %tag174, label %tag533

tag484:                                           ; preds = %tag572
  %249 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %292, i64 4)
  %result3436 = extractvalue { i64, i1 } %249, 0
  %overflow3437 = extractvalue { i64, i1 } %249, 1
  %250 = inttoptr i64 %result3436 to {}*
  br i1 %overflow3437, label %tag491, label %tag847

tag491:                                           ; preds = %tag484
  %251 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %252 = invoke {}* @cc_safe_fdefinition({}* %251)
          to label %normal-dest3448 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag503:                                           ; preds = %tag732
  %253 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %370, i64 4)
  %result3496 = extractvalue { i64, i1 } %253, 0
  %overflow3497 = extractvalue { i64, i1 } %253, 1
  %254 = inttoptr i64 %result3496 to {}*
  br i1 %overflow3497, label %tag155, label %tag67

tag510:                                           ; preds = %tag668
  %255 = ptrtoint {}* %EINGABE.16610 to i64
  %fixnum-tag-only35215456 = and i64 %255, 3
  %fixnump-test3522 = icmp eq i64 %fixnum-tag-only35215456, 0
  br i1 %fixnump-test3522, label %tag550, label %tag407

tag512:                                           ; preds = %tag596
  %256 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %308, i64 4)
  %result3530 = extractvalue { i64, i1 } %256, 0
  %overflow3531 = extractvalue { i64, i1 } %256, 1
  %257 = inttoptr i64 %result3530 to {}*
  br i1 %overflow3531, label %tag262, label %tag67

tag513:                                           ; preds = %tag288
  %fixnum-tag-only35325814 = and i64 %146, 3
  %fixnump-test3533 = icmp ne i64 %fixnum-tag-only35325814, 0
  %test2626 = icmp eq i64 %single-float-tag-only2667, 1
  %or.cond6250 = and i1 %fixnump-test3533, %test2626
  br i1 %or.cond6250, label %header-check-br2623, label %tag570

tag516:                                           ; preds = %header-check-br4569, %header-check-br4569, %header-check-br4569, %header-check-br4569
  %258 = ptrtoint {}* %360 to i64
  %single-float-tag-only3542 = and i64 %258, 7
  %fixnum-tag-only25655749 = and i64 %258, 3
  %fixnump-test2566 = icmp ne i64 %fixnum-tag-only25655749, 0
  %test4852 = icmp eq i64 %single-float-tag-only3542, 1
  %or.cond6282 = and i1 %fixnump-test2566, %test4852
  br i1 %or.cond6282, label %header-check-br4849, label %tag877

tag517:                                           ; preds = %tag381
  %259 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %201, i64 4)
  %result3543 = extractvalue { i64, i1 } %259, 0
  %overflow3544 = extractvalue { i64, i1 } %259, 1
  %260 = inttoptr i64 %result3543 to {}*
  br i1 %overflow3544, label %tag428, label %tag67

tag518:                                           ; preds = %header-check-br3567, %header-check-br3567, %header-check-br3567, %header-check-br3567
  %261 = ptrtoint {}* %237 to i64
  %single-float-tag-only3545 = and i64 %261, 7
  %262 = icmp eq i64 %single-float-tag-only3545, 6
  br i1 %262, label %tag850, label %tag738

tag520:                                           ; preds = %tag881
  %263 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %264 = invoke {}* @cc_safe_fdefinition({}* %263)
          to label %normal-dest3554 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag528:                                           ; preds = %tag528.preheader, %tag437.backedge
  %.val6285 = phi {}* [ %140, %tag437.backedge ], [ %439, %tag528.preheader ]
  %OBJEKTE.06671 = phi {}* [ %OBJEKTE.1, %tag437.backedge ], [ null, %tag528.preheader ]
  %GESAMT.16670 = phi {}* [ %GESAMT.0.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %STATISCH.36669 = phi {}* [ %STATISCH.2.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %DYNAMISCH.26668 = phi {}* [ %DYNAMISCH.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_PROGRAMM.26667 = phi {}* [ %S_PROGRAMM.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_NICHTS.26666 = phi {}* [ %S_NICHTS.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_INVERS.26665 = phi {}* [ %S_INVERS.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_ERERBT.26664 = phi {}* [ %S_ERERBT.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_EINGABE.26663 = phi {}* [ %S_EINGABE.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_VORSCHLAG.26662 = phi {}* [ %S_VORSCHLAG.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_HEILMITTEL.26661 = phi {}* [ %S_HEILMITTEL.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_PROPAGIERT.26660 = phi {}* [ %S_PROPAGIERT.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %S_SYSTEM.26659 = phi {}* [ %S_SYSTEM.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %NICHTS.26658 = phi {}* [ %NICHTS.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %PROGRAMM.26657 = phi {}* [ %PROGRAMM.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %INVERS.26656 = phi {}* [ %INVERS.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %ERERBT.26655 = phi {}* [ %ERERBT.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %EINGABE.26654 = phi {}* [ %EINGABE.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %VORSCHLAG.26653 = phi {}* [ %VORSCHLAG.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %HEILMITTEL.26652 = phi {}* [ %HEILMITTEL.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %PROPAGIERT.26651 = phi {}* [ %PROPAGIERT.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %SYSTEM.26650 = phi {}* [ %SYSTEM.1.lcssa, %tag437.backedge ], [ null, %tag528.preheader ]
  %"%DOLIST-VAR.06649" = phi {}* [ %"%DOLIST-VAR.0.be", %tag437.backedge ], [ %"%DOLIST-VAR.1", %tag528.preheader ]
  %265 = ptrtoint {}* %"%DOLIST-VAR.06649" to i64
  %tag-only35975376 = and i64 %265, 7
  %consp-test3598 = icmp eq i64 %tag-only35975376, 3
  %.val = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G113702.0 = select i1 %consp-test3598, {}* %.val, {}* %.val6285
  %266 = icmp eq {}* %G113702.0, %.val6285
  br i1 %266, label %tag179, label %tag194

tag530:                                           ; preds = %header-check-br4759, %header-check-br4759, %header-check-br4759, %header-check-br4759
  %267 = ptrtoint {}* %216 to i64
  %single-float-tag-only3605 = and i64 %267, 7
  %268 = icmp eq i64 %single-float-tag-only3605, 6
  br i1 %268, label %tag201, label %tag724

tag533:                                           ; preds = %tag476, %normal-dest4563
  %.val6333 = phi {}* [ %1009, %normal-dest4563 ], [ %.val63316727, %tag476 ]
  %G112772.0 = phi {}* [ %G112772.1, %normal-dest4563 ], [ %.val6330, %tag476 ]
  %269 = icmp eq {}* %G112772.0, %.val6333
  br i1 %269, label %tag533.tag787_crit_edge, label %tag221

tag533.tag787_crit_edge:                          ; preds = %tag533
  %.val6332.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag787

tag536:                                           ; preds = %header-check-br4052, %header-check-br4052, %header-check-br4052, %header-check-br4052
  %270 = ptrtoint {}* %.in5599 to i64
  %single-float-tag-only3620 = and i64 %270, 7
  %fixnum-tag-only9385596 = and i64 %270, 3
  %fixnump-test939 = icmp ne i64 %fixnum-tag-only9385596, 0
  %test2465 = icmp eq i64 %single-float-tag-only3620, 1
  %or.cond6244 = and i1 %fixnump-test939, %test2465
  br i1 %or.cond6244, label %header-check-br2462, label %tag585

tag541:                                           ; preds = %tag365
  %271 = icmp eq {}* %G113568.0, %189
  br i1 %271, label %tag869, label %tag401

tag542:                                           ; preds = %tag555, %normal-dest3020
  %272 = phi {}* [ %829, %normal-dest3020 ], [ %.val6317, %tag555 ]
  %G113080.0 = phi {}* [ %G113080.1, %normal-dest3020 ], [ %282, %tag555 ]
  %273 = icmp eq {}* %G113080.0, %272
  br i1 %273, label %tag542.tag332_crit_edge, label %tag135

tag542.tag332_crit_edge:                          ; preds = %tag542
  %.val6312.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag332

tag543:                                           ; preds = %tag135
  %274 = ptrtoint {}* %S_NICHTS.16622 to i64
  %fixnum-tag-only16195627 = and i64 %274, 3
  %fixnump-test1620 = icmp eq i64 %fixnum-tag-only16195627, 0
  br i1 %fixnump-test1620, label %tag827, label %tag730

tag544:                                           ; preds = %tag462, %normal-dest4372
  %.val6329 = phi {}* [ %979, %normal-dest4372 ], [ %.val63276732, %tag462 ]
  %G112852.0 = phi {}* [ %G112852.1, %normal-dest4372 ], [ %.val6326, %tag462 ]
  %275 = icmp eq {}* %G112852.0, %.val6329
  br i1 %275, label %tag544.tag850_crit_edge, label %tag635

tag544.tag850_crit_edge:                          ; preds = %tag544
  %.val6328.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag850

tag547:                                           ; preds = %header-check-br4422, %header-check-br4422, %header-check-br4422, %header-check-br4422
  %276 = ptrtoint {}* %59 to i64
  %single-float-tag-only3654 = and i64 %276, 7
  %277 = icmp eq i64 %single-float-tag-only3654, 6
  br i1 %277, label %tag334, label %tag370

tag548:                                           ; preds = %header-check-br3514, %header-check-br3514, %header-check-br3514, %header-check-br3514
  %278 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %279 = invoke {}* @cc_safe_fdefinition({}* %278)
          to label %normal-dest3656 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag550:                                           ; preds = %tag510
  %280 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %255, i64 4)
  %result3676 = extractvalue { i64, i1 } %280, 0
  %overflow3677 = extractvalue { i64, i1 } %280, 1
  %281 = inttoptr i64 %result3676 to {}*
  br i1 %overflow3677, label %tag465, label %tag67

tag553:                                           ; preds = %tag811
  %fixnum-tag-only36925567 = and i64 %393, 3
  %fixnump-test3693 = icmp ne i64 %fixnum-tag-only36925567, 0
  %test1298 = icmp eq i64 %single-float-tag-only4856, 1
  %or.cond6235 = and i1 %fixnump-test3693, %test1298
  br i1 %or.cond6235, label %header-check-br1295, label %tag379

tag555:                                           ; preds = %tag223, %normal-dest1009, %tag63
  %.val6317 = phi {}* [ %162, %tag63 ], [ %462, %normal-dest1009 ], [ %G113109.0, %tag223 ]
  %282 = phi {}* [ %G113109.0, %tag63 ], [ %.val6316.pre, %normal-dest1009 ], [ %G113109.0, %tag223 ]
  %.in5830 = phi {}* [ %46, %tag63 ], [ %.in5829, %normal-dest1009 ], [ %G113109.0, %tag223 ]
  %283 = bitcast {}* %.in5830 to i8*
  %284 = icmp eq {}* %.in5757, %.in5830
  %G113089.0 = select i1 %284, {}* %282, {}* %.val6317
  %285 = icmp eq {}* %G113089.0, %.val6317
  br i1 %285, label %tag841, label %tag542

tag557:                                           ; preds = %tag850, %normal-dest4407
  %.val6331 = phi {}* [ %986, %normal-dest4407 ], [ %.val63296726, %tag850 ]
  %G112812.0 = phi {}* [ %G112812.1, %normal-dest4407 ], [ %.val6328, %tag850 ]
  %286 = icmp eq {}* %G112812.0, %.val6331
  br i1 %286, label %tag557.tag476_crit_edge, label %tag461

tag557.tag476_crit_edge:                          ; preds = %tag557
  %.val6330.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag476

tag559:                                           ; preds = %tag655
  %287 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %288 = invoke {}* @cc_safe_fdefinition({}* %287)
          to label %normal-dest3703 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag570:                                           ; preds = %tag353.tag570_crit_edge, %header-check-br2623, %header-check-br3371, %tag288, %tag513, %tag681
  %.val6320 = phi {}* [ %.val6320.pre, %tag353.tag570_crit_edge ], [ %.val6318, %tag681 ], [ %.val6318, %tag513 ], [ %.val6318, %tag288 ], [ %.val6318, %header-check-br3371 ], [ %.val6318, %header-check-br2623 ]
  %.val63216722 = phi {}* [ %.val6321, %tag353.tag570_crit_edge ], [ %.val63196718, %tag681 ], [ %.val63196718, %tag513 ], [ %.val63196718, %tag288 ], [ %.val63196718, %header-check-br3371 ], [ %.val63196718, %header-check-br2623 ]
  %289 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1251), align 8
  %290 = icmp eq {}* %.in5757, %289
  %G112981.0 = select i1 %290, {}* %.val6320, {}* %.val63216722
  %291 = icmp eq {}* %G112981.0, %.val63216722
  br i1 %291, label %tag335, label %tag7

tag572:                                           ; preds = %normal-dest3798
  %292 = ptrtoint {}* %DYNAMISCH.16624 to i64
  %fixnum-tag-only37595400 = and i64 %292, 3
  %fixnump-test3760 = icmp eq i64 %fixnum-tag-only37595400, 0
  br i1 %fixnump-test3760, label %tag484, label %tag612

tag576:                                           ; preds = %normal-dest3310, %normal-dest2531, %tag836
  %GESAMT.2 = phi {}* [ %409, %tag836 ], [ %GESAMT.3, %normal-dest2531 ], [ %GESAMT.4, %normal-dest3310 ]
  %293 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 537), align 8
  %294 = invoke {}* @cc_safe_fdefinition({}* %293)
          to label %normal-dest3777 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag583:                                           ; preds = %tag460
  %295 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %296 = invoke {}* @cc_safe_fdefinition({}* %295)
          to label %normal-dest3814 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag585:                                           ; preds = %tag645.tag585_crit_edge, %header-check-br2462, %header-check-br4052, %tag536, %tag616
  %.val6288 = phi {}* [ %.val6288.pre, %tag645.tag585_crit_edge ], [ %375, %tag616 ], [ %375, %tag536 ], [ %375, %header-check-br4052 ], [ %375, %header-check-br2462 ]
  %297 = phi {}* [ %330, %tag645.tag585_crit_edge ], [ %.val6293, %tag616 ], [ %.val6293, %tag536 ], [ %.val6293, %header-check-br4052 ], [ %.val6293, %header-check-br2462 ]
  %298 = add i64 %191, 5
  %299 = inttoptr i64 %298 to {}**
  %300 = load {}*, {}** %299, align 8
  %301 = icmp eq {}* %300, %297
  %object.0 = select i1 %301, {}* %.val6288, {}* %297
  %302 = icmp eq {}* %object.0, %297
  %G113514.0 = select i1 %302, {}* %.val6288, {}* %297
  %303 = icmp eq {}* %G113514.0, %297
  br i1 %303, label %tag410, label %tag365

tag587:                                           ; preds = %tag307
  %304 = ptrtoint {}* %.in to i64
  %single-float-tag-only3834 = and i64 %304, 7
  %305 = icmp eq i64 %single-float-tag-only3834, 6
  br i1 %305, label %tag110, label %tag757

tag591:                                           ; preds = %tag804
  %306 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %307 = invoke {}* @cc_safe_fdefinition({}* %306)
          to label %normal-dest3844 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag596:                                           ; preds = %tag7
  %308 = ptrtoint {}* %S_ERERBT.16620 to i64
  %fixnum-tag-only12865645 = and i64 %308, 3
  %fixnump-test1287 = icmp eq i64 %fixnum-tag-only12865645, 0
  br i1 %fixnump-test1287, label %tag512, label %tag331

tag599:                                           ; preds = %tag791
  %309 = ptrtoint {}* %VORSCHLAG.16609 to i64
  %fixnum-tag-only34985474 = and i64 %309, 3
  %fixnump-test3499 = icmp eq i64 %fixnum-tag-only34985474, 0
  br i1 %fixnump-test3499, label %tag86, label %tag690

tag600:                                           ; preds = %tag201
  %310 = ptrtoint {}* %.in to i64
  %single-float-tag-only3878 = and i64 %310, 7
  %311 = icmp eq i64 %single-float-tag-only3878, 6
  br i1 %311, label %tag661, label %tag858

tag608:                                           ; preds = %header-check-br2668, %header-check-br2668, %header-check-br2668, %header-check-br2668
  %312 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %313 = invoke {}* @cc_safe_fdefinition({}* %312)
          to label %normal-dest3902 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag612:                                           ; preds = %tag572
  %314 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %315 = invoke {}* @cc_safe_fdefinition({}* %314)
          to label %normal-dest3918 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag614:                                           ; preds = %tag850
  %316 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only3932 = and i64 %316, 7
  %fixnum-tag-only16755772 = and i64 %316, 3
  %fixnump-test1676 = icmp ne i64 %fixnum-tag-only16755772, 0
  %test2556 = icmp eq i64 %single-float-tag-only3932, 1
  %or.cond6248 = and i1 %fixnump-test1676, %test2556
  br i1 %or.cond6248, label %header-check-br2553, label %tag476

tag616:                                           ; preds = %tag748
  br i1 %or.cond6270, label %header-check-br4052, label %tag585

tag624:                                           ; preds = %tag857
  %317 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %318 = invoke {}* @cc_safe_fdefinition({}* %317)
          to label %normal-dest3958 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag625:                                           ; preds = %header-check-br1127, %header-check-br1127, %header-check-br1127, %header-check-br1127
  %319 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %320 = invoke {}* @cc_safe_fdefinition({}* %319)
          to label %normal-dest3972 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag626:                                           ; preds = %tag211
  %fixnum-tag-only39855551 = and i64 %102, 3
  %fixnump-test3986 = icmp ne i64 %fixnum-tag-only39855551, 0
  %test1137 = icmp eq i64 %single-float-tag-only1684, 1
  %or.cond6234 = and i1 %fixnump-test3986, %test1137
  br i1 %or.cond6234, label %header-check-br1134, label %tag110

tag627:                                           ; preds = %tag815
  %321 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %322 = invoke {}* @cc_safe_fdefinition({}* %321)
          to label %normal-dest3988 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag630:                                           ; preds = %tag467
  %fixnum-tag-only40155780 = and i64 %242, 3
  %fixnump-test4016 = icmp ne i64 %fixnum-tag-only40155780, 0
  %test3570 = icmp eq i64 %single-float-tag-only3370, 1
  %or.cond6264 = and i1 %fixnump-test4016, %test3570
  br i1 %or.cond6264, label %header-check-br3567, label %tag850

tag633:                                           ; preds = %tag28, %tag116.backedge, %normal-dest4110
  %.val6339 = phi {}* [ %950, %normal-dest4110 ], [ %38, %tag116.backedge ], [ %24, %tag28 ]
  %SYSTEM.1.lcssa = phi {}* [ %SYSTEM.26650, %normal-dest4110 ], [ %SYSTEM.0, %tag116.backedge ], [ %SYSTEM.0, %tag28 ]
  %PROPAGIERT.1.lcssa = phi {}* [ %PROPAGIERT.26651, %normal-dest4110 ], [ %PROPAGIERT.0, %tag116.backedge ], [ %PROPAGIERT.0, %tag28 ]
  %HEILMITTEL.1.lcssa = phi {}* [ %HEILMITTEL.26652, %normal-dest4110 ], [ %HEILMITTEL.0, %tag116.backedge ], [ %HEILMITTEL.0, %tag28 ]
  %VORSCHLAG.1.lcssa = phi {}* [ %VORSCHLAG.26653, %normal-dest4110 ], [ %VORSCHLAG.0, %tag116.backedge ], [ %VORSCHLAG.0, %tag28 ]
  %EINGABE.1.lcssa = phi {}* [ %EINGABE.26654, %normal-dest4110 ], [ %EINGABE.0, %tag116.backedge ], [ %EINGABE.0, %tag28 ]
  %ERERBT.1.lcssa = phi {}* [ %ERERBT.26655, %normal-dest4110 ], [ %ERERBT.0, %tag116.backedge ], [ %ERERBT.0, %tag28 ]
  %INVERS.1.lcssa = phi {}* [ %INVERS.26656, %normal-dest4110 ], [ %INVERS.0, %tag116.backedge ], [ %INVERS.0, %tag28 ]
  %PROGRAMM.1.lcssa = phi {}* [ %PROGRAMM.26657, %normal-dest4110 ], [ %PROGRAMM.0, %tag116.backedge ], [ %PROGRAMM.0, %tag28 ]
  %NICHTS.1.lcssa = phi {}* [ %NICHTS.26658, %normal-dest4110 ], [ %NICHTS.0, %tag116.backedge ], [ %NICHTS.0, %tag28 ]
  %S_SYSTEM.1.lcssa = phi {}* [ %S_SYSTEM.26659, %normal-dest4110 ], [ %S_SYSTEM.0, %tag116.backedge ], [ %S_SYSTEM.0, %tag28 ]
  %S_PROPAGIERT.1.lcssa = phi {}* [ %S_PROPAGIERT.26660, %normal-dest4110 ], [ %S_PROPAGIERT.0, %tag116.backedge ], [ %S_PROPAGIERT.0, %tag28 ]
  %S_HEILMITTEL.1.lcssa = phi {}* [ %S_HEILMITTEL.26661, %normal-dest4110 ], [ %S_HEILMITTEL.0, %tag116.backedge ], [ %S_HEILMITTEL.0, %tag28 ]
  %S_VORSCHLAG.1.lcssa = phi {}* [ %S_VORSCHLAG.26662, %normal-dest4110 ], [ %S_VORSCHLAG.0, %tag116.backedge ], [ %S_VORSCHLAG.0, %tag28 ]
  %S_EINGABE.1.lcssa = phi {}* [ %S_EINGABE.26663, %normal-dest4110 ], [ %S_EINGABE.0, %tag116.backedge ], [ %S_EINGABE.0, %tag28 ]
  %S_ERERBT.1.lcssa = phi {}* [ %S_ERERBT.26664, %normal-dest4110 ], [ %S_ERERBT.0, %tag116.backedge ], [ %S_ERERBT.0, %tag28 ]
  %S_INVERS.1.lcssa = phi {}* [ %S_INVERS.26665, %normal-dest4110 ], [ %S_INVERS.0, %tag116.backedge ], [ %S_INVERS.0, %tag28 ]
  %S_NICHTS.1.lcssa = phi {}* [ %S_NICHTS.26666, %normal-dest4110 ], [ %S_NICHTS.0, %tag116.backedge ], [ %S_NICHTS.0, %tag28 ]
  %S_PROGRAMM.1.lcssa = phi {}* [ %S_PROGRAMM.26667, %normal-dest4110 ], [ %S_PROGRAMM.0, %tag116.backedge ], [ %S_PROGRAMM.0, %tag28 ]
  %DYNAMISCH.1.lcssa = phi {}* [ %DYNAMISCH.26668, %normal-dest4110 ], [ %DYNAMISCH.0, %tag116.backedge ], [ %DYNAMISCH.0, %tag28 ]
  %STATISCH.2.lcssa = phi {}* [ %STATISCH.36669, %normal-dest4110 ], [ %STATISCH.1, %tag116.backedge ], [ %STATISCH.1, %tag28 ]
  %GESAMT.0.lcssa = phi {}* [ %GESAMT.16670, %normal-dest4110 ], [ %GESAMT.2, %tag116.backedge ], [ %GESAMT.2, %tag28 ]
  br i1 %consp-test3598, label %tag279, label %tag55

tag635:                                           ; preds = %tag544
  %323 = ptrtoint {}* %S_PROGRAMM.16623 to i64
  %fixnum-tag-only33005672 = and i64 %323, 3
  %fixnump-test3301 = icmp eq i64 %fixnum-tag-only33005672, 0
  br i1 %fixnump-test3301, label %tag230, label %tag199

tag636:                                           ; preds = %tag763
  %324 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %325 = invoke {}* @cc_safe_fdefinition({}* %324)
          to label %normal-dest4032 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag641:                                           ; preds = %tag395, %normal-dest2941
  %.val6325 = phi {}* [ %820, %normal-dest2941 ], [ %.val63236716, %tag395 ]
  %G112932.0 = phi {}* [ %G112932.1, %normal-dest2941 ], [ %.val6322, %tag395 ]
  %326 = icmp eq {}* %G112932.0, %.val6325
  br i1 %326, label %tag641.tag149_crit_edge, label %tag314

tag641.tag149_crit_edge:                          ; preds = %tag641
  %.val6324.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag149

tag642:                                           ; preds = %tag334, %normal-dest3979
  %.val6311 = phi {}* [ %937, %normal-dest3979 ], [ %.val63096731, %tag334 ]
  %G113231.0 = phi {}* [ %G113231.1, %normal-dest3979 ], [ %.val6308, %tag334 ]
  %327 = icmp eq {}* %G113231.0, %.val6311
  br i1 %327, label %tag642.tag268_crit_edge, label %tag881

tag642.tag268_crit_edge:                          ; preds = %tag642
  %.val6310.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag268

tag643:                                           ; preds = %tag232
  %328 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %329 = invoke {}* @cc_safe_fdefinition({}* %328)
          to label %normal-dest4060 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag645:                                           ; preds = %tag748, %normal-dest3102
  %330 = phi {}* [ %838, %normal-dest3102 ], [ %.val6293, %tag748 ]
  %G113539.0 = phi {}* [ %G113539.1, %normal-dest3102 ], [ %375, %tag748 ]
  %331 = icmp eq {}* %G113539.0, %330
  br i1 %331, label %tag645.tag585_crit_edge, label %tag432

tag645.tag585_crit_edge:                          ; preds = %tag645
  %.val6288.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag585

tag648:                                           ; preds = %tag446
  %332 = ptrtoint {}* %PROGRAMM.16613 to i64
  %fixnum-tag-only14645465 = and i64 %332, 3
  %fixnump-test1465 = icmp eq i64 %fixnum-tag-only14645465, 0
  br i1 %fixnump-test1465, label %tag862, label %tag420

tag652:                                           ; preds = %header-check-br1612, %header-check-br1612, %header-check-br1612, %header-check-br1612
  %333 = ptrtoint {}* %386 to i64
  %single-float-tag-only4097 = and i64 %333, 7
  %334 = icmp eq i64 %single-float-tag-only4097, 6
  br i1 %334, label %tag707, label %tag824

tag655:                                           ; preds = %tag707, %normal-dest1267
  %335 = phi {}* [ %483, %normal-dest1267 ], [ %.val63356719, %tag707 ]
  %G112692.0 = phi {}* [ %G112692.1, %normal-dest1267 ], [ %.val6334, %tag707 ]
  %336 = icmp eq {}* %G112692.0, %335
  br i1 %336, label %tag877, label %tag559

tag658:                                           ; preds = %normal-dest3821, %normal-dest2656, %tag250
  %OBJEKTE.1 = phi {}* [ %119, %tag250 ], [ %OBJEKTE.2, %normal-dest2656 ], [ %OBJEKTE.3, %normal-dest3821 ]
  %337 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 503), align 8
  %338 = invoke {}* @cc_safe_fdefinition({}* %337)
          to label %normal-dest4103 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag661:                                           ; preds = %tag216.tag661_crit_edge, %header-check-br1605, %header-check-br4310, %tag600, %tag858, %tag91, %tag766
  %.val6300 = phi {}* [ %.val6300.pre, %tag216.tag661_crit_edge ], [ %.val6298, %tag766 ], [ %.val6298, %tag91 ], [ %.val6298, %tag858 ], [ %.val6298, %tag600 ], [ %.val6298, %header-check-br4310 ], [ %.val6298, %header-check-br1605 ]
  %.val63016721 = phi {}* [ %.val6301, %tag216.tag661_crit_edge ], [ %.val62996720, %tag766 ], [ %.val62996720, %tag91 ], [ %.val62996720, %tag858 ], [ %.val62996720, %tag600 ], [ %.val62996720, %header-check-br4310 ], [ %.val62996720, %header-check-br1605 ]
  %339 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %340 = icmp eq {}* %.in, %339
  %G113400.0 = select i1 %340, {}* %.val6300, {}* %.val63016721
  %341 = icmp eq {}* %G113400.0, %.val63016721
  br i1 %341, label %tag111, label %tag22

tag668:                                           ; preds = %tag379, %normal-dest4301
  %.val6305 = phi {}* [ %968, %normal-dest4301 ], [ %.val63036717, %tag379 ]
  %G113351.0 = phi {}* [ %G113351.1, %normal-dest4301 ], [ %.val6302, %tag379 ]
  %342 = icmp eq {}* %G113351.0, %.val6305
  br i1 %342, label %tag668.tag307_crit_edge, label %tag510

tag668.tag307_crit_edge:                          ; preds = %tag668
  %.val6304.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag307

tag674:                                           ; preds = %tag39
  %fixnum-tag-only41645806 = and i64 %31, 3
  %fixnump-test4165 = icmp ne i64 %fixnum-tag-only41645806, 0
  %test1316 = icmp eq i64 %single-float-tag-only1025, 1
  %or.cond6237 = and i1 %fixnump-test4165, %test1316
  br i1 %or.cond6237, label %header-check-br1313, label %tag395

tag678:                                           ; preds = %header-check-br1313, %header-check-br1313, %header-check-br1313, %header-check-br1313
  %343 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %344 = invoke {}* @cc_safe_fdefinition({}* %343)
          to label %normal-dest4181 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag681:                                           ; preds = %tag338
  %345 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only4203 = and i64 %345, 7
  %fixnum-tag-only33325812 = and i64 %345, 3
  %fixnump-test3333 = icmp ne i64 %fixnum-tag-only33325812, 0
  %test3374 = icmp eq i64 %single-float-tag-only4203, 1
  %or.cond6261 = and i1 %fixnump-test3333, %test3374
  br i1 %or.cond6261, label %header-check-br3371, label %tag570

tag686:                                           ; preds = %tag871
  %346 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %347 = invoke {}* @cc_safe_fdefinition({}* %346)
          to label %normal-dest4212 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag690:                                           ; preds = %tag599
  %348 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %349 = invoke {}* @cc_safe_fdefinition({}* %348)
          to label %normal-dest4242 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag691:                                           ; preds = %tag865
  %350 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %351 = invoke {}* @cc_safe_fdefinition({}* %350)
          to label %normal-dest4256 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag692:                                           ; preds = %tag150
  %fixnum-tag-only42695796 = and i64 %74, 3
  %fixnump-test4270 = icmp ne i64 %fixnum-tag-only42695796, 0
  %test3588 = icmp eq i64 %single-float-tag-only1432, 1
  %or.cond6266 = and i1 %fixnump-test4270, %test3588
  br i1 %or.cond6266, label %header-check-br3585, label %tag149

tag695:                                           ; preds = %tag360
  %352 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %353 = invoke {}* @cc_safe_fdefinition({}* %352)
          to label %normal-dest4276 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag699:                                           ; preds = %header-check-br4194, %header-check-br4194, %header-check-br4194, %header-check-br4194
  %354 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %355 = invoke {}* @cc_safe_fdefinition({}* %354)
          to label %normal-dest4294 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag703:                                           ; preds = %tag276
  %356 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %357 = invoke {}* @cc_safe_fdefinition({}* %356)
          to label %normal-dest4318 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag706:                                           ; preds = %tag221
  %358 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %359 = invoke {}* @cc_safe_fdefinition({}* %358)
          to label %normal-dest4340 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag707:                                           ; preds = %tag195.tag707_crit_edge, %header-check-br4582, %header-check-br1612, %tag397, %tag652, %tag824
  %.val6334 = phi {}* [ %.val6334.pre, %tag195.tag707_crit_edge ], [ %.val6332, %tag824 ], [ %.val6332, %tag652 ], [ %.val6332, %tag397 ], [ %.val6332, %header-check-br1612 ], [ %.val6332, %header-check-br4582 ]
  %.val63356719 = phi {}* [ %.val6335, %tag195.tag707_crit_edge ], [ %.val63336725, %tag824 ], [ %.val63336725, %tag652 ], [ %.val63336725, %tag397 ], [ %.val63336725, %header-check-br1612 ], [ %.val63336725, %header-check-br4582 ]
  %360 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 544), align 16
  %361 = icmp eq {}* %.in5748, %360
  %G112701.0 = select i1 %361, {}* %.val6334, {}* %.val63356719
  %362 = icmp eq {}* %G112701.0, %.val63356719
  br i1 %362, label %tag105, label %tag655

tag708:                                           ; preds = %tag263
  %fixnum-tag-only43595788 = and i64 %128, 3
  %fixnump-test4360 = icmp ne i64 %fixnum-tag-only43595788, 0
  %test1305 = icmp eq i64 %single-float-tag-only2583, 1
  %or.cond6236 = and i1 %fixnump-test4360, %test1305
  br i1 %or.cond6236, label %header-check-br1302, label %tag462

tag710:                                           ; preds = %header-check-br3762, %header-check-br3762, %header-check-br3762, %header-check-br3762
  %363 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %364 = invoke {}* @cc_safe_fdefinition({}* %363)
          to label %normal-dest4365 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag716:                                           ; preds = %header-check-br3293, %header-check-br3293, %header-check-br3293, %header-check-br3293
  %365 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %366 = invoke {}* @cc_safe_fdefinition({}* %365)
          to label %normal-dest4400 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag724:                                           ; preds = %tag530
  %fixnum-tag-only44365583 = and i64 %267, 3
  %fixnump-test4437 = icmp ne i64 %fixnum-tag-only44365583, 0
  %test3672 = icmp eq i64 %single-float-tag-only3605, 1
  %or.cond6267 = and i1 %fixnump-test4437, %test3672
  br i1 %or.cond6267, label %header-check-br3669, label %tag201

tag728:                                           ; preds = %normal-dest3798
  %367 = ptrtoint {}* %STATISCH.26625 to i64
  %fixnum-tag-only44475612 = and i64 %367, 3
  %fixnump-test4448 = icmp eq i64 %fixnum-tag-only44475612, 0
  br i1 %fixnump-test4448, label %tag259, label %tag809

tag730:                                           ; preds = %tag543
  %368 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %369 = invoke {}* @cc_safe_fdefinition({}* %368)
          to label %normal-dest4450 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag732:                                           ; preds = %tag195
  %370 = ptrtoint {}* %S_PROPAGIERT.16616 to i64
  %fixnum-tag-only44635699 = and i64 %370, 3
  %fixnump-test4464 = icmp eq i64 %fixnum-tag-only44635699, 0
  br i1 %fixnump-test4464, label %tag503, label %tag183

tag735:                                           ; preds = %tag473
  %371 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %372 = invoke {}* @cc_safe_fdefinition({}* %371)
          to label %normal-dest4480 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag738:                                           ; preds = %tag518
  %fixnum-tag-only44935782 = and i64 %261, 3
  %fixnump-test4494 = icmp ne i64 %fixnum-tag-only44935782, 0
  %test3765 = icmp eq i64 %single-float-tag-only3545, 1
  %or.cond6268 = and i1 %fixnump-test4494, %test3765
  br i1 %or.cond6268, label %header-check-br3762, label %tag850

tag747:                                           ; preds = %header-check-br3669, %header-check-br3669, %header-check-br3669, %header-check-br3669
  %373 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %374 = invoke {}* @cc_safe_fdefinition({}* %373)
          to label %normal-dest4514 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag748:                                           ; preds = %tag869, %normal-dest4962, %tag401
  %.val6293 = phi {}* [ %189, %tag401 ], [ %1070, %normal-dest4962 ], [ %G113568.0, %tag869 ]
  %375 = phi {}* [ %G113568.0, %tag401 ], [ %.val6292.pre, %normal-dest4962 ], [ %G113568.0, %tag869 ]
  %.in5599 = phi {}* [ %213, %tag401 ], [ %.in5598, %normal-dest4962 ], [ %G113568.0, %tag869 ]
  %376 = bitcast {}* %.in5599 to i8*
  %377 = icmp eq {}* %.in, %.in5599
  %G113548.0 = select i1 %377, {}* %375, {}* %.val6293
  %378 = icmp eq {}* %G113548.0, %.val6293
  br i1 %378, label %tag616, label %tag645

tag754:                                           ; preds = %header-check-br4413, %header-check-br4413, %header-check-br4413, %header-check-br4413
  %379 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %380 = invoke {}* @cc_safe_fdefinition({}* %379)
          to label %normal-dest4556 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag757:                                           ; preds = %tag587
  %fixnum-tag-only45795549 = and i64 %304, 3
  %fixnump-test4580 = icmp ne i64 %fixnum-tag-only45795549, 0
  %test3503 = icmp eq i64 %single-float-tag-only3834, 1
  %or.cond6262 = and i1 %fixnump-test4580, %test3503
  br i1 %or.cond6262, label %header-check-br3500, label %tag110

tag763:                                           ; preds = %tag861
  %381 = ptrtoint {}* %S_EINGABE.16619 to i64
  %fixnum-tag-only12515663 = and i64 %381, 3
  %fixnump-test1252 = icmp eq i64 %fixnum-tag-only12515663, 0
  br i1 %fixnump-test1252, label %tag119, label %tag636

tag766:                                           ; preds = %tag91
  %fixnum-tag-only46045575 = and i64 %53, 3
  %fixnump-test4605 = icmp ne i64 %fixnum-tag-only46045575, 0
  %test1608 = icmp eq i64 %single-float-tag-only1217, 1
  %or.cond6240 = and i1 %fixnump-test4605, %test1608
  br i1 %or.cond6240, label %header-check-br1605, label %tag661

tag769:                                           ; preds = %header-check-br4499, %header-check-br4378, %tag384, %tag327, %tag849, %tag283
  %382 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %383 = invoke {}* @cc_safe_fdefinition({}* %382)
          to label %normal-dest4611 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag777:                                           ; preds = %tag259
  %384 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %385 = invoke {}* @cc_safe_fdefinition({}* %384)
          to label %normal-dest4715 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag787:                                           ; preds = %tag533.tag787_crit_edge, %header-check-br3286, %header-check-br4413, %tag253, %tag174, %tag823
  %.val6332 = phi {}* [ %.val6332.pre, %tag533.tag787_crit_edge ], [ %.val6330, %tag823 ], [ %.val6330, %tag174 ], [ %.val6330, %tag253 ], [ %.val6330, %header-check-br4413 ], [ %.val6330, %header-check-br3286 ]
  %.val63336725 = phi {}* [ %.val6333, %tag533.tag787_crit_edge ], [ %.val63316727, %tag823 ], [ %.val63316727, %tag174 ], [ %.val63316727, %tag253 ], [ %.val63316727, %header-check-br4413 ], [ %.val63316727, %header-check-br3286 ]
  %386 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 532), align 16
  %387 = icmp eq {}* %.in5757, %386
  %G112741.0 = select i1 %387, {}* %.val6332, {}* %.val63336725
  %388 = icmp eq {}* %G112741.0, %.val63336725
  br i1 %388, label %tag397, label %tag195

tag791:                                           ; preds = %tag110, %normal-dest4881
  %.val6309 = phi {}* [ %1062, %normal-dest4881 ], [ %.val63076724, %tag110 ]
  %G113271.0 = phi {}* [ %G113271.1, %normal-dest4881 ], [ %.val6306, %tag110 ]
  %389 = icmp eq {}* %G113271.0, %.val6309
  br i1 %389, label %tag791.tag334_crit_edge, label %tag599

tag791.tag334_crit_edge:                          ; preds = %tag791
  %.val6308.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag334

tag804:                                           ; preds = %tag22
  %390 = ptrtoint {}* %INVERS.16612 to i64
  %fixnum-tag-only42015447 = and i64 %390, 3
  %fixnump-test4202 = icmp eq i64 %fixnum-tag-only42015447, 0
  br i1 %fixnump-test4202, label %tag815, label %tag591

tag809:                                           ; preds = %tag728
  %391 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %392 = invoke {}* @cc_safe_fdefinition({}* %391)
          to label %normal-dest4836 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag811:                                           ; preds = %header-check-br5032, %header-check-br5032, %header-check-br5032, %header-check-br5032
  %393 = ptrtoint {}* %339 to i64
  %single-float-tag-only4856 = and i64 %393, 7
  %394 = icmp eq i64 %single-float-tag-only4856, 6
  br i1 %394, label %tag379, label %tag553

tag814:                                           ; preds = %tag28
  %395 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %396 = invoke {}* @cc_safe_fdefinition({}* %395)
          to label %normal-dest4858 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag815:                                           ; preds = %tag804
  %397 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %390, i64 4)
  %result4871 = extractvalue { i64, i1 } %397, 0
  %overflow4872 = extractvalue { i64, i1 } %397, 1
  %398 = inttoptr i64 %result4871 to {}*
  br i1 %overflow4872, label %tag627, label %tag67

tag816:                                           ; preds = %header-check-br1443, %header-check-br1443, %header-check-br1443, %header-check-br1443
  %399 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %400 = invoke {}* @cc_safe_fdefinition({}* %399)
          to label %normal-dest4874 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag818:                                           ; preds = %tag325
  %401 = icmp eq {}* %G113109.0, %162
  br i1 %401, label %tag223, label %tag63

tag819:                                           ; preds = %tag827
  %402 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %403 = invoke {}* @cc_safe_fdefinition({}* %402)
          to label %normal-dest4899 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag823:                                           ; preds = %tag174
  %fixnum-tag-only49205764 = and i64 %81, 3
  %fixnump-test4921 = icmp ne i64 %fixnum-tag-only49205764, 0
  %test3289 = icmp eq i64 %single-float-tag-only1543, 1
  %or.cond6258 = and i1 %fixnump-test4921, %test3289
  br i1 %or.cond6258, label %header-check-br3286, label %tag787

tag824:                                           ; preds = %tag652
  %fixnum-tag-only49225758 = and i64 %333, 3
  %fixnump-test4923 = icmp ne i64 %fixnum-tag-only49225758, 0
  %test4585 = icmp eq i64 %single-float-tag-only4097, 1
  %or.cond6280 = and i1 %fixnump-test4923, %test4585
  br i1 %or.cond6280, label %header-check-br4582, label %tag707

tag827:                                           ; preds = %tag543
  %404 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %274, i64 4)
  %result4939 = extractvalue { i64, i1 } %404, 0
  %overflow4940 = extractvalue { i64, i1 } %404, 1
  %405 = inttoptr i64 %result4939 to {}*
  br i1 %overflow4940, label %tag819, label %tag67

tag834:                                           ; preds = %tag869
  %406 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %407 = invoke {}* @cc_safe_fdefinition({}* %406)
          to label %normal-dest4955 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag836:                                           ; preds = %tag368
  %408 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %193, i64 4)
  %result4969 = extractvalue { i64, i1 } %408, 0
  %overflow4970 = extractvalue { i64, i1 } %408, 1
  %409 = inttoptr i64 %result4969 to {}*
  br i1 %overflow4970, label %tag245, label %tag576

tag839:                                           ; preds = %tag379
  %410 = ptrtoint {}* %.in to i64
  %single-float-tag-only4977 = and i64 %410, 7
  %fixnum-tag-only10395557 = and i64 %410, 3
  %fixnump-test1040 = icmp ne i64 %fixnum-tag-only10395557, 0
  %test1389 = icmp eq i64 %single-float-tag-only4977, 1
  %or.cond6238 = and i1 %fixnump-test1040, %test1389
  br i1 %or.cond6238, label %header-check-br1386, label %tag307

tag840:                                           ; preds = %header-check-br1295, %header-check-br1295, %header-check-br1295, %header-check-br1295
  %411 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 210), align 16
  %412 = invoke {}* @cc_safe_fdefinition({}* %411)
          to label %normal-dest4979 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag841:                                           ; preds = %tag555
  br i1 %or.cond6245, label %header-check-br2499, label %tag332

tag842:                                           ; preds = %tag381
  %413 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 324), align 16
  %414 = invoke {}* @cc_safe_fdefinition({}* %413)
          to label %normal-dest4994 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag847:                                           ; preds = %normal-dest3925, %normal-dest3455, %tag484
  %DYNAMISCH.3 = phi {}* [ %250, %tag484 ], [ %DYNAMISCH.4, %normal-dest3455 ], [ %DYNAMISCH.5, %normal-dest3925 ]
  %415 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %416 = invoke {}* @cc_safe_fdefinition({}* %415)
          to label %normal-dest5019 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag849:                                           ; preds = %tag327
  %fixnum-tag-only50395525 = and i64 %164, 3
  %fixnump-test5040 = icmp ne i64 %fixnum-tag-only50395525, 0
  %test4381 = icmp eq i64 %single-float-tag-only2790, 1
  %or.cond6275 = and i1 %fixnump-test5040, %test4381
  br i1 %or.cond6275, label %header-check-br4378, label %tag769

tag850:                                           ; preds = %tag544.tag850_crit_edge, %header-check-br3762, %header-check-br3567, %tag518, %tag738, %tag467, %tag630
  %.val6328 = phi {}* [ %.val6328.pre, %tag544.tag850_crit_edge ], [ %.val6326, %tag630 ], [ %.val6326, %tag467 ], [ %.val6326, %tag738 ], [ %.val6326, %tag518 ], [ %.val6326, %header-check-br3567 ], [ %.val6326, %header-check-br3762 ]
  %.val63296726 = phi {}* [ %.val6329, %tag544.tag850_crit_edge ], [ %.val63276732, %tag630 ], [ %.val63276732, %tag467 ], [ %.val63276732, %tag738 ], [ %.val63276732, %tag518 ], [ %.val63276732, %header-check-br3567 ], [ %.val63276732, %header-check-br3762 ]
  %417 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %418 = icmp eq {}* %.in5757, %417
  %G112821.0 = select i1 %418, {}* %.val6328, {}* %.val63296726
  %419 = icmp eq {}* %G112821.0, %.val63296726
  br i1 %419, label %tag614, label %tag557

tag857:                                           ; preds = %tag881
  %420 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %435, i64 4)
  %result5062 = extractvalue { i64, i1 } %420, 0
  %overflow5063 = extractvalue { i64, i1 } %420, 1
  %421 = inttoptr i64 %result5062 to {}*
  br i1 %overflow5063, label %tag624, label %tag67

tag858:                                           ; preds = %tag600
  %fixnum-tag-only50645573 = and i64 %310, 3
  %fixnump-test5065 = icmp ne i64 %fixnum-tag-only50645573, 0
  %test4313 = icmp eq i64 %single-float-tag-only3878, 1
  %or.cond6274 = and i1 %fixnump-test5065, %test4313
  br i1 %or.cond6274, label %header-check-br4310, label %tag661

tag861:                                           ; preds = %tag149, %normal-dest3909
  %.val6327 = phi {}* [ %926, %normal-dest3909 ], [ %.val63256728, %tag149 ]
  %G112892.0 = phi {}* [ %G112892.1, %normal-dest3909 ], [ %.val6324, %tag149 ]
  %422 = icmp eq {}* %G112892.0, %.val6327
  br i1 %422, label %tag861.tag462_crit_edge, label %tag763

tag861.tag462_crit_edge:                          ; preds = %tag861
  %.val6326.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag462

tag862:                                           ; preds = %tag648
  %423 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %332, i64 4)
  %result5073 = extractvalue { i64, i1 } %423, 0
  %overflow5074 = extractvalue { i64, i1 } %423, 1
  %424 = inttoptr i64 %result5073 to {}*
  br i1 %overflow5074, label %tag872, label %tag67

tag865:                                           ; preds = %tag432
  %425 = ptrtoint {}* %NICHTS.16614 to i64
  %fixnum-tag-only50835415 = and i64 %425, 3
  %fixnump-test5084 = icmp eq i64 %fixnum-tag-only50835415, 0
  br i1 %fixnump-test5084, label %tag23, label %tag691

tag868:                                           ; preds = %tag221
  %426 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %105, i64 4)
  %result5085 = extractvalue { i64, i1 } %426, 0
  %overflow5086 = extractvalue { i64, i1 } %426, 1
  %427 = inttoptr i64 %result5085 to {}*
  br i1 %overflow5086, label %tag32, label %tag67

tag869:                                           ; preds = %tag541
  br i1 %188, label %tag834, label %tag748

tag870:                                           ; preds = %tag105
  %fixnum-tag-only50935745 = and i64 %57, 3
  %fixnump-test5094 = icmp ne i64 %fixnum-tag-only50935745, 0
  %test4572 = icmp eq i64 %single-float-tag-only1273, 1
  %or.cond6279 = and i1 %fixnump-test5094, %test4572
  br i1 %or.cond6279, label %header-check-br4569, label %tag877

tag871:                                           ; preds = %tag353
  %428 = ptrtoint {}* %S_SYSTEM.16615 to i64
  %fixnum-tag-only50955636 = and i64 %428, 3
  %fixnump-test5096 = icmp eq i64 %fixnum-tag-only50955636, 0
  br i1 %fixnump-test5096, label %tag276, label %tag686

tag872:                                           ; preds = %tag862
  %429 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %430 = invoke {}* @cc_safe_fdefinition({}* %429)
          to label %normal-dest5098 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag877:                                           ; preds = %header-check-br3514, %header-check-br4569, %header-check-br4849, %header-check-br912, %tag516, %tag105, %tag870, %tag158, %tag655, %tag229, %tag359, %tag83
  %431 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %432 = invoke {}* @cc_safe_fdefinition({}* %431)
          to label %normal-dest5132 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag878:                                           ; preds = %tag23
  %433 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 322), align 16
  %434 = invoke {}* @cc_safe_fdefinition({}* %433)
          to label %normal-dest5215 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag881:                                           ; preds = %tag642
  %435 = ptrtoint {}* %HEILMITTEL.16608 to i64
  %fixnum-tag-only52355483 = and i64 %435, 3
  %fixnump-test5236 = icmp eq i64 %fixnum-tag-only52355483, 0
  br i1 %fixnump-test5236, label %tag857, label %tag520

cleanup-lpad.loopexit:                            ; preds = %tag33, %normal-dest1001, %tag393, %normal-dest3012
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest4955, %tag834, %normal-dest3093, %tag411
  %lpad.loopexit6340 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %tag15, %normal-dest924, %tag20, %normal-dest942, %tag32, %normal-dest986, %tag62, %normal-dest1088, %tag78, %normal-dest1165, %tag104, %normal-dest1258, %tag126, %normal-dest1337, %tag155, %normal-dest1451, %tag157, %normal-dest1467, %tag183, %normal-dest1569, %tag192, %normal-dest1622, %tag199, %normal-dest1653, %tag236, %normal-dest2477, %tag245, %normal-dest2523, %tag262, %normal-dest2570, %tag272, %normal-dest2610, %tag293, %normal-dest2677, %tag330, %normal-dest2795, %tag331, %normal-dest2809, %tag357, %normal-dest2880, %tag375, %normal-dest2934, %tag388, %normal-dest2985, %tag407, %normal-dest3065, %tag419, %normal-dest3132, %tag420, %normal-dest3146, %tag428, %normal-dest3194, %tag451, %normal-dest3303, %tag452, %normal-dest3317, %tag465, %normal-dest3357, %tag491, %normal-dest3448, %tag520, %normal-dest3554, %tag548, %normal-dest3656, %tag559, %normal-dest3703, %tag576, %normal-dest3777, %normal-dest3779, %normal-dest3786, %tag591, %normal-dest3844, %tag608, %normal-dest3902, %tag612, %normal-dest3918, %tag624, %normal-dest3958, %tag625, %normal-dest3972, %tag627, %normal-dest3988, %tag636, %normal-dest4032, %tag643, %normal-dest4060, %tag678, %normal-dest4181, %tag686, %normal-dest4212, %tag690, %normal-dest4242, %tag691, %normal-dest4256, %tag695, %normal-dest4276, %tag699, %normal-dest4294, %tag703, %normal-dest4318, %tag706, %normal-dest4340, %tag710, %normal-dest4365, %tag716, %normal-dest4400, %tag730, %normal-dest4450, %tag735, %normal-dest4480, %tag747, %normal-dest4514, %tag754, %normal-dest4556, %tag769, %normal-dest4611, %normal-dest4613, %normal-dest4615, %normal-dest4622, %normal-dest4629, %normal-dest4636, %normal-dest4643, %normal-dest4645, %normal-dest4652, %normal-dest4664, %normal-dest4676, %tag777, %normal-dest4715, %tag809, %normal-dest4836, %tag814, %normal-dest4858, %tag816, %normal-dest4874, %tag819, %normal-dest4899, %tag840, %normal-dest4979, %tag842, %normal-dest4994, %tag847, %normal-dest5019, %tag872, %normal-dest5098, %tag877, %normal-dest5132, %normal-dest5134, %normal-dest5136, %normal-dest5143, %normal-dest5150, %normal-dest5157, %normal-dest5164, %normal-dest5166, %normal-dest5173, %normal-dest5185, %normal-dest5197, %tag878, %normal-dest5215
  %lpad.loopexit6343 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %normal-dest4103, %tag658, %normal-dest3814, %tag583, %normal-dest3162, %tag422, %normal-dest2649, %tag281, %normal-dest1554, %tag179
  %lpad.loopexit6345 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %10, %normal-dest1027, %normal-dest2422, %normal-dest2410, %normal-dest2403, %normal-dest2396, %normal-dest2389, %normal-dest2382, %normal-dest2375, %normal-dest2368, %normal-dest2361, %normal-dest2354, %normal-dest2347, %normal-dest2340, %normal-dest2333, %normal-dest2326, %normal-dest2319, %normal-dest2312, %normal-dest2305, %normal-dest2298, %normal-dest2291, %normal-dest2284, %normal-dest2277, %normal-dest2270, %normal-dest2263, %normal-dest2256, %normal-dest2249, %normal-dest2242, %normal-dest2235, %normal-dest2228, %normal-dest2221, %normal-dest2214, %normal-dest2207, %normal-dest2200, %normal-dest2193, %normal-dest2186, %normal-dest2179, %normal-dest2172, %normal-dest2165, %normal-dest2158, %normal-dest2151, %normal-dest2144, %normal-dest2137, %normal-dest2135, %normal-dest2133, %normal-dest2127, %normal-dest2115, %normal-dest2103, %normal-dest2096, %normal-dest2089, %normal-dest2082, %normal-dest2075, %normal-dest2068, %normal-dest2061, %normal-dest2054, %normal-dest2047, %normal-dest2040, %normal-dest2033, %normal-dest2026, %normal-dest2019, %normal-dest2012, %normal-dest2005, %normal-dest1998, %normal-dest1991, %normal-dest1984, %normal-dest1977, %normal-dest1970, %normal-dest1963, %normal-dest1956, %normal-dest1949, %normal-dest1942, %normal-dest1935, %normal-dest1928, %normal-dest1921, %normal-dest1914, %normal-dest1907, %normal-dest1900, %normal-dest1893, %normal-dest1886, %normal-dest1879, %normal-dest1872, %normal-dest1865, %normal-dest1858, %normal-dest1851, %normal-dest1844, %normal-dest1837, %normal-dest1830, %normal-dest1828, %normal-dest1826, %normal-dest1820, %normal-dest1808, %normal-dest1796, %normal-dest1789, %normal-dest1782, %normal-dest1775, %normal-dest1768, %normal-dest1761, %normal-dest1754, %normal-dest1747, %normal-dest1740, %normal-dest1733, %normal-dest1726, %normal-dest1719, %normal-dest1717, %normal-dest1715, %tag225, %tag139, %normal-dest1395, %tag40, %normal-dest886, %normal-dest
  %lpad.loopexit.split-lp6346 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit6340, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit6343, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit6345, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp6346, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %436 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 501), align 8
  %437 = invoke {}* @cc_safe_fdefinition({}* %436)
          to label %normal-dest886 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest886:                                   ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %437 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %438 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %437, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest889 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest889:                                   ; preds = %normal-dest886
  %.elt = extractvalue { {}*, i64 } %438, 0
  %.elt5375 = extractvalue { {}*, i64 } %438, 1
  %cond = icmp eq i64 %.elt5375, 0
  %439 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %439, {}* %.elt
  %440 = icmp eq {}* %"%DOLIST-VAR.1", %439
  br i1 %440, label %tag225, label %tag528.preheader

tag528.preheader:                                 ; preds = %normal-dest889
  br label %tag528

header-check-br912:                               ; preds = %tag359
  %gep917 = getelementptr inbounds i8, i8* %905, i64 -9
  %irc-bit-cast918 = bitcast i8* %gep917 to i64*
  %441 = load i64, i64* %irc-bit-cast918, align 8
  %442 = add i64 %441, -1309
  %443 = lshr i64 %442, 3
  %444 = shl i64 %442, 61
  %445 = or i64 %443, %444
  switch i64 %445, label %tag877 [
    i64 2, label %tag158
    i64 4, label %tag158
    i64 5, label %tag158
    i64 0, label %tag158
  ]

normal-dest924:                                   ; preds = %tag15
  %ptrtoint925 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint926 = add i64 %ptrtoint925, 7
  %entry-point-addr927 = inttoptr i64 %entry-point-addr-uint926 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point928 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr927, align 8
  %446 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point928({}* %18, i64 1, {}* %13, {}* null, {}* null, {}* null)
          to label %normal-dest931 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest931:                                   ; preds = %normal-dest924
  %.elt5435 = extractvalue { {}*, i64 } %446, 0
  %.elt5437 = extractvalue { {}*, i64 } %446, 1
  %cond5248 = icmp eq i64 %.elt5437, 0
  %447 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %SYSTEM.3 = select i1 %cond5248, {}* %447, {}* %.elt5435
  br label %tag67

normal-dest942:                                   ; preds = %tag20
  %ptrtoint943 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint944 = add i64 %ptrtoint943, 7
  %entry-point-addr945 = inttoptr i64 %entry-point-addr-uint944 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point946 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr945, align 8
  %448 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point946({}* %20, i64 2, {}* %O.0, {}* %.in5748, {}* null, {}* null)
          to label %normal-dest949 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest949:                                   ; preds = %normal-dest942
  %.elt5618 = extractvalue { {}*, i64 } %448, 0
  %.elt5620 = extractvalue { {}*, i64 } %448, 1
  %cond5281 = icmp eq i64 %.elt5620, 0
  %449 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in5757 = select i1 %cond5281, {}* %449, {}* %.elt5618
  %450 = bitcast {}* %.in5757 to i8*
  %"%SUBLIST112372.06598" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1248), align 16
  %451 = icmp eq {}* %"%SUBLIST112372.06598", %449
  %.val63126599 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object3439.06600 = select i1 %451, {}* %.val63126599, {}* %449
  %452 = icmp eq {}* %object3439.06600, %449
  %G113055.06601 = select i1 %452, {}* %.val63126599, {}* %449
  %453 = icmp eq {}* %G113055.06601, %449
  br i1 %453, label %tag338, label %tag325.lr.ph

tag325.lr.ph:                                     ; preds = %normal-dest949
  %454 = ptrtoint {}* %.in5757 to i64
  %single-float-tag-only4992 = and i64 %454, 7
  %fixnum-tag-only16875825 = and i64 %454, 3
  %fixnump-test1688 = icmp ne i64 %fixnum-tag-only16875825, 0
  %test2502 = icmp eq i64 %single-float-tag-only4992, 1
  %or.cond6245 = and i1 %fixnump-test1688, %test2502
  %gep2504 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast2505 = bitcast i8* %gep2504 to i64*
  br label %tag325

normal-dest986:                                   ; preds = %tag32
  %ptrtoint988 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint989 = add i64 %ptrtoint988, 7
  %entry-point-addr990 = inttoptr i64 %entry-point-addr-uint989 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point991 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr990, align 8
  %455 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point991({}* %28, i64 1, {}* %427, {}* null, {}* null, {}* null)
          to label %normal-dest994 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest994:                                   ; preds = %normal-dest986
  %.elt5696 = extractvalue { {}*, i64 } %455, 0
  %.elt5698 = extractvalue { {}*, i64 } %455, 1
  %cond5297 = icmp eq i64 %.elt5698, 0
  %456 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_HEILMITTEL.3 = select i1 %cond5297, {}* %456, {}* %.elt5696
  br label %tag67

normal-dest1001:                                  ; preds = %tag33
  %457 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %458 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %459 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %460 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1003 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint1004 = add i64 %ptrtoint1003, 7
  %entry-point-addr1005 = inttoptr i64 %entry-point-addr-uint1004 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1006 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1005, align 8
  %461 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1006({}* %30, i64 5, {}* %457, {}* %458, {}* %"%SUBLIST112372.06602", {}* %459, {}* %460)
          to label %normal-dest1009 unwind label %cleanup-lpad.loopexit

normal-dest1009:                                  ; preds = %normal-dest1001
  %.elt5836 = extractvalue { {}*, i64 } %461, 0
  %.elt5838 = extractvalue { {}*, i64 } %461, 1
  %cond5318 = icmp eq i64 %.elt5838, 0
  %462 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in5829 = select i1 %cond5318, {}* %462, {}* %.elt5836
  %.val6316.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag555

normal-dest1027:                                  ; preds = %tag40
  %463 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %464 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %465 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %466 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint4947 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint4948 = add i64 %ptrtoint4947, 7
  %entry-point-addr4949 = inttoptr i64 %entry-point-addr-uint4948 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4950 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4949, align 8
  %467 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4950({}* %34, i64 5, {}* %463, {}* %464, {}* %190, {}* %465, {}* %466)
          to label %normal-dest4953 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1061:                                  ; preds = %normal-dest1395
  call void @unreachableError()
  unreachable

normal-dest1088:                                  ; preds = %tag62
  %ptrtoint1091 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint1092 = add i64 %ptrtoint1091, 7
  %entry-point-addr1093 = inttoptr i64 %entry-point-addr-uint1092 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1094 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1093, align 8
  %468 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1094({}* %43, i64 2, {}* nonnull %.in5757, {}* nonnull %180, {}* null, {}* null)
          to label %normal-dest1097 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1097:                                  ; preds = %normal-dest1088
  %.elt5817 = extractvalue { {}*, i64 } %468, 0
  %.elt5819 = extractvalue { {}*, i64 } %468, 1
  %cond5315 = icmp eq i64 %.elt5819, 0
  %469 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113012.1 = select i1 %cond5315, {}* %469, {}* %.elt5817
  br label %tag353

header-check-br1127:                              ; preds = %tag341
  %irc-bit-cast1131 = bitcast {}* %176 to i8*
  %gep1132 = getelementptr inbounds i8, i8* %irc-bit-cast1131, i64 -9
  %irc-bit-cast1133 = bitcast i8* %gep1132 to i64*
  %470 = load i64, i64* %irc-bit-cast1133, align 8
  %471 = add i64 %470, -1309
  %472 = lshr i64 %471, 3
  %473 = shl i64 %471, 61
  %474 = or i64 %472, %473
  switch i64 %474, label %tag268 [
    i64 2, label %tag625
    i64 4, label %tag625
    i64 5, label %tag625
    i64 0, label %tag625
  ]

header-check-br1134:                              ; preds = %tag626
  %irc-bit-cast1138 = bitcast {}* %150 to i8*
  %gep1139 = getelementptr inbounds i8, i8* %irc-bit-cast1138, i64 -9
  %irc-bit-cast1140 = bitcast i8* %gep1139 to i64*
  %475 = load i64, i64* %irc-bit-cast1140, align 8
  %476 = add i64 %475, -1309
  %477 = lshr i64 %476, 3
  %478 = shl i64 %476, 61
  %479 = or i64 %477, %478
  switch i64 %479, label %tag110 [
    i64 2, label %tag157
    i64 4, label %tag157
    i64 5, label %tag157
    i64 0, label %tag157
  ]

normal-dest1165:                                  ; preds = %tag78
  %ptrtoint1166 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint1167 = add i64 %ptrtoint1166, 7
  %entry-point-addr1168 = inttoptr i64 %entry-point-addr-uint1167 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1169 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1168, align 8
  %480 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1169({}* %48, i64 2, {}* inttoptr (i64 4 to {}*), {}* %SYSTEM.16606, {}* null, {}* null)
          to label %normal-dest1172 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1172:                                  ; preds = %normal-dest1165
  %.elt5431 = extractvalue { {}*, i64 } %480, 0
  %.elt5433 = extractvalue { {}*, i64 } %480, 1
  %cond5247 = icmp eq i64 %.elt5433, 0
  %481 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %SYSTEM.4 = select i1 %cond5247, {}* %481, {}* %.elt5431
  br label %tag67

normal-dest1258:                                  ; preds = %tag104
  %ptrtoint1261 = ptrtoint {}* %56 to i64
  %entry-point-addr-uint1262 = add i64 %ptrtoint1261, 7
  %entry-point-addr1263 = inttoptr i64 %entry-point-addr-uint1262 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1264 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1263, align 8
  %482 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1264({}* %56, i64 2, {}* nonnull %.in5748, {}* nonnull %360, {}* null, {}* null)
          to label %normal-dest1267 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1267:                                  ; preds = %normal-dest1258
  %.elt5752 = extractvalue { {}*, i64 } %482, 0
  %.elt5754 = extractvalue { {}*, i64 } %482, 1
  %cond5307 = icmp eq i64 %.elt5754, 0
  %483 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112692.1 = select i1 %cond5307, {}* %483, {}* %.elt5752
  br label %tag655

header-check-br1295:                              ; preds = %tag553
  %irc-bit-cast1299 = bitcast {}* %339 to i8*
  %gep1300 = getelementptr inbounds i8, i8* %irc-bit-cast1299, i64 -9
  %irc-bit-cast1301 = bitcast i8* %gep1300 to i64*
  %484 = load i64, i64* %irc-bit-cast1301, align 8
  %485 = add i64 %484, -1309
  %486 = lshr i64 %485, 3
  %487 = shl i64 %485, 61
  %488 = or i64 %486, %487
  switch i64 %488, label %tag379 [
    i64 2, label %tag840
    i64 4, label %tag840
    i64 5, label %tag840
    i64 0, label %tag840
  ]

header-check-br1302:                              ; preds = %tag708
  %gep1307 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast1308 = bitcast i8* %gep1307 to i64*
  %489 = load i64, i64* %irc-bit-cast1308, align 8
  %490 = add i64 %489, -1309
  %491 = lshr i64 %490, 3
  %492 = shl i64 %490, 61
  %493 = or i64 %491, %492
  switch i64 %493, label %tag462 [
    i64 2, label %tag310
    i64 4, label %tag310
    i64 5, label %tag310
    i64 0, label %tag310
  ]

header-check-br1313:                              ; preds = %tag674
  %irc-bit-cast1317 = bitcast {}* %289 to i8*
  %gep1318 = getelementptr inbounds i8, i8* %irc-bit-cast1317, i64 -9
  %irc-bit-cast1319 = bitcast i8* %gep1318 to i64*
  %494 = load i64, i64* %irc-bit-cast1319, align 8
  %495 = add i64 %494, -1309
  %496 = lshr i64 %495, 3
  %497 = shl i64 %495, 61
  %498 = or i64 %496, %497
  switch i64 %498, label %tag395 [
    i64 2, label %tag678
    i64 4, label %tag678
    i64 5, label %tag678
    i64 0, label %tag678
  ]

normal-dest1337:                                  ; preds = %tag126
  %ptrtoint1338 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint1339 = add i64 %ptrtoint1338, 7
  %entry-point-addr1340 = inttoptr i64 %entry-point-addr-uint1339 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1341 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1340, align 8
  %499 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1341({}* %66, i64 1, {}* %52, {}* null, {}* null, {}* null)
          to label %normal-dest1344 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1344:                                  ; preds = %normal-dest1337
  %.elt5480 = extractvalue { {}*, i64 } %499, 0
  %.elt5482 = extractvalue { {}*, i64 } %499, 1
  %cond5258 = icmp eq i64 %.elt5482, 0
  %500 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %VORSCHLAG.3 = select i1 %cond5258, {}* %500, {}* %.elt5480
  br label %tag67

header-check-br1386:                              ; preds = %tag839
  %gep1391 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast1392 = bitcast i8* %gep1391 to i64*
  %501 = load i64, i64* %irc-bit-cast1392, align 8
  %502 = add i64 %501, -1309
  %503 = lshr i64 %502, 3
  %504 = shl i64 %502, 61
  %505 = or i64 %503, %504
  switch i64 %505, label %tag307 [
    i64 2, label %tag13
    i64 4, label %tag13
    i64 5, label %tag13
    i64 0, label %tag13
  ]

normal-dest1395:                                  ; preds = %tag139
  %506 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %507 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %508 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %509 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %ptrtoint1055 = ptrtoint {}* %69 to i64
  %entry-point-addr-uint1056 = add i64 %ptrtoint1055, 7
  %entry-point-addr1057 = inttoptr i64 %entry-point-addr-uint1056 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1058 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1057, align 8
  %510 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1058({}* %69, i64 5, {}* %506, {}* %507, {}* %"%SUBLIST112372.06602", {}* %508, {}* %509)
          to label %normal-dest1061 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

header-check-br1443:                              ; preds = %tag370
  %irc-bit-cast1447 = bitcast {}* %59 to i8*
  %gep1448 = getelementptr inbounds i8, i8* %irc-bit-cast1447, i64 -9
  %irc-bit-cast1449 = bitcast i8* %gep1448 to i64*
  %511 = load i64, i64* %irc-bit-cast1449, align 8
  %512 = add i64 %511, -1309
  %513 = lshr i64 %512, 3
  %514 = shl i64 %512, 61
  %515 = or i64 %513, %514
  switch i64 %515, label %tag334 [
    i64 2, label %tag816
    i64 4, label %tag816
    i64 5, label %tag816
    i64 0, label %tag816
  ]

normal-dest1451:                                  ; preds = %tag155
  %ptrtoint1452 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint1453 = add i64 %ptrtoint1452, 7
  %entry-point-addr1454 = inttoptr i64 %entry-point-addr-uint1453 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1455 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1454, align 8
  %516 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1455({}* %77, i64 1, {}* %254, {}* null, {}* null, {}* null)
          to label %normal-dest1458 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1458:                                  ; preds = %normal-dest1451
  %.elt5705 = extractvalue { {}*, i64 } %516, 0
  %.elt5707 = extractvalue { {}*, i64 } %516, 1
  %cond5299 = icmp eq i64 %.elt5707, 0
  %517 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_PROPAGIERT.3 = select i1 %cond5299, {}* %517, {}* %.elt5705
  br label %tag67

normal-dest1467:                                  ; preds = %tag157
  %ptrtoint1470 = ptrtoint {}* %79 to i64
  %entry-point-addr-uint1471 = add i64 %ptrtoint1470, 7
  %entry-point-addr1472 = inttoptr i64 %entry-point-addr-uint1471 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1473 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1472, align 8
  %518 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1473({}* %79, i64 2, {}* nonnull %.in, {}* nonnull %150, {}* null, {}* null)
          to label %normal-dest1476 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1476:                                  ; preds = %normal-dest1467
  %.elt5554 = extractvalue { {}*, i64 } %518, 0
  %.elt5556 = extractvalue { {}*, i64 } %518, 1
  %cond5271 = icmp eq i64 %.elt5556, 0
  %519 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113311.1 = select i1 %cond5271, {}* %519, {}* %.elt5554
  br label %tag446

normal-dest1554:                                  ; preds = %tag179
  %520 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %521 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %522 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %523 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1556 = ptrtoint {}* %84 to i64
  %entry-point-addr-uint1557 = add i64 %ptrtoint1556, 7
  %entry-point-addr1558 = inttoptr i64 %entry-point-addr-uint1557 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1559 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1558, align 8
  %524 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1559({}* %84, i64 5, {}* %520, {}* %521, {}* %"%DOLIST-VAR.06649", {}* %522, {}* %523)
          to label %normal-dest1562 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1562:                                  ; preds = %normal-dest1554
  %.elt5861 = extractvalue { {}*, i64 } %524, 0
  %.elt5863 = extractvalue { {}*, i64 } %524, 1
  %cond5324 = icmp eq i64 %.elt5863, 0
  %525 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %O.1 = select i1 %cond5324, {}* %525, {}* %.elt5861
  br label %tag460

normal-dest1569:                                  ; preds = %tag183
  %ptrtoint1570 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint1571 = add i64 %ptrtoint1570, 7
  %entry-point-addr1572 = inttoptr i64 %entry-point-addr-uint1571 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1573 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1572, align 8
  %526 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1573({}* %86, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_PROPAGIERT.16616, {}* null, {}* null)
          to label %normal-dest1576 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1576:                                  ; preds = %normal-dest1569
  %.elt5701 = extractvalue { {}*, i64 } %526, 0
  %.elt5703 = extractvalue { {}*, i64 } %526, 1
  %cond5298 = icmp eq i64 %.elt5703, 0
  %527 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_PROPAGIERT.4 = select i1 %cond5298, {}* %527, {}* %.elt5701
  br label %tag67

header-check-br1605:                              ; preds = %tag766
  %irc-bit-cast1609 = bitcast {}* %98 to i8*
  %gep1610 = getelementptr inbounds i8, i8* %irc-bit-cast1609, i64 -9
  %irc-bit-cast1611 = bitcast i8* %gep1610 to i64*
  %528 = load i64, i64* %irc-bit-cast1611, align 8
  %529 = add i64 %528, -1309
  %530 = lshr i64 %529, 3
  %531 = shl i64 %529, 61
  %532 = or i64 %530, %531
  switch i64 %532, label %tag661 [
    i64 2, label %tag293
    i64 4, label %tag293
    i64 5, label %tag293
    i64 0, label %tag293
  ]

header-check-br1612:                              ; preds = %tag397
  %gep1617 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast1618 = bitcast i8* %gep1617 to i64*
  %533 = load i64, i64* %irc-bit-cast1618, align 8
  %534 = add i64 %533, -1309
  %535 = lshr i64 %534, 3
  %536 = shl i64 %534, 61
  %537 = or i64 %535, %536
  switch i64 %537, label %tag707 [
    i64 2, label %tag652
    i64 4, label %tag652
    i64 5, label %tag652
    i64 0, label %tag652
  ]

normal-dest1622:                                  ; preds = %tag192
  %538 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %539 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %540 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %541 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint1623 = ptrtoint {}* %88 to i64
  %entry-point-addr-uint1624 = add i64 %ptrtoint1623, 7
  %entry-point-addr1625 = inttoptr i64 %entry-point-addr-uint1624 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1626 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1625, align 8
  %542 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1626({}* %88, i64 5, {}* %538, {}* %539, {}* %"%DOLIST-VAR1028.06605", {}* %540, {}* %541)
          to label %normal-dest1629 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1629:                                  ; preds = %normal-dest1622
  %.elt5848 = extractvalue { {}*, i64 } %542, 0
  %.elt5850 = extractvalue { {}*, i64 } %542, 1
  %cond5321 = icmp eq i64 %.elt5850, 0
  %543 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in5747 = select i1 %cond5321, {}* %543, {}* %.elt5848
  br label %tag368

normal-dest1653:                                  ; preds = %tag199
  %ptrtoint1656 = ptrtoint {}* %97 to i64
  %entry-point-addr-uint1657 = add i64 %ptrtoint1656, 7
  %entry-point-addr1658 = inttoptr i64 %entry-point-addr-uint1657 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1659 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1658, align 8
  %544 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1659({}* %97, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_PROGRAMM.16623, {}* null, {}* null)
          to label %normal-dest1662 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1662:                                  ; preds = %normal-dest1653
  %.elt5674 = extractvalue { {}*, i64 } %544, 0
  %.elt5676 = extractvalue { {}*, i64 } %544, 1
  %cond5292 = icmp eq i64 %.elt5676, 0
  %545 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_PROGRAMM.3 = select i1 %cond5292, {}* %545, {}* %.elt5674
  br label %tag67

normal-dest1715:                                  ; preds = %tag225
  %546 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %547 = invoke {}* @cc_safe_fdefinition({}* %546)
          to label %normal-dest1717 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1717:                                  ; preds = %normal-dest1715
  %548 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %549 = invoke {}* @cc_safe_fdefinition({}* %548)
          to label %normal-dest1719 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1719:                                  ; preds = %normal-dest1717
  %550 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1256), align 16
  %ptrtoint1720 = ptrtoint {}* %549 to i64
  %entry-point-addr-uint1721 = add i64 %ptrtoint1720, 7
  %entry-point-addr1722 = inttoptr i64 %entry-point-addr-uint1721 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1723 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1722, align 8
  %551 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1723({}* %549, i64 1, {}* %550, {}* null, {}* null, {}* null)
          to label %normal-dest1726 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1726:                                  ; preds = %normal-dest1719
  %.elt5865 = extractvalue { {}*, i64 } %551, 0
  %.elt5867 = extractvalue { {}*, i64 } %551, 1
  %cond5325 = icmp eq i64 %.elt5867, 0
  %552 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112587.0 = select i1 %cond5325, {}* %552, {}* %.elt5865
  %553 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %554 = invoke {}* @cc_safe_fdefinition({}* %553)
          to label %normal-dest1733 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1733:                                  ; preds = %normal-dest1726
  %ptrtoint1734 = ptrtoint {}* %554 to i64
  %entry-point-addr-uint1735 = add i64 %ptrtoint1734, 7
  %entry-point-addr1736 = inttoptr i64 %entry-point-addr-uint1735 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1737 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1736, align 8
  %555 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1737({}* %554, i64 1, {}* %GESAMT.1.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1740 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1740:                                  ; preds = %normal-dest1733
  %.elt5869 = extractvalue { {}*, i64 } %555, 0
  %.elt5871 = extractvalue { {}*, i64 } %555, 1
  %cond5326 = icmp eq i64 %.elt5871, 0
  %556 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112588.0 = select i1 %cond5326, {}* %556, {}* %.elt5869
  %557 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %558 = invoke {}* @cc_safe_fdefinition({}* %557)
          to label %normal-dest1747 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1747:                                  ; preds = %normal-dest1740
  %559 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1258), align 16
  %ptrtoint1748 = ptrtoint {}* %558 to i64
  %entry-point-addr-uint1749 = add i64 %ptrtoint1748, 7
  %entry-point-addr1750 = inttoptr i64 %entry-point-addr-uint1749 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1751 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1750, align 8
  %560 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1751({}* %558, i64 1, {}* %559, {}* null, {}* null, {}* null)
          to label %normal-dest1754 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1754:                                  ; preds = %normal-dest1747
  %.elt5873 = extractvalue { {}*, i64 } %560, 0
  %.elt5875 = extractvalue { {}*, i64 } %560, 1
  %cond5327 = icmp eq i64 %.elt5875, 0
  %561 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112589.0 = select i1 %cond5327, {}* %561, {}* %.elt5873
  %562 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %563 = invoke {}* @cc_safe_fdefinition({}* %562)
          to label %normal-dest1761 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1761:                                  ; preds = %normal-dest1754
  %564 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1079), align 8
  %ptrtoint1762 = ptrtoint {}* %563 to i64
  %entry-point-addr-uint1763 = add i64 %ptrtoint1762, 7
  %entry-point-addr1764 = inttoptr i64 %entry-point-addr-uint1763 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1765 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1764, align 8
  %565 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1765({}* %563, i64 1, {}* %564, {}* null, {}* null, {}* null)
          to label %normal-dest1768 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1768:                                  ; preds = %normal-dest1761
  %.elt5877 = extractvalue { {}*, i64 } %565, 0
  %.elt5879 = extractvalue { {}*, i64 } %565, 1
  %cond5328 = icmp eq i64 %.elt5879, 0
  %566 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112590.0 = select i1 %cond5328, {}* %566, {}* %.elt5877
  %567 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %568 = invoke {}* @cc_safe_fdefinition({}* %567)
          to label %normal-dest1775 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1775:                                  ; preds = %normal-dest1768
  %ptrtoint1776 = ptrtoint {}* %568 to i64
  %entry-point-addr-uint1777 = add i64 %ptrtoint1776, 7
  %entry-point-addr1778 = inttoptr i64 %entry-point-addr-uint1777 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1779 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1778, align 8
  %569 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1779({}* %568, i64 1, {}* %OBJEKTE.0.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1782 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1782:                                  ; preds = %normal-dest1775
  %.elt5881 = extractvalue { {}*, i64 } %569, 0
  %.elt5883 = extractvalue { {}*, i64 } %569, 1
  %cond5329 = icmp eq i64 %.elt5883, 0
  %570 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112591.0 = select i1 %cond5329, {}* %570, {}* %.elt5881
  %571 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %572 = invoke {}* @cc_safe_fdefinition({}* %571)
          to label %normal-dest1789 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1789:                                  ; preds = %normal-dest1782
  %573 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1260), align 16
  %ptrtoint1790 = ptrtoint {}* %572 to i64
  %entry-point-addr-uint1791 = add i64 %ptrtoint1790, 7
  %entry-point-addr1792 = inttoptr i64 %entry-point-addr-uint1791 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1793 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1792, align 8
  %574 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1793({}* %572, i64 1, {}* %573, {}* null, {}* null, {}* null)
          to label %normal-dest1796 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1796:                                  ; preds = %normal-dest1789
  %.elt5885 = extractvalue { {}*, i64 } %574, 0
  %.elt5887 = extractvalue { {}*, i64 } %574, 1
  %cond5330 = icmp eq i64 %.elt5887, 0
  %575 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112592.0 = select i1 %cond5330, {}* %575, {}* %.elt5885
  %ptrtoint1802 = ptrtoint {}* %547 to i64
  %entry-point-addr-uint1803 = add i64 %ptrtoint1802, 7
  %entry-point-addr1804 = inttoptr i64 %entry-point-addr-uint1803 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1805 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1804, align 8
  %576 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1805({}* %547, i64 7, {}* %G112587.0, {}* %G112588.0, {}* %G112589.0, {}* %G112590.0, {}* %G112591.0, {}* %G112592.0, {}* %575)
          to label %normal-dest1808 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1808:                                  ; preds = %normal-dest1796
  %.elt5889 = extractvalue { {}*, i64 } %576, 0
  %.elt5891 = extractvalue { {}*, i64 } %576, 1
  %cond5331 = icmp eq i64 %.elt5891, 0
  %577 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112585.0 = select i1 %cond5331, {}* %577, {}* %.elt5889
  %ptrtoint1814 = ptrtoint {}* %107 to i64
  %entry-point-addr-uint1815 = add i64 %ptrtoint1814, 7
  %entry-point-addr1816 = inttoptr i64 %entry-point-addr-uint1815 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1817 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1816, align 8
  %578 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1817({}* %107, i64 1, {}* %G112585.0, {}* null, {}* null, {}* null)
          to label %normal-dest1820 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1820:                                  ; preds = %normal-dest1808
  %579 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %580 = invoke {}* @cc_safe_fdefinition({}* %579)
          to label %normal-dest1826 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1826:                                  ; preds = %normal-dest1820
  %581 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %582 = invoke {}* @cc_safe_fdefinition({}* %581)
          to label %normal-dest1828 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1828:                                  ; preds = %normal-dest1826
  %583 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %584 = invoke {}* @cc_safe_fdefinition({}* %583)
          to label %normal-dest1830 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1830:                                  ; preds = %normal-dest1828
  %585 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1262), align 16
  %ptrtoint1831 = ptrtoint {}* %584 to i64
  %entry-point-addr-uint1832 = add i64 %ptrtoint1831, 7
  %entry-point-addr1833 = inttoptr i64 %entry-point-addr-uint1832 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1834 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1833, align 8
  %586 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1834({}* %584, i64 1, {}* %585, {}* null, {}* null, {}* null)
          to label %normal-dest1837 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1837:                                  ; preds = %normal-dest1830
  %.elt5897 = extractvalue { {}*, i64 } %586, 0
  %.elt5899 = extractvalue { {}*, i64 } %586, 1
  %cond5332 = icmp eq i64 %.elt5899, 0
  %587 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112501.0 = select i1 %cond5332, {}* %587, {}* %.elt5897
  %588 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %589 = invoke {}* @cc_safe_fdefinition({}* %588)
          to label %normal-dest1844 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1844:                                  ; preds = %normal-dest1837
  %ptrtoint1845 = ptrtoint {}* %589 to i64
  %entry-point-addr-uint1846 = add i64 %ptrtoint1845, 7
  %entry-point-addr1847 = inttoptr i64 %entry-point-addr-uint1846 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1848 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1847, align 8
  %590 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1848({}* %589, i64 1, {}* %DYNAMISCH.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1851 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1851:                                  ; preds = %normal-dest1844
  %.elt5901 = extractvalue { {}*, i64 } %590, 0
  %.elt5903 = extractvalue { {}*, i64 } %590, 1
  %cond5333 = icmp eq i64 %.elt5903, 0
  %591 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112502.0 = select i1 %cond5333, {}* %591, {}* %.elt5901
  %592 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %593 = invoke {}* @cc_safe_fdefinition({}* %592)
          to label %normal-dest1858 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1858:                                  ; preds = %normal-dest1851
  %594 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1264), align 16
  %ptrtoint1859 = ptrtoint {}* %593 to i64
  %entry-point-addr-uint1860 = add i64 %ptrtoint1859, 7
  %entry-point-addr1861 = inttoptr i64 %entry-point-addr-uint1860 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1862 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1861, align 8
  %595 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1862({}* %593, i64 1, {}* %594, {}* null, {}* null, {}* null)
          to label %normal-dest1865 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1865:                                  ; preds = %normal-dest1858
  %.elt5905 = extractvalue { {}*, i64 } %595, 0
  %.elt5907 = extractvalue { {}*, i64 } %595, 1
  %cond5334 = icmp eq i64 %.elt5907, 0
  %596 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112503.0 = select i1 %cond5334, {}* %596, {}* %.elt5905
  %597 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %598 = invoke {}* @cc_safe_fdefinition({}* %597)
          to label %normal-dest1872 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1872:                                  ; preds = %normal-dest1865
  %ptrtoint1873 = ptrtoint {}* %598 to i64
  %entry-point-addr-uint1874 = add i64 %ptrtoint1873, 7
  %entry-point-addr1875 = inttoptr i64 %entry-point-addr-uint1874 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1876 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1875, align 8
  %599 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1876({}* %598, i64 1, {}* %NICHTS.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1879 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1879:                                  ; preds = %normal-dest1872
  %.elt5909 = extractvalue { {}*, i64 } %599, 0
  %.elt5911 = extractvalue { {}*, i64 } %599, 1
  %cond5335 = icmp eq i64 %.elt5911, 0
  %600 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112504.0 = select i1 %cond5335, {}* %600, {}* %.elt5909
  %601 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %602 = invoke {}* @cc_safe_fdefinition({}* %601)
          to label %normal-dest1886 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1886:                                  ; preds = %normal-dest1879
  %603 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1249), align 8
  %ptrtoint1887 = ptrtoint {}* %602 to i64
  %entry-point-addr-uint1888 = add i64 %ptrtoint1887, 7
  %entry-point-addr1889 = inttoptr i64 %entry-point-addr-uint1888 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1890 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1889, align 8
  %604 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1890({}* %602, i64 1, {}* %603, {}* null, {}* null, {}* null)
          to label %normal-dest1893 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1893:                                  ; preds = %normal-dest1886
  %.elt5913 = extractvalue { {}*, i64 } %604, 0
  %.elt5915 = extractvalue { {}*, i64 } %604, 1
  %cond5336 = icmp eq i64 %.elt5915, 0
  %605 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112505.0 = select i1 %cond5336, {}* %605, {}* %.elt5913
  %606 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %607 = invoke {}* @cc_safe_fdefinition({}* %606)
          to label %normal-dest1900 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1900:                                  ; preds = %normal-dest1893
  %ptrtoint1901 = ptrtoint {}* %607 to i64
  %entry-point-addr-uint1902 = add i64 %ptrtoint1901, 7
  %entry-point-addr1903 = inttoptr i64 %entry-point-addr-uint1902 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1904 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1903, align 8
  %608 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1904({}* %607, i64 1, {}* %SYSTEM.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1907 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1907:                                  ; preds = %normal-dest1900
  %.elt5917 = extractvalue { {}*, i64 } %608, 0
  %.elt5919 = extractvalue { {}*, i64 } %608, 1
  %cond5337 = icmp eq i64 %.elt5919, 0
  %609 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112506.0 = select i1 %cond5337, {}* %609, {}* %.elt5917
  %610 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %611 = invoke {}* @cc_safe_fdefinition({}* %610)
          to label %normal-dest1914 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1914:                                  ; preds = %normal-dest1907
  %612 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint1915 = ptrtoint {}* %611 to i64
  %entry-point-addr-uint1916 = add i64 %ptrtoint1915, 7
  %entry-point-addr1917 = inttoptr i64 %entry-point-addr-uint1916 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1918 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1917, align 8
  %613 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1918({}* %611, i64 1, {}* %612, {}* null, {}* null, {}* null)
          to label %normal-dest1921 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1921:                                  ; preds = %normal-dest1914
  %.elt5921 = extractvalue { {}*, i64 } %613, 0
  %.elt5923 = extractvalue { {}*, i64 } %613, 1
  %cond5338 = icmp eq i64 %.elt5923, 0
  %614 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112507.0 = select i1 %cond5338, {}* %614, {}* %.elt5921
  %615 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %616 = invoke {}* @cc_safe_fdefinition({}* %615)
          to label %normal-dest1928 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1928:                                  ; preds = %normal-dest1921
  %ptrtoint1929 = ptrtoint {}* %616 to i64
  %entry-point-addr-uint1930 = add i64 %ptrtoint1929, 7
  %entry-point-addr1931 = inttoptr i64 %entry-point-addr-uint1930 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1932 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1931, align 8
  %617 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1932({}* %616, i64 1, {}* %EINGABE.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1935 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1935:                                  ; preds = %normal-dest1928
  %.elt5925 = extractvalue { {}*, i64 } %617, 0
  %.elt5927 = extractvalue { {}*, i64 } %617, 1
  %cond5339 = icmp eq i64 %.elt5927, 0
  %618 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112508.0 = select i1 %cond5339, {}* %618, {}* %.elt5925
  %619 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %620 = invoke {}* @cc_safe_fdefinition({}* %619)
          to label %normal-dest1942 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1942:                                  ; preds = %normal-dest1935
  %621 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1251), align 8
  %ptrtoint1943 = ptrtoint {}* %620 to i64
  %entry-point-addr-uint1944 = add i64 %ptrtoint1943, 7
  %entry-point-addr1945 = inttoptr i64 %entry-point-addr-uint1944 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1946 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1945, align 8
  %622 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1946({}* %620, i64 1, {}* %621, {}* null, {}* null, {}* null)
          to label %normal-dest1949 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1949:                                  ; preds = %normal-dest1942
  %.elt5929 = extractvalue { {}*, i64 } %622, 0
  %.elt5931 = extractvalue { {}*, i64 } %622, 1
  %cond5340 = icmp eq i64 %.elt5931, 0
  %623 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112509.0 = select i1 %cond5340, {}* %623, {}* %.elt5929
  %624 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %625 = invoke {}* @cc_safe_fdefinition({}* %624)
          to label %normal-dest1956 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1956:                                  ; preds = %normal-dest1949
  %ptrtoint1957 = ptrtoint {}* %625 to i64
  %entry-point-addr-uint1958 = add i64 %ptrtoint1957, 7
  %entry-point-addr1959 = inttoptr i64 %entry-point-addr-uint1958 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1960 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1959, align 8
  %626 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1960({}* %625, i64 1, {}* %ERERBT.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1963 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1963:                                  ; preds = %normal-dest1956
  %.elt5933 = extractvalue { {}*, i64 } %626, 0
  %.elt5935 = extractvalue { {}*, i64 } %626, 1
  %cond5341 = icmp eq i64 %.elt5935, 0
  %627 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112510.0 = select i1 %cond5341, {}* %627, {}* %.elt5933
  %628 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %629 = invoke {}* @cc_safe_fdefinition({}* %628)
          to label %normal-dest1970 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1970:                                  ; preds = %normal-dest1963
  %630 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint1971 = ptrtoint {}* %629 to i64
  %entry-point-addr-uint1972 = add i64 %ptrtoint1971, 7
  %entry-point-addr1973 = inttoptr i64 %entry-point-addr-uint1972 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1974 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1973, align 8
  %631 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1974({}* %629, i64 1, {}* %630, {}* null, {}* null, {}* null)
          to label %normal-dest1977 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1977:                                  ; preds = %normal-dest1970
  %.elt5937 = extractvalue { {}*, i64 } %631, 0
  %.elt5939 = extractvalue { {}*, i64 } %631, 1
  %cond5342 = icmp eq i64 %.elt5939, 0
  %632 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112511.0 = select i1 %cond5342, {}* %632, {}* %.elt5937
  %633 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %634 = invoke {}* @cc_safe_fdefinition({}* %633)
          to label %normal-dest1984 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1984:                                  ; preds = %normal-dest1977
  %ptrtoint1985 = ptrtoint {}* %634 to i64
  %entry-point-addr-uint1986 = add i64 %ptrtoint1985, 7
  %entry-point-addr1987 = inttoptr i64 %entry-point-addr-uint1986 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1988 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1987, align 8
  %635 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1988({}* %634, i64 1, {}* %INVERS.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest1991 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1991:                                  ; preds = %normal-dest1984
  %.elt5941 = extractvalue { {}*, i64 } %635, 0
  %.elt5943 = extractvalue { {}*, i64 } %635, 1
  %cond5343 = icmp eq i64 %.elt5943, 0
  %636 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112512.0 = select i1 %cond5343, {}* %636, {}* %.elt5941
  %637 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %638 = invoke {}* @cc_safe_fdefinition({}* %637)
          to label %normal-dest1998 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1998:                                  ; preds = %normal-dest1991
  %639 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 530), align 16
  %ptrtoint1999 = ptrtoint {}* %638 to i64
  %entry-point-addr-uint2000 = add i64 %ptrtoint1999, 7
  %entry-point-addr2001 = inttoptr i64 %entry-point-addr-uint2000 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2002 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2001, align 8
  %640 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2002({}* %638, i64 1, {}* %639, {}* null, {}* null, {}* null)
          to label %normal-dest2005 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2005:                                  ; preds = %normal-dest1998
  %.elt5945 = extractvalue { {}*, i64 } %640, 0
  %.elt5947 = extractvalue { {}*, i64 } %640, 1
  %cond5344 = icmp eq i64 %.elt5947, 0
  %641 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112513.0 = select i1 %cond5344, {}* %641, {}* %.elt5945
  %642 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %643 = invoke {}* @cc_safe_fdefinition({}* %642)
          to label %normal-dest2012 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2012:                                  ; preds = %normal-dest2005
  %ptrtoint2013 = ptrtoint {}* %643 to i64
  %entry-point-addr-uint2014 = add i64 %ptrtoint2013, 7
  %entry-point-addr2015 = inttoptr i64 %entry-point-addr-uint2014 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2016 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2015, align 8
  %644 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2016({}* %643, i64 1, {}* %PROGRAMM.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2019 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2019:                                  ; preds = %normal-dest2012
  %.elt5949 = extractvalue { {}*, i64 } %644, 0
  %.elt5951 = extractvalue { {}*, i64 } %644, 1
  %cond5345 = icmp eq i64 %.elt5951, 0
  %645 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112514.0 = select i1 %cond5345, {}* %645, {}* %.elt5949
  %646 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %647 = invoke {}* @cc_safe_fdefinition({}* %646)
          to label %normal-dest2026 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2026:                                  ; preds = %normal-dest2019
  %648 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint2027 = ptrtoint {}* %647 to i64
  %entry-point-addr-uint2028 = add i64 %ptrtoint2027, 7
  %entry-point-addr2029 = inttoptr i64 %entry-point-addr-uint2028 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2030 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2029, align 8
  %649 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2030({}* %647, i64 1, {}* %648, {}* null, {}* null, {}* null)
          to label %normal-dest2033 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2033:                                  ; preds = %normal-dest2026
  %.elt5953 = extractvalue { {}*, i64 } %649, 0
  %.elt5955 = extractvalue { {}*, i64 } %649, 1
  %cond5346 = icmp eq i64 %.elt5955, 0
  %650 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112515.0 = select i1 %cond5346, {}* %650, {}* %.elt5953
  %651 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %652 = invoke {}* @cc_safe_fdefinition({}* %651)
          to label %normal-dest2040 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2040:                                  ; preds = %normal-dest2033
  %ptrtoint2041 = ptrtoint {}* %652 to i64
  %entry-point-addr-uint2042 = add i64 %ptrtoint2041, 7
  %entry-point-addr2043 = inttoptr i64 %entry-point-addr-uint2042 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2044 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2043, align 8
  %653 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2044({}* %652, i64 1, {}* %VORSCHLAG.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2047 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2047:                                  ; preds = %normal-dest2040
  %.elt5957 = extractvalue { {}*, i64 } %653, 0
  %.elt5959 = extractvalue { {}*, i64 } %653, 1
  %cond5347 = icmp eq i64 %.elt5959, 0
  %654 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112516.0 = select i1 %cond5347, {}* %654, {}* %.elt5957
  %655 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %656 = invoke {}* @cc_safe_fdefinition({}* %655)
          to label %normal-dest2054 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2054:                                  ; preds = %normal-dest2047
  %657 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint2055 = ptrtoint {}* %656 to i64
  %entry-point-addr-uint2056 = add i64 %ptrtoint2055, 7
  %entry-point-addr2057 = inttoptr i64 %entry-point-addr-uint2056 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2058 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2057, align 8
  %658 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2058({}* %656, i64 1, {}* %657, {}* null, {}* null, {}* null)
          to label %normal-dest2061 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2061:                                  ; preds = %normal-dest2054
  %.elt5961 = extractvalue { {}*, i64 } %658, 0
  %.elt5963 = extractvalue { {}*, i64 } %658, 1
  %cond5348 = icmp eq i64 %.elt5963, 0
  %659 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112517.0 = select i1 %cond5348, {}* %659, {}* %.elt5961
  %660 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %661 = invoke {}* @cc_safe_fdefinition({}* %660)
          to label %normal-dest2068 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2068:                                  ; preds = %normal-dest2061
  %ptrtoint2069 = ptrtoint {}* %661 to i64
  %entry-point-addr-uint2070 = add i64 %ptrtoint2069, 7
  %entry-point-addr2071 = inttoptr i64 %entry-point-addr-uint2070 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2072 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2071, align 8
  %662 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2072({}* %661, i64 1, {}* %HEILMITTEL.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2075 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2075:                                  ; preds = %normal-dest2068
  %.elt5965 = extractvalue { {}*, i64 } %662, 0
  %.elt5967 = extractvalue { {}*, i64 } %662, 1
  %cond5349 = icmp eq i64 %.elt5967, 0
  %663 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112518.0 = select i1 %cond5349, {}* %663, {}* %.elt5965
  %664 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %665 = invoke {}* @cc_safe_fdefinition({}* %664)
          to label %normal-dest2082 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2082:                                  ; preds = %normal-dest2075
  %666 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 532), align 16
  %ptrtoint2083 = ptrtoint {}* %665 to i64
  %entry-point-addr-uint2084 = add i64 %ptrtoint2083, 7
  %entry-point-addr2085 = inttoptr i64 %entry-point-addr-uint2084 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2086 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2085, align 8
  %667 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2086({}* %665, i64 1, {}* %666, {}* null, {}* null, {}* null)
          to label %normal-dest2089 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2089:                                  ; preds = %normal-dest2082
  %.elt5969 = extractvalue { {}*, i64 } %667, 0
  %.elt5971 = extractvalue { {}*, i64 } %667, 1
  %cond5350 = icmp eq i64 %.elt5971, 0
  %668 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112519.0 = select i1 %cond5350, {}* %668, {}* %.elt5969
  %669 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %670 = invoke {}* @cc_safe_fdefinition({}* %669)
          to label %normal-dest2096 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2096:                                  ; preds = %normal-dest2089
  %ptrtoint2097 = ptrtoint {}* %670 to i64
  %entry-point-addr-uint2098 = add i64 %ptrtoint2097, 7
  %entry-point-addr2099 = inttoptr i64 %entry-point-addr-uint2098 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2100 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2099, align 8
  %671 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2100({}* %670, i64 1, {}* %PROPAGIERT.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2103 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2103:                                  ; preds = %normal-dest2096
  %.elt5973 = extractvalue { {}*, i64 } %671, 0
  %.elt5975 = extractvalue { {}*, i64 } %671, 1
  %cond5351 = icmp eq i64 %.elt5975, 0
  %672 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112520.0 = select i1 %cond5351, {}* %672, {}* %.elt5973
  %ptrtoint2109 = ptrtoint {}* %582 to i64
  %entry-point-addr-uint2110 = add i64 %ptrtoint2109, 7
  %entry-point-addr2111 = inttoptr i64 %entry-point-addr-uint2110 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2112 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2111, align 8
  %673 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2112({}* %582, i64 21, {}* %G112501.0, {}* %G112502.0, {}* %G112503.0, {}* %G112504.0, {}* %G112505.0, {}* %G112506.0, {}* %G112507.0, {}* %G112508.0, {}* %G112509.0, {}* %G112510.0, {}* %G112511.0, {}* %G112512.0, {}* %G112513.0, {}* %G112514.0, {}* %G112515.0, {}* %G112516.0, {}* %G112517.0, {}* %G112518.0, {}* %G112519.0, {}* %G112520.0, {}* %672)
          to label %normal-dest2115 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2115:                                  ; preds = %normal-dest2103
  %.elt5977 = extractvalue { {}*, i64 } %673, 0
  %.elt5979 = extractvalue { {}*, i64 } %673, 1
  %cond5352 = icmp eq i64 %.elt5979, 0
  %674 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112499.0 = select i1 %cond5352, {}* %674, {}* %.elt5977
  %ptrtoint2121 = ptrtoint {}* %580 to i64
  %entry-point-addr-uint2122 = add i64 %ptrtoint2121, 7
  %entry-point-addr2123 = inttoptr i64 %entry-point-addr-uint2122 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2124 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2123, align 8
  %675 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2124({}* %580, i64 1, {}* %G112499.0, {}* null, {}* null, {}* null)
          to label %normal-dest2127 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2127:                                  ; preds = %normal-dest2115
  %676 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 343), align 8
  %677 = invoke {}* @cc_safe_fdefinition({}* %676)
          to label %normal-dest2133 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2133:                                  ; preds = %normal-dest2127
  %678 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %679 = invoke {}* @cc_safe_fdefinition({}* %678)
          to label %normal-dest2135 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2135:                                  ; preds = %normal-dest2133
  %680 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %681 = invoke {}* @cc_safe_fdefinition({}* %680)
          to label %normal-dest2137 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2137:                                  ; preds = %normal-dest2135
  %682 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1266), align 16
  %ptrtoint2138 = ptrtoint {}* %681 to i64
  %entry-point-addr-uint2139 = add i64 %ptrtoint2138, 7
  %entry-point-addr2140 = inttoptr i64 %entry-point-addr-uint2139 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2141 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2140, align 8
  %683 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2141({}* %681, i64 1, {}* %682, {}* null, {}* null, {}* null)
          to label %normal-dest2144 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2144:                                  ; preds = %normal-dest2137
  %.elt5985 = extractvalue { {}*, i64 } %683, 0
  %.elt5987 = extractvalue { {}*, i64 } %683, 1
  %cond5353 = icmp eq i64 %.elt5987, 0
  %684 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112415.0 = select i1 %cond5353, {}* %684, {}* %.elt5985
  %685 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %686 = invoke {}* @cc_safe_fdefinition({}* %685)
          to label %normal-dest2151 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2151:                                  ; preds = %normal-dest2144
  %ptrtoint2152 = ptrtoint {}* %686 to i64
  %entry-point-addr-uint2153 = add i64 %ptrtoint2152, 7
  %entry-point-addr2154 = inttoptr i64 %entry-point-addr-uint2153 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2155 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2154, align 8
  %687 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2155({}* %686, i64 1, {}* %STATISCH.3.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2158 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2158:                                  ; preds = %normal-dest2151
  %.elt5989 = extractvalue { {}*, i64 } %687, 0
  %.elt5991 = extractvalue { {}*, i64 } %687, 1
  %cond5354 = icmp eq i64 %.elt5991, 0
  %688 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112416.0 = select i1 %cond5354, {}* %688, {}* %.elt5989
  %689 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %690 = invoke {}* @cc_safe_fdefinition({}* %689)
          to label %normal-dest2165 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2165:                                  ; preds = %normal-dest2158
  %691 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1264), align 16
  %ptrtoint2166 = ptrtoint {}* %690 to i64
  %entry-point-addr-uint2167 = add i64 %ptrtoint2166, 7
  %entry-point-addr2168 = inttoptr i64 %entry-point-addr-uint2167 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2169 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2168, align 8
  %692 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2169({}* %690, i64 1, {}* %691, {}* null, {}* null, {}* null)
          to label %normal-dest2172 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2172:                                  ; preds = %normal-dest2165
  %.elt5993 = extractvalue { {}*, i64 } %692, 0
  %.elt5995 = extractvalue { {}*, i64 } %692, 1
  %cond5355 = icmp eq i64 %.elt5995, 0
  %693 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112417.0 = select i1 %cond5355, {}* %693, {}* %.elt5993
  %694 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %695 = invoke {}* @cc_safe_fdefinition({}* %694)
          to label %normal-dest2179 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2179:                                  ; preds = %normal-dest2172
  %ptrtoint2180 = ptrtoint {}* %695 to i64
  %entry-point-addr-uint2181 = add i64 %ptrtoint2180, 7
  %entry-point-addr2182 = inttoptr i64 %entry-point-addr-uint2181 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2183 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2182, align 8
  %696 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2183({}* %695, i64 1, {}* %S_NICHTS.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2186 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2186:                                  ; preds = %normal-dest2179
  %.elt5997 = extractvalue { {}*, i64 } %696, 0
  %.elt5999 = extractvalue { {}*, i64 } %696, 1
  %cond5356 = icmp eq i64 %.elt5999, 0
  %697 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112418.0 = select i1 %cond5356, {}* %697, {}* %.elt5997
  %698 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %699 = invoke {}* @cc_safe_fdefinition({}* %698)
          to label %normal-dest2193 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2193:                                  ; preds = %normal-dest2186
  %700 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1249), align 8
  %ptrtoint2194 = ptrtoint {}* %699 to i64
  %entry-point-addr-uint2195 = add i64 %ptrtoint2194, 7
  %entry-point-addr2196 = inttoptr i64 %entry-point-addr-uint2195 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2197 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2196, align 8
  %701 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2197({}* %699, i64 1, {}* %700, {}* null, {}* null, {}* null)
          to label %normal-dest2200 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2200:                                  ; preds = %normal-dest2193
  %.elt6001 = extractvalue { {}*, i64 } %701, 0
  %.elt6003 = extractvalue { {}*, i64 } %701, 1
  %cond5357 = icmp eq i64 %.elt6003, 0
  %702 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112419.0 = select i1 %cond5357, {}* %702, {}* %.elt6001
  %703 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %704 = invoke {}* @cc_safe_fdefinition({}* %703)
          to label %normal-dest2207 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2207:                                  ; preds = %normal-dest2200
  %ptrtoint2208 = ptrtoint {}* %704 to i64
  %entry-point-addr-uint2209 = add i64 %ptrtoint2208, 7
  %entry-point-addr2210 = inttoptr i64 %entry-point-addr-uint2209 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2211 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2210, align 8
  %705 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2211({}* %704, i64 1, {}* %S_SYSTEM.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2214 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2214:                                  ; preds = %normal-dest2207
  %.elt6005 = extractvalue { {}*, i64 } %705, 0
  %.elt6007 = extractvalue { {}*, i64 } %705, 1
  %cond5358 = icmp eq i64 %.elt6007, 0
  %706 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112420.0 = select i1 %cond5358, {}* %706, {}* %.elt6005
  %707 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %708 = invoke {}* @cc_safe_fdefinition({}* %707)
          to label %normal-dest2221 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2221:                                  ; preds = %normal-dest2214
  %709 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 226), align 16
  %ptrtoint2222 = ptrtoint {}* %708 to i64
  %entry-point-addr-uint2223 = add i64 %ptrtoint2222, 7
  %entry-point-addr2224 = inttoptr i64 %entry-point-addr-uint2223 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2225 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2224, align 8
  %710 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2225({}* %708, i64 1, {}* %709, {}* null, {}* null, {}* null)
          to label %normal-dest2228 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2228:                                  ; preds = %normal-dest2221
  %.elt6009 = extractvalue { {}*, i64 } %710, 0
  %.elt6011 = extractvalue { {}*, i64 } %710, 1
  %cond5359 = icmp eq i64 %.elt6011, 0
  %711 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112421.0 = select i1 %cond5359, {}* %711, {}* %.elt6009
  %712 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %713 = invoke {}* @cc_safe_fdefinition({}* %712)
          to label %normal-dest2235 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2235:                                  ; preds = %normal-dest2228
  %ptrtoint2236 = ptrtoint {}* %713 to i64
  %entry-point-addr-uint2237 = add i64 %ptrtoint2236, 7
  %entry-point-addr2238 = inttoptr i64 %entry-point-addr-uint2237 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2239 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2238, align 8
  %714 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2239({}* %713, i64 1, {}* %S_EINGABE.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2242 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2242:                                  ; preds = %normal-dest2235
  %.elt6013 = extractvalue { {}*, i64 } %714, 0
  %.elt6015 = extractvalue { {}*, i64 } %714, 1
  %cond5360 = icmp eq i64 %.elt6015, 0
  %715 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112422.0 = select i1 %cond5360, {}* %715, {}* %.elt6013
  %716 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %717 = invoke {}* @cc_safe_fdefinition({}* %716)
          to label %normal-dest2249 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2249:                                  ; preds = %normal-dest2242
  %718 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1251), align 8
  %ptrtoint2250 = ptrtoint {}* %717 to i64
  %entry-point-addr-uint2251 = add i64 %ptrtoint2250, 7
  %entry-point-addr2252 = inttoptr i64 %entry-point-addr-uint2251 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2253 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2252, align 8
  %719 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2253({}* %717, i64 1, {}* %718, {}* null, {}* null, {}* null)
          to label %normal-dest2256 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2256:                                  ; preds = %normal-dest2249
  %.elt6017 = extractvalue { {}*, i64 } %719, 0
  %.elt6019 = extractvalue { {}*, i64 } %719, 1
  %cond5361 = icmp eq i64 %.elt6019, 0
  %720 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112423.0 = select i1 %cond5361, {}* %720, {}* %.elt6017
  %721 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %722 = invoke {}* @cc_safe_fdefinition({}* %721)
          to label %normal-dest2263 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2263:                                  ; preds = %normal-dest2256
  %ptrtoint2264 = ptrtoint {}* %722 to i64
  %entry-point-addr-uint2265 = add i64 %ptrtoint2264, 7
  %entry-point-addr2266 = inttoptr i64 %entry-point-addr-uint2265 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2267 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2266, align 8
  %723 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2267({}* %722, i64 1, {}* %S_ERERBT.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2270 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2270:                                  ; preds = %normal-dest2263
  %.elt6021 = extractvalue { {}*, i64 } %723, 0
  %.elt6023 = extractvalue { {}*, i64 } %723, 1
  %cond5362 = icmp eq i64 %.elt6023, 0
  %724 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112424.0 = select i1 %cond5362, {}* %724, {}* %.elt6021
  %725 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %726 = invoke {}* @cc_safe_fdefinition({}* %725)
          to label %normal-dest2277 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2277:                                  ; preds = %normal-dest2270
  %727 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 98), align 16
  %ptrtoint2278 = ptrtoint {}* %726 to i64
  %entry-point-addr-uint2279 = add i64 %ptrtoint2278, 7
  %entry-point-addr2280 = inttoptr i64 %entry-point-addr-uint2279 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2281 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2280, align 8
  %728 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2281({}* %726, i64 1, {}* %727, {}* null, {}* null, {}* null)
          to label %normal-dest2284 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2284:                                  ; preds = %normal-dest2277
  %.elt6025 = extractvalue { {}*, i64 } %728, 0
  %.elt6027 = extractvalue { {}*, i64 } %728, 1
  %cond5363 = icmp eq i64 %.elt6027, 0
  %729 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112425.0 = select i1 %cond5363, {}* %729, {}* %.elt6025
  %730 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %731 = invoke {}* @cc_safe_fdefinition({}* %730)
          to label %normal-dest2291 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2291:                                  ; preds = %normal-dest2284
  %ptrtoint2292 = ptrtoint {}* %731 to i64
  %entry-point-addr-uint2293 = add i64 %ptrtoint2292, 7
  %entry-point-addr2294 = inttoptr i64 %entry-point-addr-uint2293 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2295 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2294, align 8
  %732 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2295({}* %731, i64 1, {}* %S_INVERS.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2298 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2298:                                  ; preds = %normal-dest2291
  %.elt6029 = extractvalue { {}*, i64 } %732, 0
  %.elt6031 = extractvalue { {}*, i64 } %732, 1
  %cond5364 = icmp eq i64 %.elt6031, 0
  %733 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112426.0 = select i1 %cond5364, {}* %733, {}* %.elt6029
  %734 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %735 = invoke {}* @cc_safe_fdefinition({}* %734)
          to label %normal-dest2305 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2305:                                  ; preds = %normal-dest2298
  %736 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 530), align 16
  %ptrtoint2306 = ptrtoint {}* %735 to i64
  %entry-point-addr-uint2307 = add i64 %ptrtoint2306, 7
  %entry-point-addr2308 = inttoptr i64 %entry-point-addr-uint2307 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2309 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2308, align 8
  %737 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2309({}* %735, i64 1, {}* %736, {}* null, {}* null, {}* null)
          to label %normal-dest2312 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2312:                                  ; preds = %normal-dest2305
  %.elt6033 = extractvalue { {}*, i64 } %737, 0
  %.elt6035 = extractvalue { {}*, i64 } %737, 1
  %cond5365 = icmp eq i64 %.elt6035, 0
  %738 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112427.0 = select i1 %cond5365, {}* %738, {}* %.elt6033
  %739 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %740 = invoke {}* @cc_safe_fdefinition({}* %739)
          to label %normal-dest2319 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2319:                                  ; preds = %normal-dest2312
  %ptrtoint2320 = ptrtoint {}* %740 to i64
  %entry-point-addr-uint2321 = add i64 %ptrtoint2320, 7
  %entry-point-addr2322 = inttoptr i64 %entry-point-addr-uint2321 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2323 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2322, align 8
  %741 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2323({}* %740, i64 1, {}* %S_PROGRAMM.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2326 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2326:                                  ; preds = %normal-dest2319
  %.elt6037 = extractvalue { {}*, i64 } %741, 0
  %.elt6039 = extractvalue { {}*, i64 } %741, 1
  %cond5366 = icmp eq i64 %.elt6039, 0
  %742 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112428.0 = select i1 %cond5366, {}* %742, {}* %.elt6037
  %743 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %744 = invoke {}* @cc_safe_fdefinition({}* %743)
          to label %normal-dest2333 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2333:                                  ; preds = %normal-dest2326
  %745 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  %ptrtoint2334 = ptrtoint {}* %744 to i64
  %entry-point-addr-uint2335 = add i64 %ptrtoint2334, 7
  %entry-point-addr2336 = inttoptr i64 %entry-point-addr-uint2335 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2337 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2336, align 8
  %746 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2337({}* %744, i64 1, {}* %745, {}* null, {}* null, {}* null)
          to label %normal-dest2340 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2340:                                  ; preds = %normal-dest2333
  %.elt6041 = extractvalue { {}*, i64 } %746, 0
  %.elt6043 = extractvalue { {}*, i64 } %746, 1
  %cond5367 = icmp eq i64 %.elt6043, 0
  %747 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112429.0 = select i1 %cond5367, {}* %747, {}* %.elt6041
  %748 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %749 = invoke {}* @cc_safe_fdefinition({}* %748)
          to label %normal-dest2347 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2347:                                  ; preds = %normal-dest2340
  %ptrtoint2348 = ptrtoint {}* %749 to i64
  %entry-point-addr-uint2349 = add i64 %ptrtoint2348, 7
  %entry-point-addr2350 = inttoptr i64 %entry-point-addr-uint2349 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2351 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2350, align 8
  %750 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2351({}* %749, i64 1, {}* %S_VORSCHLAG.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2354 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2354:                                  ; preds = %normal-dest2347
  %.elt6045 = extractvalue { {}*, i64 } %750, 0
  %.elt6047 = extractvalue { {}*, i64 } %750, 1
  %cond5368 = icmp eq i64 %.elt6047, 0
  %751 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112430.0 = select i1 %cond5368, {}* %751, {}* %.elt6045
  %752 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %753 = invoke {}* @cc_safe_fdefinition({}* %752)
          to label %normal-dest2361 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2361:                                  ; preds = %normal-dest2354
  %754 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %ptrtoint2362 = ptrtoint {}* %753 to i64
  %entry-point-addr-uint2363 = add i64 %ptrtoint2362, 7
  %entry-point-addr2364 = inttoptr i64 %entry-point-addr-uint2363 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2365 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2364, align 8
  %755 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2365({}* %753, i64 1, {}* %754, {}* null, {}* null, {}* null)
          to label %normal-dest2368 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2368:                                  ; preds = %normal-dest2361
  %.elt6049 = extractvalue { {}*, i64 } %755, 0
  %.elt6051 = extractvalue { {}*, i64 } %755, 1
  %cond5369 = icmp eq i64 %.elt6051, 0
  %756 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112431.0 = select i1 %cond5369, {}* %756, {}* %.elt6049
  %757 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %758 = invoke {}* @cc_safe_fdefinition({}* %757)
          to label %normal-dest2375 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2375:                                  ; preds = %normal-dest2368
  %ptrtoint2376 = ptrtoint {}* %758 to i64
  %entry-point-addr-uint2377 = add i64 %ptrtoint2376, 7
  %entry-point-addr2378 = inttoptr i64 %entry-point-addr-uint2377 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2379 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2378, align 8
  %759 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2379({}* %758, i64 1, {}* %S_HEILMITTEL.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2382 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2382:                                  ; preds = %normal-dest2375
  %.elt6053 = extractvalue { {}*, i64 } %759, 0
  %.elt6055 = extractvalue { {}*, i64 } %759, 1
  %cond5370 = icmp eq i64 %.elt6055, 0
  %760 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112432.0 = select i1 %cond5370, {}* %760, {}* %.elt6053
  %761 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %762 = invoke {}* @cc_safe_fdefinition({}* %761)
          to label %normal-dest2389 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2389:                                  ; preds = %normal-dest2382
  %763 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 532), align 16
  %ptrtoint2390 = ptrtoint {}* %762 to i64
  %entry-point-addr-uint2391 = add i64 %ptrtoint2390, 7
  %entry-point-addr2392 = inttoptr i64 %entry-point-addr-uint2391 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2393 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2392, align 8
  %764 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2393({}* %762, i64 1, {}* %763, {}* null, {}* null, {}* null)
          to label %normal-dest2396 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2396:                                  ; preds = %normal-dest2389
  %.elt6057 = extractvalue { {}*, i64 } %764, 0
  %.elt6059 = extractvalue { {}*, i64 } %764, 1
  %cond5371 = icmp eq i64 %.elt6059, 0
  %765 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112433.0 = select i1 %cond5371, {}* %765, {}* %.elt6057
  %766 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %767 = invoke {}* @cc_safe_fdefinition({}* %766)
          to label %normal-dest2403 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2403:                                  ; preds = %normal-dest2396
  %ptrtoint2404 = ptrtoint {}* %767 to i64
  %entry-point-addr-uint2405 = add i64 %ptrtoint2404, 7
  %entry-point-addr2406 = inttoptr i64 %entry-point-addr-uint2405 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2407 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2406, align 8
  %768 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2407({}* %767, i64 1, {}* %S_PROPAGIERT.2.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest2410 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2410:                                  ; preds = %normal-dest2403
  %.elt6061 = extractvalue { {}*, i64 } %768, 0
  %.elt6063 = extractvalue { {}*, i64 } %768, 1
  %cond5372 = icmp eq i64 %.elt6063, 0
  %769 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112434.0 = select i1 %cond5372, {}* %769, {}* %.elt6061
  %ptrtoint2416 = ptrtoint {}* %679 to i64
  %entry-point-addr-uint2417 = add i64 %ptrtoint2416, 7
  %entry-point-addr2418 = inttoptr i64 %entry-point-addr-uint2417 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2419 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2418, align 8
  %770 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2419({}* %679, i64 21, {}* %G112415.0, {}* %G112416.0, {}* %G112417.0, {}* %G112418.0, {}* %G112419.0, {}* %G112420.0, {}* %G112421.0, {}* %G112422.0, {}* %G112423.0, {}* %G112424.0, {}* %G112425.0, {}* %G112426.0, {}* %G112427.0, {}* %G112428.0, {}* %G112429.0, {}* %G112430.0, {}* %G112431.0, {}* %G112432.0, {}* %G112433.0, {}* %G112434.0, {}* %769)
          to label %normal-dest2422 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2422:                                  ; preds = %normal-dest2410
  %.elt6065 = extractvalue { {}*, i64 } %770, 0
  %.elt6067 = extractvalue { {}*, i64 } %770, 1
  %cond5373 = icmp eq i64 %.elt6067, 0
  %771 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112413.0 = select i1 %cond5373, {}* %771, {}* %.elt6065
  %ptrtoint2428 = ptrtoint {}* %677 to i64
  %entry-point-addr-uint2429 = add i64 %ptrtoint2428, 7
  %entry-point-addr2430 = inttoptr i64 %entry-point-addr-uint2429 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2431 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2430, align 8
  %772 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2431({}* %677, i64 1, {}* %G112413.0, {}* null, {}* null, {}* null)
          to label %normal-dest2434 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2434:                                  ; preds = %normal-dest2422
  %773 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %774 = insertvalue { {}*, i64 } undef, {}* %773, 0
  %775 = insertvalue { {}*, i64 } %774, i64 1, 1
  ret { {}*, i64 } %775

header-check-br2462:                              ; preds = %tag536
  %gep2467 = getelementptr inbounds i8, i8* %376, i64 -9
  %irc-bit-cast2468 = bitcast i8* %gep2467 to i64*
  %776 = load i64, i64* %irc-bit-cast2468, align 8
  %777 = add i64 %776, -1309
  %778 = lshr i64 %777, 3
  %779 = shl i64 %777, 61
  %780 = or i64 %778, %779
  switch i64 %780, label %tag585 [
    i64 2, label %tag411
    i64 4, label %tag411
    i64 5, label %tag411
    i64 0, label %tag411
  ]

normal-dest2477:                                  ; preds = %tag236
  %ptrtoint2480 = ptrtoint {}* %115 to i64
  %entry-point-addr-uint2481 = add i64 %ptrtoint2480, 7
  %entry-point-addr2482 = inttoptr i64 %entry-point-addr-uint2481 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2483 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2482, align 8
  %781 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2483({}* %115, i64 2, {}* nonnull %.in5757, {}* nonnull %386, {}* null, {}* null)
          to label %normal-dest2486 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2486:                                  ; preds = %normal-dest2477
  %.elt5761 = extractvalue { {}*, i64 } %781, 0
  %.elt5763 = extractvalue { {}*, i64 } %781, 1
  %cond5308 = icmp eq i64 %.elt5763, 0
  %782 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112732.1 = select i1 %cond5308, {}* %782, {}* %.elt5761
  br label %tag195

header-check-br2499:                              ; preds = %tag841
  %783 = load i64, i64* %irc-bit-cast2505, align 8
  %784 = add i64 %783, -1309
  %785 = lshr i64 %784, 3
  %786 = shl i64 %784, 61
  %787 = or i64 %785, %786
  switch i64 %787, label %tag332 [
    i64 2, label %tag322
    i64 4, label %tag322
    i64 5, label %tag322
    i64 0, label %tag322
  ]

normal-dest2523:                                  ; preds = %tag245
  %ptrtoint2525 = ptrtoint {}* %117 to i64
  %entry-point-addr-uint2526 = add i64 %ptrtoint2525, 7
  %entry-point-addr2527 = inttoptr i64 %entry-point-addr-uint2526 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2528 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2527, align 8
  %788 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2528({}* %117, i64 1, {}* %409, {}* null, {}* null, {}* null)
          to label %normal-dest2531 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2531:                                  ; preds = %normal-dest2523
  %.elt5844 = extractvalue { {}*, i64 } %788, 0
  %.elt5846 = extractvalue { {}*, i64 } %788, 1
  %cond5320 = icmp eq i64 %.elt5846, 0
  %789 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %GESAMT.3 = select i1 %cond5320, {}* %789, {}* %.elt5844
  br label %tag576

header-check-br2553:                              ; preds = %tag614
  %gep2558 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast2559 = bitcast i8* %gep2558 to i64*
  %790 = load i64, i64* %irc-bit-cast2559, align 8
  %791 = add i64 %790, -1309
  %792 = lshr i64 %791, 3
  %793 = shl i64 %791, 61
  %794 = or i64 %792, %793
  switch i64 %794, label %tag476 [
    i64 2, label %tag309
    i64 4, label %tag309
    i64 5, label %tag309
    i64 0, label %tag309
  ]

normal-dest2570:                                  ; preds = %tag262
  %ptrtoint2571 = ptrtoint {}* %127 to i64
  %entry-point-addr-uint2572 = add i64 %ptrtoint2571, 7
  %entry-point-addr2573 = inttoptr i64 %entry-point-addr-uint2572 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2574 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2573, align 8
  %795 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2574({}* %127, i64 1, {}* %257, {}* null, {}* null, {}* null)
          to label %normal-dest2577 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2577:                                  ; preds = %normal-dest2570
  %.elt5651 = extractvalue { {}*, i64 } %795, 0
  %.elt5653 = extractvalue { {}*, i64 } %795, 1
  %cond5287 = icmp eq i64 %.elt5653, 0
  %796 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_ERERBT.3 = select i1 %cond5287, {}* %796, {}* %.elt5651
  br label %tag67

normal-dest2610:                                  ; preds = %tag272
  %ptrtoint2611 = ptrtoint {}* %134 to i64
  %entry-point-addr-uint2612 = add i64 %ptrtoint2611, 7
  %entry-point-addr2613 = inttoptr i64 %entry-point-addr-uint2612 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2614 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2613, align 8
  %797 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2614({}* %134, i64 1, {}* %195, {}* null, {}* null, {}* null)
          to label %normal-dest2617 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2617:                                  ; preds = %normal-dest2610
  %.elt5444 = extractvalue { {}*, i64 } %797, 0
  %.elt5446 = extractvalue { {}*, i64 } %797, 1
  %cond5250 = icmp eq i64 %.elt5446, 0
  %798 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ERERBT.3 = select i1 %cond5250, {}* %798, {}* %.elt5444
  br label %tag67

header-check-br2623:                              ; preds = %tag513
  %irc-bit-cast2627 = bitcast {}* %180 to i8*
  %gep2628 = getelementptr inbounds i8, i8* %irc-bit-cast2627, i64 -9
  %irc-bit-cast2629 = bitcast i8* %gep2628 to i64*
  %799 = load i64, i64* %irc-bit-cast2629, align 8
  %800 = add i64 %799, -1309
  %801 = lshr i64 %800, 3
  %802 = shl i64 %800, 61
  %803 = or i64 %801, %802
  switch i64 %803, label %tag570 [
    i64 2, label %tag62
    i64 4, label %tag62
    i64 5, label %tag62
    i64 0, label %tag62
  ]

normal-dest2649:                                  ; preds = %tag281
  %ptrtoint2650 = ptrtoint {}* %143 to i64
  %entry-point-addr-uint2651 = add i64 %ptrtoint2650, 7
  %entry-point-addr2652 = inttoptr i64 %entry-point-addr-uint2651 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2653 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2652, align 8
  %804 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2653({}* %143, i64 1, {}* %119, {}* null, {}* null, {}* null)
          to label %normal-dest2656 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2656:                                  ; preds = %normal-dest2649
  %.elt5857 = extractvalue { {}*, i64 } %804, 0
  %.elt5859 = extractvalue { {}*, i64 } %804, 1
  %cond5323 = icmp eq i64 %.elt5859, 0
  %805 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKTE.2 = select i1 %cond5323, {}* %805, {}* %.elt5857
  br label %tag658

header-check-br2668:                              ; preds = %tag310
  %irc-bit-cast2672 = bitcast {}* %71 to i8*
  %gep2673 = getelementptr inbounds i8, i8* %irc-bit-cast2672, i64 -9
  %irc-bit-cast2674 = bitcast i8* %gep2673 to i64*
  %806 = load i64, i64* %irc-bit-cast2674, align 8
  %807 = add i64 %806, -1309
  %808 = lshr i64 %807, 3
  %809 = shl i64 %807, 61
  %810 = or i64 %808, %809
  switch i64 %810, label %tag462 [
    i64 2, label %tag608
    i64 4, label %tag608
    i64 5, label %tag608
    i64 0, label %tag608
  ]

normal-dest2677:                                  ; preds = %tag293
  %ptrtoint2678 = ptrtoint {}* %149 to i64
  %entry-point-addr-uint2679 = add i64 %ptrtoint2678, 7
  %entry-point-addr2680 = inttoptr i64 %entry-point-addr-uint2679 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2681 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2680, align 8
  %811 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2681({}* %149, i64 2, {}* nonnull %.in, {}* nonnull %98, {}* null, {}* null)
          to label %normal-dest2684 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2684:                                  ; preds = %normal-dest2677
  %.elt5578 = extractvalue { {}*, i64 } %811, 0
  %.elt5580 = extractvalue { {}*, i64 } %811, 1
  %cond5274 = icmp eq i64 %.elt5580, 0
  %812 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113431.1 = select i1 %cond5274, {}* %812, {}* %.elt5578
  br label %tag216

normal-dest2795:                                  ; preds = %tag330
  %ptrtoint2796 = ptrtoint {}* %167 to i64
  %entry-point-addr-uint2797 = add i64 %ptrtoint2796, 7
  %entry-point-addr2798 = inttoptr i64 %entry-point-addr-uint2797 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2799 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2798, align 8
  %813 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2799({}* %167, i64 2, {}* nonnull %.in, {}* nonnull %130, {}* null, {}* null)
          to label %normal-dest2802 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2802:                                  ; preds = %normal-dest2795
  %.elt5530 = extractvalue { {}*, i64 } %813, 0
  %.elt5532 = extractvalue { {}*, i64 } %813, 1
  %cond5268 = icmp eq i64 %.elt5532, 0
  %814 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113191.1 = select i1 %cond5268, {}* %814, {}* %.elt5530
  br label %tag283

normal-dest2809:                                  ; preds = %tag331
  %ptrtoint2810 = ptrtoint {}* %169 to i64
  %entry-point-addr-uint2811 = add i64 %ptrtoint2810, 7
  %entry-point-addr2812 = inttoptr i64 %entry-point-addr-uint2811 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2813 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2812, align 8
  %815 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2813({}* %169, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_ERERBT.16620, {}* null, {}* null)
          to label %normal-dest2816 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2816:                                  ; preds = %normal-dest2809
  %.elt5647 = extractvalue { {}*, i64 } %815, 0
  %.elt5649 = extractvalue { {}*, i64 } %815, 1
  %cond5286 = icmp eq i64 %.elt5649, 0
  %816 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_ERERBT.4 = select i1 %cond5286, {}* %816, {}* %.elt5647
  br label %tag67

normal-dest2880:                                  ; preds = %tag357
  %ptrtoint2881 = ptrtoint {}* %185 to i64
  %entry-point-addr-uint2882 = add i64 %ptrtoint2881, 7
  %entry-point-addr2883 = inttoptr i64 %entry-point-addr-uint2882 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2884 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2883, align 8
  %817 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2884({}* %185, i64 1, {}* %111, {}* null, {}* null, {}* null)
          to label %normal-dest2887 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2887:                                  ; preds = %normal-dest2880
  %.elt5678 = extractvalue { {}*, i64 } %817, 0
  %.elt5680 = extractvalue { {}*, i64 } %817, 1
  %cond5293 = icmp eq i64 %.elt5680, 0
  %818 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_PROGRAMM.4 = select i1 %cond5293, {}* %818, {}* %.elt5678
  br label %tag67

normal-dest2934:                                  ; preds = %tag375
  %ptrtoint2935 = ptrtoint {}* %197 to i64
  %entry-point-addr-uint2936 = add i64 %ptrtoint2935, 7
  %entry-point-addr2937 = inttoptr i64 %entry-point-addr-uint2936 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2938 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2937, align 8
  %819 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2938({}* %197, i64 2, {}* nonnull %.in5757, {}* nonnull %207, {}* null, {}* null)
          to label %normal-dest2941 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2941:                                  ; preds = %normal-dest2934
  %.elt5801 = extractvalue { {}*, i64 } %819, 0
  %.elt5803 = extractvalue { {}*, i64 } %819, 1
  %cond5313 = icmp eq i64 %.elt5803, 0
  %820 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112932.1 = select i1 %cond5313, {}* %820, {}* %.elt5801
  br label %tag641

header-check-br2977:                              ; preds = %tag423
  %irc-bit-cast2981 = bitcast {}* %207 to i8*
  %gep2982 = getelementptr inbounds i8, i8* %irc-bit-cast2981, i64 -9
  %irc-bit-cast2983 = bitcast i8* %gep2982 to i64*
  %821 = load i64, i64* %irc-bit-cast2983, align 8
  %822 = add i64 %821, -1309
  %823 = lshr i64 %822, 3
  %824 = shl i64 %822, 61
  %825 = or i64 %823, %824
  switch i64 %825, label %tag149 [
    i64 2, label %tag375
    i64 4, label %tag375
    i64 5, label %tag375
    i64 0, label %tag375
  ]

normal-dest2985:                                  ; preds = %tag388
  %ptrtoint2986 = ptrtoint {}* %204 to i64
  %entry-point-addr-uint2987 = add i64 %ptrtoint2986, 7
  %entry-point-addr2988 = inttoptr i64 %entry-point-addr-uint2987 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2989 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2988, align 8
  %826 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2989({}* %204, i64 1, {}* %64, {}* null, {}* null, {}* null)
          to label %normal-dest2992 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2992:                                  ; preds = %normal-dest2985
  %.elt5669 = extractvalue { {}*, i64 } %826, 0
  %.elt5671 = extractvalue { {}*, i64 } %826, 1
  %cond5291 = icmp eq i64 %.elt5671, 0
  %827 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_EINGABE.3 = select i1 %cond5291, {}* %827, {}* %.elt5669
  br label %tag67

normal-dest3012:                                  ; preds = %tag393
  %ptrtoint3014 = ptrtoint {}* %206 to i64
  %entry-point-addr-uint3015 = add i64 %ptrtoint3014, 7
  %entry-point-addr3016 = inttoptr i64 %entry-point-addr-uint3015 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3017 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3016, align 8
  %828 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3017({}* %206, i64 2, {}* nonnull %.in5757, {}* nonnull %.in5830, {}* null, {}* null)
          to label %normal-dest3020 unwind label %cleanup-lpad.loopexit

normal-dest3020:                                  ; preds = %normal-dest3012
  %.elt5832 = extractvalue { {}*, i64 } %828, 0
  %.elt5834 = extractvalue { {}*, i64 } %828, 1
  %cond5317 = icmp eq i64 %.elt5834, 0
  %829 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113080.1 = select i1 %cond5317, {}* %829, {}* %.elt5832
  br label %tag542

header-check-br3048:                              ; preds = %tag417
  %gep3053 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast3054 = bitcast i8* %gep3053 to i64*
  %830 = load i64, i64* %irc-bit-cast3054, align 8
  %831 = add i64 %830, -1309
  %832 = lshr i64 %831, 3
  %833 = shl i64 %831, 61
  %834 = or i64 %832, %833
  switch i64 %834, label %tag268 [
    i64 2, label %tag251
    i64 4, label %tag251
    i64 5, label %tag251
    i64 0, label %tag251
  ]

normal-dest3065:                                  ; preds = %tag407
  %ptrtoint3066 = ptrtoint {}* %215 to i64
  %entry-point-addr-uint3067 = add i64 %ptrtoint3066, 7
  %entry-point-addr3068 = inttoptr i64 %entry-point-addr-uint3067 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3069 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3068, align 8
  %835 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3069({}* %215, i64 2, {}* inttoptr (i64 4 to {}*), {}* %EINGABE.16610, {}* null, {}* null)
          to label %normal-dest3072 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3072:                                  ; preds = %normal-dest3065
  %.elt5458 = extractvalue { {}*, i64 } %835, 0
  %.elt5460 = extractvalue { {}*, i64 } %835, 1
  %cond5253 = icmp eq i64 %.elt5460, 0
  %836 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %EINGABE.3 = select i1 %cond5253, {}* %836, {}* %.elt5458
  br label %tag67

normal-dest3093:                                  ; preds = %tag411
  %ptrtoint3096 = ptrtoint {}* %220 to i64
  %entry-point-addr-uint3097 = add i64 %ptrtoint3096, 7
  %entry-point-addr3098 = inttoptr i64 %entry-point-addr-uint3097 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3099 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3098, align 8
  %837 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3099({}* %220, i64 2, {}* nonnull %.in, {}* nonnull %.in5599, {}* null, {}* null)
          to label %normal-dest3102 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest3102:                                  ; preds = %normal-dest3093
  %.elt5601 = extractvalue { {}*, i64 } %837, 0
  %.elt5603 = extractvalue { {}*, i64 } %837, 1
  %cond5277 = icmp eq i64 %.elt5603, 0
  %838 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113539.1 = select i1 %cond5277, {}* %838, {}* %.elt5601
  br label %tag645

normal-dest3132:                                  ; preds = %tag419
  %ptrtoint3133 = ptrtoint {}* %222 to i64
  %entry-point-addr-uint3134 = add i64 %ptrtoint3133, 7
  %entry-point-addr3135 = inttoptr i64 %entry-point-addr-uint3134 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3136 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3135, align 8
  %839 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3136({}* %222, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_VORSCHLAG.16618, {}* null, {}* null)
          to label %normal-dest3139 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3139:                                  ; preds = %normal-dest3132
  %.elt5683 = extractvalue { {}*, i64 } %839, 0
  %.elt5685 = extractvalue { {}*, i64 } %839, 1
  %cond5294 = icmp eq i64 %.elt5685, 0
  %840 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_VORSCHLAG.3 = select i1 %cond5294, {}* %840, {}* %.elt5683
  br label %tag67

normal-dest3146:                                  ; preds = %tag420
  %ptrtoint3147 = ptrtoint {}* %224 to i64
  %entry-point-addr-uint3148 = add i64 %ptrtoint3147, 7
  %entry-point-addr3149 = inttoptr i64 %entry-point-addr-uint3148 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3150 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3149, align 8
  %841 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3150({}* %224, i64 2, {}* inttoptr (i64 4 to {}*), {}* %PROGRAMM.16613, {}* null, {}* null)
          to label %normal-dest3153 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3153:                                  ; preds = %normal-dest3146
  %.elt5467 = extractvalue { {}*, i64 } %841, 0
  %.elt5469 = extractvalue { {}*, i64 } %841, 1
  %cond5255 = icmp eq i64 %.elt5469, 0
  %842 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %PROGRAMM.3 = select i1 %cond5255, {}* %842, {}* %.elt5467
  br label %tag67

normal-dest3162:                                  ; preds = %tag422
  %843 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %844 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %845 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %846 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint3163 = ptrtoint {}* %226 to i64
  %entry-point-addr-uint3164 = add i64 %ptrtoint3163, 7
  %entry-point-addr3165 = inttoptr i64 %entry-point-addr-uint3164 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3166 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3165, align 8
  %847 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3166({}* %226, i64 5, {}* %843, {}* %844, {}* %"%DOLIST-VAR.06649", {}* %845, {}* %846)
          to label %normal-dest3169 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3169:                                  ; preds = %normal-dest3162
  %.elt5853 = extractvalue { {}*, i64 } %847, 0
  %.elt5855 = extractvalue { {}*, i64 } %847, 1
  %cond5322 = icmp eq i64 %.elt5855, 0
  %848 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR.2" = select i1 %cond5322, {}* %848, {}* %.elt5853
  br label %tag437.backedge

normal-dest3194:                                  ; preds = %tag428
  %ptrtoint3195 = ptrtoint {}* %228 to i64
  %entry-point-addr-uint3196 = add i64 %ptrtoint3195, 7
  %entry-point-addr3197 = inttoptr i64 %entry-point-addr-uint3196 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3198 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3197, align 8
  %849 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3198({}* %228, i64 1, {}* %260, {}* null, {}* null, {}* null)
          to label %normal-dest3201 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3201:                                  ; preds = %normal-dest3194
  %.elt5498 = extractvalue { {}*, i64 } %849, 0
  %.elt5500 = extractvalue { {}*, i64 } %849, 1
  %cond5262 = icmp eq i64 %.elt5500, 0
  %850 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %PROPAGIERT.3 = select i1 %cond5262, {}* %850, {}* %.elt5498
  br label %tag67

header-check-br3286:                              ; preds = %tag823
  %gep3291 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast3292 = bitcast i8* %gep3291 to i64*
  %851 = load i64, i64* %irc-bit-cast3292, align 8
  %852 = add i64 %851, -1309
  %853 = lshr i64 %852, 3
  %854 = shl i64 %852, 61
  %855 = or i64 %853, %854
  switch i64 %855, label %tag787 [
    i64 2, label %tag253
    i64 4, label %tag253
    i64 5, label %tag253
    i64 0, label %tag253
  ]

header-check-br3293:                              ; preds = %tag309
  %irc-bit-cast3297 = bitcast {}* %417 to i8*
  %gep3298 = getelementptr inbounds i8, i8* %irc-bit-cast3297, i64 -9
  %irc-bit-cast3299 = bitcast i8* %gep3298 to i64*
  %856 = load i64, i64* %irc-bit-cast3299, align 8
  %857 = add i64 %856, -1309
  %858 = lshr i64 %857, 3
  %859 = shl i64 %857, 61
  %860 = or i64 %858, %859
  switch i64 %860, label %tag476 [
    i64 2, label %tag716
    i64 4, label %tag716
    i64 5, label %tag716
    i64 0, label %tag716
  ]

normal-dest3303:                                  ; preds = %tag451
  %ptrtoint3304 = ptrtoint {}* %232 to i64
  %entry-point-addr-uint3305 = add i64 %ptrtoint3304, 7
  %entry-point-addr3306 = inttoptr i64 %entry-point-addr-uint3305 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3307 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3306, align 8
  %861 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3307({}* %232, i64 2, {}* inttoptr (i64 4 to {}*), {}* %GESAMT.06626, {}* null, {}* null)
          to label %normal-dest3310 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3310:                                  ; preds = %normal-dest3303
  %.elt5389 = extractvalue { {}*, i64 } %861, 0
  %.elt5391 = extractvalue { {}*, i64 } %861, 1
  %cond5239 = icmp eq i64 %.elt5391, 0
  %862 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %GESAMT.4 = select i1 %cond5239, {}* %862, {}* %.elt5389
  br label %tag576

normal-dest3317:                                  ; preds = %tag452
  %ptrtoint3318 = ptrtoint {}* %234 to i64
  %entry-point-addr-uint3319 = add i64 %ptrtoint3318, 7
  %entry-point-addr3320 = inttoptr i64 %entry-point-addr-uint3319 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3321 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3320, align 8
  %863 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3321({}* %234, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_INVERS.16621, {}* null, {}* null)
          to label %normal-dest3324 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3324:                                  ; preds = %normal-dest3317
  %.elt5656 = extractvalue { {}*, i64 } %863, 0
  %.elt5658 = extractvalue { {}*, i64 } %863, 1
  %cond5288 = icmp eq i64 %.elt5658, 0
  %864 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_INVERS.3 = select i1 %cond5288, {}* %864, {}* %.elt5656
  br label %tag67

normal-dest3357:                                  ; preds = %tag465
  %ptrtoint3358 = ptrtoint {}* %241 to i64
  %entry-point-addr-uint3359 = add i64 %ptrtoint3358, 7
  %entry-point-addr3360 = inttoptr i64 %entry-point-addr-uint3359 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3361 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3360, align 8
  %865 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3361({}* %241, i64 1, {}* %281, {}* null, {}* null, {}* null)
          to label %normal-dest3364 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3364:                                  ; preds = %normal-dest3357
  %.elt5462 = extractvalue { {}*, i64 } %865, 0
  %.elt5464 = extractvalue { {}*, i64 } %865, 1
  %cond5254 = icmp eq i64 %.elt5464, 0
  %866 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %EINGABE.4 = select i1 %cond5254, {}* %866, {}* %.elt5462
  br label %tag67

header-check-br3371:                              ; preds = %tag681
  %gep3376 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast3377 = bitcast i8* %gep3376 to i64*
  %867 = load i64, i64* %irc-bit-cast3377, align 8
  %868 = add i64 %867, -1309
  %869 = lshr i64 %868, 3
  %870 = shl i64 %868, 61
  %871 = or i64 %869, %870
  switch i64 %871, label %tag570 [
    i64 2, label %tag288
    i64 4, label %tag288
    i64 5, label %tag288
    i64 0, label %tag288
  ]

normal-dest3448:                                  ; preds = %tag491
  %ptrtoint3449 = ptrtoint {}* %252 to i64
  %entry-point-addr-uint3450 = add i64 %ptrtoint3449, 7
  %entry-point-addr3451 = inttoptr i64 %entry-point-addr-uint3450 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3452 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3451, align 8
  %872 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3452({}* %252, i64 1, {}* %250, {}* null, {}* null, {}* null)
          to label %normal-dest3455 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3455:                                  ; preds = %normal-dest3448
  %.elt5609 = extractvalue { {}*, i64 } %872, 0
  %.elt5611 = extractvalue { {}*, i64 } %872, 1
  %cond5279 = icmp eq i64 %.elt5611, 0
  %873 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %DYNAMISCH.4 = select i1 %cond5279, {}* %873, {}* %.elt5609
  br label %tag847

header-check-br3500:                              ; preds = %tag757
  %gep3505 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast3506 = bitcast i8* %gep3505 to i64*
  %874 = load i64, i64* %irc-bit-cast3506, align 8
  %875 = add i64 %874, -1309
  %876 = lshr i64 %875, 3
  %877 = shl i64 %875, 61
  %878 = or i64 %876, %877
  switch i64 %878, label %tag110 [
    i64 2, label %tag211
    i64 4, label %tag211
    i64 5, label %tag211
    i64 0, label %tag211
  ]

header-check-br3514:                              ; preds = %tag158
  %irc-bit-cast3518 = bitcast {}* %906 to i8*
  %gep3519 = getelementptr inbounds i8, i8* %irc-bit-cast3518, i64 -9
  %irc-bit-cast3520 = bitcast i8* %gep3519 to i64*
  %879 = load i64, i64* %irc-bit-cast3520, align 8
  %880 = add i64 %879, -1309
  %881 = lshr i64 %880, 3
  %882 = shl i64 %880, 61
  %883 = or i64 %881, %882
  switch i64 %883, label %tag877 [
    i64 2, label %tag548
    i64 4, label %tag548
    i64 5, label %tag548
    i64 0, label %tag548
  ]

normal-dest3554:                                  ; preds = %tag520
  %ptrtoint3555 = ptrtoint {}* %264 to i64
  %entry-point-addr-uint3556 = add i64 %ptrtoint3555, 7
  %entry-point-addr3557 = inttoptr i64 %entry-point-addr-uint3556 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3558 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3557, align 8
  %884 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3558({}* %264, i64 2, {}* inttoptr (i64 4 to {}*), {}* %HEILMITTEL.16608, {}* null, {}* null)
          to label %normal-dest3561 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3561:                                  ; preds = %normal-dest3554
  %.elt5485 = extractvalue { {}*, i64 } %884, 0
  %.elt5487 = extractvalue { {}*, i64 } %884, 1
  %cond5259 = icmp eq i64 %.elt5487, 0
  %885 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %HEILMITTEL.3 = select i1 %cond5259, {}* %885, {}* %.elt5485
  br label %tag67

header-check-br3567:                              ; preds = %tag630
  %gep3572 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast3573 = bitcast i8* %gep3572 to i64*
  %886 = load i64, i64* %irc-bit-cast3573, align 8
  %887 = add i64 %886, -1309
  %888 = lshr i64 %887, 3
  %889 = shl i64 %887, 61
  %890 = or i64 %888, %889
  switch i64 %890, label %tag850 [
    i64 2, label %tag518
    i64 4, label %tag518
    i64 5, label %tag518
    i64 0, label %tag518
  ]

header-check-br3585:                              ; preds = %tag692
  %gep3590 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast3591 = bitcast i8* %gep3590 to i64*
  %891 = load i64, i64* %irc-bit-cast3591, align 8
  %892 = add i64 %891, -1309
  %893 = lshr i64 %892, 3
  %894 = shl i64 %892, 61
  %895 = or i64 %893, %894
  switch i64 %895, label %tag149 [
    i64 2, label %tag317
    i64 4, label %tag317
    i64 5, label %tag317
    i64 0, label %tag317
  ]

normal-dest3656:                                  ; preds = %tag548
  %ptrtoint3657 = ptrtoint {}* %279 to i64
  %entry-point-addr-uint3658 = add i64 %ptrtoint3657, 7
  %entry-point-addr3659 = inttoptr i64 %entry-point-addr-uint3658 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3660 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3659, align 8
  %896 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3660({}* %279, i64 2, {}* nonnull %.in5738, {}* nonnull %906, {}* null, {}* null)
          to label %normal-dest3663 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3663:                                  ; preds = %normal-dest3656
  %.elt5742 = extractvalue { {}*, i64 } %896, 0
  %.elt5744 = extractvalue { {}*, i64 } %896, 1
  %cond5306 = icmp eq i64 %.elt5744, 0
  %897 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112674.1 = select i1 %cond5306, {}* %897, {}* %.elt5742
  br label %tag83

header-check-br3669:                              ; preds = %tag724
  %irc-bit-cast3673 = bitcast {}* %216 to i8*
  %gep3674 = getelementptr inbounds i8, i8* %irc-bit-cast3673, i64 -9
  %irc-bit-cast3675 = bitcast i8* %gep3674 to i64*
  %898 = load i64, i64* %irc-bit-cast3675, align 8
  %899 = add i64 %898, -1309
  %900 = lshr i64 %899, 3
  %901 = shl i64 %899, 61
  %902 = or i64 %900, %901
  switch i64 %902, label %tag201 [
    i64 2, label %tag747
    i64 4, label %tag747
    i64 5, label %tag747
    i64 0, label %tag747
  ]

normal-dest3703:                                  ; preds = %tag559
  %ptrtoint3704 = ptrtoint {}* %288 to i64
  %entry-point-addr-uint3705 = add i64 %ptrtoint3704, 7
  %entry-point-addr3706 = inttoptr i64 %entry-point-addr-uint3705 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3707 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3706, align 8
  %903 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3707({}* %288, i64 2, {}* %O.0, {}* %.in5748, {}* null, {}* null)
          to label %normal-dest3710 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3710:                                  ; preds = %normal-dest3703
  %.elt5709 = extractvalue { {}*, i64 } %903, 0
  %.elt5711 = extractvalue { {}*, i64 } %903, 1
  %cond5300 = icmp eq i64 %.elt5711, 0
  %904 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in5738 = select i1 %cond5300, {}* %904, {}* %.elt5709
  %905 = bitcast {}* %.in5738 to i8*
  %906 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1253), align 8
  %907 = icmp eq {}* %.in5738, %906
  %.val6336 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %G112683.0 = select i1 %907, {}* %.val6336, {}* %904
  %908 = icmp eq {}* %G112683.0, %904
  br i1 %908, label %tag229, label %tag83

header-check-br3762:                              ; preds = %tag738
  %irc-bit-cast3766 = bitcast {}* %237 to i8*
  %gep3767 = getelementptr inbounds i8, i8* %irc-bit-cast3766, i64 -9
  %irc-bit-cast3768 = bitcast i8* %gep3767 to i64*
  %909 = load i64, i64* %irc-bit-cast3768, align 8
  %910 = add i64 %909, -1309
  %911 = lshr i64 %910, 3
  %912 = shl i64 %910, 61
  %913 = or i64 %911, %912
  switch i64 %913, label %tag850 [
    i64 2, label %tag710
    i64 4, label %tag710
    i64 5, label %tag710
    i64 0, label %tag710
  ]

normal-dest3777:                                  ; preds = %tag576
  %914 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %915 = invoke {}* @cc_safe_fdefinition({}* %914)
          to label %normal-dest3779 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3779:                                  ; preds = %normal-dest3777
  %ptrtoint3780 = ptrtoint {}* %915 to i64
  %entry-point-addr-uint3781 = add i64 %ptrtoint3780, 7
  %entry-point-addr3782 = inttoptr i64 %entry-point-addr-uint3781 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3783 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3782, align 8
  %916 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3783({}* %915, i64 2, {}* %O.0, {}* %.in5748, {}* null, {}* null)
          to label %normal-dest3786 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3786:                                  ; preds = %normal-dest3779
  %.elt5393 = extractvalue { {}*, i64 } %916, 0
  %.elt5395 = extractvalue { {}*, i64 } %916, 1
  %cond5240 = icmp eq i64 %.elt5395, 0
  %917 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113605.0 = select i1 %cond5240, {}* %917, {}* %.elt5393
  %ptrtoint3792 = ptrtoint {}* %294 to i64
  %entry-point-addr-uint3793 = add i64 %ptrtoint3792, 7
  %entry-point-addr3794 = inttoptr i64 %entry-point-addr-uint3793 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3795 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3794, align 8
  %918 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3795({}* %294, i64 1, {}* %G113605.0, {}* null, {}* null, {}* null)
          to label %normal-dest3798 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3798:                                  ; preds = %normal-dest3786
  %.elt5397 = extractvalue { {}*, i64 } %918, 0
  %.elt5399 = extractvalue { {}*, i64 } %918, 1
  %cond5241 = icmp eq i64 %.elt5399, 0
  %919 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113602.0 = select i1 %cond5241, {}* %919, {}* %.elt5397
  %920 = icmp eq {}* %G113602.0, %919
  br i1 %920, label %tag728, label %tag572

normal-dest3814:                                  ; preds = %tag583
  %ptrtoint3815 = ptrtoint {}* %296 to i64
  %entry-point-addr-uint3816 = add i64 %ptrtoint3815, 7
  %entry-point-addr3817 = inttoptr i64 %entry-point-addr-uint3816 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3818 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3817, align 8
  %921 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3818({}* %296, i64 2, {}* inttoptr (i64 4 to {}*), {}* %OBJEKTE.06671, {}* null, {}* null)
          to label %normal-dest3821 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3821:                                  ; preds = %normal-dest3814
  %.elt5379 = extractvalue { {}*, i64 } %921, 0
  %.elt5381 = extractvalue { {}*, i64 } %921, 1
  %cond5237 = icmp eq i64 %.elt5381, 0
  %922 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %OBJEKTE.3 = select i1 %cond5237, {}* %922, {}* %.elt5379
  br label %tag658

normal-dest3844:                                  ; preds = %tag591
  %ptrtoint3845 = ptrtoint {}* %307 to i64
  %entry-point-addr-uint3846 = add i64 %ptrtoint3845, 7
  %entry-point-addr3847 = inttoptr i64 %entry-point-addr-uint3846 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3848 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3847, align 8
  %923 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3848({}* %307, i64 2, {}* inttoptr (i64 4 to {}*), {}* %INVERS.16612, {}* null, {}* null)
          to label %normal-dest3851 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3851:                                  ; preds = %normal-dest3844
  %.elt5449 = extractvalue { {}*, i64 } %923, 0
  %.elt5451 = extractvalue { {}*, i64 } %923, 1
  %cond5251 = icmp eq i64 %.elt5451, 0
  %924 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %INVERS.3 = select i1 %cond5251, {}* %924, {}* %.elt5449
  br label %tag67

normal-dest3902:                                  ; preds = %tag608
  %ptrtoint3903 = ptrtoint {}* %313 to i64
  %entry-point-addr-uint3904 = add i64 %ptrtoint3903, 7
  %entry-point-addr3905 = inttoptr i64 %entry-point-addr-uint3904 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3906 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3905, align 8
  %925 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3906({}* %313, i64 2, {}* nonnull %.in5757, {}* nonnull %71, {}* null, {}* null)
          to label %normal-dest3909 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3909:                                  ; preds = %normal-dest3902
  %.elt5793 = extractvalue { {}*, i64 } %925, 0
  %.elt5795 = extractvalue { {}*, i64 } %925, 1
  %cond5312 = icmp eq i64 %.elt5795, 0
  %926 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112892.1 = select i1 %cond5312, {}* %926, {}* %.elt5793
  br label %tag861

normal-dest3918:                                  ; preds = %tag612
  %ptrtoint3919 = ptrtoint {}* %315 to i64
  %entry-point-addr-uint3920 = add i64 %ptrtoint3919, 7
  %entry-point-addr3921 = inttoptr i64 %entry-point-addr-uint3920 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3922 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3921, align 8
  %927 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3922({}* %315, i64 2, {}* inttoptr (i64 4 to {}*), {}* %DYNAMISCH.16624, {}* null, {}* null)
          to label %normal-dest3925 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3925:                                  ; preds = %normal-dest3918
  %.elt5402 = extractvalue { {}*, i64 } %927, 0
  %.elt5404 = extractvalue { {}*, i64 } %927, 1
  %cond5242 = icmp eq i64 %.elt5404, 0
  %928 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %DYNAMISCH.5 = select i1 %cond5242, {}* %928, {}* %.elt5402
  br label %tag847

header-check-br3949:                              ; preds = %tag322
  %gep3954 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast3955 = bitcast i8* %gep3954 to i64*
  %929 = load i64, i64* %irc-bit-cast3955, align 8
  %930 = add i64 %929, -1309
  %931 = lshr i64 %930, 3
  %932 = shl i64 %930, 61
  %933 = or i64 %931, %932
  switch i64 %933, label %tag332 [
    i64 2, label %tag393
    i64 4, label %tag393
    i64 5, label %tag393
    i64 0, label %tag393
  ]

normal-dest3958:                                  ; preds = %tag624
  %ptrtoint3959 = ptrtoint {}* %318 to i64
  %entry-point-addr-uint3960 = add i64 %ptrtoint3959, 7
  %entry-point-addr3961 = inttoptr i64 %entry-point-addr-uint3960 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3962 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3961, align 8
  %934 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3962({}* %318, i64 1, {}* %421, {}* null, {}* null, {}* null)
          to label %normal-dest3965 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3965:                                  ; preds = %normal-dest3958
  %.elt5489 = extractvalue { {}*, i64 } %934, 0
  %.elt5491 = extractvalue { {}*, i64 } %934, 1
  %cond5260 = icmp eq i64 %.elt5491, 0
  %935 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %HEILMITTEL.4 = select i1 %cond5260, {}* %935, {}* %.elt5489
  br label %tag67

normal-dest3972:                                  ; preds = %tag625
  %ptrtoint3973 = ptrtoint {}* %320 to i64
  %entry-point-addr-uint3974 = add i64 %ptrtoint3973, 7
  %entry-point-addr3975 = inttoptr i64 %entry-point-addr-uint3974 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3976 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3975, align 8
  %936 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3976({}* %320, i64 2, {}* nonnull %.in, {}* nonnull %176, {}* null, {}* null)
          to label %normal-dest3979 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3979:                                  ; preds = %normal-dest3972
  %.elt5538 = extractvalue { {}*, i64 } %936, 0
  %.elt5540 = extractvalue { {}*, i64 } %936, 1
  %cond5269 = icmp eq i64 %.elt5540, 0
  %937 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113231.1 = select i1 %cond5269, {}* %937, {}* %.elt5538
  br label %tag642

normal-dest3988:                                  ; preds = %tag627
  %ptrtoint3989 = ptrtoint {}* %322 to i64
  %entry-point-addr-uint3990 = add i64 %ptrtoint3989, 7
  %entry-point-addr3991 = inttoptr i64 %entry-point-addr-uint3990 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3992 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3991, align 8
  %938 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3992({}* %322, i64 1, {}* %398, {}* null, {}* null, {}* null)
          to label %normal-dest3995 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3995:                                  ; preds = %normal-dest3988
  %.elt5453 = extractvalue { {}*, i64 } %938, 0
  %.elt5455 = extractvalue { {}*, i64 } %938, 1
  %cond5252 = icmp eq i64 %.elt5455, 0
  %939 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %INVERS.4 = select i1 %cond5252, {}* %939, {}* %.elt5453
  br label %tag67

normal-dest4032:                                  ; preds = %tag636
  %ptrtoint4033 = ptrtoint {}* %325 to i64
  %entry-point-addr-uint4034 = add i64 %ptrtoint4033, 7
  %entry-point-addr4035 = inttoptr i64 %entry-point-addr-uint4034 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4036 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4035, align 8
  %940 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4036({}* %325, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_EINGABE.16619, {}* null, {}* null)
          to label %normal-dest4039 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4039:                                  ; preds = %normal-dest4032
  %.elt5665 = extractvalue { {}*, i64 } %940, 0
  %.elt5667 = extractvalue { {}*, i64 } %940, 1
  %cond5290 = icmp eq i64 %.elt5667, 0
  %941 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_EINGABE.4 = select i1 %cond5290, {}* %941, {}* %.elt5665
  br label %tag67

header-check-br4052:                              ; preds = %tag616
  %942 = load i64, i64* %irc-bit-cast4058, align 8
  %943 = add i64 %942, -1309
  %944 = lshr i64 %943, 3
  %945 = shl i64 %943, 61
  %946 = or i64 %944, %945
  switch i64 %946, label %tag585 [
    i64 2, label %tag536
    i64 4, label %tag536
    i64 5, label %tag536
    i64 0, label %tag536
  ]

normal-dest4060:                                  ; preds = %tag643
  %ptrtoint4061 = ptrtoint {}* %329 to i64
  %entry-point-addr-uint4062 = add i64 %ptrtoint4061, 7
  %entry-point-addr4063 = inttoptr i64 %entry-point-addr-uint4062 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4064 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4063, align 8
  %947 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4064({}* %329, i64 1, {}* %113, {}* null, {}* null, {}* null)
          to label %normal-dest4067 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4067:                                  ; preds = %normal-dest4060
  %.elt5687 = extractvalue { {}*, i64 } %947, 0
  %.elt5689 = extractvalue { {}*, i64 } %947, 1
  %cond5295 = icmp eq i64 %.elt5689, 0
  %948 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_VORSCHLAG.4 = select i1 %cond5295, {}* %948, {}* %.elt5687
  br label %tag67

normal-dest4103:                                  ; preds = %tag658
  %ptrtoint4104 = ptrtoint {}* %338 to i64
  %entry-point-addr-uint4105 = add i64 %ptrtoint4104, 7
  %entry-point-addr4106 = inttoptr i64 %entry-point-addr-uint4105 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4107 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4106, align 8
  %949 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4107({}* %338, i64 1, {}* %O.0, {}* null, {}* null, {}* null)
          to label %normal-dest4110 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4110:                                  ; preds = %normal-dest4103
  %.elt5383 = extractvalue { {}*, i64 } %949, 0
  %.elt5385 = extractvalue { {}*, i64 } %949, 1
  %cond5238 = icmp eq i64 %.elt5385, 0
  %950 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR1028.1" = select i1 %cond5238, {}* %950, {}* %.elt5383
  %951 = icmp eq {}* %"%DOLIST-VAR1028.1", %950
  br i1 %951, label %tag633, label %tag321.preheader

tag321.preheader:                                 ; preds = %normal-dest4110
  br label %tag321

normal-dest4181:                                  ; preds = %tag678
  %ptrtoint4182 = ptrtoint {}* %344 to i64
  %entry-point-addr-uint4183 = add i64 %ptrtoint4182, 7
  %entry-point-addr4184 = inttoptr i64 %entry-point-addr-uint4183 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4185 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4184, align 8
  %952 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4185({}* %344, i64 2, {}* nonnull %.in5757, {}* nonnull %289, {}* null, {}* null)
          to label %normal-dest4188 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4188:                                  ; preds = %normal-dest4181
  %.elt5809 = extractvalue { {}*, i64 } %952, 0
  %.elt5811 = extractvalue { {}*, i64 } %952, 1
  %cond5314 = icmp eq i64 %.elt5811, 0
  %953 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112972.1 = select i1 %cond5314, {}* %953, {}* %.elt5809
  br label %tag7

header-check-br4194:                              ; preds = %tag13
  %irc-bit-cast4198 = bitcast {}* %198 to i8*
  %gep4199 = getelementptr inbounds i8, i8* %irc-bit-cast4198, i64 -9
  %irc-bit-cast4200 = bitcast i8* %gep4199 to i64*
  %954 = load i64, i64* %irc-bit-cast4200, align 8
  %955 = add i64 %954, -1309
  %956 = lshr i64 %955, 3
  %957 = shl i64 %955, 61
  %958 = or i64 %956, %957
  switch i64 %958, label %tag307 [
    i64 2, label %tag699
    i64 4, label %tag699
    i64 5, label %tag699
    i64 0, label %tag699
  ]

normal-dest4212:                                  ; preds = %tag686
  %ptrtoint4213 = ptrtoint {}* %347 to i64
  %entry-point-addr-uint4214 = add i64 %ptrtoint4213, 7
  %entry-point-addr4215 = inttoptr i64 %entry-point-addr-uint4214 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4216 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4215, align 8
  %959 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4216({}* %347, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_SYSTEM.16615, {}* null, {}* null)
          to label %normal-dest4219 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4219:                                  ; preds = %normal-dest4212
  %.elt5638 = extractvalue { {}*, i64 } %959, 0
  %.elt5640 = extractvalue { {}*, i64 } %959, 1
  %cond5284 = icmp eq i64 %.elt5640, 0
  %960 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_SYSTEM.3 = select i1 %cond5284, {}* %960, {}* %.elt5638
  br label %tag67

normal-dest4242:                                  ; preds = %tag690
  %ptrtoint4243 = ptrtoint {}* %349 to i64
  %entry-point-addr-uint4244 = add i64 %ptrtoint4243, 7
  %entry-point-addr4245 = inttoptr i64 %entry-point-addr-uint4244 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4246 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4245, align 8
  %961 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4246({}* %349, i64 2, {}* inttoptr (i64 4 to {}*), {}* %VORSCHLAG.16609, {}* null, {}* null)
          to label %normal-dest4249 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4249:                                  ; preds = %normal-dest4242
  %.elt5476 = extractvalue { {}*, i64 } %961, 0
  %.elt5478 = extractvalue { {}*, i64 } %961, 1
  %cond5257 = icmp eq i64 %.elt5478, 0
  %962 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %VORSCHLAG.4 = select i1 %cond5257, {}* %962, {}* %.elt5476
  br label %tag67

normal-dest4256:                                  ; preds = %tag691
  %ptrtoint4257 = ptrtoint {}* %351 to i64
  %entry-point-addr-uint4258 = add i64 %ptrtoint4257, 7
  %entry-point-addr4259 = inttoptr i64 %entry-point-addr-uint4258 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4260 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4259, align 8
  %963 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4260({}* %351, i64 2, {}* inttoptr (i64 4 to {}*), {}* %NICHTS.16614, {}* null, {}* null)
          to label %normal-dest4263 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4263:                                  ; preds = %normal-dest4256
  %.elt5417 = extractvalue { {}*, i64 } %963, 0
  %.elt5419 = extractvalue { {}*, i64 } %963, 1
  %cond5244 = icmp eq i64 %.elt5419, 0
  %964 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %NICHTS.3 = select i1 %cond5244, {}* %964, {}* %.elt5417
  br label %tag67

normal-dest4276:                                  ; preds = %tag695
  %ptrtoint4277 = ptrtoint {}* %353 to i64
  %entry-point-addr-uint4278 = add i64 %ptrtoint4277, 7
  %entry-point-addr4279 = inttoptr i64 %entry-point-addr-uint4278 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4280 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4279, align 8
  %965 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4280({}* %353, i64 1, {}* %187, {}* null, {}* null, {}* null)
          to label %normal-dest4283 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4283:                                  ; preds = %normal-dest4276
  %.elt5660 = extractvalue { {}*, i64 } %965, 0
  %.elt5662 = extractvalue { {}*, i64 } %965, 1
  %cond5289 = icmp eq i64 %.elt5662, 0
  %966 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_INVERS.4 = select i1 %cond5289, {}* %966, {}* %.elt5660
  br label %tag67

normal-dest4294:                                  ; preds = %tag699
  %ptrtoint4295 = ptrtoint {}* %355 to i64
  %entry-point-addr-uint4296 = add i64 %ptrtoint4295, 7
  %entry-point-addr4297 = inttoptr i64 %entry-point-addr-uint4296 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4298 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4297, align 8
  %967 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4298({}* %355, i64 2, {}* nonnull %.in, {}* nonnull %198, {}* null, {}* null)
          to label %normal-dest4301 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4301:                                  ; preds = %normal-dest4294
  %.elt5562 = extractvalue { {}*, i64 } %967, 0
  %.elt5564 = extractvalue { {}*, i64 } %967, 1
  %cond5272 = icmp eq i64 %.elt5564, 0
  %968 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113351.1 = select i1 %cond5272, {}* %968, {}* %.elt5562
  br label %tag668

header-check-br4310:                              ; preds = %tag858
  %gep4315 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast4316 = bitcast i8* %gep4315 to i64*
  %969 = load i64, i64* %irc-bit-cast4316, align 8
  %970 = add i64 %969, -1309
  %971 = lshr i64 %970, 3
  %972 = shl i64 %970, 61
  %973 = or i64 %971, %972
  switch i64 %973, label %tag661 [
    i64 2, label %tag91
    i64 4, label %tag91
    i64 5, label %tag91
    i64 0, label %tag91
  ]

normal-dest4318:                                  ; preds = %tag703
  %ptrtoint4319 = ptrtoint {}* %357 to i64
  %entry-point-addr-uint4320 = add i64 %ptrtoint4319, 7
  %entry-point-addr4321 = inttoptr i64 %entry-point-addr-uint4320 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4322 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4321, align 8
  %974 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4322({}* %357, i64 1, {}* %136, {}* null, {}* null, {}* null)
          to label %normal-dest4325 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4325:                                  ; preds = %normal-dest4318
  %.elt5642 = extractvalue { {}*, i64 } %974, 0
  %.elt5644 = extractvalue { {}*, i64 } %974, 1
  %cond5285 = icmp eq i64 %.elt5644, 0
  %975 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_SYSTEM.4 = select i1 %cond5285, {}* %975, {}* %.elt5642
  br label %tag67

normal-dest4340:                                  ; preds = %tag706
  %ptrtoint4341 = ptrtoint {}* %359 to i64
  %entry-point-addr-uint4342 = add i64 %ptrtoint4341, 7
  %entry-point-addr4343 = inttoptr i64 %entry-point-addr-uint4342 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4344 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4343, align 8
  %976 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4344({}* %359, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_HEILMITTEL.16617, {}* null, {}* null)
          to label %normal-dest4347 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4347:                                  ; preds = %normal-dest4340
  %.elt5692 = extractvalue { {}*, i64 } %976, 0
  %.elt5694 = extractvalue { {}*, i64 } %976, 1
  %cond5296 = icmp eq i64 %.elt5694, 0
  %977 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_HEILMITTEL.4 = select i1 %cond5296, {}* %977, {}* %.elt5692
  br label %tag67

normal-dest4365:                                  ; preds = %tag710
  %ptrtoint4366 = ptrtoint {}* %364 to i64
  %entry-point-addr-uint4367 = add i64 %ptrtoint4366, 7
  %entry-point-addr4368 = inttoptr i64 %entry-point-addr-uint4367 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4369 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4368, align 8
  %978 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4369({}* %364, i64 2, {}* nonnull %.in5757, {}* nonnull %237, {}* null, {}* null)
          to label %normal-dest4372 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4372:                                  ; preds = %normal-dest4365
  %.elt5785 = extractvalue { {}*, i64 } %978, 0
  %.elt5787 = extractvalue { {}*, i64 } %978, 1
  %cond5311 = icmp eq i64 %.elt5787, 0
  %979 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112852.1 = select i1 %cond5311, {}* %979, {}* %.elt5785
  br label %tag544

header-check-br4378:                              ; preds = %tag849
  %gep4383 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast4384 = bitcast i8* %gep4383 to i64*
  %980 = load i64, i64* %irc-bit-cast4384, align 8
  %981 = add i64 %980, -1309
  %982 = lshr i64 %981, 3
  %983 = shl i64 %981, 61
  %984 = or i64 %982, %983
  switch i64 %984, label %tag769 [
    i64 2, label %tag384
    i64 4, label %tag384
    i64 5, label %tag384
    i64 0, label %tag384
  ]

normal-dest4400:                                  ; preds = %tag716
  %ptrtoint4401 = ptrtoint {}* %366 to i64
  %entry-point-addr-uint4402 = add i64 %ptrtoint4401, 7
  %entry-point-addr4403 = inttoptr i64 %entry-point-addr-uint4402 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4404 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4403, align 8
  %985 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4404({}* %366, i64 2, {}* nonnull %.in5757, {}* nonnull %417, {}* null, {}* null)
          to label %normal-dest4407 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4407:                                  ; preds = %normal-dest4400
  %.elt5777 = extractvalue { {}*, i64 } %985, 0
  %.elt5779 = extractvalue { {}*, i64 } %985, 1
  %cond5310 = icmp eq i64 %.elt5779, 0
  %986 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112812.1 = select i1 %cond5310, {}* %986, {}* %.elt5777
  br label %tag557

header-check-br4413:                              ; preds = %tag253
  %irc-bit-cast4417 = bitcast {}* %246 to i8*
  %gep4418 = getelementptr inbounds i8, i8* %irc-bit-cast4417, i64 -9
  %irc-bit-cast4419 = bitcast i8* %gep4418 to i64*
  %987 = load i64, i64* %irc-bit-cast4419, align 8
  %988 = add i64 %987, -1309
  %989 = lshr i64 %988, 3
  %990 = shl i64 %988, 61
  %991 = or i64 %989, %990
  switch i64 %991, label %tag787 [
    i64 2, label %tag754
    i64 4, label %tag754
    i64 5, label %tag754
    i64 0, label %tag754
  ]

header-check-br4422:                              ; preds = %tag472
  %gep4427 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast4428 = bitcast i8* %gep4427 to i64*
  %992 = load i64, i64* %irc-bit-cast4428, align 8
  %993 = add i64 %992, -1309
  %994 = lshr i64 %993, 3
  %995 = shl i64 %993, 61
  %996 = or i64 %994, %995
  switch i64 %996, label %tag334 [
    i64 2, label %tag547
    i64 4, label %tag547
    i64 5, label %tag547
    i64 0, label %tag547
  ]

normal-dest4450:                                  ; preds = %tag730
  %ptrtoint4451 = ptrtoint {}* %369 to i64
  %entry-point-addr-uint4452 = add i64 %ptrtoint4451, 7
  %entry-point-addr4453 = inttoptr i64 %entry-point-addr-uint4452 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4454 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4453, align 8
  %997 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4454({}* %369, i64 2, {}* inttoptr (i64 4 to {}*), {}* %S_NICHTS.16622, {}* null, {}* null)
          to label %normal-dest4457 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4457:                                  ; preds = %normal-dest4450
  %.elt5629 = extractvalue { {}*, i64 } %997, 0
  %.elt5631 = extractvalue { {}*, i64 } %997, 1
  %cond5282 = icmp eq i64 %.elt5631, 0
  %998 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_NICHTS.3 = select i1 %cond5282, {}* %998, {}* %.elt5629
  br label %tag67

normal-dest4480:                                  ; preds = %tag735
  %ptrtoint4481 = ptrtoint {}* %372 to i64
  %entry-point-addr-uint4482 = add i64 %ptrtoint4481, 7
  %entry-point-addr4483 = inttoptr i64 %entry-point-addr-uint4482 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4484 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4483, align 8
  %999 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4484({}* %372, i64 2, {}* inttoptr (i64 4 to {}*), {}* %ERERBT.16611, {}* null, {}* null)
          to label %normal-dest4487 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4487:                                  ; preds = %normal-dest4480
  %.elt5440 = extractvalue { {}*, i64 } %999, 0
  %.elt5442 = extractvalue { {}*, i64 } %999, 1
  %cond5249 = icmp eq i64 %.elt5442, 0
  %1000 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %ERERBT.4 = select i1 %cond5249, {}* %1000, {}* %.elt5440
  br label %tag67

header-check-br4499:                              ; preds = %tag384
  %irc-bit-cast4503 = bitcast {}* %130 to i8*
  %gep4504 = getelementptr inbounds i8, i8* %irc-bit-cast4503, i64 -9
  %irc-bit-cast4505 = bitcast i8* %gep4504 to i64*
  %1001 = load i64, i64* %irc-bit-cast4505, align 8
  %1002 = add i64 %1001, -1309
  %1003 = lshr i64 %1002, 3
  %1004 = shl i64 %1002, 61
  %1005 = or i64 %1003, %1004
  switch i64 %1005, label %tag769 [
    i64 2, label %tag330
    i64 4, label %tag330
    i64 5, label %tag330
    i64 0, label %tag330
  ]

normal-dest4514:                                  ; preds = %tag747
  %ptrtoint4515 = ptrtoint {}* %374 to i64
  %entry-point-addr-uint4516 = add i64 %ptrtoint4515, 7
  %entry-point-addr4517 = inttoptr i64 %entry-point-addr-uint4516 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4518 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4517, align 8
  %1006 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4518({}* %374, i64 2, {}* nonnull %.in, {}* nonnull %216, {}* null, {}* null)
          to label %normal-dest4521 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4521:                                  ; preds = %normal-dest4514
  %.elt5586 = extractvalue { {}*, i64 } %1006, 0
  %.elt5588 = extractvalue { {}*, i64 } %1006, 1
  %cond5275 = icmp eq i64 %.elt5588, 0
  %1007 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113471.1 = select i1 %cond5275, {}* %1007, {}* %.elt5586
  br label %tag202

normal-dest4556:                                  ; preds = %tag754
  %ptrtoint4557 = ptrtoint {}* %380 to i64
  %entry-point-addr-uint4558 = add i64 %ptrtoint4557, 7
  %entry-point-addr4559 = inttoptr i64 %entry-point-addr-uint4558 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4560 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4559, align 8
  %1008 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4560({}* %380, i64 2, {}* nonnull %.in5757, {}* nonnull %246, {}* null, {}* null)
          to label %normal-dest4563 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4563:                                  ; preds = %normal-dest4556
  %.elt5769 = extractvalue { {}*, i64 } %1008, 0
  %.elt5771 = extractvalue { {}*, i64 } %1008, 1
  %cond5309 = icmp eq i64 %.elt5771, 0
  %1009 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112772.1 = select i1 %cond5309, {}* %1009, {}* %.elt5769
  br label %tag533

header-check-br4569:                              ; preds = %tag870
  %gep4574 = getelementptr inbounds i8, i8* %192, i64 -9
  %irc-bit-cast4575 = bitcast i8* %gep4574 to i64*
  %1010 = load i64, i64* %irc-bit-cast4575, align 8
  %1011 = add i64 %1010, -1309
  %1012 = lshr i64 %1011, 3
  %1013 = shl i64 %1011, 61
  %1014 = or i64 %1012, %1013
  switch i64 %1014, label %tag877 [
    i64 2, label %tag516
    i64 4, label %tag516
    i64 5, label %tag516
    i64 0, label %tag516
  ]

header-check-br4582:                              ; preds = %tag824
  %irc-bit-cast4586 = bitcast {}* %386 to i8*
  %gep4587 = getelementptr inbounds i8, i8* %irc-bit-cast4586, i64 -9
  %irc-bit-cast4588 = bitcast i8* %gep4587 to i64*
  %1015 = load i64, i64* %irc-bit-cast4588, align 8
  %1016 = add i64 %1015, -1309
  %1017 = lshr i64 %1016, 3
  %1018 = shl i64 %1016, 61
  %1019 = or i64 %1017, %1018
  switch i64 %1019, label %tag707 [
    i64 2, label %tag236
    i64 4, label %tag236
    i64 5, label %tag236
    i64 0, label %tag236
  ]

normal-dest4611:                                  ; preds = %tag769
  %1020 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %1021 = invoke {}* @cc_safe_fdefinition({}* %1020)
          to label %normal-dest4613 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4613:                                  ; preds = %normal-dest4611
  %1022 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %1023 = invoke {}* @cc_safe_fdefinition({}* %1022)
          to label %normal-dest4615 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4615:                                  ; preds = %normal-dest4613
  %ptrtoint4616 = ptrtoint {}* %1023 to i64
  %entry-point-addr-uint4617 = add i64 %ptrtoint4616, 7
  %entry-point-addr4618 = inttoptr i64 %entry-point-addr-uint4617 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4619 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4618, align 8
  %1024 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4619({}* %1023, i64 1, {}* %O.0, {}* null, {}* null, {}* null)
          to label %normal-dest4622 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4622:                                  ; preds = %normal-dest4615
  %.elt5502 = extractvalue { {}*, i64 } %1024, 0
  %.elt5504 = extractvalue { {}*, i64 } %1024, 1
  %cond5263 = icmp eq i64 %.elt5504, 0
  %1025 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113146.0 = select i1 %cond5263, {}* %1025, {}* %.elt5502
  %1026 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %1027 = invoke {}* @cc_safe_fdefinition({}* %1026)
          to label %normal-dest4629 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4629:                                  ; preds = %normal-dest4622
  %ptrtoint4630 = ptrtoint {}* %1027 to i64
  %entry-point-addr-uint4631 = add i64 %ptrtoint4630, 7
  %entry-point-addr4632 = inttoptr i64 %entry-point-addr-uint4631 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4633 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4632, align 8
  %1028 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4633({}* %1027, i64 1, {}* %.in5748, {}* null, {}* null, {}* null)
          to label %normal-dest4636 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4636:                                  ; preds = %normal-dest4629
  %.elt5506 = extractvalue { {}*, i64 } %1028, 0
  %.elt5508 = extractvalue { {}*, i64 } %1028, 1
  %cond5264 = icmp eq i64 %.elt5508, 0
  %1029 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113147.0 = select i1 %cond5264, {}* %1029, {}* %.elt5506
  %1030 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %1031 = invoke {}* @cc_safe_fdefinition({}* %1030)
          to label %normal-dest4643 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4643:                                  ; preds = %normal-dest4636
  %1032 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %1033 = invoke {}* @cc_safe_fdefinition({}* %1032)
          to label %normal-dest4645 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4645:                                  ; preds = %normal-dest4643
  %ptrtoint4646 = ptrtoint {}* %1033 to i64
  %entry-point-addr-uint4647 = add i64 %ptrtoint4646, 7
  %entry-point-addr4648 = inttoptr i64 %entry-point-addr-uint4647 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4649 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4648, align 8
  %1034 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4649({}* %1033, i64 2, {}* %O.0, {}* %.in5748, {}* null, {}* null)
          to label %normal-dest4652 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4652:                                  ; preds = %normal-dest4645
  %.elt5510 = extractvalue { {}*, i64 } %1034, 0
  %.elt5512 = extractvalue { {}*, i64 } %1034, 1
  %cond5265 = icmp eq i64 %.elt5512, 0
  %1035 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113151.0 = select i1 %cond5265, {}* %1035, {}* %.elt5510
  %ptrtoint4658 = ptrtoint {}* %1031 to i64
  %entry-point-addr-uint4659 = add i64 %ptrtoint4658, 7
  %entry-point-addr4660 = inttoptr i64 %entry-point-addr-uint4659 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4661 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4660, align 8
  %1036 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4661({}* %1031, i64 1, {}* %G113151.0, {}* null, {}* null, {}* null)
          to label %normal-dest4664 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4664:                                  ; preds = %normal-dest4652
  %.elt5514 = extractvalue { {}*, i64 } %1036, 0
  %.elt5516 = extractvalue { {}*, i64 } %1036, 1
  %cond5266 = icmp eq i64 %.elt5516, 0
  %1037 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113148.0 = select i1 %cond5266, {}* %1037, {}* %.elt5514
  %ptrtoint4670 = ptrtoint {}* %1021 to i64
  %entry-point-addr-uint4671 = add i64 %ptrtoint4670, 7
  %entry-point-addr4672 = inttoptr i64 %entry-point-addr-uint4671 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4673 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4672, align 8
  %1038 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4673({}* %1021, i64 4, {}* %G113146.0, {}* %G113147.0, {}* %G113148.0, {}* %1037)
          to label %normal-dest4676 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4676:                                  ; preds = %normal-dest4664
  %.elt5518 = extractvalue { {}*, i64 } %1038, 0
  %.elt5520 = extractvalue { {}*, i64 } %1038, 1
  %cond5267 = icmp eq i64 %.elt5520, 0
  %1039 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113144.0 = select i1 %cond5267, {}* %1039, {}* %.elt5518
  %ptrtoint4682 = ptrtoint {}* %383 to i64
  %entry-point-addr-uint4683 = add i64 %ptrtoint4682, 7
  %entry-point-addr4684 = inttoptr i64 %entry-point-addr-uint4683 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4685 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4684, align 8
  %1040 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4685({}* %383, i64 1, {}* %G113144.0, {}* null, {}* null, {}* null)
          to label %tag67 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4715:                                  ; preds = %tag777
  %ptrtoint4716 = ptrtoint {}* %385 to i64
  %entry-point-addr-uint4717 = add i64 %ptrtoint4716, 7
  %entry-point-addr4718 = inttoptr i64 %entry-point-addr-uint4717 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4719 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4718, align 8
  %1041 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4719({}* %385, i64 1, {}* %124, {}* null, {}* null, {}* null)
          to label %normal-dest4722 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4722:                                  ; preds = %normal-dest4715
  %.elt5840 = extractvalue { {}*, i64 } %1041, 0
  %.elt5842 = extractvalue { {}*, i64 } %1041, 1
  %cond5319 = icmp eq i64 %.elt5842, 0
  %1042 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %STATISCH.4 = select i1 %cond5319, {}* %1042, {}* %.elt5840
  br label %tag20

header-check-br4759:                              ; preds = %tag261
  %gep4764 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast4765 = bitcast i8* %gep4764 to i64*
  %1043 = load i64, i64* %irc-bit-cast4765, align 8
  %1044 = add i64 %1043, -1309
  %1045 = lshr i64 %1044, 3
  %1046 = shl i64 %1044, 61
  %1047 = or i64 %1045, %1046
  switch i64 %1047, label %tag201 [
    i64 2, label %tag530
    i64 4, label %tag530
    i64 5, label %tag530
    i64 0, label %tag530
  ]

normal-dest4836:                                  ; preds = %tag809
  %ptrtoint4837 = ptrtoint {}* %392 to i64
  %entry-point-addr-uint4838 = add i64 %ptrtoint4837, 7
  %entry-point-addr4839 = inttoptr i64 %entry-point-addr-uint4838 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4840 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4839, align 8
  %1048 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4840({}* %392, i64 2, {}* inttoptr (i64 4 to {}*), {}* %STATISCH.26625, {}* null, {}* null)
          to label %normal-dest4843 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4843:                                  ; preds = %normal-dest4836
  %.elt5614 = extractvalue { {}*, i64 } %1048, 0
  %.elt5616 = extractvalue { {}*, i64 } %1048, 1
  %cond5280 = icmp eq i64 %.elt5616, 0
  %1049 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %STATISCH.5 = select i1 %cond5280, {}* %1049, {}* %.elt5614
  br label %tag20

header-check-br4849:                              ; preds = %tag516
  %irc-bit-cast4853 = bitcast {}* %360 to i8*
  %gep4854 = getelementptr inbounds i8, i8* %irc-bit-cast4853, i64 -9
  %irc-bit-cast4855 = bitcast i8* %gep4854 to i64*
  %1050 = load i64, i64* %irc-bit-cast4855, align 8
  %1051 = add i64 %1050, -1309
  %1052 = lshr i64 %1051, 3
  %1053 = shl i64 %1051, 61
  %1054 = or i64 %1052, %1053
  switch i64 %1054, label %tag877 [
    i64 2, label %tag104
    i64 4, label %tag104
    i64 5, label %tag104
    i64 0, label %tag104
  ]

normal-dest4858:                                  ; preds = %tag814
  %1055 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %1056 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %1057 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %1058 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint4859 = ptrtoint {}* %396 to i64
  %entry-point-addr-uint4860 = add i64 %ptrtoint4859, 7
  %entry-point-addr4861 = inttoptr i64 %entry-point-addr-uint4860 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4862 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4861, align 8
  %1059 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4862({}* %396, i64 5, {}* %1055, {}* %1056, {}* %"%DOLIST-VAR1028.06605", {}* %1057, {}* %1058)
          to label %normal-dest4865 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4865:                                  ; preds = %normal-dest4858
  %.elt5422 = extractvalue { {}*, i64 } %1059, 0
  %.elt5424 = extractvalue { {}*, i64 } %1059, 1
  %cond5245 = icmp eq i64 %.elt5424, 0
  %1060 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %"%DOLIST-VAR1028.2" = select i1 %cond5245, {}* %1060, {}* %.elt5422
  br label %tag116.backedge

normal-dest4874:                                  ; preds = %tag816
  %ptrtoint4875 = ptrtoint {}* %400 to i64
  %entry-point-addr-uint4876 = add i64 %ptrtoint4875, 7
  %entry-point-addr4877 = inttoptr i64 %entry-point-addr-uint4876 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4878 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4877, align 8
  %1061 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4878({}* %400, i64 2, {}* nonnull %.in, {}* nonnull %59, {}* null, {}* null)
          to label %normal-dest4881 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4881:                                  ; preds = %normal-dest4874
  %.elt5546 = extractvalue { {}*, i64 } %1061, 0
  %.elt5548 = extractvalue { {}*, i64 } %1061, 1
  %cond5270 = icmp eq i64 %.elt5548, 0
  %1062 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113271.1 = select i1 %cond5270, {}* %1062, {}* %.elt5546
  br label %tag791

normal-dest4899:                                  ; preds = %tag819
  %ptrtoint4900 = ptrtoint {}* %403 to i64
  %entry-point-addr-uint4901 = add i64 %ptrtoint4900, 7
  %entry-point-addr4902 = inttoptr i64 %entry-point-addr-uint4901 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4903 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4902, align 8
  %1063 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4903({}* %403, i64 1, {}* %405, {}* null, {}* null, {}* null)
          to label %normal-dest4906 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4906:                                  ; preds = %normal-dest4899
  %.elt5633 = extractvalue { {}*, i64 } %1063, 0
  %.elt5635 = extractvalue { {}*, i64 } %1063, 1
  %cond5283 = icmp eq i64 %.elt5635, 0
  %1064 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %S_NICHTS.4 = select i1 %cond5283, {}* %1064, {}* %.elt5633
  br label %tag67

normal-dest4953:                                  ; preds = %normal-dest1027
  call void @unreachableError()
  unreachable

normal-dest4955:                                  ; preds = %tag834
  %1065 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 62), align 16
  %1066 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 64), align 16
  %1067 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 66), align 16
  %1068 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %ptrtoint4956 = ptrtoint {}* %407 to i64
  %entry-point-addr-uint4957 = add i64 %ptrtoint4956, 7
  %entry-point-addr4958 = inttoptr i64 %entry-point-addr-uint4957 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4959 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4958, align 8
  %1069 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4959({}* %407, i64 5, {}* %1065, {}* %1066, {}* %190, {}* %1067, {}* %1068)
          to label %normal-dest4962 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest4962:                                  ; preds = %normal-dest4955
  %.elt5605 = extractvalue { {}*, i64 } %1069, 0
  %.elt5607 = extractvalue { {}*, i64 } %1069, 1
  %cond5278 = icmp eq i64 %.elt5607, 0
  %1070 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in5598 = select i1 %cond5278, {}* %1070, {}* %.elt5605
  %.val6292.pre = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  br label %tag748

normal-dest4979:                                  ; preds = %tag840
  %ptrtoint4980 = ptrtoint {}* %412 to i64
  %entry-point-addr-uint4981 = add i64 %ptrtoint4980, 7
  %entry-point-addr4982 = inttoptr i64 %entry-point-addr-uint4981 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4983 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4982, align 8
  %1071 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4983({}* %412, i64 2, {}* nonnull %.in, {}* nonnull %339, {}* null, {}* null)
          to label %normal-dest4986 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest4986:                                  ; preds = %normal-dest4979
  %.elt5570 = extractvalue { {}*, i64 } %1071, 0
  %.elt5572 = extractvalue { {}*, i64 } %1071, 1
  %cond5273 = icmp eq i64 %.elt5572, 0
  %1072 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G113391.1 = select i1 %cond5273, {}* %1072, {}* %.elt5570
  br label %tag22

normal-dest4994:                                  ; preds = %tag842
  %ptrtoint4995 = ptrtoint {}* %414 to i64
  %entry-point-addr-uint4996 = add i64 %ptrtoint4995, 7
  %entry-point-addr4997 = inttoptr i64 %entry-point-addr-uint4996 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point4998 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr4997, align 8
  %1073 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point4998({}* %414, i64 2, {}* inttoptr (i64 4 to {}*), {}* %PROPAGIERT.16607, {}* null, {}* null)
          to label %normal-dest5001 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5001:                                  ; preds = %normal-dest4994
  %.elt5494 = extractvalue { {}*, i64 } %1073, 0
  %.elt5496 = extractvalue { {}*, i64 } %1073, 1
  %cond5261 = icmp eq i64 %.elt5496, 0
  %1074 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %PROPAGIERT.4 = select i1 %cond5261, {}* %1074, {}* %.elt5494
  br label %tag67

normal-dest5019:                                  ; preds = %tag847
  %ptrtoint5020 = ptrtoint {}* %416 to i64
  %entry-point-addr-uint5021 = add i64 %ptrtoint5020, 7
  %entry-point-addr5022 = inttoptr i64 %entry-point-addr-uint5021 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5023 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5022, align 8
  %1075 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5023({}* %416, i64 2, {}* %O.0, {}* %.in5748, {}* null, {}* null)
          to label %normal-dest5026 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5026:                                  ; preds = %normal-dest5019
  %.elt5406 = extractvalue { {}*, i64 } %1075, 0
  %.elt5408 = extractvalue { {}*, i64 } %1075, 1
  %cond5243 = icmp eq i64 %.elt5408, 0
  %1076 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %.in = select i1 %cond5243, {}* %1076, {}* %.elt5406
  %1077 = bitcast {}* %.in to i8*
  %1078 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1255), align 8
  %1079 = icmp eq {}* %1078, %1076
  %.val62886594 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 13), align 8
  %object.06595 = select i1 %1079, {}* %.val62886594, {}* %1076
  %1080 = icmp eq {}* %object.06595, %1076
  %G113514.06596 = select i1 %1080, {}* %.val62886594, {}* %1076
  %1081 = icmp eq {}* %G113514.06596, %1076
  br i1 %1081, label %tag410, label %tag365.lr.ph

tag365.lr.ph:                                     ; preds = %normal-dest5026
  %1082 = ptrtoint {}* %.in to i64
  %single-float-tag-only3933 = and i64 %1082, 7
  %fixnum-tag-only26625594 = and i64 %1082, 3
  %fixnump-test2663 = icmp ne i64 %fixnum-tag-only26625594, 0
  %test4055 = icmp eq i64 %single-float-tag-only3933, 1
  %or.cond6270 = and i1 %fixnump-test2663, %test4055
  %gep4057 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast4058 = bitcast i8* %gep4057 to i64*
  br label %tag365

header-check-br5032:                              ; preds = %tag111
  %gep5037 = getelementptr inbounds i8, i8* %1077, i64 -9
  %irc-bit-cast5038 = bitcast i8* %gep5037 to i64*
  %1083 = load i64, i64* %irc-bit-cast5038, align 8
  %1084 = add i64 %1083, -1309
  %1085 = lshr i64 %1084, 3
  %1086 = shl i64 %1084, 61
  %1087 = or i64 %1085, %1086
  switch i64 %1087, label %tag379 [
    i64 2, label %tag811
    i64 4, label %tag811
    i64 5, label %tag811
    i64 0, label %tag811
  ]

header-check-br5066:                              ; preds = %tag335
  %gep5071 = getelementptr inbounds i8, i8* %450, i64 -9
  %irc-bit-cast5072 = bitcast i8* %gep5071 to i64*
  %1088 = load i64, i64* %irc-bit-cast5072, align 8
  %1089 = add i64 %1088, -1309
  %1090 = lshr i64 %1089, 3
  %1091 = shl i64 %1089, 61
  %1092 = or i64 %1090, %1091
  switch i64 %1092, label %tag395 [
    i64 2, label %tag39
    i64 4, label %tag39
    i64 5, label %tag39
    i64 0, label %tag39
  ]

normal-dest5098:                                  ; preds = %tag872
  %ptrtoint5099 = ptrtoint {}* %430 to i64
  %entry-point-addr-uint5100 = add i64 %ptrtoint5099, 7
  %entry-point-addr5101 = inttoptr i64 %entry-point-addr-uint5100 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5102 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5101, align 8
  %1093 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5102({}* %430, i64 1, {}* %424, {}* null, {}* null, {}* null)
          to label %normal-dest5105 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5105:                                  ; preds = %normal-dest5098
  %.elt5471 = extractvalue { {}*, i64 } %1093, 0
  %.elt5473 = extractvalue { {}*, i64 } %1093, 1
  %cond5256 = icmp eq i64 %.elt5473, 0
  %1094 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %PROGRAMM.4 = select i1 %cond5256, {}* %1094, {}* %.elt5471
  br label %tag67

normal-dest5132:                                  ; preds = %tag877
  %1095 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 84), align 16
  %1096 = invoke {}* @cc_safe_fdefinition({}* %1095)
          to label %normal-dest5134 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5134:                                  ; preds = %normal-dest5132
  %1097 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %1098 = invoke {}* @cc_safe_fdefinition({}* %1097)
          to label %normal-dest5136 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5136:                                  ; preds = %normal-dest5134
  %ptrtoint5137 = ptrtoint {}* %1098 to i64
  %entry-point-addr-uint5138 = add i64 %ptrtoint5137, 7
  %entry-point-addr5139 = inttoptr i64 %entry-point-addr-uint5138 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5140 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5139, align 8
  %1099 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5140({}* %1098, i64 1, {}* %O.0, {}* null, {}* null, {}* null)
          to label %normal-dest5143 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5143:                                  ; preds = %normal-dest5136
  %.elt5713 = extractvalue { {}*, i64 } %1099, 0
  %.elt5715 = extractvalue { {}*, i64 } %1099, 1
  %cond5301 = icmp eq i64 %.elt5715, 0
  %1100 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112655.0 = select i1 %cond5301, {}* %1100, {}* %.elt5713
  %1101 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %1102 = invoke {}* @cc_safe_fdefinition({}* %1101)
          to label %normal-dest5150 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5150:                                  ; preds = %normal-dest5143
  %ptrtoint5151 = ptrtoint {}* %1102 to i64
  %entry-point-addr-uint5152 = add i64 %ptrtoint5151, 7
  %entry-point-addr5153 = inttoptr i64 %entry-point-addr-uint5152 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5154 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5153, align 8
  %1103 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5154({}* %1102, i64 1, {}* %.in5748, {}* null, {}* null, {}* null)
          to label %normal-dest5157 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5157:                                  ; preds = %normal-dest5150
  %.elt5717 = extractvalue { {}*, i64 } %1103, 0
  %.elt5719 = extractvalue { {}*, i64 } %1103, 1
  %cond5302 = icmp eq i64 %.elt5719, 0
  %1104 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112656.0 = select i1 %cond5302, {}* %1104, {}* %.elt5717
  %1105 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 86), align 16
  %1106 = invoke {}* @cc_safe_fdefinition({}* %1105)
          to label %normal-dest5164 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5164:                                  ; preds = %normal-dest5157
  %1107 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 399), align 8
  %1108 = invoke {}* @cc_safe_fdefinition({}* %1107)
          to label %normal-dest5166 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5166:                                  ; preds = %normal-dest5164
  %ptrtoint5167 = ptrtoint {}* %1108 to i64
  %entry-point-addr-uint5168 = add i64 %ptrtoint5167, 7
  %entry-point-addr5169 = inttoptr i64 %entry-point-addr-uint5168 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5170 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5169, align 8
  %1109 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5170({}* %1108, i64 2, {}* %O.0, {}* %.in5748, {}* null, {}* null)
          to label %normal-dest5173 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5173:                                  ; preds = %normal-dest5166
  %.elt5721 = extractvalue { {}*, i64 } %1109, 0
  %.elt5723 = extractvalue { {}*, i64 } %1109, 1
  %cond5303 = icmp eq i64 %.elt5723, 0
  %1110 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112660.0 = select i1 %cond5303, {}* %1110, {}* %.elt5721
  %ptrtoint5179 = ptrtoint {}* %1106 to i64
  %entry-point-addr-uint5180 = add i64 %ptrtoint5179, 7
  %entry-point-addr5181 = inttoptr i64 %entry-point-addr-uint5180 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5182 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5181, align 8
  %1111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5182({}* %1106, i64 1, {}* %G112660.0, {}* null, {}* null, {}* null)
          to label %normal-dest5185 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5185:                                  ; preds = %normal-dest5173
  %.elt5725 = extractvalue { {}*, i64 } %1111, 0
  %.elt5727 = extractvalue { {}*, i64 } %1111, 1
  %cond5304 = icmp eq i64 %.elt5727, 0
  %1112 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112657.0 = select i1 %cond5304, {}* %1112, {}* %.elt5725
  %ptrtoint5191 = ptrtoint {}* %1096 to i64
  %entry-point-addr-uint5192 = add i64 %ptrtoint5191, 7
  %entry-point-addr5193 = inttoptr i64 %entry-point-addr-uint5192 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5194 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5193, align 8
  %1113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5194({}* %1096, i64 4, {}* %G112655.0, {}* %G112656.0, {}* %G112657.0, {}* %1112)
          to label %normal-dest5197 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5197:                                  ; preds = %normal-dest5185
  %.elt5729 = extractvalue { {}*, i64 } %1113, 0
  %.elt5731 = extractvalue { {}*, i64 } %1113, 1
  %cond5305 = icmp eq i64 %.elt5731, 0
  %1114 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %G112653.0 = select i1 %cond5305, {}* %1114, {}* %.elt5729
  %ptrtoint5203 = ptrtoint {}* %432 to i64
  %entry-point-addr-uint5204 = add i64 %ptrtoint5203, 7
  %entry-point-addr5205 = inttoptr i64 %entry-point-addr-uint5204 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5206 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5205, align 8
  %1115 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5206({}* %432, i64 1, {}* %G112653.0, {}* null, {}* null, {}* null)
          to label %tag67 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5215:                                  ; preds = %tag878
  %ptrtoint5216 = ptrtoint {}* %434 to i64
  %entry-point-addr-uint5217 = add i64 %ptrtoint5216, 7
  %entry-point-addr5218 = inttoptr i64 %entry-point-addr-uint5217 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point5219 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr5218, align 8
  %1116 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point5219({}* %434, i64 1, {}* %23, {}* null, {}* null, {}* null)
          to label %normal-dest5222 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest5222:                                  ; preds = %normal-dest5215
  %.elt5426 = extractvalue { {}*, i64 } %1116, 0
  %.elt5428 = extractvalue { {}*, i64 } %1116, 1
  %cond5246 = icmp eq i64 %.elt5428, 0
  %1117 = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  %NICHTS.4 = select i1 %cond5246, {}* %1117, {}* %.elt5426
  br label %tag67
}

; Function Attrs: uwtable
define internal void @RUN-ALL.33() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !246 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str-*MAKE-SPECIAL", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CORE, i64 0, i64 0))
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 3), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 2, {}* %"CONTAB[3]*")
  %"CONTAB[1]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1), align 8
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 0, {}* %"CONTAB[1]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str-CWR_CONSTRAINT_DEBUG, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-COMMON-LISP-USER, i64 0, i64 0))
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 7), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 6, {}* %"CONTAB[7]*")
  %"CONTAB[5]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 5), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 4, {}* %"CONTAB[5]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-BOUNDP, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 11, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-COMMON-LISP, i64 0, i64 0))
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 11), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 10, {}* %"CONTAB[11]*")
  %"CONTAB[9]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 9), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 8, {}* %"CONTAB[9]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_nil({ i8*, i8*, i64 }* nonnull @constants-table, i64 12)
  tail call void @ltvc_make_t({ i8*, i8*, i64 }* nonnull @constants-table, i64 13)
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 15, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-TOP-LEVEL, i64 0, i64 0))
  %"CONTAB[15]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 15), align 8
  %"CONTAB[2]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 14, {}* %"CONTAB[15]*", {}* %"CONTAB[2]*1")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^1^TOP-COMPILE-FILE", i8* getelementptr inbounds ([36 x i8], [36 x i8]* @"str-cwr=objekte.lisp^1^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-CWR_VORSCHLAG_DEBUG, i64 0, i64 0))
  %"CONTAB[17]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 17), align 8
  %"CONTAB[6]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 16, {}* %"CONTAB[17]*", {}* %"CONTAB[6]*2")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^69^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^69^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 19, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-CWR_FEHLER_DEBUG, i64 0, i64 0))
  %"CONTAB[19]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 19), align 8
  %"CONTAB[6]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 18, {}* %"CONTAB[19]*", {}* %"CONTAB[6]*3")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^70^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^70^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 21, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-CWR_AUSGABE_DEBUG, i64 0, i64 0))
  %"CONTAB[21]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 21), align 8
  %"CONTAB[6]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 20, {}* %"CONTAB[21]*", {}* %"CONTAB[6]*4")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^71^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^71^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 23, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-CWR_KNAPP_DEBUG, i64 0, i64 0))
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 23), align 8
  %"CONTAB[6]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 22, {}* %"CONTAB[23]*", {}* %"CONTAB[6]*5")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^72^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^72^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 25, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-CWR_INTERAKTIV, i64 0, i64 0))
  %"CONTAB[25]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 25), align 8
  %"CONTAB[6]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 24, {}* %"CONTAB[25]*", {}* %"CONTAB[6]*6")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^73^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^73^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-CWR=ABARBEITUNG_DEBUG", i64 0, i64 0))
  %"CONTAB[27]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 27), align 8
  %"CONTAB[6]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 26, {}* %"CONTAB[27]*", {}* %"CONTAB[6]*7")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^74^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^74^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 29, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-CWR=UEBERSETZEN_DEBUG", i64 0, i64 0))
  %"CONTAB[29]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 29), align 8
  %"CONTAB[6]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 28, {}* %"CONTAB[29]*", {}* %"CONTAB[6]*8")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^75^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^75^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 31, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-CWR_TRICKFILM, i64 0, i64 0))
  %"CONTAB[31]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 31), align 8
  %"CONTAB[6]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 30, {}* %"CONTAB[31]*", {}* %"CONTAB[6]*9")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^76^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^76^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 33, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str-CWR_FUNKTIONEN_NACHLADEN, i64 0, i64 0))
  %"CONTAB[33]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 33), align 8
  %"CONTAB[6]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 32, {}* %"CONTAB[33]*", {}* %"CONTAB[6]*10")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^77^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^77^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 35, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str-CWR_ZEITMESSUNG_DEBUG, i64 0, i64 0))
  %"CONTAB[35]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 35), align 8
  %"CONTAB[6]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 34, {}* %"CONTAB[35]*", {}* %"CONTAB[6]*11")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^78^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^78^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-CWR_STATISTIK_DEBUG, i64 0, i64 0))
  %"CONTAB[37]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 37), align 8
  %"CONTAB[6]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 36, {}* %"CONTAB[37]*", {}* %"CONTAB[6]*12")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^79^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^79^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 39, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-CWR_NICHT_TESTEN, i64 0, i64 0))
  %"CONTAB[39]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 39), align 8
  %"CONTAB[6]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 38, {}* %"CONTAB[39]*", {}* %"CONTAB[6]*13")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^80^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^80^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 41, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-CWR_STATISTIK, i64 0, i64 0))
  %"CONTAB[41]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 41), align 8
  %"CONTAB[6]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 40, {}* %"CONTAB[41]*", {}* %"CONTAB[6]*14")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^82^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^82^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 43, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-MAKE-CWR=STATISTIK_TYP", i64 0, i64 0))
  %"CONTAB[43]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 43), align 8
  %"CONTAB[6]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 42, {}* %"CONTAB[43]*", {}* %"CONTAB[6]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 45, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str-ANZ_VORSCHLAGSZUSTAENDE, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 47, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-KEYWORD, i64 0, i64 0))
  %"CONTAB[47]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 47), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 46, {}* %"CONTAB[47]*")
  %"CONTAB[45]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 45), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 44, {}* %"CONTAB[45]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 49, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str-ANZKORREKTURZUSTAENDE, i64 0, i64 0))
  %"CONTAB[49]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 49), align 8
  %"CONTAB[46]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 48, {}* %"CONTAB[49]*", {}* %"CONTAB[46]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 51, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str-ANZCONSTRAINTSGETESTET, i64 0, i64 0))
  %"CONTAB[51]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 51), align 8
  %"CONTAB[46]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 50, {}* %"CONTAB[51]*", {}* %"CONTAB[46]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 53, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-FDEFINITION, i64 0, i64 0))
  %"CONTAB[53]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 53), align 8
  %"CONTAB[10]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 52, {}* %"CONTAB[53]*", {}* %"CONTAB[10]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 55, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-FUNCTION, i64 0, i64 0))
  %"CONTAB[55]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 55), align 8
  %"CONTAB[10]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 54, {}* %"CONTAB[55]*", {}* %"CONTAB[10]*19")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 57, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-SYMBOL, i64 0, i64 0))
  %"CONTAB[57]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 57), align 8
  %"CONTAB[10]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 56, {}* %"CONTAB[57]*", {}* %"CONTAB[10]*20")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 59, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-SYMBOL-FUNCTION, i64 0, i64 0))
  %"CONTAB[59]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 59), align 8
  %"CONTAB[10]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 58, {}* %"CONTAB[59]*", {}* %"CONTAB[10]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 61, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-ERROR, i64 0, i64 0))
  %"CONTAB[61]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 61), align 8
  %"CONTAB[10]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 60, {}* %"CONTAB[61]*", {}* %"CONTAB[10]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 63, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-TYPE-ERROR, i64 0, i64 0))
  %"CONTAB[63]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 63), align 8
  %"CONTAB[10]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 62, {}* %"CONTAB[63]*", {}* %"CONTAB[10]*23")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 65, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-DATUM, i64 0, i64 0))
  %"CONTAB[65]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 65), align 8
  %"CONTAB[46]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 64, {}* %"CONTAB[65]*", {}* %"CONTAB[46]*24")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 67, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-EXPECTED-TYPE, i64 0, i64 0))
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 67), align 8
  %"CONTAB[46]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 66, {}* %"CONTAB[67]*", {}* %"CONTAB[46]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str-OR, i64 0, i64 0))
  %"CONTAB[70]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 70), align 16
  %"CONTAB[10]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 69, {}* %"CONTAB[70]*", {}* %"CONTAB[10]*26")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 68, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 72, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-CWR=STATISTIK_RUECKSETZEN", i64 0, i64 0))
  %"CONTAB[72]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 72), align 16
  %"CONTAB[6]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 71, {}* %"CONTAB[72]*", {}* %"CONTAB[6]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 74, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-SETF-LAMBDA-LIST, i64 0, i64 0))
  %"CONTAB[74]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 74), align 16
  %"CONTAB[2]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 73, {}* %"CONTAB[74]*", {}* %"CONTAB[2]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 76, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-SET-SOURCE-INFO, i64 0, i64 0))
  %"CONTAB[76]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 76), align 16
  %"CONTAB[2]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 75, {}* %"CONTAB[76]*", {}* %"CONTAB[2]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 79, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-CURRENT-SOURCE-FILE, i64 0, i64 0))
  %"CONTAB[79]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 79), align 8
  %"CONTAB[2]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 78, {}* %"CONTAB[79]*", {}* %"CONTAB[2]*30")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 77, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 10052 to {}*), {}* inttoptr (i64 364 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 81, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-*CURRENT-FORM-LINENO*", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 83, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-COMPILER, i64 0, i64 0))
  %"CONTAB[83]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 83), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 82, {}* %"CONTAB[83]*")
  %"CONTAB[81]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 81), align 8
  %"CONTAB[82]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 82), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 80, {}* %"CONTAB[81]*", {}* %"CONTAB[82]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^91^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^91^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 85, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-BACKQUOTE-APPEND, i64 0, i64 0))
  %"CONTAB[85]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 85), align 8
  %"CONTAB[2]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 84, {}* %"CONTAB[85]*", {}* %"CONTAB[2]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 87, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-LIST, i64 0, i64 0))
  %"CONTAB[87]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 87), align 8
  %"CONTAB[10]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 86, {}* %"CONTAB[87]*", {}* %"CONTAB[10]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 89, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-VORSCHLAG, i64 0, i64 0))
  %"CONTAB[89]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 89), align 8
  %"CONTAB[6]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 88, {}* %"CONTAB[89]*", {}* %"CONTAB[6]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 91, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-CONSTRAINT, i64 0, i64 0))
  %"CONTAB[91]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 91), align 8
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 90, {}* %"CONTAB[91]*", {}* %"CONTAB[6]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 93, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-HEILMITTEL, i64 0, i64 0))
  %"CONTAB[93]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 93), align 8
  %"CONTAB[6]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 92, {}* %"CONTAB[93]*", {}* %"CONTAB[6]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 95, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-RELATIONEN, i64 0, i64 0))
  %"CONTAB[95]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 95), align 8
  %"CONTAB[6]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 94, {}* %"CONTAB[95]*", {}* %"CONTAB[6]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 97, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-UEBERWACHEN, i64 0, i64 0))
  %"CONTAB[97]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 97), align 8
  %"CONTAB[6]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 96, {}* %"CONTAB[97]*", {}* %"CONTAB[6]*37")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 99, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-INVERS, i64 0, i64 0))
  %"CONTAB[99]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 99), align 8
  %"CONTAB[6]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 98, {}* %"CONTAB[99]*", {}* %"CONTAB[6]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 101, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-WERT_SETZEN, i64 0, i64 0))
  %"CONTAB[101]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 101), align 8
  %"CONTAB[6]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 100, {}* %"CONTAB[101]*", {}* %"CONTAB[6]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 103, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-WERT_SETZEN_LOKAL, i64 0, i64 0))
  %"CONTAB[103]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 103), align 8
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 102, {}* %"CONTAB[103]*", {}* %"CONTAB[6]*40")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 105, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-WERT_ZURUECKZIEHEN, i64 0, i64 0))
  %"CONTAB[105]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 105), align 8
  %"CONTAB[6]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 104, {}* %"CONTAB[105]*", {}* %"CONTAB[6]*41")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 107, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-WERT_ZURUECK_LOKAL, i64 0, i64 0))
  %"CONTAB[107]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 107), align 8
  %"CONTAB[6]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 106, {}* %"CONTAB[107]*", {}* %"CONTAB[6]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 109, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-PARAMETER_BEKANNT, i64 0, i64 0))
  %"CONTAB[109]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 109), align 8
  %"CONTAB[6]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 108, {}* %"CONTAB[109]*", {}* %"CONTAB[6]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 111, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-PARAMETER_UNBEKANNT, i64 0, i64 0))
  %"CONTAB[111]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 111), align 8
  %"CONTAB[6]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 110, {}* %"CONTAB[111]*", {}* %"CONTAB[6]*44")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 113, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-AGENDA_LESEN, i64 0, i64 0))
  %"CONTAB[113]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 113), align 8
  %"CONTAB[6]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 112, {}* %"CONTAB[113]*", {}* %"CONTAB[6]*45")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 115, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-DATEIEN, i64 0, i64 0))
  %"CONTAB[115]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 115), align 8
  %"CONTAB[6]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 114, {}* %"CONTAB[115]*", {}* %"CONTAB[6]*46")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 117, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-VERZEICHNIS, i64 0, i64 0))
  %"CONTAB[117]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 117), align 8
  %"CONTAB[6]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 116, {}* %"CONTAB[117]*", {}* %"CONTAB[6]*47")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 119, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-ABLAUF_BEARBEITUNG, i64 0, i64 0))
  %"CONTAB[119]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 119), align 8
  %"CONTAB[6]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 118, {}* %"CONTAB[119]*", {}* %"CONTAB[6]*48")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 121, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-WERTE_BEREICH, i64 0, i64 0))
  %"CONTAB[121]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 121), align 8
  %"CONTAB[6]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 120, {}* %"CONTAB[121]*", {}* %"CONTAB[6]*49")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 123, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str-WERT_SETZEN_OHNE_SPEICHERN, i64 0, i64 0))
  %"CONTAB[123]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 123), align 8
  %"CONTAB[6]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 122, {}* %"CONTAB[123]*", {}* %"CONTAB[6]*50")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 125, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str-WERT_SETZEN_LOKAL_OHNE_SPEICHERN, i64 0, i64 0))
  %"CONTAB[125]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 125), align 8
  %"CONTAB[6]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 124, {}* %"CONTAB[125]*", {}* %"CONTAB[6]*51")
  %"CONTAB[69]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 126, i64 3, {}* %"CONTAB[69]*52", {}* %"CONTAB[56]*53", {}* %"CONTAB[54]*54")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 128, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=COKE_STANDARD_SLOTS", i64 0, i64 0))
  %"CONTAB[128]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 128), align 16
  %"CONTAB[6]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 127, {}* %"CONTAB[128]*", {}* %"CONTAB[6]*55")
  %"CONTAB[78]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 129, i64 4, {}* %"CONTAB[78]*56", {}* inttoptr (i64 10884 to {}*), {}* inttoptr (i64 396 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^99^TOP-COMPILE-FILE", i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-cwr=objekte.lisp^99^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 131, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-SET-DIFFERENCE, i64 0, i64 0))
  %"CONTAB[131]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 131), align 8
  %"CONTAB[10]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 130, {}* %"CONTAB[131]*", {}* %"CONTAB[10]*57")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 133, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-YAS=BENUTZER_SLOTS", i64 0, i64 0))
  %"CONTAB[133]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 133), align 8
  %"CONTAB[6]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 132, {}* %"CONTAB[133]*", {}* %"CONTAB[6]*58")
  %"CONTAB[69]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 134, i64 3, {}* %"CONTAB[69]*59", {}* %"CONTAB[56]*60", {}* %"CONTAB[54]*61")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 136, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-CWR=BENUTZER_SLOTS", i64 0, i64 0))
  %"CONTAB[136]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 136), align 16
  %"CONTAB[6]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 135, {}* %"CONTAB[136]*", {}* %"CONTAB[6]*62")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 139, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-OBJEKT, i64 0, i64 0))
  %"CONTAB[139]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 139), align 8
  %"CONTAB[6]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 138, {}* %"CONTAB[139]*", {}* %"CONTAB[6]*63")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 137, i64 1, {}* %"CONTAB[138]*")
  %"CONTAB[78]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 140, i64 4, {}* %"CONTAB[78]*64", {}* inttoptr (i64 12476 to {}*), {}* inttoptr (i64 424 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 141, i64 1, {}* %"CONTAB[138]*65")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^106^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^106^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 143, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-CWR=NUR_WB_LADEN", i64 0, i64 0))
  %"CONTAB[143]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 143), align 8
  %"CONTAB[6]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 142, {}* %"CONTAB[143]*", {}* %"CONTAB[6]*66")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 144, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str-Wissensbasen;", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 146, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-CWR=DIALOG-SCHLIESSEN", i64 0, i64 0))
  %"CONTAB[146]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 146), align 16
  %"CONTAB[6]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 145, {}* %"CONTAB[146]*", {}* %"CONTAB[6]*67")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 148, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-CWR-DATEIEN_LADEN, i64 0, i64 0))
  %"CONTAB[148]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 148), align 16
  %"CONTAB[6]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 147, {}* %"CONTAB[148]*", {}* %"CONTAB[6]*68")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 150, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-ZWO=AUSWERTUNG_DER_MENUES", i64 0, i64 0))
  %"CONTAB[150]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 150), align 16
  %"CONTAB[6]*69" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 149, {}* %"CONTAB[150]*", {}* %"CONTAB[6]*69")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 152, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-ZWE=ALLES_UEBERSETZEN", i64 0, i64 0))
  %"CONTAB[152]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 152), align 16
  %"CONTAB[6]*70" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 151, {}* %"CONTAB[152]*", {}* %"CONTAB[6]*70")
  %"CONTAB[69]*71" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*72" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*73" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 153, i64 3, {}* %"CONTAB[69]*71", {}* %"CONTAB[56]*72", {}* %"CONTAB[54]*73")
  ret void
}

; Function Attrs: nounwind
declare void @ltvc_make_base_string({ i8*, i8*, i64 }*, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_package({ i8*, i8*, i64 }*, i64, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_symbol({ i8*, i8*, i64 }*, i64, {}*, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_nil({ i8*, i8*, i64 }*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_t({ i8*, i8*, i64 }*, i64) local_unnamed_addr #1

declare void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @ltvc_make_list({ i8*, i8*, i64 }*, i64, i64, ...) local_unnamed_addr #1

; Function Attrs: uwtable
define internal void @RUN-ALL.34() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !247 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 155, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-CWR=AUFRUF", i64 0, i64 0))
  %"CONTAB[155]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 155), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 154, {}* %"CONTAB[155]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 158, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-&OPTIONAL", i64 0, i64 0))
  %"CONTAB[158]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 158), align 16
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 157, {}* %"CONTAB[158]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 160, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-WAS, i64 0, i64 0))
  %"CONTAB[160]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 160), align 16
  %"CONTAB[6]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 159, {}* %"CONTAB[160]*", {}* %"CONTAB[6]*1")
  %"CONTAB[157]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[159]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 156, i64 2, {}* %"CONTAB[157]*", {}* %"CONTAB[159]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 161, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 13004 to {}*), {}* inttoptr (i64 440 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[157]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[159]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 162, i64 2, {}* %"CONTAB[157]*2", {}* %"CONTAB[159]*3")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^110^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^110^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 163, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-instanzen;", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 165, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-B=ORDNER-P", i64 0, i64 0))
  %"CONTAB[165]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 165), align 8
  %"CONTAB[6]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 164, {}* %"CONTAB[165]*", {}* %"CONTAB[6]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 167, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-CHOOSE-FILE-DIALOG, i64 0, i64 0))
  %"CONTAB[167]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 167), align 8
  %"CONTAB[6]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 166, {}* %"CONTAB[167]*", {}* %"CONTAB[6]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 169, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-BUTTON-STRING, i64 0, i64 0))
  %"CONTAB[169]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 169), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 168, {}* %"CONTAB[169]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 171, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str-COKE=S", i64 0, i64 0))
  %"CONTAB[171]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 171), align 8
  %"CONTAB[6]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 170, {}* %"CONTAB[171]*", {}* %"CONTAB[6]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 173, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-LADEN, i64 0, i64 0))
  %"CONTAB[173]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 173), align 8
  %"CONTAB[46]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 172, {}* %"CONTAB[173]*", {}* %"CONTAB[46]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 175, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-DIRECTORY, i64 0, i64 0))
  %"CONTAB[175]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 175), align 8
  %"CONTAB[46]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 174, {}* %"CONTAB[175]*", {}* %"CONTAB[46]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 177, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"str-CWR=BENUTZER_INSTANZEN_LOESCHEN", i64 0, i64 0))
  %"CONTAB[177]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 177), align 8
  %"CONTAB[6]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 176, {}* %"CONTAB[177]*", {}* %"CONTAB[6]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 179, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-YAS=ALLES_LOESCHEN", i64 0, i64 0))
  %"CONTAB[179]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 179), align 8
  %"CONTAB[6]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 178, {}* %"CONTAB[179]*", {}* %"CONTAB[6]*10")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 181, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str-ZER=ZERTEILEN", i64 0, i64 0))
  %"CONTAB[181]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 181), align 8
  %"CONTAB[6]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 180, {}* %"CONTAB[181]*", {}* %"CONTAB[6]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 183, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-CWR=NEUE_INVERSE", i64 0, i64 0))
  %"CONTAB[183]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 183), align 8
  %"CONTAB[6]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 182, {}* %"CONTAB[183]*", {}* %"CONTAB[6]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 185, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str-YAS_LETZTE_DATEI_INSTANZEN, i64 0, i64 0))
  %"CONTAB[185]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 185), align 8
  %"CONTAB[6]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 184, {}* %"CONTAB[185]*", {}* %"CONTAB[6]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 187, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-YAS_LETZTE_DATEI, i64 0, i64 0))
  %"CONTAB[187]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 187), align 8
  %"CONTAB[6]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 186, {}* %"CONTAB[187]*", {}* %"CONTAB[6]*14")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 189, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"str-CWR=UMSETZEN", i64 0, i64 0))
  %"CONTAB[189]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 189), align 8
  %"CONTAB[6]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 188, {}* %"CONTAB[189]*", {}* %"CONTAB[6]*15")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 190, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 193, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-ALLES_LOESCHEN, i64 0, i64 0))
  %"CONTAB[193]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 193), align 8
  %"CONTAB[6]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 192, {}* %"CONTAB[193]*", {}* %"CONTAB[6]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 196, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-ORDNER, i64 0, i64 0))
  %"CONTAB[196]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 196), align 16
  %"CONTAB[6]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 195, {}* %"CONTAB[196]*", {}* %"CONTAB[6]*17")
  %"CONTAB[195]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 195), align 8
  %"CONTAB[163]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 163), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 194, i64 2, {}* %"CONTAB[195]*", {}* %"CONTAB[163]*")
  %"CONTAB[157]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[159]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  %"CONTAB[192]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 192), align 16
  %"CONTAB[194]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 194), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 191, i64 4, {}* %"CONTAB[157]*18", {}* %"CONTAB[159]*19", {}* %"CONTAB[192]*", {}* %"CONTAB[194]*")
  %"CONTAB[78]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 197, i64 4, {}* %"CONTAB[78]*20", {}* inttoptr (i64 13780 to {}*), {}* inttoptr (i64 472 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[195]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 195), align 8
  %"CONTAB[163]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 163), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 199, i64 2, {}* %"CONTAB[195]*21", {}* %"CONTAB[163]*22")
  %"CONTAB[157]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[159]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  %"CONTAB[192]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 192), align 16
  %"CONTAB[199]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 199), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 198, i64 4, {}* %"CONTAB[157]*23", {}* %"CONTAB[159]*24", {}* %"CONTAB[192]*25", {}* %"CONTAB[199]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^118^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^118^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 201, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str-YAS=LESE_WERT", i64 0, i64 0))
  %"CONTAB[201]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 201), align 8
  %"CONTAB[6]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 200, {}* %"CONTAB[201]*", {}* %"CONTAB[6]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 203, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-ZU_OBJEKT, i64 0, i64 0))
  %"CONTAB[203]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 203), align 8
  %"CONTAB[6]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 202, {}* %"CONTAB[203]*", {}* %"CONTAB[6]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 205, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CONS, i64 0, i64 0))
  %"CONTAB[205]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 205), align 8
  %"CONTAB[10]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 204, {}* %"CONTAB[205]*", {}* %"CONTAB[10]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 207, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-EQ-INCOMPARABLE, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 209, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-CLASP-CLEAVIR, i64 0, i64 0))
  %"CONTAB[209]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 209), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 208, {}* %"CONTAB[209]*")
  %"CONTAB[207]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 207), align 8
  %"CONTAB[208]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 208), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 206, {}* %"CONTAB[207]*", {}* %"CONTAB[208]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 211, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-EQL-UNDERLYING, i64 0, i64 0))
  %"CONTAB[211]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 211), align 8
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 210, {}* %"CONTAB[211]*", {}* %"CONTAB[2]*")
  %"CONTAB[69]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 212, i64 3, {}* %"CONTAB[69]*29", {}* %"CONTAB[56]*30", {}* %"CONTAB[54]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 214, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"str-CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG", i64 0, i64 0))
  %"CONTAB[214]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 214), align 16
  %"CONTAB[6]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 213, {}* %"CONTAB[214]*", {}* %"CONTAB[6]*32")
  %"CONTAB[88]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 215, i64 1, {}* %"CONTAB[88]*")
  %"CONTAB[78]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 216, i64 4, {}* %"CONTAB[78]*33", {}* inttoptr (i64 15988 to {}*), {}* inttoptr (i64 540 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[88]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 217, i64 1, {}* %"CONTAB[88]*34")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^135^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^135^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 219, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-YAS=HAT_OBJEKT_SLOT_P", i64 0, i64 0))
  %"CONTAB[219]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 219), align 8
  %"CONTAB[6]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 218, {}* %"CONTAB[219]*", {}* %"CONTAB[6]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 221, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-ZU_ATTRIBUT, i64 0, i64 0))
  %"CONTAB[221]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 221), align 8
  %"CONTAB[6]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 220, {}* %"CONTAB[221]*", {}* %"CONTAB[6]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 223, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-YAS=NEUER_SLOT", i64 0, i64 0))
  %"CONTAB[223]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 223), align 8
  %"CONTAB[6]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 222, {}* %"CONTAB[223]*", {}* %"CONTAB[6]*37")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 225, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INFORMANT, i64 0, i64 0))
  %"CONTAB[225]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 225), align 8
  %"CONTAB[46]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 224, {}* %"CONTAB[225]*", {}* %"CONTAB[46]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 227, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-EINGABE, i64 0, i64 0))
  %"CONTAB[227]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 227), align 8
  %"CONTAB[6]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 226, {}* %"CONTAB[227]*", {}* %"CONTAB[6]*39")
  %"CONTAB[69]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 228, i64 3, {}* %"CONTAB[69]*40", {}* %"CONTAB[56]*41", {}* %"CONTAB[54]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 230, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"str-CWR=INIT", i64 0, i64 0))
  %"CONTAB[230]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 230), align 16
  %"CONTAB[6]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 229, {}* %"CONTAB[230]*", {}* %"CONTAB[6]*43")
  %"CONTAB[78]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 231, i64 4, {}* %"CONTAB[78]*44", {}* inttoptr (i64 16892 to {}*), {}* inttoptr (i64 564 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^141^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^141^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 233, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"str-YAS=ALLE", i64 0, i64 0))
  %"CONTAB[233]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 233), align 8
  %"CONTAB[6]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 232, {}* %"CONTAB[233]*", {}* %"CONTAB[6]*45")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 235, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-YAS=SCHREIBE_WERT", i64 0, i64 0))
  %"CONTAB[235]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 235), align 8
  %"CONTAB[6]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 234, {}* %"CONTAB[235]*", {}* %"CONTAB[6]*46")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.35() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !248 {
entry:
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 236, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 237, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 17596 to {}*), {}* inttoptr (i64 588 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^147^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^147^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 239, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-F-VERBALISIEREN, i64 0, i64 0))
  %"CONTAB[239]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 239), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 238, {}* %"CONTAB[239]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 241, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str-YAS=TUE_METHODE", i64 0, i64 0))
  %"CONTAB[241]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 241), align 8
  %"CONTAB[6]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 240, {}* %"CONTAB[241]*", {}* %"CONTAB[6]*1")
  %"CONTAB[69]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 242, i64 3, {}* %"CONTAB[69]*2", {}* %"CONTAB[56]*3", {}* %"CONTAB[54]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 244, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=VERBALISIERE-OBJEKT", i64 0, i64 0))
  %"CONTAB[244]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 244), align 16
  %"CONTAB[6]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 243, {}* %"CONTAB[244]*", {}* %"CONTAB[6]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 247, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-WER, i64 0, i64 0))
  %"CONTAB[247]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 247), align 8
  %"CONTAB[6]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 246, {}* %"CONTAB[247]*", {}* %"CONTAB[6]*6")
  %"CONTAB[246]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 246), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 245, i64 1, {}* %"CONTAB[246]*")
  %"CONTAB[78]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 248, i64 4, {}* %"CONTAB[78]*7", {}* inttoptr (i64 18776 to {}*), {}* inttoptr (i64 620 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[246]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 246), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 249, i64 1, {}* %"CONTAB[246]*8")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^155^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^155^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 251, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-KOB=ALLE_DIALOGE_SCHLIESSEN", i64 0, i64 0))
  %"CONTAB[251]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 251), align 8
  %"CONTAB[6]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 250, {}* %"CONTAB[251]*", {}* %"CONTAB[6]*9")
  %"CONTAB[69]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 252, i64 3, {}* %"CONTAB[69]*10", {}* %"CONTAB[56]*11", {}* %"CONTAB[54]*12")
  %"CONTAB[78]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 253, i64 4, {}* %"CONTAB[78]*13", {}* inttoptr (i64 19312 to {}*), {}* inttoptr (i64 644 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^161^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^161^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 255, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str-JA, i64 0, i64 0))
  %"CONTAB[255]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 255), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 254, {}* %"CONTAB[255]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 257, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-B=JA-NEIN", i64 0, i64 0))
  %"CONTAB[257]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 257), align 8
  %"CONTAB[6]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 256, {}* %"CONTAB[257]*", {}* %"CONTAB[6]*14")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 258, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @"str-Wollen Sie wirklich die bestehende Wissensbasis ueberschreiben? Wissen Sie was Sie da tun?", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 259, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-Wissensbasiszustaende;", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 261, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-LOAD, i64 0, i64 0))
  %"CONTAB[261]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 261), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 260, {}* %"CONTAB[261]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 262, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-Wissensbasiszustaende;", i64 0, i64 0))
  %"CONTAB[69]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 263, i64 3, {}* %"CONTAB[69]*15", {}* %"CONTAB[56]*16", {}* %"CONTAB[54]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 265, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-CWR=FALL_LADEN", i64 0, i64 0))
  %"CONTAB[265]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 265), align 8
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 264, {}* %"CONTAB[265]*", {}* %"CONTAB[6]*18")
  %"CONTAB[157]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[159]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 266, i64 2, {}* %"CONTAB[157]*", {}* %"CONTAB[159]*")
  %"CONTAB[78]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 267, i64 4, {}* %"CONTAB[78]*19", {}* inttoptr (i64 19588 to {}*), {}* inttoptr (i64 656 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[157]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[159]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 268, i64 2, {}* %"CONTAB[157]*20", {}* %"CONTAB[159]*21")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^164^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^164^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 270, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-YAS=SPEICHER_ALLE_OBJEKTE", i64 0, i64 0))
  %"CONTAB[270]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 270), align 16
  %"CONTAB[6]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 269, {}* %"CONTAB[270]*", {}* %"CONTAB[6]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 272, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-AUSNAHMEBEDINGUNG, i64 0, i64 0))
  %"CONTAB[272]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 272), align 16
  %"CONTAB[46]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 271, {}* %"CONTAB[272]*", {}* %"CONTAB[46]*23")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 274, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str-CWR=BENUTZER_KLASSEN", i64 0, i64 0))
  %"CONTAB[274]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 274), align 16
  %"CONTAB[6]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 273, {}* %"CONTAB[274]*", {}* %"CONTAB[6]*24")
  %"CONTAB[69]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 275, i64 3, {}* %"CONTAB[69]*25", {}* %"CONTAB[56]*26", {}* %"CONTAB[54]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 277, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-CWR=SPEICHERE_OBERE_1/2-EBENE", i64 0, i64 0))
  %"CONTAB[277]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 277), align 8
  %"CONTAB[6]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 276, {}* %"CONTAB[277]*", {}* %"CONTAB[6]*28")
  %"CONTAB[78]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 278, i64 4, {}* %"CONTAB[78]*29", {}* inttoptr (i64 21968 to {}*), {}* inttoptr (i64 716 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 280, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-LAMBDA, i64 0, i64 0))
  %"CONTAB[280]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 280), align 16
  %"CONTAB[10]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 279, {}* %"CONTAB[280]*", {}* %"CONTAB[10]*30")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 281, i64 1, {}* %"CONTAB[138]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^179^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^179^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 283, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-F-NICHT_SPEICHERN, i64 0, i64 0))
  %"CONTAB[283]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 283), align 8
  %"CONTAB[46]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 282, {}* %"CONTAB[283]*", {}* %"CONTAB[46]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 285, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-YAS=EINE_KLASSE_P", i64 0, i64 0))
  %"CONTAB[285]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 285), align 8
  %"CONTAB[6]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 284, {}* %"CONTAB[285]*", {}* %"CONTAB[6]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 287, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str-YAS=DER_VATER", i64 0, i64 0))
  %"CONTAB[287]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 287), align 8
  %"CONTAB[6]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 286, {}* %"CONTAB[287]*", {}* %"CONTAB[6]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 289, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-ART, i64 0, i64 0))
  %"CONTAB[289]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 289), align 8
  %"CONTAB[46]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 288, {}* %"CONTAB[289]*", {}* %"CONTAB[46]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 291, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INSTANZEN, i64 0, i64 0))
  %"CONTAB[291]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 291), align 8
  %"CONTAB[46]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 290, {}* %"CONTAB[291]*", {}* %"CONTAB[46]*35")
  %"CONTAB[69]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 292, i64 3, {}* %"CONTAB[69]*36", {}* %"CONTAB[56]*37", {}* %"CONTAB[54]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 294, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"str-CWR=SPEICHERE_UNTERE_1/2-EBENE", i64 0, i64 0))
  %"CONTAB[294]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 294), align 16
  %"CONTAB[6]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 293, {}* %"CONTAB[294]*", {}* %"CONTAB[6]*39")
  %"CONTAB[78]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 295, i64 4, {}* %"CONTAB[78]*40", {}* inttoptr (i64 22660 to {}*), {}* inttoptr (i64 740 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 296, i64 1, {}* %"CONTAB[138]*41")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^185^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^185^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 298, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-YAS=LOESCHE_ALLE_KINDER", i64 0, i64 0))
  %"CONTAB[298]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 298), align 16
  %"CONTAB[6]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 297, {}* %"CONTAB[298]*", {}* %"CONTAB[6]*42")
  %"CONTAB[69]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 299, i64 3, {}* %"CONTAB[69]*43", {}* %"CONTAB[56]*44", {}* %"CONTAB[54]*45")
  %"CONTAB[78]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 300, i64 4, {}* %"CONTAB[78]*46", {}* inttoptr (i64 23700 to {}*), {}* inttoptr (i64 776 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 302, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-SET-DOCUMENTATION, i64 0, i64 0))
  %"CONTAB[302]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 302), align 16
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 301, {}* %"CONTAB[302]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 303, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @"str-Loesche alle benutzerdefinierten Instanzen", i64 0, i64 0))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^194^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^194^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 304, i64 3, {}* %"CONTAB[69]*47", {}* %"CONTAB[56]*48", {}* %"CONTAB[54]*49")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 306, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"str-CWR=WISSENSBASIZUSTAND-SICHERN", i64 0, i64 0))
  %"CONTAB[306]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 306), align 16
  %"CONTAB[6]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 305, {}* %"CONTAB[306]*", {}* %"CONTAB[6]*50")
  %"CONTAB[78]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 307, i64 4, {}* %"CONTAB[78]*51", {}* inttoptr (i64 24404 to {}*), {}* inttoptr (i64 796 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^199^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^199^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 309, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-VECTOR, i64 0, i64 0))
  %"CONTAB[309]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 309), align 8
  %"CONTAB[10]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 308, {}* %"CONTAB[309]*", {}* %"CONTAB[10]*52")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 311, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-NULL, i64 0, i64 0))
  %"CONTAB[311]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 311), align 8
  %"CONTAB[10]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 310, {}* %"CONTAB[311]*", {}* %"CONTAB[10]*53")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 313, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-ETYPECASE-ERROR, i64 0, i64 0))
  %"CONTAB[313]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 313), align 8
  %"CONTAB[2]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 312, {}* %"CONTAB[313]*", {}* %"CONTAB[2]*54")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.36() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !249 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.34)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.35)
  ret void
}

declare void @cc_invoke_sub_run_all_function(void ()*) local_unnamed_addr #3

; Function Attrs: uwtable
define internal void @RUN-ALL.37() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !250 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.33)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.36)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.38() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !251 {
entry:
  %"CONTAB[204]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %"CONTAB[308]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 308), align 16
  %"CONTAB[310]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 310), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 314, i64 3, {}* %"CONTAB[204]*", {}* %"CONTAB[308]*", {}* %"CONTAB[310]*")
  %"CONTAB[204]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 204), align 16
  %"CONTAB[310]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 310), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 315, i64 2, {}* %"CONTAB[204]*1", {}* %"CONTAB[310]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 317, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-FIXNUM, i64 0, i64 0))
  %"CONTAB[317]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 317), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 316, {}* %"CONTAB[317]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 319, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-SINGLE-FLOAT, i64 0, i64 0))
  %"CONTAB[319]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 319), align 8
  %"CONTAB[10]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 318, {}* %"CONTAB[319]*", {}* %"CONTAB[10]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 321, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-DOUBLE-FLOAT, i64 0, i64 0))
  %"CONTAB[321]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 321), align 8
  %"CONTAB[10]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 320, {}* %"CONTAB[321]*", {}* %"CONTAB[10]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 323, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str-CONVERT-OVERFLOW-RESULT-TO-BIGNUM, i64 0, i64 0))
  %"CONTAB[323]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 323), align 8
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 322, {}* %"CONTAB[323]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 325, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-TWO-ARG-+", i64 0, i64 0))
  %"CONTAB[325]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 325), align 8
  %"CONTAB[2]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 324, {}* %"CONTAB[325]*", {}* %"CONTAB[2]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 327, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CHAR, i64 0, i64 0))
  %"CONTAB[327]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 327), align 8
  %"CONTAB[10]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 326, {}* %"CONTAB[327]*", {}* %"CONTAB[10]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 329, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-TWO-ARG--, i64 0, i64 0))
  %"CONTAB[329]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 329), align 8
  %"CONTAB[2]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 328, {}* %"CONTAB[329]*", {}* %"CONTAB[2]*7")
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 330, i64 2, {}* inttoptr (i64 474 to {}*), {}* inttoptr (i64 466 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 332, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str-CHAR=", i64 0, i64 0))
  %"CONTAB[332]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 332), align 16
  %"CONTAB[10]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 331, {}* %"CONTAB[332]*", {}* %"CONTAB[10]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 334, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-B=KONKATENIERE-NACH-STRING", i64 0, i64 0))
  %"CONTAB[334]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 334), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 333, {}* %"CONTAB[334]*", {}* %"CONTAB[6]*")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 335, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 337, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @str-CWR-WIRKLICHER-ORDNER-MACHEN, i64 0, i64 0))
  %"CONTAB[337]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 337), align 8
  %"CONTAB[6]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 336, {}* %"CONTAB[337]*", {}* %"CONTAB[6]*9")
  %"CONTAB[159]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 338, i64 1, {}* %"CONTAB[159]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 339, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 28240 to {}*), {}* inttoptr (i64 916 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 341, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-ARRAY-RANK, i64 0, i64 0))
  %"CONTAB[341]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 341), align 8
  %"CONTAB[10]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 340, {}* %"CONTAB[341]*", {}* %"CONTAB[10]*10")
  %"CONTAB[159]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 159), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 342, i64 1, {}* %"CONTAB[159]*11")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^202^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^202^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 344, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-PRINT, i64 0, i64 0))
  %"CONTAB[344]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 344), align 16
  %"CONTAB[10]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 343, {}* %"CONTAB[344]*", {}* %"CONTAB[10]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 345, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-Hilfsdateien nachladen", i64 0, i64 0))
  %"CONTAB[69]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 346, i64 3, {}* %"CONTAB[69]*13", {}* %"CONTAB[56]*14", {}* %"CONTAB[54]*15")
  %"CONTAB[78]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 347, i64 4, {}* %"CONTAB[78]*16", {}* inttoptr (i64 29224 to {}*), {}* inttoptr (i64 952 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^237^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^237^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 349, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-YAS=EIN_OBJEKT_P", i64 0, i64 0))
  %"CONTAB[349]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 349), align 8
  %"CONTAB[6]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 348, {}* %"CONTAB[349]*", {}* %"CONTAB[6]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 351, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-UNBEKANNT, i64 0, i64 0))
  %"CONTAB[351]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 351), align 8
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 350, {}* %"CONTAB[351]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 353, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str-CALL-WITH-VARIABLE-BOUND, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 355, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-CLEAVIR-PRIMOP, i64 0, i64 0))
  %"CONTAB[355]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 355), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 354, {}* %"CONTAB[355]*")
  %"CONTAB[353]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 353), align 8
  %"CONTAB[354]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 354), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 352, {}* %"CONTAB[353]*", {}* %"CONTAB[354]*")
  %"CONTAB[69]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 356, i64 3, {}* %"CONTAB[69]*19", {}* %"CONTAB[56]*20", {}* %"CONTAB[54]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 358, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-CWR-WERT-SETZEN, i64 0, i64 0))
  %"CONTAB[358]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 358), align 16
  %"CONTAB[6]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 357, {}* %"CONTAB[358]*", {}* %"CONTAB[6]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 361, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-INSTANZ, i64 0, i64 0))
  %"CONTAB[361]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 361), align 8
  %"CONTAB[6]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 360, {}* %"CONTAB[361]*", {}* %"CONTAB[6]*23")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 363, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-ATTRIBUT, i64 0, i64 0))
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 363), align 8
  %"CONTAB[6]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 362, {}* %"CONTAB[363]*", {}* %"CONTAB[6]*24")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 365, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-WERT, i64 0, i64 0))
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 365), align 8
  %"CONTAB[6]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 364, {}* %"CONTAB[365]*", {}* %"CONTAB[6]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 367, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INFORMANT, i64 0, i64 0))
  %"CONTAB[367]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 367), align 8
  %"CONTAB[6]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 366, {}* %"CONTAB[367]*", {}* %"CONTAB[6]*26")
  %"CONTAB[360]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 360), align 16
  %"CONTAB[362]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  %"CONTAB[366]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 366), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 359, i64 4, {}* %"CONTAB[360]*", {}* %"CONTAB[362]*", {}* %"CONTAB[364]*", {}* %"CONTAB[366]*")
  %"CONTAB[78]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 368, i64 4, {}* %"CONTAB[78]*27", {}* inttoptr (i64 29496 to {}*), {}* inttoptr (i64 964 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[360]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 360), align 16
  %"CONTAB[362]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[364]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  %"CONTAB[366]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 366), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 369, i64 4, {}* %"CONTAB[360]*28", {}* %"CONTAB[362]*29", {}* %"CONTAB[364]*30", {}* %"CONTAB[366]*31")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^241^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^241^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 371, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-PROBE-FILE, i64 0, i64 0))
  %"CONTAB[371]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 371), align 8
  %"CONTAB[10]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 370, {}* %"CONTAB[371]*", {}* %"CONTAB[10]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 373, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-DELETE-FILE, i64 0, i64 0))
  %"CONTAB[373]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 373), align 8
  %"CONTAB[10]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 372, {}* %"CONTAB[373]*", {}* %"CONTAB[10]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 375, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-OPEN, i64 0, i64 0))
  %"CONTAB[375]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 375), align 8
  %"CONTAB[10]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 374, {}* %"CONTAB[375]*", {}* %"CONTAB[10]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 377, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-IF-DOES-NOT-EXIST, i64 0, i64 0))
  %"CONTAB[377]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 377), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 376, {}* %"CONTAB[377]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 379, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-CREATE, i64 0, i64 0))
  %"CONTAB[379]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 379), align 8
  %"CONTAB[46]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 378, {}* %"CONTAB[379]*", {}* %"CONTAB[46]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 381, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-DIRECTION, i64 0, i64 0))
  %"CONTAB[381]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 381), align 8
  %"CONTAB[46]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 380, {}* %"CONTAB[381]*", {}* %"CONTAB[46]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 383, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-OUTPUT, i64 0, i64 0))
  %"CONTAB[383]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 383), align 8
  %"CONTAB[46]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 382, {}* %"CONTAB[383]*", {}* %"CONTAB[46]*37")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 385, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-FUNWIND-PROTECT, i64 0, i64 0))
  %"CONTAB[385]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 385), align 8
  %"CONTAB[2]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 384, {}* %"CONTAB[385]*", {}* %"CONTAB[2]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 387, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str-MULTIPLE-VALUE-PROG1-FUNCTION, i64 0, i64 0))
  %"CONTAB[387]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 387), align 8
  %"CONTAB[2]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 386, {}* %"CONTAB[387]*", {}* %"CONTAB[2]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 390, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str-PRO-AGENDEN_DEFINIEREN, i64 0, i64 0))
  %"CONTAB[390]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 390), align 16
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 389, {}* %"CONTAB[390]*", {}* %"CONTAB[6]*40")
  %"CONTAB[389]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 389), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 388, i64 1, {}* %"CONTAB[389]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 392, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"str-$BERECHNUNG", i64 0, i64 0))
  %"CONTAB[392]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 392), align 16
  %"CONTAB[6]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 391, {}* %"CONTAB[392]*", {}* %"CONTAB[6]*41")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 394, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str-$LISP", i64 0, i64 0))
  %"CONTAB[394]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 394), align 16
  %"CONTAB[6]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 393, {}* %"CONTAB[394]*", {}* %"CONTAB[6]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 396, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"str-PRO=BESTIMME_AKTUELLES_METAOBJEKT", i64 0, i64 0))
  %"CONTAB[396]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 396), align 16
  %"CONTAB[6]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 395, {}* %"CONTAB[396]*", {}* %"CONTAB[6]*43")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.39() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !252 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 398, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-QUOTE, i64 0, i64 0))
  %"CONTAB[398]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 398), align 16
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 397, {}* %"CONTAB[398]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 400, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-YAS=LESE_INFORMANT", i64 0, i64 0))
  %"CONTAB[400]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 400), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 399, {}* %"CONTAB[400]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 402, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"str-$AUSGABE", i64 0, i64 0))
  %"CONTAB[402]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 402), align 16
  %"CONTAB[6]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 401, {}* %"CONTAB[402]*", {}* %"CONTAB[6]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 404, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-CLOSE, i64 0, i64 0))
  %"CONTAB[404]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 404), align 16
  %"CONTAB[10]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 403, {}* %"CONTAB[404]*", {}* %"CONTAB[10]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 406, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-ABORT, i64 0, i64 0))
  %"CONTAB[406]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 406), align 16
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 405, {}* %"CONTAB[406]*", {}* %"CONTAB[46]*")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 407, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 409, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-CWR=SICHER_ERGEBNIS", i64 0, i64 0))
  %"CONTAB[409]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 409), align 8
  %"CONTAB[6]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 408, {}* %"CONTAB[409]*", {}* %"CONTAB[6]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 412, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-DATEI_NAME, i64 0, i64 0))
  %"CONTAB[412]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 412), align 16
  %"CONTAB[6]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 411, {}* %"CONTAB[412]*", {}* %"CONTAB[6]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 414, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-BEFEHLSLISTE, i64 0, i64 0))
  %"CONTAB[414]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 414), align 16
  %"CONTAB[6]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 413, {}* %"CONTAB[414]*", {}* %"CONTAB[6]*5")
  %"CONTAB[411]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 411), align 8
  %"CONTAB[413]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 413), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 410, i64 2, {}* %"CONTAB[411]*", {}* %"CONTAB[413]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 415, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 30892 to {}*), {}* inttoptr (i64 1004 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[411]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 411), align 8
  %"CONTAB[413]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 413), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 416, i64 2, {}* %"CONTAB[411]*6", {}* %"CONTAB[413]*7")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^251^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^251^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 418, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @"str-CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1", i64 0, i64 0))
  %"CONTAB[418]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 418), align 16
  %"CONTAB[6]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 417, {}* %"CONTAB[418]*", {}* %"CONTAB[6]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 420, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-LISTP, i64 0, i64 0))
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 420), align 16
  %"CONTAB[10]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 419, {}* %"CONTAB[420]*", {}* %"CONTAB[10]*9")
  %"CONTAB[69]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 421, i64 3, {}* %"CONTAB[69]*10", {}* %"CONTAB[56]*11", {}* %"CONTAB[54]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 423, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"str-CWR=ANALYSE_GLOBALKONTROLLE_LISTE", i64 0, i64 0))
  %"CONTAB[423]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 423), align 8
  %"CONTAB[6]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 422, {}* %"CONTAB[423]*", {}* %"CONTAB[6]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 426, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-LISTE, i64 0, i64 0))
  %"CONTAB[426]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 426), align 16
  %"CONTAB[6]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 425, {}* %"CONTAB[426]*", {}* %"CONTAB[6]*14")
  %"CONTAB[425]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 425), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 424, i64 1, {}* %"CONTAB[425]*")
  %"CONTAB[78]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 427, i64 4, {}* %"CONTAB[78]*15", {}* inttoptr (i64 35180 to {}*), {}* inttoptr (i64 1116 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[425]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 425), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 428, i64 1, {}* %"CONTAB[425]*16")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^279^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^279^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 430, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-$BERECHNE", i64 0, i64 0))
  %"CONTAB[430]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 430), align 16
  %"CONTAB[6]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 429, {}* %"CONTAB[430]*", {}* %"CONTAB[6]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 432, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-$SUCHEN", i64 0, i64 0))
  %"CONTAB[432]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 432), align 16
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 431, {}* %"CONTAB[432]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 434, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-$GANZE_BERECHNUNG", i64 0, i64 0))
  %"CONTAB[434]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 434), align 16
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 433, {}* %"CONTAB[434]*", {}* %"CONTAB[6]*19")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 436, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str-$EXAKT", i64 0, i64 0))
  %"CONTAB[436]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 436), align 16
  %"CONTAB[6]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 435, {}* %"CONTAB[436]*", {}* %"CONTAB[6]*20")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 439, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"str-$INTERAKTION", i64 0, i64 0))
  %"CONTAB[439]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 439), align 8
  %"CONTAB[6]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 438, {}* %"CONTAB[439]*", {}* %"CONTAB[6]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 441, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"str-$INTERAKTIONSFENSTER_SCHLIESSEN", i64 0, i64 0))
  %"CONTAB[441]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 441), align 8
  %"CONTAB[6]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 440, {}* %"CONTAB[441]*", {}* %"CONTAB[6]*22")
  %"CONTAB[401]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 401), align 8
  %"CONTAB[438]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 438), align 16
  %"CONTAB[440]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 440), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 437, i64 3, {}* %"CONTAB[401]*", {}* %"CONTAB[438]*", {}* %"CONTAB[440]*")
  %"CONTAB[69]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 442, i64 3, {}* %"CONTAB[69]*23", {}* %"CONTAB[56]*24", {}* %"CONTAB[54]*25")
  %"CONTAB[425]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 425), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 443, i64 1, {}* %"CONTAB[425]*26")
  %"CONTAB[78]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 444, i64 4, {}* %"CONTAB[78]*27", {}* inttoptr (i64 35952 to {}*), {}* inttoptr (i64 1140 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[425]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 425), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 445, i64 1, {}* %"CONTAB[425]*28")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^285^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^285^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 447, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-REMOVE-DUPLICATES, i64 0, i64 0))
  %"CONTAB[447]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 447), align 8
  %"CONTAB[10]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 446, {}* %"CONTAB[447]*", {}* %"CONTAB[10]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 449, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"str-CWR=ANALYSIERERE-STEUERUNGSOBJEKT", i64 0, i64 0))
  %"CONTAB[449]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 449), align 8
  %"CONTAB[6]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 448, {}* %"CONTAB[449]*", {}* %"CONTAB[6]*30")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 451, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-ZUORDNUNGS_PROBLEM, i64 0, i64 0))
  %"CONTAB[451]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 451), align 8
  %"CONTAB[6]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 450, {}* %"CONTAB[451]*", {}* %"CONTAB[6]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 453, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-TEST, i64 0, i64 0))
  %"CONTAB[453]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 453), align 8
  %"CONTAB[46]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 452, {}* %"CONTAB[453]*", {}* %"CONTAB[46]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 455, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-EQUAL, i64 0, i64 0))
  %"CONTAB[455]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 455), align 8
  %"CONTAB[10]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 454, {}* %"CONTAB[455]*", {}* %"CONTAB[10]*33")
  %"CONTAB[69]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 456, i64 3, {}* %"CONTAB[69]*34", {}* %"CONTAB[56]*35", {}* %"CONTAB[54]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 458, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-CWR=SPEICHERE_FALL", i64 0, i64 0))
  %"CONTAB[458]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 458), align 16
  %"CONTAB[6]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 457, {}* %"CONTAB[458]*", {}* %"CONTAB[6]*37")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 461, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-DATEI, i64 0, i64 0))
  %"CONTAB[461]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 461), align 8
  %"CONTAB[6]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 460, {}* %"CONTAB[461]*", {}* %"CONTAB[6]*38")
  %"CONTAB[460]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 460), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 459, i64 1, {}* %"CONTAB[460]*")
  %"CONTAB[78]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 462, i64 4, {}* %"CONTAB[78]*39", {}* inttoptr (i64 39460 to {}*), {}* inttoptr (i64 1216 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[460]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 460), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 463, i64 1, {}* %"CONTAB[460]*40")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^304^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^304^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 465, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-MACROCODE, i64 0, i64 0))
  %"CONTAB[465]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 465), align 8
  %"CONTAB[6]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 464, {}* %"CONTAB[465]*", {}* %"CONTAB[6]*41")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 467, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=ABLAUBSTEUERUNG_WURZEL", i64 0, i64 0))
  %"CONTAB[467]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 467), align 8
  %"CONTAB[6]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 466, {}* %"CONTAB[467]*", {}* %"CONTAB[6]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 469, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-REVERSE, i64 0, i64 0))
  %"CONTAB[469]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 469), align 8
  %"CONTAB[10]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 468, {}* %"CONTAB[469]*", {}* %"CONTAB[10]*43")
  %"CONTAB[69]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 470, i64 3, {}* %"CONTAB[69]*44", {}* %"CONTAB[56]*45", {}* %"CONTAB[54]*46")
  %"CONTAB[78]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 471, i64 4, {}* %"CONTAB[78]*47", {}* inttoptr (i64 40760 to {}*), {}* inttoptr (i64 1248 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 472, i64 1, {}* %"CONTAB[138]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^312^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^312^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 474, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-INPUT, i64 0, i64 0))
  %"CONTAB[474]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 474), align 16
  %"CONTAB[46]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 473, {}* %"CONTAB[474]*", {}* %"CONTAB[46]*48")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 476, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-READ, i64 0, i64 0))
  %"CONTAB[476]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 476), align 16
  %"CONTAB[10]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 475, {}* %"CONTAB[476]*", {}* %"CONTAB[10]*49")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 478, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ENDE, i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.40() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !253 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.38)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.39)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.41() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !254 {
entry:
  %"CONTAB[478]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 478), align 16
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 477, {}* %"CONTAB[478]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 480, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-EVAL, i64 0, i64 0))
  %"CONTAB[480]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 480), align 16
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 479, {}* %"CONTAB[480]*", {}* %"CONTAB[10]*")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 481, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 483, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-MY-LOAD, i64 0, i64 0))
  %"CONTAB[483]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 483), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 482, {}* %"CONTAB[483]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 486, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-FILENAME, i64 0, i64 0))
  %"CONTAB[486]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 486), align 16
  %"CONTAB[6]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 485, {}* %"CONTAB[486]*", {}* %"CONTAB[6]*1")
  %"CONTAB[485]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 485), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 484, i64 1, {}* %"CONTAB[485]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 487, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 44712 to {}*), {}* inttoptr (i64 1368 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[485]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 485), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 488, i64 1, {}* %"CONTAB[485]*2")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^327^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^327^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 490, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-CWR=DYNAMISCHE_ATTRIBUTE_INIT", i64 0, i64 0))
  %"CONTAB[490]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 490), align 16
  %"CONTAB[6]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 489, {}* %"CONTAB[490]*", {}* %"CONTAB[6]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 492, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-DO-TIME, i64 0, i64 0))
  %"CONTAB[492]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 492), align 16
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 491, {}* %"CONTAB[492]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 494, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @str-PRO-STATISTIK-INITIALISIEREN, i64 0, i64 0))
  %"CONTAB[494]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 494), align 16
  %"CONTAB[6]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 493, {}* %"CONTAB[494]*", {}* %"CONTAB[6]*4")
  %"CONTAB[69]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 495, i64 3, {}* %"CONTAB[69]*5", {}* %"CONTAB[56]*6", {}* %"CONTAB[54]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 497, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str-CWR=LADE_ES_ES_LOKAL", i64 0, i64 0))
  %"CONTAB[497]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 497), align 8
  %"CONTAB[6]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 496, {}* %"CONTAB[497]*", {}* %"CONTAB[6]*8")
  %"CONTAB[460]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 460), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 498, i64 1, {}* %"CONTAB[460]*")
  %"CONTAB[78]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 499, i64 4, {}* %"CONTAB[78]*9", {}* inttoptr (i64 45588 to {}*), {}* inttoptr (i64 1400 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[460]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 460), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 500, i64 1, {}* %"CONTAB[460]*10")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^350^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^350^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 502, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-YAS=ALLE_OBJEKTE", i64 0, i64 0))
  %"CONTAB[502]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 502), align 16
  %"CONTAB[6]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 501, {}* %"CONTAB[502]*", {}* %"CONTAB[6]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 504, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-YAS=ALLE_SLOTS", i64 0, i64 0))
  %"CONTAB[504]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 504), align 16
  %"CONTAB[6]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 503, {}* %"CONTAB[504]*", {}* %"CONTAB[6]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 506, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=HOLE_INVERSES_ATTRIBUT", i64 0, i64 0))
  %"CONTAB[506]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 506), align 16
  %"CONTAB[6]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 505, {}* %"CONTAB[506]*", {}* %"CONTAB[6]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 508, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ATOM, i64 0, i64 0))
  %"CONTAB[508]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 508), align 16
  %"CONTAB[10]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 507, {}* %"CONTAB[508]*", {}* %"CONTAB[10]*14")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 510, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"str-YAS=SCHREIBE_ZUSAETZLICHEN_WERT", i64 0, i64 0))
  %"CONTAB[510]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 510), align 16
  %"CONTAB[6]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 509, {}* %"CONTAB[510]*", {}* %"CONTAB[6]*15")
  %"CONTAB[69]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 511, i64 3, {}* %"CONTAB[69]*16", {}* %"CONTAB[56]*17", {}* %"CONTAB[54]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 513, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-CWR-SETZE_INVERSE, i64 0, i64 0))
  %"CONTAB[513]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 513), align 8
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 512, {}* %"CONTAB[513]*", {}* %"CONTAB[6]*19")
  %"CONTAB[78]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 514, i64 4, {}* %"CONTAB[78]*20", {}* inttoptr (i64 46540 to {}*), {}* inttoptr (i64 1440 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^360^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^360^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 516, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-YAS=LOESCHE_WERT", i64 0, i64 0))
  %"CONTAB[516]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 516), align 16
  %"CONTAB[6]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 515, {}* %"CONTAB[516]*", {}* %"CONTAB[6]*21")
  %"CONTAB[69]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 517, i64 3, {}* %"CONTAB[69]*22", {}* %"CONTAB[56]*23", {}* %"CONTAB[54]*24")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 519, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-CWR-LOESCHE_INVERSE, i64 0, i64 0))
  %"CONTAB[519]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 519), align 8
  %"CONTAB[6]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 518, {}* %"CONTAB[519]*", {}* %"CONTAB[6]*25")
  %"CONTAB[78]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 520, i64 4, {}* %"CONTAB[78]*26", {}* inttoptr (i64 50328 to {}*), {}* inttoptr (i64 1540 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 521, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @"str-loesche alle slots deren informant invers ist", i64 0, i64 0))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^385^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^385^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 523, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-KOB=AUSGABE_NACHRICHT", i64 0, i64 0))
  %"CONTAB[523]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 523), align 8
  %"CONTAB[6]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 522, {}* %"CONTAB[523]*", {}* %"CONTAB[6]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 525, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-VERZEIGERUNGEN, i64 0, i64 0))
  %"CONTAB[525]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 525), align 8
  %"CONTAB[46]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 524, {}* %"CONTAB[525]*", {}* %"CONTAB[46]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 527, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-KOB=SCHLIESSE_AUSGABE_FENSTER", i64 0, i64 0))
  %"CONTAB[527]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 527), align 8
  %"CONTAB[6]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 526, {}* %"CONTAB[527]*", {}* %"CONTAB[6]*29")
  %"CONTAB[69]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 528, i64 3, {}* %"CONTAB[69]*30", {}* %"CONTAB[56]*31", {}* %"CONTAB[54]*32")
  %"CONTAB[78]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 529, i64 4, {}* %"CONTAB[78]*33", {}* inttoptr (i64 51420 to {}*), {}* inttoptr (i64 1572 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^393^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^393^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 531, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-PROGRAMM, i64 0, i64 0))
  %"CONTAB[531]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 531), align 8
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 530, {}* %"CONTAB[531]*", {}* %"CONTAB[6]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 533, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-PROPAGIERT, i64 0, i64 0))
  %"CONTAB[533]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 533), align 8
  %"CONTAB[6]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 532, {}* %"CONTAB[533]*", {}* %"CONTAB[6]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 535, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-BENUTZER, i64 0, i64 0))
  %"CONTAB[535]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 535), align 8
  %"CONTAB[6]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 534, {}* %"CONTAB[535]*", {}* %"CONTAB[6]*36")
  %"CONTAB[69]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 536, i64 3, {}* %"CONTAB[69]*37", {}* %"CONTAB[56]*38", {}* %"CONTAB[54]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 538, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str-CWR-EIN_DYNAMISCHER_INFORMANT, i64 0, i64 0))
  %"CONTAB[538]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 538), align 16
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 537, {}* %"CONTAB[538]*", {}* %"CONTAB[6]*40")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 541, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-INFO, i64 0, i64 0))
  %"CONTAB[541]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 541), align 8
  %"CONTAB[6]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 540, {}* %"CONTAB[541]*", {}* %"CONTAB[6]*41")
  %"CONTAB[540]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 540), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 539, i64 1, {}* %"CONTAB[540]*")
  %"CONTAB[78]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 542, i64 4, {}* %"CONTAB[78]*42", {}* inttoptr (i64 52120 to {}*), {}* inttoptr (i64 1604 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[540]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 540), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 543, i64 1, {}* %"CONTAB[540]*43")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^401^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^401^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 545, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-ALT, i64 0, i64 0))
  %"CONTAB[545]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 545), align 8
  %"CONTAB[6]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 544, {}* %"CONTAB[545]*", {}* %"CONTAB[6]*44")
  %"CONTAB[69]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 546, i64 3, {}* %"CONTAB[69]*45", {}* %"CONTAB[56]*46", {}* %"CONTAB[54]*47")
  %"CONTAB[78]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 547, i64 4, {}* %"CONTAB[78]*48", {}* inttoptr (i64 52696 to {}*), {}* inttoptr (i64 1624 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^406^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^406^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 549, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-GETF, i64 0, i64 0))
  %"CONTAB[549]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 549), align 8
  %"CONTAB[10]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 548, {}* %"CONTAB[549]*", {}* %"CONTAB[10]*49")
  %"CONTAB[69]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 550, i64 3, {}* %"CONTAB[69]*50", {}* %"CONTAB[56]*51", {}* %"CONTAB[54]*52")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 553, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-SLOT, i64 0, i64 0))
  %"CONTAB[553]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 553), align 8
  %"CONTAB[6]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 552, {}* %"CONTAB[553]*", {}* %"CONTAB[6]*53")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 551, i64 2, {}* %"CONTAB[138]*", {}* %"CONTAB[552]*")
  %"CONTAB[78]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 554, i64 4, {}* %"CONTAB[78]*54", {}* inttoptr (i64 54724 to {}*), {}* inttoptr (i64 1696 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 555, i64 2, {}* %"CONTAB[138]*55", {}* %"CONTAB[552]*56")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^415^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^415^TOP-COMPILE-FILE", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.42() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !255 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 557, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-PUT-F, i64 0, i64 0))
  %"CONTAB[557]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 557), align 8
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 556, {}* %"CONTAB[557]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 559, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-REM-F, i64 0, i64 0))
  %"CONTAB[559]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 559), align 8
  %"CONTAB[2]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 558, {}* %"CONTAB[559]*", {}* %"CONTAB[2]*1")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 560, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 562, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-CWR=SETZE_INVERSES_ATTRIBUT", i64 0, i64 0))
  %"CONTAB[562]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 562), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 561, {}* %"CONTAB[562]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 565, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-NAME, i64 0, i64 0))
  %"CONTAB[565]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 565), align 8
  %"CONTAB[6]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 564, {}* %"CONTAB[565]*", {}* %"CONTAB[6]*2")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[564]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 564), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 563, i64 3, {}* %"CONTAB[138]*", {}* %"CONTAB[552]*", {}* %"CONTAB[564]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 566, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 55140 to {}*), {}* inttoptr (i64 1712 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[564]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 564), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 567, i64 3, {}* %"CONTAB[138]*3", {}* %"CONTAB[552]*4", {}* %"CONTAB[564]*5")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^428^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^428^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 568, i64 3, {}* %"CONTAB[69]*6", {}* %"CONTAB[56]*7", {}* %"CONTAB[54]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 570, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-CWR=HOLE_RELATIONEN_ATTRIBUTE", i64 0, i64 0))
  %"CONTAB[570]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 570), align 16
  %"CONTAB[6]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 569, {}* %"CONTAB[570]*", {}* %"CONTAB[6]*9")
  %"CONTAB[138]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 571, i64 2, {}* %"CONTAB[138]*10", {}* %"CONTAB[552]*11")
  %"CONTAB[78]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 572, i64 4, {}* %"CONTAB[78]*12", {}* inttoptr (i64 56856 to {}*), {}* inttoptr (i64 1776 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 573, i64 2, {}* %"CONTAB[138]*13", {}* %"CONTAB[552]*14")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^444^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^444^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 574, i64 3, {}* %"CONTAB[69]*15", {}* %"CONTAB[56]*16", {}* %"CONTAB[54]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 576, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"str-CWR=SETZE_RELATIONEN_ATTRIBUTE", i64 0, i64 0))
  %"CONTAB[576]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 576), align 16
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 575, {}* %"CONTAB[576]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 579, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-ATTRIBUT_LISTE, i64 0, i64 0))
  %"CONTAB[579]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 579), align 8
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 578, {}* %"CONTAB[579]*", {}* %"CONTAB[6]*19")
  %"CONTAB[138]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[578]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 578), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 577, i64 3, {}* %"CONTAB[138]*20", {}* %"CONTAB[552]*21", {}* %"CONTAB[578]*")
  %"CONTAB[78]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 580, i64 4, {}* %"CONTAB[78]*22", {}* inttoptr (i64 57292 to {}*), {}* inttoptr (i64 1792 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[578]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 578), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 581, i64 3, {}* %"CONTAB[138]*23", {}* %"CONTAB[552]*24", {}* %"CONTAB[578]*25")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^448^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^448^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 582, i64 3, {}* %"CONTAB[69]*26", {}* %"CONTAB[56]*27", {}* %"CONTAB[54]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 584, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-CWR=LESE_PRIORITAET", i64 0, i64 0))
  %"CONTAB[584]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 584), align 16
  %"CONTAB[6]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 583, {}* %"CONTAB[584]*", {}* %"CONTAB[6]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 587, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-PARTNER, i64 0, i64 0))
  %"CONTAB[587]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 587), align 8
  %"CONTAB[6]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 586, {}* %"CONTAB[587]*", {}* %"CONTAB[6]*30")
  %"CONTAB[138]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[586]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 586), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 585, i64 3, {}* %"CONTAB[138]*31", {}* %"CONTAB[552]*32", {}* %"CONTAB[586]*")
  %"CONTAB[78]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 588, i64 4, {}* %"CONTAB[78]*33", {}* inttoptr (i64 58468 to {}*), {}* inttoptr (i64 1828 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[586]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 586), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 589, i64 3, {}* %"CONTAB[138]*34", {}* %"CONTAB[552]*35", {}* %"CONTAB[586]*36")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^457^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^457^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 590, i64 3, {}* %"CONTAB[69]*37", {}* %"CONTAB[56]*38", {}* %"CONTAB[54]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 592, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=SCHREIBE_PRIORITAET", i64 0, i64 0))
  %"CONTAB[592]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 592), align 16
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 591, {}* %"CONTAB[592]*", {}* %"CONTAB[6]*40")
  %"CONTAB[138]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[586]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 586), align 16
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 593, i64 4, {}* %"CONTAB[138]*41", {}* %"CONTAB[552]*42", {}* %"CONTAB[586]*43", {}* %"CONTAB[364]*")
  %"CONTAB[78]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 594, i64 4, {}* %"CONTAB[78]*44", {}* inttoptr (i64 58864 to {}*), {}* inttoptr (i64 1840 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[586]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 586), align 16
  %"CONTAB[364]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 595, i64 4, {}* %"CONTAB[138]*45", {}* %"CONTAB[552]*46", {}* %"CONTAB[586]*47", {}* %"CONTAB[364]*48")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^460^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^460^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 597, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-CWR=DIE_WURZEL", i64 0, i64 0))
  %"CONTAB[597]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 597), align 8
  %"CONTAB[6]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 596, {}* %"CONTAB[597]*", {}* %"CONTAB[6]*49")
  %"CONTAB[69]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 598, i64 3, {}* %"CONTAB[69]*50", {}* %"CONTAB[56]*51", {}* %"CONTAB[54]*52")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 600, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str-CWR=DIE_KLASSEN", i64 0, i64 0))
  %"CONTAB[600]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 600), align 16
  %"CONTAB[6]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 599, {}* %"CONTAB[600]*", {}* %"CONTAB[6]*53")
  %"CONTAB[78]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 601, i64 4, {}* %"CONTAB[78]*54", {}* inttoptr (i64 60032 to {}*), {}* inttoptr (i64 1876 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^469^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^469^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 603, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-META, i64 0, i64 0))
  %"CONTAB[603]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 603), align 8
  %"CONTAB[6]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 602, {}* %"CONTAB[603]*", {}* %"CONTAB[6]*55")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 605, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-KINDER, i64 0, i64 0))
  %"CONTAB[605]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 605), align 8
  %"CONTAB[6]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 604, {}* %"CONTAB[605]*", {}* %"CONTAB[6]*56")
  %"CONTAB[69]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 606, i64 3, {}* %"CONTAB[69]*57", {}* %"CONTAB[56]*58", {}* %"CONTAB[54]*59")
  %"CONTAB[78]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 607, i64 4, {}* %"CONTAB[78]*60", {}* inttoptr (i64 60292 to {}*), {}* inttoptr (i64 1892 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^473^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^473^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 609, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-BENUTZER_MENUE, i64 0, i64 0))
  %"CONTAB[609]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 609), align 8
  %"CONTAB[6]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 608, {}* %"CONTAB[609]*", {}* %"CONTAB[6]*61")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 611, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-ABLAUFKONTROLLE, i64 0, i64 0))
  %"CONTAB[611]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 611), align 8
  %"CONTAB[6]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 610, {}* %"CONTAB[611]*", {}* %"CONTAB[6]*62")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 613, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str-STARTKORREKTUROBJEKTE, i64 0, i64 0))
  %"CONTAB[613]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 613), align 8
  %"CONTAB[6]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 612, {}* %"CONTAB[613]*", {}* %"CONTAB[6]*63")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 615, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str-METAKORREKTUROBJEKTE, i64 0, i64 0))
  %"CONTAB[615]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 615), align 8
  %"CONTAB[6]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 614, {}* %"CONTAB[615]*", {}* %"CONTAB[6]*64")
  %"CONTAB[69]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 616, i64 3, {}* %"CONTAB[69]*65", {}* %"CONTAB[56]*66", {}* %"CONTAB[54]*67")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 618, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-CWR=SYSTEM_KLASSEN", i64 0, i64 0))
  %"CONTAB[618]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 618), align 16
  %"CONTAB[6]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 617, {}* %"CONTAB[618]*", {}* %"CONTAB[6]*68")
  %"CONTAB[78]*69" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 619, i64 4, {}* %"CONTAB[78]*69", {}* inttoptr (i64 60572 to {}*), {}* inttoptr (i64 1904 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^476^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^476^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*70" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*71" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*72" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 620, i64 3, {}* %"CONTAB[69]*70", {}* %"CONTAB[56]*71", {}* %"CONTAB[54]*72")
  %"CONTAB[78]*73" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 621, i64 4, {}* %"CONTAB[78]*73", {}* inttoptr (i64 61332 to {}*), {}* inttoptr (i64 1924 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^481^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^481^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 623, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-REMOVE-IF, i64 0, i64 0))
  %"CONTAB[623]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 623), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 622, {}* %"CONTAB[623]*", {}* %"CONTAB[10]*")
  %"CONTAB[69]*74" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*75" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*76" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 624, i64 3, {}* %"CONTAB[69]*74", {}* %"CONTAB[56]*75", {}* %"CONTAB[54]*76")
  %"CONTAB[78]*77" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 625, i64 4, {}* %"CONTAB[78]*77", {}* inttoptr (i64 61584 to {}*), {}* inttoptr (i64 1940 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 628, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-KLASSE, i64 0, i64 0))
  %"CONTAB[628]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 628), align 16
  %"CONTAB[6]*78" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 627, {}* %"CONTAB[628]*", {}* %"CONTAB[6]*78")
  %"CONTAB[627]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 626, i64 1, {}* %"CONTAB[627]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^485^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^485^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*79" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*80" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*81" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 629, i64 3, {}* %"CONTAB[69]*79", {}* %"CONTAB[56]*80", {}* %"CONTAB[54]*81")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 631, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=SETZE_WERTE_BEREICH", i64 0, i64 0))
  %"CONTAB[631]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 631), align 8
  %"CONTAB[6]*82" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 630, {}* %"CONTAB[631]*", {}* %"CONTAB[6]*82")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.43() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !256 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.41)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.42)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.44() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !257 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.40)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.43)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.45() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !258 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.37)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.44)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.46() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !259 {
entry:
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[120]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 632, i64 3, {}* %"CONTAB[138]*", {}* %"CONTAB[552]*", {}* %"CONTAB[120]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 633, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 64844 to {}*), {}* inttoptr (i64 2088 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[120]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 634, i64 3, {}* %"CONTAB[138]*1", {}* %"CONTAB[552]*2", {}* %"CONTAB[120]*3")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^492^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^492^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 635, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 637, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-CWR=LESE_WERTE_BEREICH", i64 0, i64 0))
  %"CONTAB[637]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 637), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 636, {}* %"CONTAB[637]*", {}* %"CONTAB[6]*")
  %"CONTAB[138]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 638, i64 2, {}* %"CONTAB[138]*4", {}* %"CONTAB[552]*5")
  %"CONTAB[78]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 639, i64 4, {}* %"CONTAB[78]*6", {}* inttoptr (i64 66008 to {}*), {}* inttoptr (i64 2124 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 640, i64 2, {}* %"CONTAB[138]*7", {}* %"CONTAB[552]*8")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^531^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^531^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 643, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-JA_NEIN, i64 0, i64 0))
  %"CONTAB[643]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 643), align 8
  %"CONTAB[6]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 642, {}* %"CONTAB[643]*", {}* %"CONTAB[6]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 645, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ZAHL, i64 0, i64 0))
  %"CONTAB[645]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 645), align 8
  %"CONTAB[6]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 644, {}* %"CONTAB[645]*", {}* %"CONTAB[6]*10")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 647, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-BOOLESCH, i64 0, i64 0))
  %"CONTAB[647]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 647), align 8
  %"CONTAB[6]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 646, {}* %"CONTAB[647]*", {}* %"CONTAB[6]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 649, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-TEXT, i64 0, i64 0))
  %"CONTAB[649]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 649), align 8
  %"CONTAB[6]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 648, {}* %"CONTAB[649]*", {}* %"CONTAB[6]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 651, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-HILFSATTRIBUT, i64 0, i64 0))
  %"CONTAB[651]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 651), align 8
  %"CONTAB[6]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 650, {}* %"CONTAB[651]*", {}* %"CONTAB[6]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 653, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-FARBE, i64 0, i64 0))
  %"CONTAB[653]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 653), align 8
  %"CONTAB[6]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 652, {}* %"CONTAB[653]*", {}* %"CONTAB[6]*14")
  %"CONTAB[642]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 642), align 16
  %"CONTAB[644]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 644), align 16
  %"CONTAB[646]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 646), align 16
  %"CONTAB[648]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 648), align 16
  %"CONTAB[650]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 650), align 16
  %"CONTAB[652]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 652), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 641, i64 6, {}* %"CONTAB[642]*", {}* %"CONTAB[644]*", {}* %"CONTAB[646]*", {}* %"CONTAB[648]*", {}* %"CONTAB[650]*", {}* %"CONTAB[652]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 656, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str-ZAHL<", i64 0, i64 0))
  %"CONTAB[656]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 656), align 16
  %"CONTAB[6]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 655, {}* %"CONTAB[656]*", {}* %"CONTAB[6]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 658, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-KLASSEN_LISTE, i64 0, i64 0))
  %"CONTAB[658]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 658), align 16
  %"CONTAB[6]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 657, {}* %"CONTAB[658]*", {}* %"CONTAB[6]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 660, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-PRIORITAET, i64 0, i64 0))
  %"CONTAB[660]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 660), align 16
  %"CONTAB[6]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 659, {}* %"CONTAB[660]*", {}* %"CONTAB[6]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 662, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-ZUORDNUNGSATTRIBUT, i64 0, i64 0))
  %"CONTAB[662]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 662), align 16
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 661, {}* %"CONTAB[662]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 664, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str-INVERSES_ZUORDNUNGSATTRIBUT, i64 0, i64 0))
  %"CONTAB[664]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 664), align 16
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 663, {}* %"CONTAB[664]*", {}* %"CONTAB[6]*19")
  %"CONTAB[655]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 655), align 8
  %"CONTAB[627]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[657]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 657), align 8
  %"CONTAB[659]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 659), align 8
  %"CONTAB[661]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 661), align 8
  %"CONTAB[663]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 663), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 654, i64 6, {}* %"CONTAB[655]*", {}* %"CONTAB[627]*", {}* %"CONTAB[657]*", {}* %"CONTAB[659]*", {}* %"CONTAB[661]*", {}* %"CONTAB[663]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 666, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-CERROR, i64 0, i64 0))
  %"CONTAB[666]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 666), align 16
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 665, {}* %"CONTAB[666]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 667, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 668, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-unbekannter wertebereich ~A", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 670, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-MAKE-SEQ-ITERATOR, i64 0, i64 0))
  %"CONTAB[670]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 670), align 16
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 669, {}* %"CONTAB[670]*", {}* %"CONTAB[2]*")
  %"CONTAB[69]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 671, i64 3, {}* %"CONTAB[69]*20", {}* %"CONTAB[56]*21", {}* %"CONTAB[54]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 673, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-SEQ-ITERATOR-REF, i64 0, i64 0))
  %"CONTAB[673]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 673), align 8
  %"CONTAB[2]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 672, {}* %"CONTAB[673]*", {}* %"CONTAB[2]*23")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 675, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-SEQ-ITERATOR-NEXT, i64 0, i64 0))
  %"CONTAB[675]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 675), align 8
  %"CONTAB[2]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 674, {}* %"CONTAB[675]*", {}* %"CONTAB[2]*24")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 677, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-SEQ-ITERATOR-ENDP, i64 0, i64 0))
  %"CONTAB[677]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 677), align 8
  %"CONTAB[2]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 676, {}* %"CONTAB[677]*", {}* %"CONTAB[2]*25")
  %"CONTAB[69]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 678, i64 3, {}* %"CONTAB[69]*26", {}* %"CONTAB[56]*27", {}* %"CONTAB[54]*28")
  %"CONTAB[69]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 679, i64 3, {}* %"CONTAB[69]*29", {}* %"CONTAB[56]*30", {}* %"CONTAB[54]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 681, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-CWR=HAT_KLASSE_?_ATTRIBUT", i64 0, i64 0))
  %"CONTAB[681]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 681), align 8
  %"CONTAB[6]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 680, {}* %"CONTAB[681]*", {}* %"CONTAB[6]*32")
  %"CONTAB[627]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[120]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 682, i64 2, {}* %"CONTAB[627]*33", {}* %"CONTAB[120]*34")
  %"CONTAB[78]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 683, i64 4, {}* %"CONTAB[78]*35", {}* inttoptr (i64 66428 to {}*), {}* inttoptr (i64 2140 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 684, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @"str-Hat die KLasse ein Attribut mit dem Wertebereich", i64 0, i64 0))
  %"CONTAB[627]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[120]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 685, i64 2, {}* %"CONTAB[627]*36", {}* %"CONTAB[120]*37")
  %"CONTAB[552]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 686, i64 1, {}* %"CONTAB[552]*38")
  %"CONTAB[552]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 687, i64 1, {}* %"CONTAB[552]*39")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^535^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^535^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 689, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-REMOVE-IF-NOT, i64 0, i64 0))
  %"CONTAB[689]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 689), align 8
  %"CONTAB[10]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 688, {}* %"CONTAB[689]*", {}* %"CONTAB[10]*40")
  %"CONTAB[69]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 690, i64 3, {}* %"CONTAB[69]*41", {}* %"CONTAB[56]*42", {}* %"CONTAB[54]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 692, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"str-CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT", i64 0, i64 0))
  %"CONTAB[692]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 692), align 16
  %"CONTAB[6]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 691, {}* %"CONTAB[692]*", {}* %"CONTAB[6]*44")
  %"CONTAB[120]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 693, i64 1, {}* %"CONTAB[120]*45")
  %"CONTAB[78]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 694, i64 4, {}* %"CONTAB[78]*46", {}* inttoptr (i64 69056 to {}*), {}* inttoptr (i64 2200 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 695, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @"str-Alle KLassen, die ine Attribut vom diesem Wertebereich haben", i64 0, i64 0))
  %"CONTAB[120]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 696, i64 1, {}* %"CONTAB[120]*47")
  %"CONTAB[627]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 697, i64 1, {}* %"CONTAB[627]*48")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^550^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^550^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[642]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 642), align 16
  %"CONTAB[644]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 644), align 16
  %"CONTAB[648]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 648), align 16
  %"CONTAB[646]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 646), align 16
  %"CONTAB[650]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 650), align 16
  %"CONTAB[652]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 652), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 698, i64 6, {}* %"CONTAB[642]*49", {}* %"CONTAB[644]*50", {}* %"CONTAB[648]*51", {}* %"CONTAB[646]*52", {}* %"CONTAB[650]*53", {}* %"CONTAB[652]*54")
  %"CONTAB[655]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 655), align 8
  %"CONTAB[627]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[657]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 657), align 8
  %"CONTAB[659]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 659), align 8
  %"CONTAB[661]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 661), align 8
  %"CONTAB[663]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 663), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 699, i64 6, {}* %"CONTAB[655]*55", {}* %"CONTAB[627]*56", {}* %"CONTAB[657]*57", {}* %"CONTAB[659]*58", {}* %"CONTAB[661]*59", {}* %"CONTAB[663]*60")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 700, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 701, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-unbekannter wertebereich ~A", i64 0, i64 0))
  %"CONTAB[69]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 702, i64 3, {}* %"CONTAB[69]*61", {}* %"CONTAB[56]*62", {}* %"CONTAB[54]*63")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 704, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @"str-CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH", i64 0, i64 0))
  %"CONTAB[704]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 704), align 16
  %"CONTAB[6]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 703, {}* %"CONTAB[704]*", {}* %"CONTAB[6]*64")
  %"CONTAB[627]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[120]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 705, i64 2, {}* %"CONTAB[627]*65", {}* %"CONTAB[120]*66")
  %"CONTAB[78]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 706, i64 4, {}* %"CONTAB[78]*67", {}* inttoptr (i64 70076 to {}*), {}* inttoptr (i64 2236 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[627]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[120]*69" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 707, i64 2, {}* %"CONTAB[627]*68", {}* %"CONTAB[120]*69")
  %"CONTAB[552]*70" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 708, i64 1, {}* %"CONTAB[552]*70")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^559^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^559^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[655]*71" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 655), align 8
  %"CONTAB[627]*72" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 627), align 8
  %"CONTAB[657]*73" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 657), align 8
  %"CONTAB[659]*74" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 659), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 709, i64 4, {}* %"CONTAB[655]*71", {}* %"CONTAB[627]*72", {}* %"CONTAB[657]*73", {}* %"CONTAB[659]*74")
  %"CONTAB[642]*75" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 642), align 16
  %"CONTAB[646]*76" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 646), align 16
  %"CONTAB[648]*77" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 648), align 16
  %"CONTAB[644]*78" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 644), align 16
  %"CONTAB[652]*79" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 652), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 710, i64 5, {}* %"CONTAB[642]*75", {}* %"CONTAB[646]*76", {}* %"CONTAB[648]*77", {}* %"CONTAB[644]*78", {}* %"CONTAB[652]*79")
  %"CONTAB[69]*80" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*81" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*82" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 711, i64 3, {}* %"CONTAB[69]*80", {}* %"CONTAB[56]*81", {}* %"CONTAB[54]*82")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.47() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !260 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 713, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"str-CWR=WERTEBEREICH-EINGEBBAR-P", i64 0, i64 0))
  %"CONTAB[713]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 713), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 712, {}* %"CONTAB[713]*", {}* %"CONTAB[6]*")
  %"CONTAB[120]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 714, i64 1, {}* %"CONTAB[120]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 715, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 72696 to {}*), {}* inttoptr (i64 2308 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[120]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 120), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 716, i64 1, {}* %"CONTAB[120]*1")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^577^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^577^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 718, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str-GET-INTERNAL-RUN-TIME, i64 0, i64 0))
  %"CONTAB[718]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 718), align 16
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 717, {}* %"CONTAB[718]*", {}* %"CONTAB[10]*")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 719, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 721, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-PRO-MERKE, i64 0, i64 0))
  %"CONTAB[721]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 721), align 8
  %"CONTAB[6]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 720, {}* %"CONTAB[721]*", {}* %"CONTAB[6]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 723, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str-VOR_VORSCHLAGSBERECHNUNG, i64 0, i64 0))
  %"CONTAB[723]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 723), align 8
  %"CONTAB[6]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 722, {}* %"CONTAB[723]*", {}* %"CONTAB[6]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 725, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str-CWR=HOLE_VORSCHLAEGE", i64 0, i64 0))
  %"CONTAB[725]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 725), align 8
  %"CONTAB[6]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 724, {}* %"CONTAB[725]*", {}* %"CONTAB[6]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 727, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-AUSGESCHALTET_P, i64 0, i64 0))
  %"CONTAB[727]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 727), align 8
  %"CONTAB[6]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 726, {}* %"CONTAB[727]*", {}* %"CONTAB[6]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 729, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CODE, i64 0, i64 0))
  %"CONTAB[729]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 729), align 8
  %"CONTAB[6]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 728, {}* %"CONTAB[729]*", {}* %"CONTAB[6]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 731, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-NREVERSE, i64 0, i64 0))
  %"CONTAB[731]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 731), align 8
  %"CONTAB[10]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 730, {}* %"CONTAB[731]*", {}* %"CONTAB[10]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 733, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-STABLE-SORT, i64 0, i64 0))
  %"CONTAB[733]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 733), align 8
  %"CONTAB[10]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 732, {}* %"CONTAB[733]*", {}* %"CONTAB[10]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 735, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str->", i64 0, i64 0))
  %"CONTAB[735]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 735), align 8
  %"CONTAB[10]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 734, {}* %"CONTAB[735]*", {}* %"CONTAB[10]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 737, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-KEY, i64 0, i64 0))
  %"CONTAB[737]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 737), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 736, {}* %"CONTAB[737]*", {}* %"CONTAB[46]*")
  %"CONTAB[69]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 738, i64 3, {}* %"CONTAB[69]*10", {}* %"CONTAB[56]*11", {}* %"CONTAB[54]*12")
  %"CONTAB[69]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 739, i64 3, {}* %"CONTAB[69]*13", {}* %"CONTAB[56]*14", {}* %"CONTAB[54]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 741, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=FUERE_VORSCHLAG_AUS", i64 0, i64 0))
  %"CONTAB[741]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 741), align 8
  %"CONTAB[6]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 740, {}* %"CONTAB[741]*", {}* %"CONTAB[6]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 744, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"str-&KEY", i64 0, i64 0))
  %"CONTAB[744]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 744), align 16
  %"CONTAB[10]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 743, {}* %"CONTAB[744]*", {}* %"CONTAB[10]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 746, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str-VOR_VORSCHLAGSBERECHNEN_FUNKTION, i64 0, i64 0))
  %"CONTAB[746]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 746), align 16
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 745, {}* %"CONTAB[746]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 748, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str-VORSCHLAG_SEKUNDAERSCHLUESSEL, i64 0, i64 0))
  %"CONTAB[748]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 748), align 16
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 747, {}* %"CONTAB[748]*", {}* %"CONTAB[6]*19")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[743]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 743), align 8
  %"CONTAB[745]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 745), align 8
  %"CONTAB[747]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 747), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 742, i64 5, {}* %"CONTAB[138]*", {}* %"CONTAB[362]*", {}* %"CONTAB[743]*", {}* %"CONTAB[745]*", {}* %"CONTAB[747]*")
  %"CONTAB[78]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 749, i64 4, {}* %"CONTAB[78]*20", {}* inttoptr (i64 73680 to {}*), {}* inttoptr (i64 2336 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 751, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-NUMBER, i64 0, i64 0))
  %"CONTAB[751]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 751), align 8
  %"CONTAB[10]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 750, {}* %"CONTAB[751]*", {}* %"CONTAB[10]*21")
  %"CONTAB[138]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[743]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 743), align 8
  %"CONTAB[745]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 745), align 8
  %"CONTAB[747]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 747), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 752, i64 5, {}* %"CONTAB[138]*22", {}* %"CONTAB[362]*23", {}* %"CONTAB[743]*24", {}* %"CONTAB[745]*25", {}* %"CONTAB[747]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 754, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-ALLOW-OTHER-KEYS, i64 0, i64 0))
  %"CONTAB[754]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 754), align 16
  %"CONTAB[46]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 753, {}* %"CONTAB[754]*", {}* %"CONTAB[46]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 756, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str-VOR_VORSCHLAGSBERECHNEN_FUNKTION, i64 0, i64 0))
  %"CONTAB[756]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 756), align 16
  %"CONTAB[46]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 755, {}* %"CONTAB[756]*", {}* %"CONTAB[46]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 758, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str-VORSCHLAG_SEKUNDAERSCHLUESSEL, i64 0, i64 0))
  %"CONTAB[758]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 758), align 16
  %"CONTAB[46]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 757, {}* %"CONTAB[758]*", {}* %"CONTAB[46]*29")
  %"CONTAB[88]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 759, i64 1, {}* %"CONTAB[88]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^583^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^583^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 761, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-CWR=HOLE_UEBERWACHUNG", i64 0, i64 0))
  %"CONTAB[761]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 761), align 8
  %"CONTAB[6]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 760, {}* %"CONTAB[761]*", {}* %"CONTAB[6]*30")
  %"CONTAB[69]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 762, i64 3, {}* %"CONTAB[69]*31", {}* %"CONTAB[56]*32", {}* %"CONTAB[54]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 764, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=FUERE_UEBERWACHUNG_AUS", i64 0, i64 0))
  %"CONTAB[764]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 764), align 16
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 763, {}* %"CONTAB[764]*", {}* %"CONTAB[6]*34")
  %"CONTAB[138]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 765, i64 2, {}* %"CONTAB[138]*35", {}* %"CONTAB[552]*")
  %"CONTAB[78]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 766, i64 4, {}* %"CONTAB[78]*36", {}* inttoptr (i64 77800 to {}*), {}* inttoptr (i64 2432 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 767, i64 2, {}* %"CONTAB[138]*37", {}* %"CONTAB[552]*38")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^608^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^608^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 769, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-MAPCAR, i64 0, i64 0))
  %"CONTAB[769]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 769), align 8
  %"CONTAB[10]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 768, {}* %"CONTAB[769]*", {}* %"CONTAB[10]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 771, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-ERSETZEN, i64 0, i64 0))
  %"CONTAB[771]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 771), align 8
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 770, {}* %"CONTAB[771]*", {}* %"CONTAB[6]*40")
  %"CONTAB[69]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 772, i64 3, {}* %"CONTAB[69]*41", {}* %"CONTAB[56]*42", {}* %"CONTAB[54]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 774, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-CWR=FUERE_HEILMITTEL_AUS", i64 0, i64 0))
  %"CONTAB[774]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 774), align 16
  %"CONTAB[6]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 773, {}* %"CONTAB[774]*", {}* %"CONTAB[6]*44")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 777, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-ALTER_WERT, i64 0, i64 0))
  %"CONTAB[777]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 777), align 8
  %"CONTAB[6]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 776, {}* %"CONTAB[777]*", {}* %"CONTAB[6]*45")
  %"CONTAB[92]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %"CONTAB[138]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[776]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 776), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 775, i64 4, {}* %"CONTAB[92]*", {}* %"CONTAB[138]*46", {}* %"CONTAB[362]*47", {}* %"CONTAB[776]*")
  %"CONTAB[78]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 778, i64 4, {}* %"CONTAB[78]*48", {}* inttoptr (i64 78472 to {}*), {}* inttoptr (i64 2456 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[92]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  %"CONTAB[138]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[776]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 776), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 779, i64 4, {}* %"CONTAB[92]*49", {}* %"CONTAB[138]*50", {}* %"CONTAB[362]*51", {}* %"CONTAB[776]*52")
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 780, i64 1, {}* %"CONTAB[364]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^614^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^614^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 781, i64 3, {}* %"CONTAB[69]*53", {}* %"CONTAB[56]*54", {}* %"CONTAB[54]*55")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 783, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-CWR=FUERE_CONSTRAINT_AUS", i64 0, i64 0))
  %"CONTAB[783]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 783), align 8
  %"CONTAB[6]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 782, {}* %"CONTAB[783]*", {}* %"CONTAB[6]*56")
  %"CONTAB[138]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[90]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 784, i64 3, {}* %"CONTAB[138]*57", {}* %"CONTAB[362]*58", {}* %"CONTAB[90]*")
  %"CONTAB[78]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 785, i64 4, {}* %"CONTAB[78]*59", {}* inttoptr (i64 79628 to {}*), {}* inttoptr (i64 2488 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[90]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 786, i64 3, {}* %"CONTAB[138]*60", {}* %"CONTAB[362]*61", {}* %"CONTAB[90]*62")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^622^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^622^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 787, i64 3, {}* %"CONTAB[69]*63", {}* %"CONTAB[56]*64", {}* %"CONTAB[54]*65")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 789, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-CWR=HOLE_AKTIVE_VORSCHLAEGE", i64 0, i64 0))
  %"CONTAB[789]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 789), align 8
  %"CONTAB[6]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 788, {}* %"CONTAB[789]*", {}* %"CONTAB[6]*66")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 792, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-PARAMETER, i64 0, i64 0))
  %"CONTAB[792]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 792), align 16
  %"CONTAB[6]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 791, {}* %"CONTAB[792]*", {}* %"CONTAB[6]*67")
  %"CONTAB[138]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 790, i64 2, {}* %"CONTAB[138]*68", {}* %"CONTAB[791]*")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.48() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !261 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.46)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.47)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.49() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !262 {
entry:
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 793, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 80216 to {}*), {}* inttoptr (i64 2512 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 794, i64 2, {}* %"CONTAB[138]*", {}* %"CONTAB[791]*")
  %"CONTAB[88]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 795, i64 1, {}* %"CONTAB[88]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^628^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^628^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 796, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  %"CONTAB[138]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 797, i64 2, {}* %"CONTAB[138]*1", {}* %"CONTAB[791]*2")
  %"CONTAB[78]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 798, i64 4, {}* %"CONTAB[78]*3", {}* inttoptr (i64 81012 to {}*), {}* inttoptr (i64 2532 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 799, i64 2, {}* %"CONTAB[138]*4", {}* %"CONTAB[791]*5")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^633^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^633^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 801, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-SICHERN, i64 0, i64 0))
  %"CONTAB[801]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 801), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 800, {}* %"CONTAB[801]*", {}* %"CONTAB[46]*")
  %"CONTAB[69]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 802, i64 3, {}* %"CONTAB[69]*6", {}* %"CONTAB[56]*7", {}* %"CONTAB[54]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 804, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-CWR=SETZE_VORSCHLAEGE", i64 0, i64 0))
  %"CONTAB[804]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 804), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 803, {}* %"CONTAB[804]*", {}* %"CONTAB[6]*")
  %"CONTAB[138]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 805, i64 3, {}* %"CONTAB[138]*9", {}* %"CONTAB[791]*10", {}* %"CONTAB[364]*")
  %"CONTAB[78]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 806, i64 4, {}* %"CONTAB[78]*11", {}* inttoptr (i64 81448 to {}*), {}* inttoptr (i64 2548 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[364]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 807, i64 3, {}* %"CONTAB[138]*12", {}* %"CONTAB[791]*13", {}* %"CONTAB[364]*14")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^637^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^637^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 808, i64 3, {}* %"CONTAB[69]*15", {}* %"CONTAB[56]*16", {}* %"CONTAB[54]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 810, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-CWR=SETZE-EINEN-VORSCHLAG", i64 0, i64 0))
  %"CONTAB[810]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 810), align 16
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 809, {}* %"CONTAB[810]*", {}* %"CONTAB[6]*18")
  %"CONTAB[138]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[88]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 811, i64 3, {}* %"CONTAB[138]*19", {}* %"CONTAB[791]*20", {}* %"CONTAB[88]*21")
  %"CONTAB[78]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 812, i64 4, {}* %"CONTAB[78]*22", {}* inttoptr (i64 82464 to {}*), {}* inttoptr (i64 2576 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[88]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 813, i64 3, {}* %"CONTAB[138]*23", {}* %"CONTAB[791]*24", {}* %"CONTAB[88]*25")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^644^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^644^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 815, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-DELETE, i64 0, i64 0))
  %"CONTAB[815]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 815), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 814, {}* %"CONTAB[815]*", {}* %"CONTAB[10]*")
  %"CONTAB[69]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 816, i64 3, {}* %"CONTAB[69]*26", {}* %"CONTAB[56]*27", {}* %"CONTAB[54]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 818, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-CWR=LOESCHE-EINEN-VORSCHLAG", i64 0, i64 0))
  %"CONTAB[818]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 818), align 16
  %"CONTAB[6]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 817, {}* %"CONTAB[818]*", {}* %"CONTAB[6]*29")
  %"CONTAB[138]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[88]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 819, i64 3, {}* %"CONTAB[138]*30", {}* %"CONTAB[791]*31", {}* %"CONTAB[88]*32")
  %"CONTAB[78]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 820, i64 4, {}* %"CONTAB[78]*33", {}* inttoptr (i64 83452 to {}*), {}* inttoptr (i64 2600 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[88]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 88), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 821, i64 3, {}* %"CONTAB[138]*34", {}* %"CONTAB[791]*35", {}* %"CONTAB[88]*36")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^650^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^650^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 822, i64 3, {}* %"CONTAB[69]*37", {}* %"CONTAB[56]*38", {}* %"CONTAB[54]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 824, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-CWR=SETZE-EIN-CONSTRAINT", i64 0, i64 0))
  %"CONTAB[824]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 824), align 16
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 823, {}* %"CONTAB[824]*", {}* %"CONTAB[6]*40")
  %"CONTAB[138]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[90]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 825, i64 3, {}* %"CONTAB[138]*41", {}* %"CONTAB[791]*42", {}* %"CONTAB[90]*")
  %"CONTAB[78]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 826, i64 4, {}* %"CONTAB[78]*43", {}* inttoptr (i64 84556 to {}*), {}* inttoptr (i64 2624 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[90]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 827, i64 3, {}* %"CONTAB[138]*44", {}* %"CONTAB[791]*45", {}* %"CONTAB[90]*46")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^656^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^656^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 828, i64 3, {}* %"CONTAB[69]*47", {}* %"CONTAB[56]*48", {}* %"CONTAB[54]*49")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 830, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=LOESCHE-EIN-CONSTRAINT", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.50() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !263 {
entry:
  %"CONTAB[830]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 830), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 829, {}* %"CONTAB[830]*", {}* %"CONTAB[6]*")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[90]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 831, i64 3, {}* %"CONTAB[138]*", {}* %"CONTAB[791]*", {}* %"CONTAB[90]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 832, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 85556 to {}*), {}* inttoptr (i64 2648 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[90]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 833, i64 3, {}* %"CONTAB[138]*1", {}* %"CONTAB[791]*2", {}* %"CONTAB[90]*3")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^662^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^662^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 835, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"str-CWR=HOLE-POTENTIELLE-CONSTRAINTS", i64 0, i64 0))
  %"CONTAB[835]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 835), align 8
  %"CONTAB[6]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 834, {}* %"CONTAB[835]*", {}* %"CONTAB[6]*4")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 836, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 838, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-CWR=HOLE_CONSTRAINT_LISTE", i64 0, i64 0))
  %"CONTAB[838]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 838), align 16
  %"CONTAB[6]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 837, {}* %"CONTAB[838]*", {}* %"CONTAB[6]*5")
  %"CONTAB[138]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 839, i64 2, {}* %"CONTAB[138]*6", {}* %"CONTAB[791]*7")
  %"CONTAB[78]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 840, i64 4, {}* %"CONTAB[78]*8", {}* inttoptr (i64 86888 to {}*), {}* inttoptr (i64 2684 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 841, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-Nur die, die auch wirklich aktiv sind", i64 0, i64 0))
  %"CONTAB[138]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 842, i64 2, {}* %"CONTAB[138]*9", {}* %"CONTAB[791]*10")
  %"CONTAB[90]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 843, i64 1, {}* %"CONTAB[90]*11")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^667^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^667^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 844, i64 3, {}* %"CONTAB[69]*12", {}* %"CONTAB[56]*13", {}* %"CONTAB[54]*14")
  %"CONTAB[138]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 845, i64 2, {}* %"CONTAB[138]*15", {}* %"CONTAB[791]*16")
  %"CONTAB[78]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 846, i64 4, {}* %"CONTAB[78]*17", {}* inttoptr (i64 87980 to {}*), {}* inttoptr (i64 2716 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 847, i64 2, {}* %"CONTAB[138]*18", {}* %"CONTAB[791]*19")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^679^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^679^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 848, i64 3, {}* %"CONTAB[69]*20", {}* %"CONTAB[56]*21", {}* %"CONTAB[54]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 850, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=SETZE_CONSTRAINT_LISTE", i64 0, i64 0))
  %"CONTAB[850]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 850), align 16
  %"CONTAB[6]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 849, {}* %"CONTAB[850]*", {}* %"CONTAB[6]*23")
  %"CONTAB[138]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 851, i64 3, {}* %"CONTAB[138]*24", {}* %"CONTAB[791]*25", {}* %"CONTAB[364]*")
  %"CONTAB[78]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 852, i64 4, {}* %"CONTAB[78]*26", {}* inttoptr (i64 88504 to {}*), {}* inttoptr (i64 2736 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[791]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 791), align 8
  %"CONTAB[364]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 853, i64 3, {}* %"CONTAB[138]*27", {}* %"CONTAB[791]*28", {}* %"CONTAB[364]*29")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^684^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^684^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 855, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-FAKTOR, i64 0, i64 0))
  %"CONTAB[855]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 855), align 8
  %"CONTAB[6]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 854, {}* %"CONTAB[855]*", {}* %"CONTAB[6]*30")
  %"CONTAB[69]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 856, i64 3, {}* %"CONTAB[69]*31", {}* %"CONTAB[56]*32", {}* %"CONTAB[54]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 858, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=HOLE_CONSTRAINT_FAKTOR", i64 0, i64 0))
  %"CONTAB[858]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 858), align 16
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 857, {}* %"CONTAB[858]*", {}* %"CONTAB[6]*34")
  %"CONTAB[90]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 859, i64 1, {}* %"CONTAB[90]*35")
  %"CONTAB[78]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 860, i64 4, {}* %"CONTAB[78]*36", {}* inttoptr (i64 89400 to {}*), {}* inttoptr (i64 2760 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 861, i64 1, {}* %"CONTAB[90]*37")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^690^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^690^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 862, i64 3, {}* %"CONTAB[69]*38", {}* %"CONTAB[56]*39", {}* %"CONTAB[54]*40")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 864, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-CWR=HOLE_HEILMITTEL", i64 0, i64 0))
  %"CONTAB[864]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 864), align 16
  %"CONTAB[6]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 863, {}* %"CONTAB[864]*", {}* %"CONTAB[6]*41")
  %"CONTAB[90]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 865, i64 1, {}* %"CONTAB[90]*42")
  %"CONTAB[78]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 866, i64 4, {}* %"CONTAB[78]*43", {}* inttoptr (i64 89768 to {}*), {}* inttoptr (i64 2776 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 867, i64 1, {}* %"CONTAB[90]*44")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.51() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !264 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.49)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.50)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.52() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !265 {
entry:
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^694^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^694^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 869, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-COPY-LIST, i64 0, i64 0))
  %"CONTAB[869]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 869), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 868, {}* %"CONTAB[869]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 871, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-<", i64 0, i64 0))
  %"CONTAB[871]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 871), align 8
  %"CONTAB[10]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 870, {}* %"CONTAB[871]*", {}* %"CONTAB[10]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 873, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-KOSTEN, i64 0, i64 0))
  %"CONTAB[873]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 873), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 872, {}* %"CONTAB[873]*", {}* %"CONTAB[6]*")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 874, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 876, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"str-CWR=HOLE_HEILMITTEL_SORTIERT", i64 0, i64 0))
  %"CONTAB[876]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 876), align 16
  %"CONTAB[6]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 875, {}* %"CONTAB[876]*", {}* %"CONTAB[6]*2")
  %"CONTAB[90]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 877, i64 1, {}* %"CONTAB[90]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 878, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 90120 to {}*), {}* inttoptr (i64 2792 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 879, i64 1, {}* %"CONTAB[90]*3")
  %"CONTAB[92]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 92), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 880, i64 1, {}* %"CONTAB[92]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^698^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^698^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 881, i64 3, {}* %"CONTAB[69]*4", {}* %"CONTAB[56]*5", {}* %"CONTAB[54]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 883, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=SCHREIBE_HEILMITTEL", i64 0, i64 0))
  %"CONTAB[883]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 883), align 8
  %"CONTAB[6]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 882, {}* %"CONTAB[883]*", {}* %"CONTAB[6]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 886, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-HEILMITTELS, i64 0, i64 0))
  %"CONTAB[886]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 886), align 16
  %"CONTAB[6]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 885, {}* %"CONTAB[886]*", {}* %"CONTAB[6]*8")
  %"CONTAB[90]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[885]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 885), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 884, i64 2, {}* %"CONTAB[90]*9", {}* %"CONTAB[885]*")
  %"CONTAB[78]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 887, i64 4, {}* %"CONTAB[78]*10", {}* inttoptr (i64 91024 to {}*), {}* inttoptr (i64 2820 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[885]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 885), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 888, i64 2, {}* %"CONTAB[90]*11", {}* %"CONTAB[885]*12")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^705^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^705^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 890, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-YAS=NEUE_INSTANZ", i64 0, i64 0))
  %"CONTAB[890]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 890), align 16
  %"CONTAB[6]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 889, {}* %"CONTAB[890]*", {}* %"CONTAB[6]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 892, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-APPEND, i64 0, i64 0))
  %"CONTAB[892]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 892), align 16
  %"CONTAB[10]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 891, {}* %"CONTAB[892]*", {}* %"CONTAB[10]*14")
  %"CONTAB[69]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 893, i64 3, {}* %"CONTAB[69]*15", {}* %"CONTAB[56]*16", {}* %"CONTAB[54]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 895, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str-CWR=NEUES_HEILMITTEL", i64 0, i64 0))
  %"CONTAB[895]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 895), align 8
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 894, {}* %"CONTAB[895]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 898, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-ZU_CONSTRAINT_LISTE, i64 0, i64 0))
  %"CONTAB[898]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 898), align 16
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 897, {}* %"CONTAB[898]*", {}* %"CONTAB[6]*19")
  %"CONTAB[564]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 564), align 16
  %"CONTAB[897]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 897), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 896, i64 2, {}* %"CONTAB[564]*", {}* %"CONTAB[897]*")
  %"CONTAB[78]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 899, i64 4, {}* %"CONTAB[78]*20", {}* inttoptr (i64 91596 to {}*), {}* inttoptr (i64 2836 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[564]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 564), align 16
  %"CONTAB[897]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 897), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 900, i64 2, {}* %"CONTAB[564]*21", {}* %"CONTAB[897]*22")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^709^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^709^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 901, i64 3, {}* %"CONTAB[69]*23", {}* %"CONTAB[56]*24", {}* %"CONTAB[54]*25")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 902, i64 2, {}* %"CONTAB[138]*", {}* %"CONTAB[552]*")
  %"CONTAB[78]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 903, i64 4, {}* %"CONTAB[78]*26", {}* inttoptr (i64 93328 to {}*), {}* inttoptr (i64 2884 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 904, i64 2, {}* %"CONTAB[138]*27", {}* %"CONTAB[552]*28")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^721^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^721^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 905, i64 3, {}* %"CONTAB[69]*29", {}* %"CONTAB[56]*30", {}* %"CONTAB[54]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 907, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-CWR=SETZE_UEBERWACHUNG", i64 0, i64 0))
  %"CONTAB[907]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 907), align 8
  %"CONTAB[6]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 906, {}* %"CONTAB[907]*", {}* %"CONTAB[6]*32")
  %"CONTAB[138]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 908, i64 3, {}* %"CONTAB[138]*33", {}* %"CONTAB[552]*34", {}* %"CONTAB[364]*")
  %"CONTAB[78]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 909, i64 4, {}* %"CONTAB[78]*35", {}* inttoptr (i64 93728 to {}*), {}* inttoptr (i64 2900 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[552]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 552), align 16
  %"CONTAB[364]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 364), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 910, i64 3, {}* %"CONTAB[138]*36", {}* %"CONTAB[552]*37", {}* %"CONTAB[364]*38")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^725^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^725^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 912, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-BEWERTUNG, i64 0, i64 0))
  %"CONTAB[912]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 912), align 16
  %"CONTAB[6]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 911, {}* %"CONTAB[912]*", {}* %"CONTAB[6]*39")
  %"CONTAB[69]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 913, i64 3, {}* %"CONTAB[69]*40", {}* %"CONTAB[56]*41", {}* %"CONTAB[54]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 915, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-CWR=HOLE_CONSTRAINT_BEWERTUNG", i64 0, i64 0))
  %"CONTAB[915]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 915), align 8
  %"CONTAB[6]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 914, {}* %"CONTAB[915]*", {}* %"CONTAB[6]*43")
  %"CONTAB[90]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 916, i64 1, {}* %"CONTAB[90]*44")
  %"CONTAB[78]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 917, i64 4, {}* %"CONTAB[78]*45", {}* inttoptr (i64 94668 to {}*), {}* inttoptr (i64 2940 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 918, i64 1, {}* %"CONTAB[90]*46")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^731^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^731^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 920, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str-MAKE-CWR-TESTCONSTRAINT, i64 0, i64 0))
  %"CONTAB[920]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 920), align 16
  %"CONTAB[6]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 919, {}* %"CONTAB[920]*", {}* %"CONTAB[6]*47")
  %"CONTAB[69]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 921, i64 3, {}* %"CONTAB[69]*48", {}* %"CONTAB[56]*49", {}* %"CONTAB[54]*50")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 923, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-CWR=CONSTRAINT_ERZEUGEN", i64 0, i64 0))
  %"CONTAB[923]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 923), align 8
  %"CONTAB[6]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 922, {}* %"CONTAB[923]*", {}* %"CONTAB[6]*51")
  %"CONTAB[90]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[138]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 924, i64 2, {}* %"CONTAB[90]*52", {}* %"CONTAB[138]*53")
  %"CONTAB[78]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 925, i64 4, {}* %"CONTAB[78]*54", {}* inttoptr (i64 95064 to {}*), {}* inttoptr (i64 2956 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[138]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 926, i64 2, {}* %"CONTAB[90]*55", {}* %"CONTAB[138]*56")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^739^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^739^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 927, i64 3, {}* %"CONTAB[69]*57", {}* %"CONTAB[56]*58", {}* %"CONTAB[54]*59")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 929, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-CWR=CONSTRAINT_FREIGEBEN", i64 0, i64 0))
  %"CONTAB[929]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 929), align 8
  %"CONTAB[6]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 928, {}* %"CONTAB[929]*", {}* %"CONTAB[6]*60")
  %"CONTAB[90]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 930, i64 1, {}* %"CONTAB[90]*61")
  %"CONTAB[78]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 931, i64 4, {}* %"CONTAB[78]*62", {}* inttoptr (i64 95524 to {}*), {}* inttoptr (i64 2980 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 932, i64 1, {}* %"CONTAB[90]*63")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^745^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^745^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 933, i64 3, {}* %"CONTAB[69]*64", {}* %"CONTAB[56]*65", {}* %"CONTAB[54]*66")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 935, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-CWR=CONSTRAINTS_FREIGEBEN", i64 0, i64 0))
  %"CONTAB[935]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 935), align 8
  %"CONTAB[6]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 934, {}* %"CONTAB[935]*", {}* %"CONTAB[6]*67")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 938, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-CONSTRAINTS, i64 0, i64 0))
  %"CONTAB[938]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 938), align 16
  %"CONTAB[6]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 937, {}* %"CONTAB[938]*", {}* %"CONTAB[6]*68")
  %"CONTAB[937]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 937), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 936, i64 1, {}* %"CONTAB[937]*")
  %"CONTAB[78]*69" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 939, i64 4, {}* %"CONTAB[78]*69", {}* inttoptr (i64 95852 to {}*), {}* inttoptr (i64 2992 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[937]*70" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 937), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 940, i64 1, {}* %"CONTAB[937]*70")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^748^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^748^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 942, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-INSTANCE-REF, i64 0, i64 0))
  %"CONTAB[942]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 942), align 16
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 941, {}* %"CONTAB[942]*", {}* %"CONTAB[2]*")
  %"CONTAB[69]*71" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*72" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*73" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 943, i64 3, {}* %"CONTAB[69]*71", {}* %"CONTAB[56]*72", {}* %"CONTAB[54]*73")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.53() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !266 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.51)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.52)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.54() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !267 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.48)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.53)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.55() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !268 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 945, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-CWR=CONSTRAINT-CONSTRAINT", i64 0, i64 0))
  %"CONTAB[945]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 945), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 944, {}* %"CONTAB[945]*", {}* %"CONTAB[6]*")
  %"CONTAB[90]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 946, i64 1, {}* %"CONTAB[90]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 947, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 96192 to {}*), {}* inttoptr (i64 3004 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 949, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-CLASS-OF, i64 0, i64 0))
  %"CONTAB[949]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 949), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 948, {}* %"CONTAB[949]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 951, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-CWR-TESTCONSTRAINT, i64 0, i64 0))
  %"CONTAB[951]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 951), align 8
  %"CONTAB[6]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 950, {}* %"CONTAB[951]*", {}* %"CONTAB[6]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 953, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-FIND-CLASS, i64 0, i64 0))
  %"CONTAB[953]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 953), align 8
  %"CONTAB[10]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 952, {}* %"CONTAB[953]*", {}* %"CONTAB[10]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 955, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-SUBCLASSP, i64 0, i64 0))
  %"CONTAB[955]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 955), align 8
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 954, {}* %"CONTAB[955]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 958, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-AND, i64 0, i64 0))
  %"CONTAB[958]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 958), align 16
  %"CONTAB[10]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 957, {}* %"CONTAB[958]*", {}* %"CONTAB[10]*3")
  %"CONTAB[957]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[950]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 950), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 959, i64 2, {}* %"CONTAB[957]*", {}* %"CONTAB[950]*")
  %"CONTAB[957]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[959]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 959), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 956, i64 2, {}* %"CONTAB[957]*4", {}* %"CONTAB[959]*")
  %"CONTAB[90]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 960, i64 1, {}* %"CONTAB[90]*5")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^751^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^751^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 961, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 963, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-CWR=CONSTRAINT-OBJEKT", i64 0, i64 0))
  %"CONTAB[963]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 963), align 8
  %"CONTAB[6]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 962, {}* %"CONTAB[963]*", {}* %"CONTAB[6]*6")
  %"CONTAB[90]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 964, i64 1, {}* %"CONTAB[90]*7")
  %"CONTAB[78]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 965, i64 4, {}* %"CONTAB[78]*8", {}* inttoptr (i64 96576 to {}*), {}* inttoptr (i64 3016 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[957]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[950]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 950), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 967, i64 2, {}* %"CONTAB[957]*9", {}* %"CONTAB[950]*10")
  %"CONTAB[957]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[967]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 967), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 966, i64 2, {}* %"CONTAB[957]*11", {}* %"CONTAB[967]*")
  %"CONTAB[90]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 968, i64 1, {}* %"CONTAB[90]*12")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^754^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^754^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 969, i64 3, {}* %"CONTAB[69]*13", {}* %"CONTAB[56]*14", {}* %"CONTAB[54]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 971, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-CWR=TESTCONSTRAINT-EQUAL", i64 0, i64 0))
  %"CONTAB[971]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 971), align 8
  %"CONTAB[6]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 970, {}* %"CONTAB[971]*", {}* %"CONTAB[6]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 974, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-CONSTRAINT1, i64 0, i64 0))
  %"CONTAB[974]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 974), align 16
  %"CONTAB[6]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 973, {}* %"CONTAB[974]*", {}* %"CONTAB[6]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 976, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-CONSTRAINT2, i64 0, i64 0))
  %"CONTAB[976]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 976), align 16
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 975, {}* %"CONTAB[976]*", {}* %"CONTAB[6]*18")
  %"CONTAB[973]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 973), align 8
  %"CONTAB[975]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 975), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 972, i64 2, {}* %"CONTAB[973]*", {}* %"CONTAB[975]*")
  %"CONTAB[78]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 977, i64 4, {}* %"CONTAB[78]*19", {}* inttoptr (i64 96928 to {}*), {}* inttoptr (i64 3028 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[973]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 973), align 8
  %"CONTAB[975]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 975), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 978, i64 2, {}* %"CONTAB[973]*20", {}* %"CONTAB[975]*21")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^757^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^757^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 980, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-AGE=AGENDA", i64 0, i64 0))
  %"CONTAB[980]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 980), align 16
  %"CONTAB[6]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 979, {}* %"CONTAB[980]*", {}* %"CONTAB[6]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 982, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-AGE=AGENDA_LOESCHEN", i64 0, i64 0))
  %"CONTAB[982]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 982), align 16
  %"CONTAB[6]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 981, {}* %"CONTAB[982]*", {}* %"CONTAB[6]*23")
  %"CONTAB[69]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 983, i64 3, {}* %"CONTAB[69]*24", {}* %"CONTAB[56]*25", {}* %"CONTAB[54]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 985, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"str-CWR=CONSTRAINTSAGENDA_LOESCHEN", i64 0, i64 0))
  %"CONTAB[985]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 985), align 8
  %"CONTAB[6]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 984, {}* %"CONTAB[985]*", {}* %"CONTAB[6]*27")
  %"CONTAB[78]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 986, i64 4, {}* %"CONTAB[78]*28", {}* inttoptr (i64 97884 to {}*), {}* inttoptr (i64 3044 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^761^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^761^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 988, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-AGE=AGENDA_VORNE_NEU_ZUFUEGEN", i64 0, i64 0))
  %"CONTAB[988]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 988), align 16
  %"CONTAB[6]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 987, {}* %"CONTAB[988]*", {}* %"CONTAB[6]*29")
  %"CONTAB[69]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 989, i64 3, {}* %"CONTAB[69]*30", {}* %"CONTAB[56]*31", {}* %"CONTAB[54]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 991, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"str-CWR=TESTCONSTRAINT_VERMERKEN", i64 0, i64 0))
  %"CONTAB[991]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 991), align 8
  %"CONTAB[6]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 990, {}* %"CONTAB[991]*", {}* %"CONTAB[6]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 994, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-TESTCONSTRAINT, i64 0, i64 0))
  %"CONTAB[994]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 994), align 16
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 993, {}* %"CONTAB[994]*", {}* %"CONTAB[6]*34")
  %"CONTAB[993]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 993), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 992, i64 1, {}* %"CONTAB[993]*")
  %"CONTAB[78]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 995, i64 4, {}* %"CONTAB[78]*35", {}* inttoptr (i64 98452 to {}*), {}* inttoptr (i64 3064 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[993]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 993), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 996, i64 1, {}* %"CONTAB[993]*36")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^766^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^766^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 997, i64 3, {}* %"CONTAB[69]*37", {}* %"CONTAB[56]*38", {}* %"CONTAB[54]*39")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 999, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-CWR=TESTCONSTRAINTS_VERMERKEN", i64 0, i64 0))
  %"CONTAB[999]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 999), align 8
  %"CONTAB[6]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 998, {}* %"CONTAB[999]*", {}* %"CONTAB[6]*40")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1002, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-TESTCONSTRAINTS, i64 0, i64 0))
  %"CONTAB[1002]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1002), align 16
  %"CONTAB[6]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1001, {}* %"CONTAB[1002]*", {}* %"CONTAB[6]*41")
  %"CONTAB[1001]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1001), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1000, i64 1, {}* %"CONTAB[1001]*")
  %"CONTAB[78]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1003, i64 4, {}* %"CONTAB[78]*42", {}* inttoptr (i64 99052 to {}*), {}* inttoptr (i64 3080 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[1001]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1001), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1004, i64 1, {}* %"CONTAB[1001]*43")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^770^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^770^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1005, i64 3, {}* %"CONTAB[69]*44", {}* %"CONTAB[56]*45", {}* %"CONTAB[54]*46")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1007, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P", i64 0, i64 0))
  %"CONTAB[1007]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1007), align 8
  %"CONTAB[6]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1006, {}* %"CONTAB[1007]*", {}* %"CONTAB[6]*47")
  %"CONTAB[90]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1008, i64 1, {}* %"CONTAB[90]*48")
  %"CONTAB[78]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1009, i64 4, {}* %"CONTAB[78]*49", {}* inttoptr (i64 99584 to {}*), {}* inttoptr (i64 3100 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[90]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1010, i64 1, {}* %"CONTAB[90]*50")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^775^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^775^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1012, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-AGE-AGENDA_P, i64 0, i64 0))
  %"CONTAB[1012]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1012), align 16
  %"CONTAB[6]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1011, {}* %"CONTAB[1012]*", {}* %"CONTAB[6]*51")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1014, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-AGE=AGENDA_NEU", i64 0, i64 0))
  %"CONTAB[1014]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1014), align 16
  %"CONTAB[6]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1013, {}* %"CONTAB[1014]*", {}* %"CONTAB[6]*52")
  %"CONTAB[69]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1015, i64 3, {}* %"CONTAB[69]*53", {}* %"CONTAB[56]*54", {}* %"CONTAB[54]*55")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1017, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-CWR=CONSTRAINTSAGENDA_INITIALISIEREN", i64 0, i64 0))
  %"CONTAB[1017]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1017), align 8
  %"CONTAB[6]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1016, {}* %"CONTAB[1017]*", {}* %"CONTAB[6]*56")
  %"CONTAB[78]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1018, i64 4, {}* %"CONTAB[78]*57", {}* inttoptr (i64 100288 to {}*), {}* inttoptr (i64 3120 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^780^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^780^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1020, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-INSTANCE-SET, i64 0, i64 0))
  %"CONTAB[1020]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1020), align 16
  %"CONTAB[2]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1019, {}* %"CONTAB[1020]*", {}* %"CONTAB[2]*58")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1022, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-AGE=AGENDA_LESEN", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.56() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !269 {
entry:
  %"CONTAB[1022]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1022), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1021, {}* %"CONTAB[1022]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1024, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str-AGE=AGENDA_LEER", i64 0, i64 0))
  %"CONTAB[1024]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1024), align 16
  %"CONTAB[6]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1023, {}* %"CONTAB[1024]*", {}* %"CONTAB[6]*1")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1025, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1027, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-CWR=CONSTRAINTS_ABARBEITEN", i64 0, i64 0))
  %"CONTAB[1027]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1027), align 8
  %"CONTAB[6]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1026, {}* %"CONTAB[1027]*", {}* %"CONTAB[6]*2")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1028, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 101056 to {}*), {}* inttoptr (i64 3144 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1030, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-CWR=STATISTIK_TYP", i64 0, i64 0))
  %"CONTAB[1030]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1030), align 16
  %"CONTAB[6]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1029, {}* %"CONTAB[1030]*", {}* %"CONTAB[6]*3")
  %"CONTAB[957]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1029]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1032, i64 2, {}* %"CONTAB[957]*", {}* %"CONTAB[1029]*")
  %"CONTAB[957]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1032]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1032), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1031, i64 2, {}* %"CONTAB[957]*4", {}* %"CONTAB[1032]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^786^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^786^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1033, i64 3, {}* %"CONTAB[69]*5", {}* %"CONTAB[56]*6", {}* %"CONTAB[54]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1035, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @"str-CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN", i64 0, i64 0))
  %"CONTAB[1035]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1035), align 8
  %"CONTAB[6]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1034, {}* %"CONTAB[1035]*", {}* %"CONTAB[6]*8")
  %"CONTAB[90]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1036, i64 1, {}* %"CONTAB[90]*")
  %"CONTAB[78]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1037, i64 4, {}* %"CONTAB[78]*9", {}* inttoptr (i64 102612 to {}*), {}* inttoptr (i64 3188 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[957]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1029]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1029), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1039, i64 2, {}* %"CONTAB[957]*10", {}* %"CONTAB[1029]*11")
  %"CONTAB[957]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1039]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1039), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1038, i64 2, {}* %"CONTAB[957]*12", {}* %"CONTAB[1039]*")
  %"CONTAB[90]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1040, i64 1, {}* %"CONTAB[90]*13")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^797^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^797^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1042, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-MAKE-CWR-CONSTRAINT, i64 0, i64 0))
  %"CONTAB[1042]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1042), align 16
  %"CONTAB[6]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1041, {}* %"CONTAB[1042]*", {}* %"CONTAB[6]*14")
  %"CONTAB[69]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1043, i64 3, {}* %"CONTAB[69]*15", {}* %"CONTAB[56]*16", {}* %"CONTAB[54]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1045, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str-CWR-VERLETZTES-CONSTRAINT-ERZEUGEN, i64 0, i64 0))
  %"CONTAB[1045]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1045), align 8
  %"CONTAB[6]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1044, {}* %"CONTAB[1045]*", {}* %"CONTAB[6]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1048, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-ANZAHL, i64 0, i64 0))
  %"CONTAB[1048]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1048), align 16
  %"CONTAB[6]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1047, {}* %"CONTAB[1048]*", {}* %"CONTAB[6]*19")
  %"CONTAB[138]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[90]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[157]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1047]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1047), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1046, i64 5, {}* %"CONTAB[138]*", {}* %"CONTAB[362]*", {}* %"CONTAB[90]*20", {}* %"CONTAB[157]*", {}* %"CONTAB[1047]*")
  %"CONTAB[78]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1049, i64 4, {}* %"CONTAB[78]*21", {}* inttoptr (i64 103716 to {}*), {}* inttoptr (i64 3228 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[90]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[157]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1047]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1047), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1050, i64 5, {}* %"CONTAB[138]*22", {}* %"CONTAB[362]*23", {}* %"CONTAB[90]*24", {}* %"CONTAB[157]*25", {}* %"CONTAB[1047]*26")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^802^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^802^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1051, i64 3, {}* %"CONTAB[69]*27", {}* %"CONTAB[56]*28", {}* %"CONTAB[54]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1053, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str-CWR-VERLETZTES-CONSTRAINTS-EQUAL, i64 0, i64 0))
  %"CONTAB[1053]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1053), align 8
  %"CONTAB[6]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1052, {}* %"CONTAB[1053]*", {}* %"CONTAB[6]*30")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1056, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str-C1, i64 0, i64 0))
  %"CONTAB[1056]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1056), align 16
  %"CONTAB[6]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1055, {}* %"CONTAB[1056]*", {}* %"CONTAB[6]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1058, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str-C2, i64 0, i64 0))
  %"CONTAB[1058]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1058), align 16
  %"CONTAB[6]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1057, {}* %"CONTAB[1058]*", {}* %"CONTAB[6]*32")
  %"CONTAB[1055]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1055), align 8
  %"CONTAB[1057]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1057), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1054, i64 2, {}* %"CONTAB[1055]*", {}* %"CONTAB[1057]*")
  %"CONTAB[78]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1059, i64 4, {}* %"CONTAB[78]*33", {}* inttoptr (i64 104392 to {}*), {}* inttoptr (i64 3256 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1061, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-CWR-CONSTRAINT, i64 0, i64 0))
  %"CONTAB[1061]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1061), align 8
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1060, {}* %"CONTAB[1061]*", {}* %"CONTAB[6]*34")
  %"CONTAB[957]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1063, i64 2, {}* %"CONTAB[957]*35", {}* %"CONTAB[1060]*")
  %"CONTAB[957]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1063]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1063), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1062, i64 2, {}* %"CONTAB[957]*36", {}* %"CONTAB[1063]*")
  %"CONTAB[957]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1065, i64 2, {}* %"CONTAB[957]*37", {}* %"CONTAB[1060]*38")
  %"CONTAB[957]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1065]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1065), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1064, i64 2, {}* %"CONTAB[957]*39", {}* %"CONTAB[1065]*")
  %"CONTAB[957]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1067, i64 2, {}* %"CONTAB[957]*40", {}* %"CONTAB[1060]*41")
  %"CONTAB[957]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1067]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1067), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1066, i64 2, {}* %"CONTAB[957]*42", {}* %"CONTAB[1067]*")
  %"CONTAB[957]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1069, i64 2, {}* %"CONTAB[957]*43", {}* %"CONTAB[1060]*44")
  %"CONTAB[957]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1069]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1069), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1068, i64 2, {}* %"CONTAB[957]*45", {}* %"CONTAB[1069]*")
  %"CONTAB[957]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1071, i64 2, {}* %"CONTAB[957]*46", {}* %"CONTAB[1060]*47")
  %"CONTAB[957]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1071]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1071), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1070, i64 2, {}* %"CONTAB[957]*48", {}* %"CONTAB[1071]*")
  %"CONTAB[957]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1073, i64 2, {}* %"CONTAB[957]*49", {}* %"CONTAB[1060]*50")
  %"CONTAB[957]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1073]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1073), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1072, i64 2, {}* %"CONTAB[957]*51", {}* %"CONTAB[1073]*")
  %"CONTAB[957]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1075, i64 2, {}* %"CONTAB[957]*52", {}* %"CONTAB[1060]*53")
  %"CONTAB[957]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1075]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1075), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1074, i64 2, {}* %"CONTAB[957]*54", {}* %"CONTAB[1075]*")
  %"CONTAB[957]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1077, i64 2, {}* %"CONTAB[957]*55", {}* %"CONTAB[1060]*56")
  %"CONTAB[957]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1077]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1077), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1076, i64 2, {}* %"CONTAB[957]*57", {}* %"CONTAB[1077]*")
  %"CONTAB[1055]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1055), align 8
  %"CONTAB[1057]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1057), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1078, i64 2, {}* %"CONTAB[1055]*58", {}* %"CONTAB[1057]*59")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^814^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^814^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1080, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-BEI, i64 0, i64 0))
  %"CONTAB[1080]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1080), align 16
  %"CONTAB[6]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1079, {}* %"CONTAB[1080]*", {}* %"CONTAB[6]*60")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1082, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-UNTER, i64 0, i64 0))
  %"CONTAB[1082]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1082), align 16
  %"CONTAB[6]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1081, {}* %"CONTAB[1082]*", {}* %"CONTAB[6]*61")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1084, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-AGE=AGENDA_VORNE_ZUFUEGEN", i64 0, i64 0))
  %"CONTAB[1084]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1084), align 16
  %"CONTAB[6]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1083, {}* %"CONTAB[1084]*", {}* %"CONTAB[6]*62")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1086, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-VERLETZT, i64 0, i64 0))
  %"CONTAB[1086]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1086), align 16
  %"CONTAB[6]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1085, {}* %"CONTAB[1086]*", {}* %"CONTAB[6]*63")
  %"CONTAB[69]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1087, i64 3, {}* %"CONTAB[69]*64", {}* %"CONTAB[56]*65", {}* %"CONTAB[54]*66")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1089, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str-CWR=MELDE_CONSTRAINT", i64 0, i64 0))
  %"CONTAB[1089]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1089), align 8
  %"CONTAB[6]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1088, {}* %"CONTAB[1089]*", {}* %"CONTAB[6]*67")
  %"CONTAB[138]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*69" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[90]*70" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[157]*71" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1047]*72" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1047), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1090, i64 5, {}* %"CONTAB[138]*68", {}* %"CONTAB[362]*69", {}* %"CONTAB[90]*70", {}* %"CONTAB[157]*71", {}* %"CONTAB[1047]*72")
  %"CONTAB[78]*73" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1091, i64 4, {}* %"CONTAB[78]*73", {}* inttoptr (i64 105716 to {}*), {}* inttoptr (i64 3292 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[138]*74" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 138), align 16
  %"CONTAB[362]*75" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 362), align 16
  %"CONTAB[90]*76" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 90), align 16
  %"CONTAB[157]*77" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1047]*78" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1047), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1092, i64 5, {}* %"CONTAB[138]*74", {}* %"CONTAB[362]*75", {}* %"CONTAB[90]*76", {}* %"CONTAB[157]*77", {}* %"CONTAB[1047]*78")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^823^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^823^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[69]*79" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*80" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*81" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1093, i64 3, {}* %"CONTAB[69]*79", {}* %"CONTAB[56]*80", {}* %"CONTAB[54]*81")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1095, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"str-CWR=VERBALISIERE-CONSTRAINT-FAKTOR", i64 0, i64 0))
  %"CONTAB[1095]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1095), align 8
  %"CONTAB[6]*82" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1094, {}* %"CONTAB[1095]*", {}* %"CONTAB[6]*82")
  %"CONTAB[644]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 644), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1096, i64 1, {}* %"CONTAB[644]*")
  %"CONTAB[78]*83" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1097, i64 4, {}* %"CONTAB[78]*83", {}* inttoptr (i64 106876 to {}*), {}* inttoptr (i64 3316 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[644]*84" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 644), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1098, i64 1, {}* %"CONTAB[644]*84")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^829^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^829^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1100, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-FORMAT-ERROR, i64 0, i64 0))
  %"CONTAB[1100]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1100), align 16
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1099, {}* %"CONTAB[1100]*", {}* %"CONTAB[2]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1102, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-COMPLAINT, i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.57() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !270 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.55)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.56)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @RUN-ALL.58() #5 personality i32 (...)* @__gxx_personality_v0 !dbg !271 {
entry:
  %"CONTAB[1102]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1102), align 16
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1101, {}* %"CONTAB[1102]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1103, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-Required argument missing", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1105, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-CONTROL-STRING, i64 0, i64 0))
  %"CONTAB[1105]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1105), align 8
  %"CONTAB[46]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1104, {}* %"CONTAB[1105]*", {}* %"CONTAB[46]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1106, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"str-~A ~A ~A ~A", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1108, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-OFFSET, i64 0, i64 0))
  %"CONTAB[1108]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1108), align 16
  %"CONTAB[46]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1107, {}* %"CONTAB[1108]*", {}* %"CONTAB[46]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1110, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-PRINC, i64 0, i64 0))
  %"CONTAB[1110]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1110), align 16
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1109, {}* %"CONTAB[1110]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1112, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-WRITE-STRING, i64 0, i64 0))
  %"CONTAB[1112]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1112), align 16
  %"CONTAB[10]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1111, {}* %"CONTAB[1112]*", {}* %"CONTAB[10]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1114, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1117, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-STRINGP, i64 0, i64 0))
  %"CONTAB[1117]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1117), align 8
  %"CONTAB[10]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1116, {}* %"CONTAB[1117]*", {}* %"CONTAB[10]*4")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1118, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1120, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @str-MAKE-STRING-OUTPUT-STREAM-FROM-STRING, i64 0, i64 0))
  %"CONTAB[1120]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1120), align 16
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1119, {}* %"CONTAB[1120]*", {}* %"CONTAB[2]*")
  %"CONTAB[69]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1121, i64 3, {}* %"CONTAB[69]*5", {}* %"CONTAB[56]*6", {}* %"CONTAB[54]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1123, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str-MAKE-STRING-OUTPUT-STREAM, i64 0, i64 0))
  %"CONTAB[1123]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1123), align 8
  %"CONTAB[10]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1122, {}* %"CONTAB[1123]*", {}* %"CONTAB[10]*8")
  %"CONTAB[69]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1124, i64 3, {}* %"CONTAB[69]*9", {}* %"CONTAB[56]*10", {}* %"CONTAB[54]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1126, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str-GET-OUTPUT-STREAM-STRING, i64 0, i64 0))
  %"CONTAB[1126]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1126), align 16
  %"CONTAB[10]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1125, {}* %"CONTAB[1126]*", {}* %"CONTAB[10]*12")
  %"CONTAB[69]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1127, i64 3, {}* %"CONTAB[69]*13", {}* %"CONTAB[56]*14", {}* %"CONTAB[54]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1129, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-*STANDARD-OUTPUT*", i64 0, i64 0))
  %"CONTAB[1129]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1129), align 8
  %"CONTAB[10]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1128, {}* %"CONTAB[1129]*", {}* %"CONTAB[10]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1130, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-~7d ~5a ~a", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1132, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str-FORMAT-PRINT-INTEGER, i64 0, i64 0))
  %"CONTAB[1132]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1132), align 16
  %"CONTAB[2]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1131, {}* %"CONTAB[1132]*", {}* %"CONTAB[2]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1133, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1135, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-FORMAT-PRINC, i64 0, i64 0))
  %"CONTAB[1135]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1135), align 8
  %"CONTAB[2]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1134, {}* %"CONTAB[1135]*", {}* %"CONTAB[2]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  %"CONTAB[69]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1137, i64 3, {}* %"CONTAB[69]*19", {}* %"CONTAB[56]*20", {}* %"CONTAB[54]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1139, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str-PRO-BEWERTE_CONSTRAINTS, i64 0, i64 0))
  %"CONTAB[1139]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1139), align 8
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1138, {}* %"CONTAB[1139]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1140, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1141, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"str-~ax", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1142, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-x, i64 0, i64 0))
  %"CONTAB[69]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1143, i64 3, {}* %"CONTAB[69]*22", {}* %"CONTAB[56]*23", {}* %"CONTAB[54]*24")
  %"CONTAB[69]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1144, i64 3, {}* %"CONTAB[69]*25", {}* %"CONTAB[56]*26", {}* %"CONTAB[54]*27")
  %"CONTAB[69]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1145, i64 3, {}* %"CONTAB[69]*28", {}* %"CONTAB[56]*29", {}* %"CONTAB[54]*30")
  %"CONTAB[69]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1146, i64 3, {}* %"CONTAB[69]*31", {}* %"CONTAB[56]*32", {}* %"CONTAB[54]*33")
  %"CONTAB[69]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1147, i64 3, {}* %"CONTAB[69]*34", {}* %"CONTAB[56]*35", {}* %"CONTAB[54]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-x, i64 0, i64 0))
  %"CONTAB[69]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1149, i64 3, {}* %"CONTAB[69]*37", {}* %"CONTAB[56]*38", {}* %"CONTAB[54]*39")
  %"CONTAB[69]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1150, i64 3, {}* %"CONTAB[69]*40", {}* %"CONTAB[56]*41", {}* %"CONTAB[54]*42")
  %"CONTAB[69]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1151, i64 3, {}* %"CONTAB[69]*43", {}* %"CONTAB[56]*44", {}* %"CONTAB[54]*45")
  %"CONTAB[69]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1152, i64 3, {}* %"CONTAB[69]*46", {}* %"CONTAB[56]*47", {}* %"CONTAB[54]*48")
  %"CONTAB[69]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1153, i64 3, {}* %"CONTAB[69]*49", {}* %"CONTAB[56]*50", {}* %"CONTAB[54]*51")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1154, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-x, i64 0, i64 0))
  %"CONTAB[69]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1155, i64 3, {}* %"CONTAB[69]*52", {}* %"CONTAB[56]*53", {}* %"CONTAB[54]*54")
  %"CONTAB[69]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1156, i64 3, {}* %"CONTAB[69]*55", {}* %"CONTAB[56]*56", {}* %"CONTAB[54]*57")
  %"CONTAB[69]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1157, i64 3, {}* %"CONTAB[69]*58", {}* %"CONTAB[56]*59", {}* %"CONTAB[54]*60")
  %"CONTAB[69]*61" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*62" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*63" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1158, i64 3, {}* %"CONTAB[69]*61", {}* %"CONTAB[56]*62", {}* %"CONTAB[54]*63")
  %"CONTAB[69]*64" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*65" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*66" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1159, i64 3, {}* %"CONTAB[69]*64", {}* %"CONTAB[56]*65", {}* %"CONTAB[54]*66")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1160, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-x, i64 0, i64 0))
  %"CONTAB[69]*67" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*68" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*69" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1161, i64 3, {}* %"CONTAB[69]*67", {}* %"CONTAB[56]*68", {}* %"CONTAB[54]*69")
  %"CONTAB[69]*70" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*71" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*72" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1162, i64 3, {}* %"CONTAB[69]*70", {}* %"CONTAB[56]*71", {}* %"CONTAB[54]*72")
  %"CONTAB[69]*73" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*74" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*75" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1163, i64 3, {}* %"CONTAB[69]*73", {}* %"CONTAB[56]*74", {}* %"CONTAB[54]*75")
  %"CONTAB[69]*76" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*77" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*78" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1164, i64 3, {}* %"CONTAB[69]*76", {}* %"CONTAB[56]*77", {}* %"CONTAB[54]*78")
  %"CONTAB[69]*79" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*80" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*81" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1165, i64 3, {}* %"CONTAB[69]*79", {}* %"CONTAB[56]*80", {}* %"CONTAB[54]*81")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1167, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"str-CWR=VERBALISIERE_CONSTRAINT", i64 0, i64 0))
  %"CONTAB[1167]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1167), align 8
  %"CONTAB[6]*82" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1166, {}* %"CONTAB[1167]*", {}* %"CONTAB[6]*82")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1170, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-QUADRUPEL, i64 0, i64 0))
  %"CONTAB[1170]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1170), align 16
  %"CONTAB[6]*83" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1169, {}* %"CONTAB[1170]*", {}* %"CONTAB[6]*83")
  %"CONTAB[1169]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1169), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1168, i64 1, {}* %"CONTAB[1169]*")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1171, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 107216 to {}*), {}* inttoptr (i64 3332 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[957]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1173, i64 2, {}* %"CONTAB[957]*", {}* %"CONTAB[1060]*")
  %"CONTAB[957]*84" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1173]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1173), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1172, i64 2, {}* %"CONTAB[957]*84", {}* %"CONTAB[1173]*")
  %"CONTAB[957]*85" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*86" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1175, i64 2, {}* %"CONTAB[957]*85", {}* %"CONTAB[1060]*86")
  %"CONTAB[957]*87" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1175]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1175), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1174, i64 2, {}* %"CONTAB[957]*87", {}* %"CONTAB[1175]*")
  %"CONTAB[957]*88" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*89" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1177, i64 2, {}* %"CONTAB[957]*88", {}* %"CONTAB[1060]*89")
  %"CONTAB[957]*90" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1177]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1177), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1176, i64 2, {}* %"CONTAB[957]*90", {}* %"CONTAB[1177]*")
  %"CONTAB[957]*91" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1060]*92" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1060), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1179, i64 2, {}* %"CONTAB[957]*91", {}* %"CONTAB[1060]*92")
  %"CONTAB[957]*93" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 957), align 8
  %"CONTAB[1179]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1179), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1178, i64 2, {}* %"CONTAB[957]*93", {}* %"CONTAB[1179]*")
  %"CONTAB[1169]*94" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1169), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1180, i64 1, {}* %"CONTAB[1169]*94")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1183, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-STREAM, i64 0, i64 0))
  %"CONTAB[1183]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1183), align 8
  %"CONTAB[10]*95" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1182, {}* %"CONTAB[1183]*", {}* %"CONTAB[10]*95")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1186, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111260, i64 0, i64 0))
  %"CONTAB[1186]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1186), align 16
  %"CONTAB[12]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1185, {}* %"CONTAB[1186]*", {}* %"CONTAB[12]*")
  %"CONTAB[397]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1188, i64 2, {}* %"CONTAB[397]*", {}* %"CONTAB[1099]*")
  %"CONTAB[60]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1188]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1188), align 16
  %"CONTAB[1101]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1106]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %"CONTAB[1107]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1187, i64 8, {}* %"CONTAB[60]*", {}* %"CONTAB[1188]*", {}* %"CONTAB[1101]*", {}* %"CONTAB[1103]*", {}* %"CONTAB[1104]*", {}* %"CONTAB[1106]*", {}* %"CONTAB[1107]*", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[1185]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1185), align 8
  %"CONTAB[1187]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1187), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1184, i64 2, {}* %"CONTAB[1185]*", {}* %"CONTAB[1187]*")
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @RUN-ALL.59() #5 personality i32 (...)* @__gxx_personality_v0 !dbg !272 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1191, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111261, i64 0, i64 0))
  %"CONTAB[1191]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1191), align 8
  %"CONTAB[12]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1190, {}* %"CONTAB[1191]*", {}* %"CONTAB[12]*")
  %"CONTAB[397]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1193, i64 2, {}* %"CONTAB[397]*", {}* %"CONTAB[1099]*")
  %"CONTAB[60]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1193]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1193), align 8
  %"CONTAB[1101]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1106]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %"CONTAB[1107]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1192, i64 8, {}* %"CONTAB[60]*", {}* %"CONTAB[1193]*", {}* %"CONTAB[1101]*", {}* %"CONTAB[1103]*", {}* %"CONTAB[1104]*", {}* %"CONTAB[1106]*", {}* %"CONTAB[1107]*", {}* inttoptr (i64 16 to {}*))
  %"CONTAB[1190]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1190), align 16
  %"CONTAB[1192]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1192), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1189, i64 2, {}* %"CONTAB[1190]*", {}* %"CONTAB[1192]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1196, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111262, i64 0, i64 0))
  %"CONTAB[1196]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1196), align 16
  %"CONTAB[12]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1195, {}* %"CONTAB[1196]*", {}* %"CONTAB[12]*1")
  %"CONTAB[397]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1198, i64 2, {}* %"CONTAB[397]*2", {}* %"CONTAB[1099]*3")
  %"CONTAB[60]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1198]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1198), align 16
  %"CONTAB[1101]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1106]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %"CONTAB[1107]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1197, i64 8, {}* %"CONTAB[60]*4", {}* %"CONTAB[1198]*", {}* %"CONTAB[1101]*5", {}* %"CONTAB[1103]*6", {}* %"CONTAB[1104]*7", {}* %"CONTAB[1106]*8", {}* %"CONTAB[1107]*9", {}* inttoptr (i64 28 to {}*))
  %"CONTAB[1195]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1195), align 8
  %"CONTAB[1197]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1197), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1194, i64 2, {}* %"CONTAB[1195]*", {}* %"CONTAB[1197]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1201, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111263, i64 0, i64 0))
  %"CONTAB[1201]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1201), align 8
  %"CONTAB[12]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1200, {}* %"CONTAB[1201]*", {}* %"CONTAB[12]*10")
  %"CONTAB[397]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1203, i64 2, {}* %"CONTAB[397]*11", {}* %"CONTAB[1099]*12")
  %"CONTAB[60]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1203]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1203), align 8
  %"CONTAB[1101]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1106]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1106), align 16
  %"CONTAB[1107]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1202, i64 8, {}* %"CONTAB[60]*13", {}* %"CONTAB[1203]*", {}* %"CONTAB[1101]*14", {}* %"CONTAB[1103]*15", {}* %"CONTAB[1104]*16", {}* %"CONTAB[1106]*17", {}* %"CONTAB[1107]*18", {}* inttoptr (i64 40 to {}*))
  %"CONTAB[1200]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1200), align 16
  %"CONTAB[1202]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1202), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1199, i64 2, {}* %"CONTAB[1200]*", {}* %"CONTAB[1202]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1205, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str-&REST", i64 0, i64 0))
  %"CONTAB[1205]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1205), align 8
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 10), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1204, {}* %"CONTAB[1205]*", {}* %"CONTAB[10]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1207, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ARGS, i64 0, i64 0))
  %"CONTAB[1207]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1207), align 8
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 2), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1206, {}* %"CONTAB[1207]*", {}* %"CONTAB[2]*")
  %"CONTAB[1182]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1182), align 16
  %"CONTAB[157]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1184]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1184), align 16
  %"CONTAB[1189]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1189), align 8
  %"CONTAB[1194]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1194), align 16
  %"CONTAB[1199]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1199), align 8
  %"CONTAB[1204]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1204), align 16
  %"CONTAB[1206]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1206), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1181, i64 8, {}* %"CONTAB[1182]*", {}* %"CONTAB[157]*", {}* %"CONTAB[1184]*", {}* %"CONTAB[1189]*", {}* %"CONTAB[1194]*", {}* %"CONTAB[1199]*", {}* %"CONTAB[1204]*", {}* %"CONTAB[1206]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1211, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111363, i64 0, i64 0))
  %"CONTAB[1211]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1211), align 8
  %"CONTAB[12]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1210, {}* %"CONTAB[1211]*", {}* %"CONTAB[12]*19")
  %"CONTAB[397]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1213, i64 2, {}* %"CONTAB[397]*20", {}* %"CONTAB[1099]*21")
  %"CONTAB[60]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1213]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1213), align 8
  %"CONTAB[1101]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1141]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %"CONTAB[1107]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1212, i64 8, {}* %"CONTAB[60]*22", {}* %"CONTAB[1213]*", {}* %"CONTAB[1101]*23", {}* %"CONTAB[1103]*24", {}* %"CONTAB[1104]*25", {}* %"CONTAB[1141]*", {}* %"CONTAB[1107]*26", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[1210]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1210), align 16
  %"CONTAB[1212]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1212), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1209, i64 2, {}* %"CONTAB[1210]*", {}* %"CONTAB[1212]*")
  %"CONTAB[1182]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1182), align 16
  %"CONTAB[157]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1209]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1209), align 8
  %"CONTAB[1204]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1204), align 16
  %"CONTAB[1206]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1206), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1208, i64 5, {}* %"CONTAB[1182]*27", {}* %"CONTAB[157]*28", {}* %"CONTAB[1209]*", {}* %"CONTAB[1204]*29", {}* %"CONTAB[1206]*30")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1217, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111304, i64 0, i64 0))
  %"CONTAB[1217]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1217), align 8
  %"CONTAB[12]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1216, {}* %"CONTAB[1217]*", {}* %"CONTAB[12]*31")
  %"CONTAB[397]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1219, i64 2, {}* %"CONTAB[397]*32", {}* %"CONTAB[1099]*33")
  %"CONTAB[60]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1219]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1219), align 8
  %"CONTAB[1101]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*37" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1141]*38" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %"CONTAB[1107]*39" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1218, i64 8, {}* %"CONTAB[60]*34", {}* %"CONTAB[1219]*", {}* %"CONTAB[1101]*35", {}* %"CONTAB[1103]*36", {}* %"CONTAB[1104]*37", {}* %"CONTAB[1141]*38", {}* %"CONTAB[1107]*39", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[1216]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1216), align 16
  %"CONTAB[1218]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1218), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1215, i64 2, {}* %"CONTAB[1216]*", {}* %"CONTAB[1218]*")
  %"CONTAB[1182]*40" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1182), align 16
  %"CONTAB[157]*41" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1215]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1215), align 8
  %"CONTAB[1204]*42" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1204), align 16
  %"CONTAB[1206]*43" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1206), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1214, i64 5, {}* %"CONTAB[1182]*40", {}* %"CONTAB[157]*41", {}* %"CONTAB[1215]*", {}* %"CONTAB[1204]*42", {}* %"CONTAB[1206]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1223, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111283, i64 0, i64 0))
  %"CONTAB[1223]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1223), align 8
  %"CONTAB[12]*44" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1222, {}* %"CONTAB[1223]*", {}* %"CONTAB[12]*44")
  %"CONTAB[397]*45" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*46" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1225, i64 2, {}* %"CONTAB[397]*45", {}* %"CONTAB[1099]*46")
  %"CONTAB[60]*47" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1225]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1225), align 8
  %"CONTAB[1101]*48" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*49" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*50" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1130]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1130), align 16
  %"CONTAB[1107]*51" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1224, i64 8, {}* %"CONTAB[60]*47", {}* %"CONTAB[1225]*", {}* %"CONTAB[1101]*48", {}* %"CONTAB[1103]*49", {}* %"CONTAB[1104]*50", {}* %"CONTAB[1130]*", {}* %"CONTAB[1107]*51", {}* inttoptr (i64 8 to {}*))
  %"CONTAB[1222]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1222), align 16
  %"CONTAB[1224]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1224), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1221, i64 2, {}* %"CONTAB[1222]*", {}* %"CONTAB[1224]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1228, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111284, i64 0, i64 0))
  %"CONTAB[1228]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1228), align 16
  %"CONTAB[12]*52" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1227, {}* %"CONTAB[1228]*", {}* %"CONTAB[12]*52")
  %"CONTAB[397]*53" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*54" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1230, i64 2, {}* %"CONTAB[397]*53", {}* %"CONTAB[1099]*54")
  %"CONTAB[60]*55" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1230]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1230), align 16
  %"CONTAB[1101]*56" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*57" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*58" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1130]*59" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1130), align 16
  %"CONTAB[1107]*60" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1229, i64 8, {}* %"CONTAB[60]*55", {}* %"CONTAB[1230]*", {}* %"CONTAB[1101]*56", {}* %"CONTAB[1103]*57", {}* %"CONTAB[1104]*58", {}* %"CONTAB[1130]*59", {}* %"CONTAB[1107]*60", {}* inttoptr (i64 24 to {}*))
  %"CONTAB[1227]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1227), align 8
  %"CONTAB[1229]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1229), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1226, i64 2, {}* %"CONTAB[1227]*", {}* %"CONTAB[1229]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1233, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111285, i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.60() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !273 {
entry:
  %"CONTAB[1233]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1233), align 8
  %"CONTAB[12]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1232, {}* %"CONTAB[1233]*", {}* %"CONTAB[12]*")
  %"CONTAB[397]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1235, i64 2, {}* %"CONTAB[397]*", {}* %"CONTAB[1099]*")
  %"CONTAB[60]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1235]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1235), align 8
  %"CONTAB[1101]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1130]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1130), align 16
  %"CONTAB[1107]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1234, i64 8, {}* %"CONTAB[60]*", {}* %"CONTAB[1235]*", {}* %"CONTAB[1101]*", {}* %"CONTAB[1103]*", {}* %"CONTAB[1104]*", {}* %"CONTAB[1130]*", {}* %"CONTAB[1107]*", {}* inttoptr (i64 36 to {}*))
  %"CONTAB[1232]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1232), align 16
  %"CONTAB[1234]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1234), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1231, i64 2, {}* %"CONTAB[1232]*", {}* %"CONTAB[1234]*")
  %"CONTAB[1182]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1182), align 16
  %"CONTAB[157]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1221]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1221), align 8
  %"CONTAB[1226]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1226), align 16
  %"CONTAB[1231]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1231), align 8
  %"CONTAB[1204]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1204), align 16
  %"CONTAB[1206]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1206), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1220, i64 7, {}* %"CONTAB[1182]*", {}* %"CONTAB[157]*", {}* %"CONTAB[1221]*", {}* %"CONTAB[1226]*", {}* %"CONTAB[1231]*", {}* %"CONTAB[1204]*", {}* %"CONTAB[1206]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1239, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111324, i64 0, i64 0))
  %"CONTAB[1239]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1239), align 8
  %"CONTAB[12]*1" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1238, {}* %"CONTAB[1239]*", {}* %"CONTAB[12]*1")
  %"CONTAB[397]*2" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*3" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1241, i64 2, {}* %"CONTAB[397]*2", {}* %"CONTAB[1099]*3")
  %"CONTAB[60]*4" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1241]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1241), align 8
  %"CONTAB[1101]*5" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*6" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*7" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1141]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %"CONTAB[1107]*8" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1240, i64 8, {}* %"CONTAB[60]*4", {}* %"CONTAB[1241]*", {}* %"CONTAB[1101]*5", {}* %"CONTAB[1103]*6", {}* %"CONTAB[1104]*7", {}* %"CONTAB[1141]*", {}* %"CONTAB[1107]*8", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[1238]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1238), align 16
  %"CONTAB[1240]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1240), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1237, i64 2, {}* %"CONTAB[1238]*", {}* %"CONTAB[1240]*")
  %"CONTAB[1182]*9" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1182), align 16
  %"CONTAB[157]*10" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1237]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1237), align 8
  %"CONTAB[1204]*11" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1204), align 16
  %"CONTAB[1206]*12" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1206), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1236, i64 5, {}* %"CONTAB[1182]*9", {}* %"CONTAB[157]*10", {}* %"CONTAB[1237]*", {}* %"CONTAB[1204]*11", {}* %"CONTAB[1206]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1245, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-111344, i64 0, i64 0))
  %"CONTAB[1245]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1245), align 8
  %"CONTAB[12]*13" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1244, {}* %"CONTAB[1245]*", {}* %"CONTAB[12]*13")
  %"CONTAB[397]*14" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 397), align 8
  %"CONTAB[1099]*15" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1099), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1247, i64 2, {}* %"CONTAB[397]*14", {}* %"CONTAB[1099]*15")
  %"CONTAB[60]*16" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 60), align 16
  %"CONTAB[1247]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1247), align 8
  %"CONTAB[1101]*17" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1101), align 8
  %"CONTAB[1103]*18" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1103), align 8
  %"CONTAB[1104]*19" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1104), align 16
  %"CONTAB[1141]*20" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1141), align 8
  %"CONTAB[1107]*21" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1107), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1246, i64 8, {}* %"CONTAB[60]*16", {}* %"CONTAB[1247]*", {}* %"CONTAB[1101]*17", {}* %"CONTAB[1103]*18", {}* %"CONTAB[1104]*19", {}* %"CONTAB[1141]*20", {}* %"CONTAB[1107]*21", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[1244]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1244), align 16
  %"CONTAB[1246]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1246), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1243, i64 2, {}* %"CONTAB[1244]*", {}* %"CONTAB[1246]*")
  %"CONTAB[1182]*22" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1182), align 16
  %"CONTAB[157]*23" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 157), align 8
  %"CONTAB[1243]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1243), align 8
  %"CONTAB[1204]*24" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1204), align 16
  %"CONTAB[1206]*25" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1206), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1242, i64 5, {}* %"CONTAB[1182]*22", {}* %"CONTAB[157]*23", {}* %"CONTAB[1243]*", {}* %"CONTAB[1204]*24", {}* %"CONTAB[1206]*25")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^833^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^833^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[12]*26" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1248, i64 1, {}* %"CONTAB[12]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1250, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-SYSTEM, i64 0, i64 0))
  %"CONTAB[1250]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1250), align 16
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1249, {}* %"CONTAB[1250]*", {}* %"CONTAB[6]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1252, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-ERERBT, i64 0, i64 0))
  %"CONTAB[1252]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1252), align 16
  %"CONTAB[6]*27" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1251, {}* %"CONTAB[1252]*", {}* %"CONTAB[6]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1254, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-LOESCHEN, i64 0, i64 0))
  %"CONTAB[1254]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1254), align 16
  %"CONTAB[6]*28" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1253, {}* %"CONTAB[1254]*", {}* %"CONTAB[6]*28")
  %"CONTAB[12]*29" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 12), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1255, i64 1, {}* %"CONTAB[12]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1257, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INSGESAMT, i64 0, i64 0))
  %"CONTAB[1257]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1257), align 8
  %"CONTAB[6]*30" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1256, {}* %"CONTAB[1257]*", {}* %"CONTAB[6]*30")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1259, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-ATTRIBUTE, i64 0, i64 0))
  %"CONTAB[1259]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1259), align 8
  %"CONTAB[6]*31" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1258, {}* %"CONTAB[1259]*", {}* %"CONTAB[6]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1261, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-OBJEKTEN, i64 0, i64 0))
  %"CONTAB[1261]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1261), align 8
  %"CONTAB[6]*32" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1260, {}* %"CONTAB[1261]*", {}* %"CONTAB[6]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1263, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-DYNAMISCH, i64 0, i64 0))
  %"CONTAB[1263]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1263), align 8
  %"CONTAB[6]*33" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1262, {}* %"CONTAB[1263]*", {}* %"CONTAB[6]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1265, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-NICHT, i64 0, i64 0))
  %"CONTAB[1265]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1265), align 8
  %"CONTAB[6]*34" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1264, {}* %"CONTAB[1265]*", {}* %"CONTAB[6]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1267, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-STATISCH, i64 0, i64 0))
  %"CONTAB[1267]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1267), align 8
  %"CONTAB[6]*35" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1266, {}* %"CONTAB[1267]*", {}* %"CONTAB[6]*35")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 69), align 8
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 56), align 16
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 54), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1268, i64 3, {}* %"CONTAB[69]*", {}* %"CONTAB[56]*", {}* %"CONTAB[54]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1270, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-CWR-STATISTIK, i64 0, i64 0))
  %"CONTAB[1270]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 1270), align 16
  %"CONTAB[6]*36" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 6), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1269, {}* %"CONTAB[1270]*", {}* %"CONTAB[6]*36")
  %"CONTAB[78]*" = load {}*, {}** getelementptr inbounds ([1272 x {}*], [1272 x {}*]* @CONTAB4224, i64 0, i64 78), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1271, i64 4, {}* %"CONTAB[78]*", {}* inttoptr (i64 110388 to {}*), {}* inttoptr (i64 3404 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"cwr=objekte.lisp^851^TOP-COMPILE-FILE", i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"str-cwr=objekte.lisp^851^TOP-COMPILE-FILE", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.61() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !274 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.59)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.60)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.62() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !275 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.58)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.61)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.63() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !276 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.57)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.62)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.64() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !277 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.54)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.63)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.65() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !278 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.45)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.64)
  ret void
}

; Function Attrs: nounwind
declare void @cc_initialize_gcroots_in_module({ i8*, i8*, i64 }*, {}**, i64, {}*) local_unnamed_addr #1

; Function Attrs: uwtable
define internal void @CLASP-CTOR() #0 personality i32 (...)* @__gxx_personality_v0 {
entry:
  tail call void @cc_register_startup_function(void ()* nonnull @RUN-ALL)
  ret void
}

declare void @cc_register_startup_function(void ()*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @cc_error_too_few_arguments(i64, i64, %0*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @cc_error_too_many_arguments(i64, i64, %0*) local_unnamed_addr #6

attributes #0 = { uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #1 = { nounwind "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #2 = { ssp uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #3 = { "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #4 = { nounwind readnone speculatable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #5 = { nounwind uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn }

!llvm.ident = !{!0, !1}
!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!5, !6, !7, !8}

!0 = !{!"Clasp"}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_501/final)"}
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clasp Common Lisp compiler", isOptimized: false, flags: "-v", runtimeVersion: 1, splitDebugFilename: "the-split-name.log", emissionKind: LineTablesOnly, enums: !4)
!3 = !DIFile(filename: "cwr=objekte.lisp", directory: "/Users/karstenpoeck/lisp/coke/program")
!4 = !{}
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"PIC Level", i32 2}
!9 = distinct !DISubprogram(name: "RUN-ALL", linkageName: "RUN-ALL", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed_fixed)
!13 = distinct !DISubprogram(name: "cwr=objekte.lisp^1^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^1^TOP-COMPILE-FILE", scope: !3, file: !3, line: 1, type: !10, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: false, unit: !2, variables: !4)
!14 = !{!15, !19, i64 16}
!15 = !{!"_ZTS13__va_list_tag", !16, i64 0, !16, i64 4, !19, i64 8, !19, i64 16}
!16 = !{!"int", !17, i64 0}
!17 = !{!"omnipotent char", !18, i64 0}
!18 = !{!"Simple C++ TBAA"}
!19 = !{!"any pointer", !17, i64 0}
!20 = !{!15, !16, i64 0}
!21 = !{!22, !22, i64 0}
!22 = !{!"long", !17, i64 0}
!23 = distinct !DISubprogram(name: "cwr=objekte.lisp^69^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^69^TOP-COMPILE-FILE", scope: !3, file: !3, line: 69, type: !10, isLocal: false, isDefinition: true, scopeLine: 69, isOptimized: false, unit: !2, variables: !4)
!24 = distinct !DISubprogram(name: "cwr=objekte.lisp^70^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^70^TOP-COMPILE-FILE", scope: !3, file: !3, line: 70, type: !10, isLocal: false, isDefinition: true, scopeLine: 70, isOptimized: false, unit: !2, variables: !4)
!25 = distinct !DISubprogram(name: "cwr=objekte.lisp^71^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^71^TOP-COMPILE-FILE", scope: !3, file: !3, line: 71, type: !10, isLocal: false, isDefinition: true, scopeLine: 71, isOptimized: false, unit: !2, variables: !4)
!26 = distinct !DISubprogram(name: "cwr=objekte.lisp^72^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^72^TOP-COMPILE-FILE", scope: !3, file: !3, line: 72, type: !10, isLocal: false, isDefinition: true, scopeLine: 72, isOptimized: false, unit: !2, variables: !4)
!27 = distinct !DISubprogram(name: "cwr=objekte.lisp^73^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^73^TOP-COMPILE-FILE", scope: !3, file: !3, line: 73, type: !10, isLocal: false, isDefinition: true, scopeLine: 73, isOptimized: false, unit: !2, variables: !4)
!28 = distinct !DISubprogram(name: "cwr=objekte.lisp^74^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^74^TOP-COMPILE-FILE", scope: !3, file: !3, line: 74, type: !10, isLocal: false, isDefinition: true, scopeLine: 74, isOptimized: false, unit: !2, variables: !4)
!29 = distinct !DISubprogram(name: "cwr=objekte.lisp^75^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^75^TOP-COMPILE-FILE", scope: !3, file: !3, line: 75, type: !10, isLocal: false, isDefinition: true, scopeLine: 75, isOptimized: false, unit: !2, variables: !4)
!30 = distinct !DISubprogram(name: "cwr=objekte.lisp^76^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^76^TOP-COMPILE-FILE", scope: !3, file: !3, line: 76, type: !10, isLocal: false, isDefinition: true, scopeLine: 76, isOptimized: false, unit: !2, variables: !4)
!31 = distinct !DISubprogram(name: "cwr=objekte.lisp^77^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^77^TOP-COMPILE-FILE", scope: !3, file: !3, line: 77, type: !10, isLocal: false, isDefinition: true, scopeLine: 77, isOptimized: false, unit: !2, variables: !4)
!32 = distinct !DISubprogram(name: "cwr=objekte.lisp^78^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^78^TOP-COMPILE-FILE", scope: !3, file: !3, line: 78, type: !10, isLocal: false, isDefinition: true, scopeLine: 78, isOptimized: false, unit: !2, variables: !4)
!33 = distinct !DISubprogram(name: "cwr=objekte.lisp^79^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^79^TOP-COMPILE-FILE", scope: !3, file: !3, line: 79, type: !10, isLocal: false, isDefinition: true, scopeLine: 79, isOptimized: false, unit: !2, variables: !4)
!34 = distinct !DISubprogram(name: "cwr=objekte.lisp^80^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^80^TOP-COMPILE-FILE", scope: !3, file: !3, line: 80, type: !10, isLocal: false, isDefinition: true, scopeLine: 80, isOptimized: false, unit: !2, variables: !4)
!35 = distinct !DISubprogram(name: "cwr=objekte.lisp^82^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^82^TOP-COMPILE-FILE", scope: !3, file: !3, line: 82, type: !10, isLocal: false, isDefinition: true, scopeLine: 82, isOptimized: false, unit: !2, variables: !4)
!36 = distinct !DISubprogram(name: "cwr=objekte.lisp^91^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^91^TOP-COMPILE-FILE", scope: !3, file: !3, line: 91, type: !10, isLocal: false, isDefinition: true, scopeLine: 91, isOptimized: false, unit: !2, variables: !4)
!37 = distinct !DISubprogram(name: "CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=STATISTIK_RUECKSETZEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 91, type: !10, isLocal: false, isDefinition: true, scopeLine: 91, isOptimized: false, unit: !2, variables: !4)
!38 = distinct !DISubprogram(name: "cwr=objekte.lisp^99^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^99^TOP-COMPILE-FILE", scope: !3, file: !3, line: 99, type: !10, isLocal: false, isDefinition: true, scopeLine: 99, isOptimized: false, unit: !2, variables: !4)
!39 = distinct !DISubprogram(name: "CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^", linkageName: "CWR=COKE_STANDARD_SLOTS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 99, type: !10, isLocal: false, isDefinition: true, scopeLine: 99, isOptimized: false, unit: !2, variables: !4)
!40 = distinct !DISubprogram(name: "cwr=objekte.lisp^106^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^106^TOP-COMPILE-FILE", scope: !3, file: !3, line: 106, type: !10, isLocal: false, isDefinition: true, scopeLine: 106, isOptimized: false, unit: !2, variables: !4)
!41 = distinct !DISubprogram(name: "CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^", linkageName: "CWR=BENUTZER_SLOTS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 106, type: !10, isLocal: false, isDefinition: true, scopeLine: 106, isOptimized: false, unit: !2, variables: !4)
!42 = distinct !DISubprogram(name: "cwr=objekte.lisp^110^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^110^TOP-COMPILE-FILE", scope: !3, file: !3, line: 110, type: !10, isLocal: false, isDefinition: true, scopeLine: 110, isOptimized: false, unit: !2, variables: !4)
!43 = distinct !DISubprogram(name: "CWR=AUFRUF^COMMON-LISP-USER^FN^^", linkageName: "CWR=AUFRUF^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 110, type: !10, isLocal: false, isDefinition: true, scopeLine: 110, isOptimized: false, unit: !2, variables: !4)
!44 = distinct !DISubprogram(name: "cwr=objekte.lisp^118^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^118^TOP-COMPILE-FILE", scope: !3, file: !3, line: 118, type: !10, isLocal: false, isDefinition: true, scopeLine: 118, isOptimized: false, unit: !2, variables: !4)
!45 = distinct !DISubprogram(name: "CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=NUR_WB_LADEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 118, type: !10, isLocal: false, isDefinition: true, scopeLine: 118, isOptimized: false, unit: !2, variables: !4)
!46 = distinct !DISubprogram(name: "cwr=objekte.lisp^135^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^135^TOP-COMPILE-FILE", scope: !3, file: !3, line: 135, type: !10, isLocal: false, isDefinition: true, scopeLine: 135, isOptimized: false, unit: !2, variables: !4)
!47 = distinct !DISubprogram(name: "CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^", linkageName: "CWR=SUCHE-ATTRIBUT-ZU-VORSCHLAG^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 135, type: !10, isLocal: false, isDefinition: true, scopeLine: 135, isOptimized: false, unit: !2, variables: !4)
!48 = distinct !DISubprogram(name: "cwr=objekte.lisp^141^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^141^TOP-COMPILE-FILE", scope: !3, file: !3, line: 141, type: !10, isLocal: false, isDefinition: true, scopeLine: 141, isOptimized: false, unit: !2, variables: !4)
!49 = distinct !DISubprogram(name: "CWR=INIT^COMMON-LISP-USER^FN^^", linkageName: "CWR=INIT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 141, type: !10, isLocal: false, isDefinition: true, scopeLine: 141, isOptimized: false, unit: !2, variables: !4)
!50 = distinct !DISubprogram(name: "cwr=objekte.lisp^147^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^147^TOP-COMPILE-FILE", scope: !3, file: !3, line: 147, type: !10, isLocal: false, isDefinition: true, scopeLine: 147, isOptimized: false, unit: !2, variables: !4)
!51 = distinct !DISubprogram(name: "CWR=UMSETZEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=UMSETZEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 147, type: !10, isLocal: false, isDefinition: true, scopeLine: 147, isOptimized: false, unit: !2, variables: !4)
!52 = distinct !DISubprogram(name: "cwr=objekte.lisp^155^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^155^TOP-COMPILE-FILE", scope: !3, file: !3, line: 155, type: !10, isLocal: false, isDefinition: true, scopeLine: 155, isOptimized: false, unit: !2, variables: !4)
!53 = distinct !DISubprogram(name: "CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^", linkageName: "CWR=VERBALISIERE-OBJEKT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 155, type: !10, isLocal: false, isDefinition: true, scopeLine: 155, isOptimized: false, unit: !2, variables: !4)
!54 = distinct !DISubprogram(name: "cwr=objekte.lisp^161^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^161^TOP-COMPILE-FILE", scope: !3, file: !3, line: 161, type: !10, isLocal: false, isDefinition: true, scopeLine: 161, isOptimized: false, unit: !2, variables: !4)
!55 = distinct !DISubprogram(name: "CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=DIALOG-SCHLIESSEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 161, type: !10, isLocal: false, isDefinition: true, scopeLine: 161, isOptimized: false, unit: !2, variables: !4)
!56 = distinct !DISubprogram(name: "cwr=objekte.lisp^164^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^164^TOP-COMPILE-FILE", scope: !3, file: !3, line: 164, type: !10, isLocal: false, isDefinition: true, scopeLine: 164, isOptimized: false, unit: !2, variables: !4)
!57 = distinct !DISubprogram(name: "CWR=FALL_LADEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=FALL_LADEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 164, type: !10, isLocal: false, isDefinition: true, scopeLine: 164, isOptimized: false, unit: !2, variables: !4)
!58 = distinct !DISubprogram(name: "cwr=objekte.lisp^179^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^179^TOP-COMPILE-FILE", scope: !3, file: !3, line: 179, type: !10, isLocal: false, isDefinition: true, scopeLine: 179, isOptimized: false, unit: !2, variables: !4)
!59 = distinct !DISubprogram(name: "CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^", linkageName: "CWR=SPEICHERE_OBERE_1/2-EBENE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 179, type: !10, isLocal: false, isDefinition: true, scopeLine: 179, isOptimized: false, unit: !2, variables: !4)
!60 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 179, type: !10, isLocal: false, isDefinition: true, scopeLine: 179, isOptimized: false, unit: !2, variables: !4)
!61 = distinct !DISubprogram(name: "cwr=objekte.lisp^185^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^185^TOP-COMPILE-FILE", scope: !3, file: !3, line: 185, type: !10, isLocal: false, isDefinition: true, scopeLine: 185, isOptimized: false, unit: !2, variables: !4)
!62 = distinct !DISubprogram(name: "CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^", linkageName: "CWR=SPEICHERE_UNTERE_1/2-EBENE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 185, type: !10, isLocal: false, isDefinition: true, scopeLine: 185, isOptimized: false, unit: !2, variables: !4)
!63 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 185, type: !10, isLocal: false, isDefinition: true, scopeLine: 185, isOptimized: false, unit: !2, variables: !4)
!64 = distinct !DISubprogram(name: "cwr=objekte.lisp^194^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^194^TOP-COMPILE-FILE", scope: !3, file: !3, line: 194, type: !10, isLocal: false, isDefinition: true, scopeLine: 194, isOptimized: false, unit: !2, variables: !4)
!65 = distinct !DISubprogram(name: "CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=BENUTZER_INSTANZEN_LOESCHEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 194, type: !10, isLocal: false, isDefinition: true, scopeLine: 194, isOptimized: false, unit: !2, variables: !4)
!66 = distinct !DISubprogram(name: "cwr=objekte.lisp^199^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^199^TOP-COMPILE-FILE", scope: !3, file: !3, line: 199, type: !10, isLocal: false, isDefinition: true, scopeLine: 199, isOptimized: false, unit: !2, variables: !4)
!67 = distinct !DISubprogram(name: "CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^", linkageName: "CWR=WISSENSBASIZUSTAND-SICHERN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 199, type: !10, isLocal: false, isDefinition: true, scopeLine: 199, isOptimized: false, unit: !2, variables: !4)
!68 = distinct !DISubprogram(name: "cwr=objekte.lisp^202^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^202^TOP-COMPILE-FILE", scope: !3, file: !3, line: 202, type: !10, isLocal: false, isDefinition: true, scopeLine: 202, isOptimized: false, unit: !2, variables: !4)
!69 = distinct !DISubprogram(name: "CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^", linkageName: "CWR-WIRKLICHER-ORDNER-MACHEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 202, type: !10, isLocal: false, isDefinition: true, scopeLine: 202, isOptimized: false, unit: !2, variables: !4)
!70 = distinct !DISubprogram(name: "cwr=objekte.lisp^237^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^237^TOP-COMPILE-FILE", scope: !3, file: !3, line: 237, type: !10, isLocal: false, isDefinition: true, scopeLine: 237, isOptimized: false, unit: !2, variables: !4)
!71 = distinct !DISubprogram(name: "CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^", linkageName: "CWR-DATEIEN_LADEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 237, type: !10, isLocal: false, isDefinition: true, scopeLine: 237, isOptimized: false, unit: !2, variables: !4)
!72 = distinct !DISubprogram(name: "cwr=objekte.lisp^241^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^241^TOP-COMPILE-FILE", scope: !3, file: !3, line: 241, type: !10, isLocal: false, isDefinition: true, scopeLine: 241, isOptimized: false, unit: !2, variables: !4)
!73 = distinct !DISubprogram(name: "CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^", linkageName: "CWR-WERT-SETZEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 241, type: !10, isLocal: false, isDefinition: true, scopeLine: 241, isOptimized: false, unit: !2, variables: !4)
!74 = !{!75, !19, i64 0}
!75 = !{!"_ZTSN7gctools9smart_ptrIN4core3T_OEEE", !19, i64 0}
!76 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 241, type: !10, isLocal: false, isDefinition: true, scopeLine: 241, isOptimized: false, unit: !2, variables: !4)
!77 = distinct !DISubprogram(name: "cwr=objekte.lisp^251^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^251^TOP-COMPILE-FILE", scope: !3, file: !3, line: 251, type: !10, isLocal: false, isDefinition: true, scopeLine: 251, isOptimized: false, unit: !2, variables: !4)
!78 = distinct !DISubprogram(name: "CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^", linkageName: "CWR=SICHER_ERGEBNIS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 251, type: !10, isLocal: false, isDefinition: true, scopeLine: 251, isOptimized: false, unit: !2, variables: !4)
!79 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 251, type: !10, isLocal: false, isDefinition: true, scopeLine: 251, isOptimized: false, unit: !2, variables: !4)
!80 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 251, type: !10, isLocal: false, isDefinition: true, scopeLine: 251, isOptimized: false, unit: !2, variables: !4)
!81 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 251, type: !10, isLocal: false, isDefinition: true, scopeLine: 251, isOptimized: false, unit: !2, variables: !4)
!82 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 251, type: !10, isLocal: false, isDefinition: true, scopeLine: 251, isOptimized: false, unit: !2, variables: !4)
!83 = distinct !DISubprogram(name: "cwr=objekte.lisp^279^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^279^TOP-COMPILE-FILE", scope: !3, file: !3, line: 279, type: !10, isLocal: false, isDefinition: true, scopeLine: 279, isOptimized: false, unit: !2, variables: !4)
!84 = distinct !DISubprogram(name: "CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^", linkageName: "CWR=ANALYSE_GLOBALKONTROLLE_LISTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 279, type: !10, isLocal: false, isDefinition: true, scopeLine: 279, isOptimized: false, unit: !2, variables: !4)
!85 = distinct !DISubprogram(name: "cwr=objekte.lisp^285^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^285^TOP-COMPILE-FILE", scope: !3, file: !3, line: 285, type: !10, isLocal: false, isDefinition: true, scopeLine: 285, isOptimized: false, unit: !2, variables: !4)
!86 = distinct !DISubprogram(name: "CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^", linkageName: "CWR=ANALYSE_GLOBALKONTROLLE_LISTE_1^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 285, type: !10, isLocal: false, isDefinition: true, scopeLine: 285, isOptimized: false, unit: !2, variables: !4)
!87 = distinct !DISubprogram(name: "cwr=objekte.lisp^304^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^304^TOP-COMPILE-FILE", scope: !3, file: !3, line: 304, type: !10, isLocal: false, isDefinition: true, scopeLine: 304, isOptimized: false, unit: !2, variables: !4)
!88 = distinct !DISubprogram(name: "CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^", linkageName: "CWR=SPEICHERE_FALL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 304, type: !10, isLocal: false, isDefinition: true, scopeLine: 304, isOptimized: false, unit: !2, variables: !4)
!89 = distinct !DISubprogram(name: "cwr=objekte.lisp^312^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^312^TOP-COMPILE-FILE", scope: !3, file: !3, line: 312, type: !10, isLocal: false, isDefinition: true, scopeLine: 312, isOptimized: false, unit: !2, variables: !4)
!90 = distinct !DISubprogram(name: "CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^", linkageName: "CWR=ANALYSIERERE-STEUERUNGSOBJEKT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 312, type: !10, isLocal: false, isDefinition: true, scopeLine: 312, isOptimized: false, unit: !2, variables: !4)
!91 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 312, type: !10, isLocal: false, isDefinition: true, scopeLine: 312, isOptimized: false, unit: !2, variables: !4)
!92 = distinct !DISubprogram(name: "cwr=objekte.lisp^327^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^327^TOP-COMPILE-FILE", scope: !3, file: !3, line: 327, type: !10, isLocal: false, isDefinition: true, scopeLine: 327, isOptimized: false, unit: !2, variables: !4)
!93 = distinct !DISubprogram(name: "MY-LOAD^COMMON-LISP-USER^FN^^", linkageName: "MY-LOAD^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 327, type: !10, isLocal: false, isDefinition: true, scopeLine: 327, isOptimized: false, unit: !2, variables: !4)
!94 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 327, type: !10, isLocal: false, isDefinition: true, scopeLine: 327, isOptimized: false, unit: !2, variables: !4)
!95 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 327, type: !10, isLocal: false, isDefinition: true, scopeLine: 327, isOptimized: false, unit: !2, variables: !4)
!96 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 327, type: !10, isLocal: false, isDefinition: true, scopeLine: 327, isOptimized: false, unit: !2, variables: !4)
!97 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 327, type: !10, isLocal: false, isDefinition: true, scopeLine: 327, isOptimized: false, unit: !2, variables: !4)
!98 = distinct !DISubprogram(name: "cwr=objekte.lisp^350^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^350^TOP-COMPILE-FILE", scope: !3, file: !3, line: 350, type: !10, isLocal: false, isDefinition: true, scopeLine: 350, isOptimized: false, unit: !2, variables: !4)
!99 = distinct !DISubprogram(name: "CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^", linkageName: "CWR=LADE_ES_ES_LOKAL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 350, type: !10, isLocal: false, isDefinition: true, scopeLine: 350, isOptimized: false, unit: !2, variables: !4)
!100 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 350, type: !10, isLocal: false, isDefinition: true, scopeLine: 350, isOptimized: false, unit: !2, variables: !4)
!101 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 350, type: !10, isLocal: false, isDefinition: true, scopeLine: 350, isOptimized: false, unit: !2, variables: !4)
!102 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 350, type: !10, isLocal: false, isDefinition: true, scopeLine: 350, isOptimized: false, unit: !2, variables: !4)
!103 = distinct !DISubprogram(name: "cwr=objekte.lisp^360^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^360^TOP-COMPILE-FILE", scope: !3, file: !3, line: 360, type: !10, isLocal: false, isDefinition: true, scopeLine: 360, isOptimized: false, unit: !2, variables: !4)
!104 = distinct !DISubprogram(name: "CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^", linkageName: "CWR-SETZE_INVERSE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 360, type: !10, isLocal: false, isDefinition: true, scopeLine: 360, isOptimized: false, unit: !2, variables: !4)
!105 = distinct !DISubprogram(name: "cwr=objekte.lisp^385^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^385^TOP-COMPILE-FILE", scope: !3, file: !3, line: 385, type: !10, isLocal: false, isDefinition: true, scopeLine: 385, isOptimized: false, unit: !2, variables: !4)
!106 = distinct !DISubprogram(name: "CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^", linkageName: "CWR-LOESCHE_INVERSE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 385, type: !10, isLocal: false, isDefinition: true, scopeLine: 385, isOptimized: false, unit: !2, variables: !4)
!107 = distinct !DISubprogram(name: "cwr=objekte.lisp^393^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^393^TOP-COMPILE-FILE", scope: !3, file: !3, line: 393, type: !10, isLocal: false, isDefinition: true, scopeLine: 393, isOptimized: false, unit: !2, variables: !4)
!108 = distinct !DISubprogram(name: "CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^", linkageName: "CWR=NEUE_INVERSE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 393, type: !10, isLocal: false, isDefinition: true, scopeLine: 393, isOptimized: false, unit: !2, variables: !4)
!109 = distinct !DISubprogram(name: "cwr=objekte.lisp^401^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^401^TOP-COMPILE-FILE", scope: !3, file: !3, line: 401, type: !10, isLocal: false, isDefinition: true, scopeLine: 401, isOptimized: false, unit: !2, variables: !4)
!110 = distinct !DISubprogram(name: "CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^", linkageName: "CWR-EIN_DYNAMISCHER_INFORMANT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 401, type: !10, isLocal: false, isDefinition: true, scopeLine: 401, isOptimized: false, unit: !2, variables: !4)
!111 = distinct !DISubprogram(name: "cwr=objekte.lisp^406^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^406^TOP-COMPILE-FILE", scope: !3, file: !3, line: 406, type: !10, isLocal: false, isDefinition: true, scopeLine: 406, isOptimized: false, unit: !2, variables: !4)
!112 = distinct !DISubprogram(name: "CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^", linkageName: "CWR=DYNAMISCHE_ATTRIBUTE_INIT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 406, type: !10, isLocal: false, isDefinition: true, scopeLine: 406, isOptimized: false, unit: !2, variables: !4)
!113 = distinct !DISubprogram(name: "cwr=objekte.lisp^415^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^415^TOP-COMPILE-FILE", scope: !3, file: !3, line: 415, type: !10, isLocal: false, isDefinition: true, scopeLine: 415, isOptimized: false, unit: !2, variables: !4)
!114 = distinct !DISubprogram(name: "CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 415, type: !10, isLocal: false, isDefinition: true, scopeLine: 415, isOptimized: false, unit: !2, variables: !4)
!115 = distinct !DISubprogram(name: "cwr=objekte.lisp^428^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^428^TOP-COMPILE-FILE", scope: !3, file: !3, line: 428, type: !10, isLocal: false, isDefinition: true, scopeLine: 428, isOptimized: false, unit: !2, variables: !4)
!116 = distinct !DISubprogram(name: "CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE_INVERSES_ATTRIBUT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 428, type: !10, isLocal: false, isDefinition: true, scopeLine: 428, isOptimized: false, unit: !2, variables: !4)
!117 = distinct !DISubprogram(name: "cwr=objekte.lisp^444^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^444^TOP-COMPILE-FILE", scope: !3, file: !3, line: 444, type: !10, isLocal: false, isDefinition: true, scopeLine: 444, isOptimized: false, unit: !2, variables: !4)
!118 = distinct !DISubprogram(name: "CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 444, type: !10, isLocal: false, isDefinition: true, scopeLine: 444, isOptimized: false, unit: !2, variables: !4)
!119 = distinct !DISubprogram(name: "cwr=objekte.lisp^448^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^448^TOP-COMPILE-FILE", scope: !3, file: !3, line: 448, type: !10, isLocal: false, isDefinition: true, scopeLine: 448, isOptimized: false, unit: !2, variables: !4)
!120 = distinct !DISubprogram(name: "CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE_RELATIONEN_ATTRIBUTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 448, type: !10, isLocal: false, isDefinition: true, scopeLine: 448, isOptimized: false, unit: !2, variables: !4)
!121 = distinct !DISubprogram(name: "cwr=objekte.lisp^457^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^457^TOP-COMPILE-FILE", scope: !3, file: !3, line: 457, type: !10, isLocal: false, isDefinition: true, scopeLine: 457, isOptimized: false, unit: !2, variables: !4)
!122 = distinct !DISubprogram(name: "CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^", linkageName: "CWR=LESE_PRIORITAET^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 457, type: !10, isLocal: false, isDefinition: true, scopeLine: 457, isOptimized: false, unit: !2, variables: !4)
!123 = distinct !DISubprogram(name: "cwr=objekte.lisp^460^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^460^TOP-COMPILE-FILE", scope: !3, file: !3, line: 460, type: !10, isLocal: false, isDefinition: true, scopeLine: 460, isOptimized: false, unit: !2, variables: !4)
!124 = distinct !DISubprogram(name: "CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^", linkageName: "CWR=SCHREIBE_PRIORITAET^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 460, type: !10, isLocal: false, isDefinition: true, scopeLine: 460, isOptimized: false, unit: !2, variables: !4)
!125 = distinct !DISubprogram(name: "cwr=objekte.lisp^469^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^469^TOP-COMPILE-FILE", scope: !3, file: !3, line: 469, type: !10, isLocal: false, isDefinition: true, scopeLine: 469, isOptimized: false, unit: !2, variables: !4)
!126 = distinct !DISubprogram(name: "CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=DIE_KLASSEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 469, type: !10, isLocal: false, isDefinition: true, scopeLine: 469, isOptimized: false, unit: !2, variables: !4)
!127 = distinct !DISubprogram(name: "cwr=objekte.lisp^473^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^473^TOP-COMPILE-FILE", scope: !3, file: !3, line: 473, type: !10, isLocal: false, isDefinition: true, scopeLine: 473, isOptimized: false, unit: !2, variables: !4)
!128 = distinct !DISubprogram(name: "CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^", linkageName: "CWR=DIE_WURZEL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 473, type: !10, isLocal: false, isDefinition: true, scopeLine: 473, isOptimized: false, unit: !2, variables: !4)
!129 = distinct !DISubprogram(name: "cwr=objekte.lisp^476^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^476^TOP-COMPILE-FILE", scope: !3, file: !3, line: 476, type: !10, isLocal: false, isDefinition: true, scopeLine: 476, isOptimized: false, unit: !2, variables: !4)
!130 = distinct !DISubprogram(name: "CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=SYSTEM_KLASSEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 476, type: !10, isLocal: false, isDefinition: true, scopeLine: 476, isOptimized: false, unit: !2, variables: !4)
!131 = distinct !DISubprogram(name: "cwr=objekte.lisp^481^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^481^TOP-COMPILE-FILE", scope: !3, file: !3, line: 481, type: !10, isLocal: false, isDefinition: true, scopeLine: 481, isOptimized: false, unit: !2, variables: !4)
!132 = distinct !DISubprogram(name: "CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^", linkageName: "CWR=ABLAUBSTEUERUNG_WURZEL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 481, type: !10, isLocal: false, isDefinition: true, scopeLine: 481, isOptimized: false, unit: !2, variables: !4)
!133 = distinct !DISubprogram(name: "cwr=objekte.lisp^485^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^485^TOP-COMPILE-FILE", scope: !3, file: !3, line: 485, type: !10, isLocal: false, isDefinition: true, scopeLine: 485, isOptimized: false, unit: !2, variables: !4)
!134 = distinct !DISubprogram(name: "CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=BENUTZER_KLASSEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 485, type: !10, isLocal: false, isDefinition: true, scopeLine: 485, isOptimized: false, unit: !2, variables: !4)
!135 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 485, type: !10, isLocal: false, isDefinition: true, scopeLine: 485, isOptimized: false, unit: !2, variables: !4)
!136 = distinct !DISubprogram(name: "cwr=objekte.lisp^492^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^492^TOP-COMPILE-FILE", scope: !3, file: !3, line: 492, type: !10, isLocal: false, isDefinition: true, scopeLine: 492, isOptimized: false, unit: !2, variables: !4)
!137 = distinct !DISubprogram(name: "CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 492, type: !10, isLocal: false, isDefinition: true, scopeLine: 492, isOptimized: false, unit: !2, variables: !4)
!138 = distinct !DISubprogram(name: "cwr=objekte.lisp^531^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^531^TOP-COMPILE-FILE", scope: !3, file: !3, line: 531, type: !10, isLocal: false, isDefinition: true, scopeLine: 531, isOptimized: false, unit: !2, variables: !4)
!139 = distinct !DISubprogram(name: "CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", linkageName: "CWR=LESE_WERTE_BEREICH^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 531, type: !10, isLocal: false, isDefinition: true, scopeLine: 531, isOptimized: false, unit: !2, variables: !4)
!140 = distinct !DISubprogram(name: "cwr=objekte.lisp^535^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^535^TOP-COMPILE-FILE", scope: !3, file: !3, line: 535, type: !10, isLocal: false, isDefinition: true, scopeLine: 535, isOptimized: false, unit: !2, variables: !4)
!141 = distinct !DISubprogram(name: "CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^", linkageName: "CWR=HAT_KLASSE_?_ATTRIBUT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 535, type: !10, isLocal: false, isDefinition: true, scopeLine: 535, isOptimized: false, unit: !2, variables: !4)
!142 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 535, type: !10, isLocal: false, isDefinition: true, scopeLine: 535, isOptimized: false, unit: !2, variables: !4)
!143 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 535, type: !10, isLocal: false, isDefinition: true, scopeLine: 535, isOptimized: false, unit: !2, variables: !4)
!144 = distinct !DISubprogram(name: "cwr=objekte.lisp^550^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^550^TOP-COMPILE-FILE", scope: !3, file: !3, line: 550, type: !10, isLocal: false, isDefinition: true, scopeLine: 550, isOptimized: false, unit: !2, variables: !4)
!145 = distinct !DISubprogram(name: "CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^", linkageName: "CWR=ALLE_KLASSEN_MIT_?_ATTRIBUT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 550, type: !10, isLocal: false, isDefinition: true, scopeLine: 550, isOptimized: false, unit: !2, variables: !4)
!146 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 550, type: !10, isLocal: false, isDefinition: true, scopeLine: 550, isOptimized: false, unit: !2, variables: !4)
!147 = distinct !DISubprogram(name: "cwr=objekte.lisp^559^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^559^TOP-COMPILE-FILE", scope: !3, file: !3, line: 559, type: !10, isLocal: false, isDefinition: true, scopeLine: 559, isOptimized: false, unit: !2, variables: !4)
!148 = distinct !DISubprogram(name: "CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^", linkageName: "CWR=ALLE_ATTRIBUTE_MIT_?_WERTE_BEREICH^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 559, type: !10, isLocal: false, isDefinition: true, scopeLine: 559, isOptimized: false, unit: !2, variables: !4)
!149 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 559, type: !10, isLocal: false, isDefinition: true, scopeLine: 559, isOptimized: false, unit: !2, variables: !4)
!150 = distinct !DISubprogram(name: "cwr=objekte.lisp^577^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^577^TOP-COMPILE-FILE", scope: !3, file: !3, line: 577, type: !10, isLocal: false, isDefinition: true, scopeLine: 577, isOptimized: false, unit: !2, variables: !4)
!151 = distinct !DISubprogram(name: "CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^", linkageName: "CWR=WERTEBEREICH-EINGEBBAR-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 577, type: !10, isLocal: false, isDefinition: true, scopeLine: 577, isOptimized: false, unit: !2, variables: !4)
!152 = distinct !DISubprogram(name: "cwr=objekte.lisp^583^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^583^TOP-COMPILE-FILE", scope: !3, file: !3, line: 583, type: !10, isLocal: false, isDefinition: true, scopeLine: 583, isOptimized: false, unit: !2, variables: !4)
!153 = distinct !DISubprogram(name: "CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^", linkageName: "CWR=FUERE_VORSCHLAG_AUS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 583, type: !10, isLocal: false, isDefinition: true, scopeLine: 583, isOptimized: false, unit: !2, variables: !4)
!154 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 583, type: !10, isLocal: false, isDefinition: true, scopeLine: 583, isOptimized: false, unit: !2, variables: !4)
!155 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 583, type: !10, isLocal: false, isDefinition: true, scopeLine: 583, isOptimized: false, unit: !2, variables: !4)
!156 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 583, type: !10, isLocal: false, isDefinition: true, scopeLine: 583, isOptimized: false, unit: !2, variables: !4)
!157 = distinct !DISubprogram(name: "cwr=objekte.lisp^608^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^608^TOP-COMPILE-FILE", scope: !3, file: !3, line: 608, type: !10, isLocal: false, isDefinition: true, scopeLine: 608, isOptimized: false, unit: !2, variables: !4)
!158 = distinct !DISubprogram(name: "CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^", linkageName: "CWR=FUERE_UEBERWACHUNG_AUS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 608, type: !10, isLocal: false, isDefinition: true, scopeLine: 608, isOptimized: false, unit: !2, variables: !4)
!159 = distinct !DISubprogram(name: "cwr=objekte.lisp^614^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^614^TOP-COMPILE-FILE", scope: !3, file: !3, line: 614, type: !10, isLocal: false, isDefinition: true, scopeLine: 614, isOptimized: false, unit: !2, variables: !4)
!160 = distinct !DISubprogram(name: "CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^", linkageName: "CWR=FUERE_HEILMITTEL_AUS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 614, type: !10, isLocal: false, isDefinition: true, scopeLine: 614, isOptimized: false, unit: !2, variables: !4)
!161 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 614, type: !10, isLocal: false, isDefinition: true, scopeLine: 614, isOptimized: false, unit: !2, variables: !4)
!162 = distinct !DISubprogram(name: "cwr=objekte.lisp^622^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^622^TOP-COMPILE-FILE", scope: !3, file: !3, line: 622, type: !10, isLocal: false, isDefinition: true, scopeLine: 622, isOptimized: false, unit: !2, variables: !4)
!163 = distinct !DISubprogram(name: "CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^", linkageName: "CWR=FUERE_CONSTRAINT_AUS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 622, type: !10, isLocal: false, isDefinition: true, scopeLine: 622, isOptimized: false, unit: !2, variables: !4)
!164 = distinct !DISubprogram(name: "cwr=objekte.lisp^628^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^628^TOP-COMPILE-FILE", scope: !3, file: !3, line: 628, type: !10, isLocal: false, isDefinition: true, scopeLine: 628, isOptimized: false, unit: !2, variables: !4)
!165 = distinct !DISubprogram(name: "CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_AKTIVE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 628, type: !10, isLocal: false, isDefinition: true, scopeLine: 628, isOptimized: false, unit: !2, variables: !4)
!166 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 628, type: !10, isLocal: false, isDefinition: true, scopeLine: 628, isOptimized: false, unit: !2, variables: !4)
!167 = distinct !DISubprogram(name: "cwr=objekte.lisp^633^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^633^TOP-COMPILE-FILE", scope: !3, file: !3, line: 633, type: !10, isLocal: false, isDefinition: true, scopeLine: 633, isOptimized: false, unit: !2, variables: !4)
!168 = distinct !DISubprogram(name: "CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 633, type: !10, isLocal: false, isDefinition: true, scopeLine: 633, isOptimized: false, unit: !2, variables: !4)
!169 = distinct !DISubprogram(name: "cwr=objekte.lisp^637^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^637^TOP-COMPILE-FILE", scope: !3, file: !3, line: 637, type: !10, isLocal: false, isDefinition: true, scopeLine: 637, isOptimized: false, unit: !2, variables: !4)
!170 = distinct !DISubprogram(name: "CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE_VORSCHLAEGE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 637, type: !10, isLocal: false, isDefinition: true, scopeLine: 637, isOptimized: false, unit: !2, variables: !4)
!171 = distinct !DISubprogram(name: "cwr=objekte.lisp^644^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^644^TOP-COMPILE-FILE", scope: !3, file: !3, line: 644, type: !10, isLocal: false, isDefinition: true, scopeLine: 644, isOptimized: false, unit: !2, variables: !4)
!172 = distinct !DISubprogram(name: "CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 644, type: !10, isLocal: false, isDefinition: true, scopeLine: 644, isOptimized: false, unit: !2, variables: !4)
!173 = distinct !DISubprogram(name: "cwr=objekte.lisp^650^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^650^TOP-COMPILE-FILE", scope: !3, file: !3, line: 650, type: !10, isLocal: false, isDefinition: true, scopeLine: 650, isOptimized: false, unit: !2, variables: !4)
!174 = distinct !DISubprogram(name: "CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", linkageName: "CWR=LOESCHE-EINEN-VORSCHLAG^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 650, type: !10, isLocal: false, isDefinition: true, scopeLine: 650, isOptimized: false, unit: !2, variables: !4)
!175 = distinct !DISubprogram(name: "cwr=objekte.lisp^656^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^656^TOP-COMPILE-FILE", scope: !3, file: !3, line: 656, type: !10, isLocal: false, isDefinition: true, scopeLine: 656, isOptimized: false, unit: !2, variables: !4)
!176 = distinct !DISubprogram(name: "CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 656, type: !10, isLocal: false, isDefinition: true, scopeLine: 656, isOptimized: false, unit: !2, variables: !4)
!177 = distinct !DISubprogram(name: "cwr=objekte.lisp^662^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^662^TOP-COMPILE-FILE", scope: !3, file: !3, line: 662, type: !10, isLocal: false, isDefinition: true, scopeLine: 662, isOptimized: false, unit: !2, variables: !4)
!178 = distinct !DISubprogram(name: "CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", linkageName: "CWR=LOESCHE-EIN-CONSTRAINT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 662, type: !10, isLocal: false, isDefinition: true, scopeLine: 662, isOptimized: false, unit: !2, variables: !4)
!179 = distinct !DISubprogram(name: "cwr=objekte.lisp^667^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^667^TOP-COMPILE-FILE", scope: !3, file: !3, line: 667, type: !10, isLocal: false, isDefinition: true, scopeLine: 667, isOptimized: false, unit: !2, variables: !4)
!180 = distinct !DISubprogram(name: "CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 667, type: !10, isLocal: false, isDefinition: true, scopeLine: 667, isOptimized: false, unit: !2, variables: !4)
!181 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 667, type: !10, isLocal: false, isDefinition: true, scopeLine: 667, isOptimized: false, unit: !2, variables: !4)
!182 = distinct !DISubprogram(name: "cwr=objekte.lisp^679^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^679^TOP-COMPILE-FILE", scope: !3, file: !3, line: 679, type: !10, isLocal: false, isDefinition: true, scopeLine: 679, isOptimized: false, unit: !2, variables: !4)
!183 = distinct !DISubprogram(name: "CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE-POTENTIELLE-CONSTRAINTS^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 679, type: !10, isLocal: false, isDefinition: true, scopeLine: 679, isOptimized: false, unit: !2, variables: !4)
!184 = distinct !DISubprogram(name: "cwr=objekte.lisp^684^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^684^TOP-COMPILE-FILE", scope: !3, file: !3, line: 684, type: !10, isLocal: false, isDefinition: true, scopeLine: 684, isOptimized: false, unit: !2, variables: !4)
!185 = distinct !DISubprogram(name: "CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE_CONSTRAINT_LISTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 684, type: !10, isLocal: false, isDefinition: true, scopeLine: 684, isOptimized: false, unit: !2, variables: !4)
!186 = distinct !DISubprogram(name: "cwr=objekte.lisp^690^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^690^TOP-COMPILE-FILE", scope: !3, file: !3, line: 690, type: !10, isLocal: false, isDefinition: true, scopeLine: 690, isOptimized: false, unit: !2, variables: !4)
!187 = distinct !DISubprogram(name: "CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_CONSTRAINT_FAKTOR^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 690, type: !10, isLocal: false, isDefinition: true, scopeLine: 690, isOptimized: false, unit: !2, variables: !4)
!188 = distinct !DISubprogram(name: "cwr=objekte.lisp^694^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^694^TOP-COMPILE-FILE", scope: !3, file: !3, line: 694, type: !10, isLocal: false, isDefinition: true, scopeLine: 694, isOptimized: false, unit: !2, variables: !4)
!189 = distinct !DISubprogram(name: "CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_HEILMITTEL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 694, type: !10, isLocal: false, isDefinition: true, scopeLine: 694, isOptimized: false, unit: !2, variables: !4)
!190 = distinct !DISubprogram(name: "cwr=objekte.lisp^698^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^698^TOP-COMPILE-FILE", scope: !3, file: !3, line: 698, type: !10, isLocal: false, isDefinition: true, scopeLine: 698, isOptimized: false, unit: !2, variables: !4)
!191 = distinct !DISubprogram(name: "CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_HEILMITTEL_SORTIERT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 698, type: !10, isLocal: false, isDefinition: true, scopeLine: 698, isOptimized: false, unit: !2, variables: !4)
!192 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 698, type: !10, isLocal: false, isDefinition: true, scopeLine: 698, isOptimized: false, unit: !2, variables: !4)
!193 = distinct !DISubprogram(name: "cwr=objekte.lisp^705^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^705^TOP-COMPILE-FILE", scope: !3, file: !3, line: 705, type: !10, isLocal: false, isDefinition: true, scopeLine: 705, isOptimized: false, unit: !2, variables: !4)
!194 = distinct !DISubprogram(name: "CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^", linkageName: "CWR=SCHREIBE_HEILMITTEL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 705, type: !10, isLocal: false, isDefinition: true, scopeLine: 705, isOptimized: false, unit: !2, variables: !4)
!195 = distinct !DISubprogram(name: "cwr=objekte.lisp^709^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^709^TOP-COMPILE-FILE", scope: !3, file: !3, line: 709, type: !10, isLocal: false, isDefinition: true, scopeLine: 709, isOptimized: false, unit: !2, variables: !4)
!196 = distinct !DISubprogram(name: "CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^", linkageName: "CWR=NEUES_HEILMITTEL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 709, type: !10, isLocal: false, isDefinition: true, scopeLine: 709, isOptimized: false, unit: !2, variables: !4)
!197 = distinct !DISubprogram(name: "cwr=objekte.lisp^721^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^721^TOP-COMPILE-FILE", scope: !3, file: !3, line: 721, type: !10, isLocal: false, isDefinition: true, scopeLine: 721, isOptimized: false, unit: !2, variables: !4)
!198 = distinct !DISubprogram(name: "CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 721, type: !10, isLocal: false, isDefinition: true, scopeLine: 721, isOptimized: false, unit: !2, variables: !4)
!199 = distinct !DISubprogram(name: "cwr=objekte.lisp^725^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^725^TOP-COMPILE-FILE", scope: !3, file: !3, line: 725, type: !10, isLocal: false, isDefinition: true, scopeLine: 725, isOptimized: false, unit: !2, variables: !4)
!200 = distinct !DISubprogram(name: "CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", linkageName: "CWR=SETZE_UEBERWACHUNG^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 725, type: !10, isLocal: false, isDefinition: true, scopeLine: 725, isOptimized: false, unit: !2, variables: !4)
!201 = distinct !DISubprogram(name: "cwr=objekte.lisp^731^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^731^TOP-COMPILE-FILE", scope: !3, file: !3, line: 731, type: !10, isLocal: false, isDefinition: true, scopeLine: 731, isOptimized: false, unit: !2, variables: !4)
!202 = distinct !DISubprogram(name: "CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^", linkageName: "CWR=HOLE_CONSTRAINT_BEWERTUNG^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 731, type: !10, isLocal: false, isDefinition: true, scopeLine: 731, isOptimized: false, unit: !2, variables: !4)
!203 = distinct !DISubprogram(name: "cwr=objekte.lisp^739^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^739^TOP-COMPILE-FILE", scope: !3, file: !3, line: 739, type: !10, isLocal: false, isDefinition: true, scopeLine: 739, isOptimized: false, unit: !2, variables: !4)
!204 = distinct !DISubprogram(name: "CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINT_ERZEUGEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 739, type: !10, isLocal: false, isDefinition: true, scopeLine: 739, isOptimized: false, unit: !2, variables: !4)
!205 = distinct !DISubprogram(name: "cwr=objekte.lisp^745^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^745^TOP-COMPILE-FILE", scope: !3, file: !3, line: 745, type: !10, isLocal: false, isDefinition: true, scopeLine: 745, isOptimized: false, unit: !2, variables: !4)
!206 = distinct !DISubprogram(name: "CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINT_FREIGEBEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 745, type: !10, isLocal: false, isDefinition: true, scopeLine: 745, isOptimized: false, unit: !2, variables: !4)
!207 = distinct !DISubprogram(name: "cwr=objekte.lisp^748^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^748^TOP-COMPILE-FILE", scope: !3, file: !3, line: 748, type: !10, isLocal: false, isDefinition: true, scopeLine: 748, isOptimized: false, unit: !2, variables: !4)
!208 = distinct !DISubprogram(name: "CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINTS_FREIGEBEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 748, type: !10, isLocal: false, isDefinition: true, scopeLine: 748, isOptimized: false, unit: !2, variables: !4)
!209 = distinct !DISubprogram(name: "cwr=objekte.lisp^751^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^751^TOP-COMPILE-FILE", scope: !3, file: !3, line: 751, type: !10, isLocal: false, isDefinition: true, scopeLine: 751, isOptimized: false, unit: !2, variables: !4)
!210 = distinct !DISubprogram(name: "CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINT-CONSTRAINT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 751, type: !10, isLocal: false, isDefinition: true, scopeLine: 751, isOptimized: false, unit: !2, variables: !4)
!211 = distinct !DISubprogram(name: "cwr=objekte.lisp^754^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^754^TOP-COMPILE-FILE", scope: !3, file: !3, line: 754, type: !10, isLocal: false, isDefinition: true, scopeLine: 754, isOptimized: false, unit: !2, variables: !4)
!212 = distinct !DISubprogram(name: "CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINT-OBJEKT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 754, type: !10, isLocal: false, isDefinition: true, scopeLine: 754, isOptimized: false, unit: !2, variables: !4)
!213 = distinct !DISubprogram(name: "cwr=objekte.lisp^757^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^757^TOP-COMPILE-FILE", scope: !3, file: !3, line: 757, type: !10, isLocal: false, isDefinition: true, scopeLine: 757, isOptimized: false, unit: !2, variables: !4)
!214 = distinct !DISubprogram(name: "CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^", linkageName: "CWR=TESTCONSTRAINT-EQUAL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 757, type: !10, isLocal: false, isDefinition: true, scopeLine: 757, isOptimized: false, unit: !2, variables: !4)
!215 = distinct !DISubprogram(name: "cwr=objekte.lisp^761^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^761^TOP-COMPILE-FILE", scope: !3, file: !3, line: 761, type: !10, isLocal: false, isDefinition: true, scopeLine: 761, isOptimized: false, unit: !2, variables: !4)
!216 = distinct !DISubprogram(name: "CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINTSAGENDA_LOESCHEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 761, type: !10, isLocal: false, isDefinition: true, scopeLine: 761, isOptimized: false, unit: !2, variables: !4)
!217 = distinct !DISubprogram(name: "cwr=objekte.lisp^766^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^766^TOP-COMPILE-FILE", scope: !3, file: !3, line: 766, type: !10, isLocal: false, isDefinition: true, scopeLine: 766, isOptimized: false, unit: !2, variables: !4)
!218 = distinct !DISubprogram(name: "CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=TESTCONSTRAINT_VERMERKEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 766, type: !10, isLocal: false, isDefinition: true, scopeLine: 766, isOptimized: false, unit: !2, variables: !4)
!219 = distinct !DISubprogram(name: "cwr=objekte.lisp^770^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^770^TOP-COMPILE-FILE", scope: !3, file: !3, line: 770, type: !10, isLocal: false, isDefinition: true, scopeLine: 770, isOptimized: false, unit: !2, variables: !4)
!220 = distinct !DISubprogram(name: "CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=TESTCONSTRAINTS_VERMERKEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 770, type: !10, isLocal: false, isDefinition: true, scopeLine: 770, isOptimized: false, unit: !2, variables: !4)
!221 = distinct !DISubprogram(name: "cwr=objekte.lisp^775^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^775^TOP-COMPILE-FILE", scope: !3, file: !3, line: 775, type: !10, isLocal: false, isDefinition: true, scopeLine: 775, isOptimized: false, unit: !2, variables: !4)
!222 = distinct !DISubprogram(name: "CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^", linkageName: "CWR=TESTCONSTRAINT-SCHON-VORHANDEN-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 775, type: !10, isLocal: false, isDefinition: true, scopeLine: 775, isOptimized: false, unit: !2, variables: !4)
!223 = distinct !DISubprogram(name: "cwr=objekte.lisp^780^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^780^TOP-COMPILE-FILE", scope: !3, file: !3, line: 780, type: !10, isLocal: false, isDefinition: true, scopeLine: 780, isOptimized: false, unit: !2, variables: !4)
!224 = distinct !DISubprogram(name: "CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINTSAGENDA_INITIALISIEREN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 780, type: !10, isLocal: false, isDefinition: true, scopeLine: 780, isOptimized: false, unit: !2, variables: !4)
!225 = distinct !DISubprogram(name: "cwr=objekte.lisp^786^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^786^TOP-COMPILE-FILE", scope: !3, file: !3, line: 786, type: !10, isLocal: false, isDefinition: true, scopeLine: 786, isOptimized: false, unit: !2, variables: !4)
!226 = distinct !DISubprogram(name: "CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=CONSTRAINTS_ABARBEITEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 786, type: !10, isLocal: false, isDefinition: true, scopeLine: 786, isOptimized: false, unit: !2, variables: !4)
!227 = distinct !DISubprogram(name: "cwr=objekte.lisp^797^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^797^TOP-COMPILE-FILE", scope: !3, file: !3, line: 797, type: !10, isLocal: false, isDefinition: true, scopeLine: 797, isOptimized: false, unit: !2, variables: !4)
!228 = distinct !DISubprogram(name: "CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^", linkageName: "CWR=EIN-CONSTRAINT-ABARBEITEN-OHNE-FREIGEBEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 797, type: !10, isLocal: false, isDefinition: true, scopeLine: 797, isOptimized: false, unit: !2, variables: !4)
!229 = distinct !DISubprogram(name: "cwr=objekte.lisp^802^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^802^TOP-COMPILE-FILE", scope: !3, file: !3, line: 802, type: !10, isLocal: false, isDefinition: true, scopeLine: 802, isOptimized: false, unit: !2, variables: !4)
!230 = distinct !DISubprogram(name: "CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^", linkageName: "CWR-VERLETZTES-CONSTRAINT-ERZEUGEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 802, type: !10, isLocal: false, isDefinition: true, scopeLine: 802, isOptimized: false, unit: !2, variables: !4)
!231 = distinct !DISubprogram(name: "cwr=objekte.lisp^814^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^814^TOP-COMPILE-FILE", scope: !3, file: !3, line: 814, type: !10, isLocal: false, isDefinition: true, scopeLine: 814, isOptimized: false, unit: !2, variables: !4)
!232 = distinct !DISubprogram(name: "CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^", linkageName: "CWR-VERLETZTES-CONSTRAINTS-EQUAL^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 814, type: !10, isLocal: false, isDefinition: true, scopeLine: 814, isOptimized: false, unit: !2, variables: !4)
!233 = distinct !DISubprogram(name: "cwr=objekte.lisp^823^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^823^TOP-COMPILE-FILE", scope: !3, file: !3, line: 823, type: !10, isLocal: false, isDefinition: true, scopeLine: 823, isOptimized: false, unit: !2, variables: !4)
!234 = distinct !DISubprogram(name: "CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^", linkageName: "CWR=MELDE_CONSTRAINT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 823, type: !10, isLocal: false, isDefinition: true, scopeLine: 823, isOptimized: false, unit: !2, variables: !4)
!235 = distinct !DISubprogram(name: "cwr=objekte.lisp^829^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^829^TOP-COMPILE-FILE", scope: !3, file: !3, line: 829, type: !10, isLocal: false, isDefinition: true, scopeLine: 829, isOptimized: false, unit: !2, variables: !4)
!236 = distinct !DISubprogram(name: "CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^", linkageName: "CWR=VERBALISIERE-CONSTRAINT-FAKTOR^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 829, type: !10, isLocal: false, isDefinition: true, scopeLine: 829, isOptimized: false, unit: !2, variables: !4)
!237 = distinct !DISubprogram(name: "cwr=objekte.lisp^833^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^833^TOP-COMPILE-FILE", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!238 = distinct !DISubprogram(name: "CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^", linkageName: "CWR=VERBALISIERE_CONSTRAINT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!239 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!240 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!241 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!242 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!243 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 833, type: !10, isLocal: false, isDefinition: true, scopeLine: 833, isOptimized: false, unit: !2, variables: !4)
!244 = distinct !DISubprogram(name: "cwr=objekte.lisp^851^TOP-COMPILE-FILE", linkageName: "cwr=objekte.lisp^851^TOP-COMPILE-FILE", scope: !3, file: !3, line: 851, type: !10, isLocal: false, isDefinition: true, scopeLine: 851, isOptimized: false, unit: !2, variables: !4)
!245 = distinct !DISubprogram(name: "CWR-STATISTIK^COMMON-LISP-USER^FN^^", linkageName: "CWR-STATISTIK^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 851, type: !10, isLocal: false, isDefinition: true, scopeLine: 851, isOptimized: false, unit: !2, variables: !4)
!246 = distinct !DISubprogram(name: "RUN-ALL.33", linkageName: "RUN-ALL.33", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!247 = distinct !DISubprogram(name: "RUN-ALL.34", linkageName: "RUN-ALL.34", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!248 = distinct !DISubprogram(name: "RUN-ALL.35", linkageName: "RUN-ALL.35", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!249 = distinct !DISubprogram(name: "RUN-ALL.36", linkageName: "RUN-ALL.36", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!250 = distinct !DISubprogram(name: "RUN-ALL.37", linkageName: "RUN-ALL.37", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!251 = distinct !DISubprogram(name: "RUN-ALL.38", linkageName: "RUN-ALL.38", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!252 = distinct !DISubprogram(name: "RUN-ALL.39", linkageName: "RUN-ALL.39", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!253 = distinct !DISubprogram(name: "RUN-ALL.40", linkageName: "RUN-ALL.40", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!254 = distinct !DISubprogram(name: "RUN-ALL.41", linkageName: "RUN-ALL.41", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!255 = distinct !DISubprogram(name: "RUN-ALL.42", linkageName: "RUN-ALL.42", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!256 = distinct !DISubprogram(name: "RUN-ALL.43", linkageName: "RUN-ALL.43", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!257 = distinct !DISubprogram(name: "RUN-ALL.44", linkageName: "RUN-ALL.44", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!258 = distinct !DISubprogram(name: "RUN-ALL.45", linkageName: "RUN-ALL.45", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!259 = distinct !DISubprogram(name: "RUN-ALL.46", linkageName: "RUN-ALL.46", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!260 = distinct !DISubprogram(name: "RUN-ALL.47", linkageName: "RUN-ALL.47", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!261 = distinct !DISubprogram(name: "RUN-ALL.48", linkageName: "RUN-ALL.48", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!262 = distinct !DISubprogram(name: "RUN-ALL.49", linkageName: "RUN-ALL.49", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!263 = distinct !DISubprogram(name: "RUN-ALL.50", linkageName: "RUN-ALL.50", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!264 = distinct !DISubprogram(name: "RUN-ALL.51", linkageName: "RUN-ALL.51", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!265 = distinct !DISubprogram(name: "RUN-ALL.52", linkageName: "RUN-ALL.52", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!266 = distinct !DISubprogram(name: "RUN-ALL.53", linkageName: "RUN-ALL.53", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!267 = distinct !DISubprogram(name: "RUN-ALL.54", linkageName: "RUN-ALL.54", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!268 = distinct !DISubprogram(name: "RUN-ALL.55", linkageName: "RUN-ALL.55", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!269 = distinct !DISubprogram(name: "RUN-ALL.56", linkageName: "RUN-ALL.56", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!270 = distinct !DISubprogram(name: "RUN-ALL.57", linkageName: "RUN-ALL.57", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!271 = distinct !DISubprogram(name: "RUN-ALL.58", linkageName: "RUN-ALL.58", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!272 = distinct !DISubprogram(name: "RUN-ALL.59", linkageName: "RUN-ALL.59", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!273 = distinct !DISubprogram(name: "RUN-ALL.60", linkageName: "RUN-ALL.60", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!274 = distinct !DISubprogram(name: "RUN-ALL.61", linkageName: "RUN-ALL.61", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!275 = distinct !DISubprogram(name: "RUN-ALL.62", linkageName: "RUN-ALL.62", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!276 = distinct !DISubprogram(name: "RUN-ALL.63", linkageName: "RUN-ALL.63", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!277 = distinct !DISubprogram(name: "RUN-ALL.64", linkageName: "RUN-ALL.64", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!278 = distinct !DISubprogram(name: "RUN-ALL.65", linkageName: "RUN-ALL.65", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
