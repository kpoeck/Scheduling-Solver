; ModuleID = '/Users/karstenpoeck/lisp/coke/library/funktionenclisp.lisp'
source_filename = "/Users/karstenpoeck/lisp/coke/library/funktionenclisp.lisp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%0 = type { i8*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }
%1 = type { %2, %0*, %"class.gctools::smart_ptr", i32, %"class.gctools::GCArray_moveable.7" }
%2 = type { %"class.core::Closure_O", %"class.gctools::smart_ptr", %3, i64, i64, i64, i64 }
%3 = type { %4* }
%4 = type { %"class.core::General_O", %"class.gctools::smart_ptr.1", %5, %"class.gctools::smart_ptr", %"class.gctools::smart_ptr", %"class.gctools::smart_ptr", %"class.gctools::smart_ptr", i64, i8, i8, %"class.gctools::smart_ptr" }
%5 = type { %"class.core::T_O" }
%"class.core::Closure_O" = type { %"class.core::NamedFunction_O" }
%"class.core::NamedFunction_O" = type { %"class.core::Function_O", %"class.gctools::smart_ptr" }
%"class.core::Function_O" = type { %"class.core::General_O", %"struct.std::__1::atomic" }
%"class.core::General_O" = type { i32 (...)** }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { { %"class.core::T_O"*, i64 } (%"class.core::T_O"*, i64, %"class.core::T_O"*, %"class.core::T_O"*, %"class.core::T_O"*, %"class.core::T_O"*, ...)* }
%"class.core::T_O" = type { i8 }
%"class.gctools::smart_ptr.1" = type { %"class.core::SimpleString_O"* }
%"class.core::SimpleString_O" = type { %"class.core::AbstractSimpleVector_O" }
%"class.core::AbstractSimpleVector_O" = type { %"class.core::Array_O" }
%"class.core::Array_O" = type { %"class.core::General_O", [0 x i64] }
%"class.gctools::smart_ptr" = type { %"class.core::T_O"* }
%"class.gctools::GCArray_moveable.7" = type { i64, [0 x %"class.gctools::smart_ptr"] }
%"class.core::MDArray_O" = type { %"class.core::Array_O", i64, i64, %"class.gctools::smart_ptr.5", i64, %"struct.core::MDArray_O::Flags", %"class.gctools::GCArray_moveable" }
%"class.gctools::smart_ptr.5" = type { %"class.core::Array_O"* }
%"struct.core::MDArray_O::Flags" = type { i64 }
%"class.gctools::GCArray_moveable" = type { i64, [0 x i64] }
%"class.core::SimpleBitVector_O" = type { %"class.core::AbstractSimpleVector_O", %"class.gctools::GCBitUnitArray_moveable" }
%"class.gctools::GCBitUnitArray_moveable" = type { i64, [0 x i32] }

@":::global-str-/Users/karstenpoeck/lisp/coke/library/funktionenclisp.lisp" = private unnamed_addr constant [59 x i8] c"/Users/karstenpoeck/lisp/coke/library/funktionenclisp.lisp\00"
@source-file-info-handle = internal global i32 -1
@constants-table = internal global { i8*, i8*, i64 } undef
@"funktionenclisp.lisp^1^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^1^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ORDNER-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ORDNER-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 30, i64 50, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^1^TOP-COMPILE-FILE" = private unnamed_addr constant [40 x i8] c"funktionenclisp.lisp^1^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^15^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^15^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [45 x i8] c"B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^\00"
@"B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 79, i64 89, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-LAMBDA^COMMON-LISP^FN^^" = private unnamed_addr constant [24 x i8] c"LAMBDA^COMMON-LISP^FN^^\00"
@"LAMBDA^COMMON-LISP^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.1^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.1", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.2^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.2", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.3^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.3", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^15^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^15^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^27^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^27^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 72, i64 113, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.4^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.4", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.5^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.5", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.6^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.6", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.7^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.7", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^27^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^27^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^38^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^38^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 150, i64 159, i64 158, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.8^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.8", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 160, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^38^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^38^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^52^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^52^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 188, i64 195, i64 194, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.9^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.9", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 196, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^52^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^52^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^58^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^58^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 225, i64 232, i64 231, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.10^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.10", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 233, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^58^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^58^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^65^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^65^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 251, i64 260, i64 259, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^65^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^65^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^80^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^80^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 283, i64 290, i64 289, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.11^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.11", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 291, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.12^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.12", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 297, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^80^TOP-COMPILE-FILE" = private unnamed_addr constant [41 x i8] c"funktionenclisp.lisp^80^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^110^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^110^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 313, i64 318, i64 317, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^110^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^110^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^134^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^134^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [49 x i8] c"B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^\00"
@"B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 326, i64 333, i64 332, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.13^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.13", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 334, i64 0, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.14^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.14", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 339, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^134^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^134^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^164^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^164^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [47 x i8] c"B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^\00"
@"B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 345, i64 352, i64 351, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^164^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^164^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^170^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^170^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 354, i64 359, i64 358, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^170^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^170^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^178^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^178^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 384, i64 395, i64 390, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^178^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^178^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^191^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^191^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [47 x i8] c"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^\00"
@"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 415, i64 430, i64 429, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^191^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^191^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^219^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^219^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [43 x i8] c"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^\00"
@"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 410, i64 451, i64 450, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^219^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^219^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^262^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^262^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 458, i64 469, i64 468, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^262^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^262^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^272^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^272^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ASCII^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ASCII^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 475, i64 482, i64 481, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^272^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^272^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^276^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^276^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 490, i64 497, i64 496, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^276^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^276^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^291^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^291^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LAENGE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LAENGE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 501, i64 508, i64 507, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^291^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^291^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^307^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^307^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 519, i64 528, i64 527, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^307^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^307^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^324^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^324^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 534, i64 543, i64 542, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^324^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^324^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^348^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^348^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 547, i64 552, i64 551, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^348^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^348^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^356^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^356^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LEERSTRING-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LEERSTRING-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 306, i64 559, i64 558, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.15^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.15", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 560, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^356^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^356^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^365^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^365^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B-N-POSITION^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [35 x i8] c"B-N-POSITION^COMMON-LISP-USER^FN^^\00"
@"B-N-POSITION^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B-N-POSITION^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 453, i64 580, i64 579, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^365^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^365^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^395^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^395^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=MIN^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [28 x i8] c"B=MIN^COMMON-LISP-USER^FN^^\00"
@"B=MIN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=MIN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 604, i64 622, i64 617, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.16^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.16", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 628, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^395^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^395^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^413^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^413^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 632, i64 636, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^413^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^413^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^437^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^437^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [45 x i8] c"B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^\00"
@"B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 774, i64 793, i64 780, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^437^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^437^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^460^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^460^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 798, i64 803, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^460^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^460^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^483^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^483^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [53 x i8] c"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^\00"
@"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 808, i64 820, i64 819, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^483^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^483^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^501^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^501^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 827, i64 832, i64 831, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^501^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^501^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^517^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^517^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 838, i64 843, i64 842, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^517^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^517^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^523^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^523^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 847, i64 852, i64 851, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^523^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^523^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^529^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^529^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [45 x i8] c"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^\00"
@"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 860, i64 868, i64 867, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^529^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^529^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^549^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^549^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=INTERSECTION^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [37 x i8] c"B=INTERSECTION^COMMON-LISP-USER^FN^^\00"
@"B=INTERSECTION^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=INTERSECTION^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 874, i64 879, i64 878, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^549^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^549^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^572^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^572^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=UNION^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [30 x i8] c"B=UNION^COMMON-LISP-USER^FN^^\00"
@"B=UNION^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=UNION^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 885, i64 892, i64 891, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^572^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^572^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^580^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^580^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [40 x i8] c"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^\00"
@"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 898, i64 911, i64 910, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^580^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^580^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^595^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^595^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=S^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=S^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 921, i64 926, i64 925, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^595^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^595^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^623^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^623^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=S1^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=S1^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 928, i64 932, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^623^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^623^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^627^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^627^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [41 x i8] c"B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^\00"
@"B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 937, i64 944, i64 943, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^627^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^627^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^642^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^642^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=DATUM^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=DATUM^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 950, i64 0, i64 953, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^642^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^642^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^681^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^681^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=UHRZEIT^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [32 x i8] c"B=UHRZEIT^COMMON-LISP-USER^FN^^\00"
@"B=UHRZEIT^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=UHRZEIT^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 958, i64 966, i64 965, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^681^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^681^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^689^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^689^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@":::global-str-B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^" = private unnamed_addr constant [44 x i8] c"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^\00"
@"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 209, i64 988, i64 987, i64 0, i64 1, i64 0 }
@"LAMBDA^COMMON-LISP^FN^^.17^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"LAMBDA^COMMON-LISP^FN^^.17", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 90, i64 991, i64 0, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^689^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^689^TOP-COMPILE-FILE\00"
@"funktionenclisp.lisp^716^TOP-COMPILE-FILE^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"funktionenclisp.lisp^716^TOP-COMPILE-FILE", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 48, i64 0, i64 0, i64 0, i64 1, i64 0 }
@"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^^DESC" = internal constant { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 } { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* @"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^", { i8*, i8*, i64 }* @constants-table, i32* @source-file-info-handle, i64 998, i64 1003, i64 1002, i64 0, i64 1, i64 0 }
@"str-funktionenclisp.lisp^716^TOP-COMPILE-FILE" = private unnamed_addr constant [42 x i8] c"funktionenclisp.lisp^716^TOP-COMPILE-FILE\00"
@str-PROBE-FILE = private unnamed_addr constant [11 x i8] c"PROBE-FILE\00"
@str-COMMON-LISP = private unnamed_addr constant [12 x i8] c"COMMON-LISP\00"
@str-DIRECTORYP = private unnamed_addr constant [11 x i8] c"DIRECTORYP\00"
@str-COMMON-LISP-USER = private unnamed_addr constant [17 x i8] c"COMMON-LISP-USER\00"
@str-FDEFINITION = private unnamed_addr constant [12 x i8] c"FDEFINITION\00"
@str-FUNCTION = private unnamed_addr constant [9 x i8] c"FUNCTION\00"
@str-SYMBOL = private unnamed_addr constant [7 x i8] c"SYMBOL\00"
@str-SYMBOL-FUNCTION = private unnamed_addr constant [16 x i8] c"SYMBOL-FUNCTION\00"
@str-ERROR = private unnamed_addr constant [6 x i8] c"ERROR\00"
@str-TYPE-ERROR = private unnamed_addr constant [11 x i8] c"TYPE-ERROR\00"
@str-DATUM = private unnamed_addr constant [6 x i8] c"DATUM\00"
@str-KEYWORD = private unnamed_addr constant [8 x i8] c"KEYWORD\00"
@str-EXPECTED-TYPE = private unnamed_addr constant [14 x i8] c"EXPECTED-TYPE\00"
@str-OR = private unnamed_addr constant [3 x i8] c"OR\00"
@"str-B=ORDNER-P" = private unnamed_addr constant [11 x i8] c"B=ORDNER-P\00"
@str-SETF-LAMBDA-LIST = private unnamed_addr constant [17 x i8] c"SETF-LAMBDA-LIST\00"
@str-CORE = private unnamed_addr constant [5 x i8] c"CORE\00"
@str-ORDNER = private unnamed_addr constant [7 x i8] c"ORDNER\00"
@str-SET-SOURCE-INFO = private unnamed_addr constant [16 x i8] c"SET-SOURCE-INFO\00"
@str-CURRENT-SOURCE-FILE = private unnamed_addr constant [20 x i8] c"CURRENT-SOURCE-FILE\00"
@"str-*CURRENT-FORM-LINENO*" = private unnamed_addr constant [22 x i8] c"*CURRENT-FORM-LINENO*\00"
@str-COMPILER = private unnamed_addr constant [9 x i8] c"COMPILER\00"
@str-TOP-LEVEL = private unnamed_addr constant [10 x i8] c"TOP-LEVEL\00"
@str-DELETE-FILE = private unnamed_addr constant [12 x i8] c"DELETE-FILE\00"
@str-OPEN = private unnamed_addr constant [5 x i8] c"OPEN\00"
@str-DIRECTION = private unnamed_addr constant [10 x i8] c"DIRECTION\00"
@str-OUTPUT = private unnamed_addr constant [7 x i8] c"OUTPUT\00"
@str-IF-DOES-NOT-EXIST = private unnamed_addr constant [18 x i8] c"IF-DOES-NOT-EXIST\00"
@str-CREATE = private unnamed_addr constant [7 x i8] c"CREATE\00"
@str-FUNWIND-PROTECT = private unnamed_addr constant [16 x i8] c"FUNWIND-PROTECT\00"
@str-MULTIPLE-VALUE-PROG1-FUNCTION = private unnamed_addr constant [30 x i8] c"MULTIPLE-VALUE-PROG1-FUNCTION\00"
@str-CONS = private unnamed_addr constant [5 x i8] c"CONS\00"
@str-LIST = private unnamed_addr constant [5 x i8] c"LIST\00"
@str-B-KONKATENIERE-EINE-DATEI = private unnamed_addr constant [26 x i8] c"B-KONKATENIERE-EINE-DATEI\00"
@str-CLOSE = private unnamed_addr constant [6 x i8] c"CLOSE\00"
@str-ABORT = private unnamed_addr constant [6 x i8] c"ABORT\00"
@"str-B=KONKATENIERE-DATEIEN" = private unnamed_addr constant [23 x i8] c"B=KONKATENIERE-DATEIEN\00"
@str-ZIELPFADNAME = private unnamed_addr constant [13 x i8] c"ZIELPFADNAME\00"
@"str-&REST" = private unnamed_addr constant [6 x i8] c"&REST\00"
@str-PFADNAMEN = private unnamed_addr constant [10 x i8] c"PFADNAMEN\00"
@str-LAMBDA = private unnamed_addr constant [7 x i8] c"LAMBDA\00"
@str-INPUT = private unnamed_addr constant [6 x i8] c"INPUT\00"
@str-READ-LINE = private unnamed_addr constant [10 x i8] c"READ-LINE\00"
@str-FEHLER = private unnamed_addr constant [7 x i8] c"FEHLER\00"
@str-EQUAL = private unnamed_addr constant [6 x i8] c"EQUAL\00"
@str-WRITE-LINE = private unnamed_addr constant [11 x i8] c"WRITE-LINE\00"
@str-NAME = private unnamed_addr constant [5 x i8] c"NAME\00"
@"str-&OPTIONAL" = private unnamed_addr constant [10 x i8] c"&OPTIONAL\00"
@str-STREAM = private unnamed_addr constant [7 x i8] c"STREAM\00"
@str-SYMBOL-PLIST = private unnamed_addr constant [13 x i8] c"SYMBOL-PLIST\00"
@str-FORMAT-ERROR = private unnamed_addr constant [13 x i8] c"FORMAT-ERROR\00"
@str-COMPLAINT = private unnamed_addr constant [10 x i8] c"COMPLAINT\00"
@"str-Required argument missing" = private unnamed_addr constant [26 x i8] c"Required argument missing\00"
@str-CONTROL-STRING = private unnamed_addr constant [15 x i8] c"CONTROL-STRING\00"
@"str-(b=setplist '~S '~S)~%" = private unnamed_addr constant [23 x i8] c"(b=setplist '~S '~S)~%\00"
@str-OFFSET = private unnamed_addr constant [7 x i8] c"OFFSET\00"
@str-WRITE-STRING = private unnamed_addr constant [13 x i8] c"WRITE-STRING\00"
@"str-(b=setplist '" = private unnamed_addr constant [14 x i8] c"(b=setplist '\00"
@str-PRIN1 = private unnamed_addr constant [6 x i8] c"PRIN1\00"
@"str- '" = private unnamed_addr constant [3 x i8] c" '\00"
@"str-)" = private unnamed_addr constant [2 x i8] c")\00"
@str-TERPRI = private unnamed_addr constant [7 x i8] c"TERPRI\00"
@str-STRINGP = private unnamed_addr constant [8 x i8] c"STRINGP\00"
@str-MAKE-STRING-OUTPUT-STREAM-FROM-STRING = private unnamed_addr constant [38 x i8] c"MAKE-STRING-OUTPUT-STREAM-FROM-STRING\00"
@str-MAKE-STRING-OUTPUT-STREAM = private unnamed_addr constant [26 x i8] c"MAKE-STRING-OUTPUT-STREAM\00"
@str-GET-OUTPUT-STREAM-STRING = private unnamed_addr constant [25 x i8] c"GET-OUTPUT-STREAM-STRING\00"
@"str-*STANDARD-OUTPUT*" = private unnamed_addr constant [18 x i8] c"*STANDARD-OUTPUT*\00"
@"str-B=PROPERTYLISTEBINDUNG-SICHERN" = private unnamed_addr constant [31 x i8] c"B=PROPERTYLISTEBINDUNG-SICHERN\00"
@str-OBJEKTSYMBOL = private unnamed_addr constant [13 x i8] c"OBJEKTSYMBOL\00"
@str-SET-DOCUMENTATION = private unnamed_addr constant [18 x i8] c"SET-DOCUMENTATION\00"
@"str-Abspeichern der Propoertyliste von objektsymbol auf stream" = private unnamed_addr constant [59 x i8] c"Abspeichern der Propoertyliste von objektsymbol auf stream\00"
@str-FORMAT-ARG-284090 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284090\00"
@str-QUOTE = private unnamed_addr constant [6 x i8] c"QUOTE\00"
@str-FORMAT-ARG-284091 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284091\00"
@str-ARGS = private unnamed_addr constant [5 x i8] c"ARGS\00"
@str-BOUNDP = private unnamed_addr constant [7 x i8] c"BOUNDP\00"
@"str-(setq ~S '~S)~%" = private unnamed_addr constant [16 x i8] c"(setq ~S '~S)~%\00"
@"str-(setq " = private unnamed_addr constant [7 x i8] c"(setq \00"
@str-EVAL = private unnamed_addr constant [5 x i8] c"EVAL\00"
@"str-B=WERTBINDUNG-SICHERN" = private unnamed_addr constant [22 x i8] c"B=WERTBINDUNG-SICHERN\00"
@str-VARIABLENSYMBOL = private unnamed_addr constant [16 x i8] c"VARIABLENSYMBOL\00"
@"str-Abspeichern der Variablenbindung von variablensymbol auf stream" = private unnamed_addr constant [64 x i8] c"Abspeichern der Variablenbindung von variablensymbol auf stream\00"
@str-FORMAT-ARG-284307 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284307\00"
@str-FORMAT-ARG-284308 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284308\00"
@str-FBOUNDP = private unnamed_addr constant [8 x i8] c"FBOUNDP\00"
@"str-B=FUNKTIONSDEFINITION" = private unnamed_addr constant [22 x i8] c"B=FUNKTIONSDEFINITION\00"
@str-KOMPILIERT = private unnamed_addr constant [11 x i8] c"KOMPILIERT\00"
@str-EQ-INCOMPARABLE = private unnamed_addr constant [16 x i8] c"EQ-INCOMPARABLE\00"
@str-CLASP-CLEAVIR = private unnamed_addr constant [14 x i8] c"CLASP-CLEAVIR\00"
@str-EQL-UNDERLYING = private unnamed_addr constant [15 x i8] c"EQL-UNDERLYING\00"
@"str-~S~%" = private unnamed_addr constant [5 x i8] c"~S~%\00"
@"str-B=FUNKTIONSBINDUNG-SICHERN" = private unnamed_addr constant [27 x i8] c"B=FUNKTIONSBINDUNG-SICHERN\00"
@str-FUNKTIONSSYMBOL = private unnamed_addr constant [16 x i8] c"FUNKTIONSSYMBOL\00"
@"str-Abspeichern der Funktionsdefinition von funktionssymbol auf stream" = private unnamed_addr constant [67 x i8] c"Abspeichern der Funktionsdefinition von funktionssymbol auf stream\00"
@str-FORMAT-ARG-284525 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284525\00"
@str-WERTBINDUNG = private unnamed_addr constant [12 x i8] c"WERTBINDUNG\00"
@str-PROPERTYBINDUNG = private unnamed_addr constant [16 x i8] c"PROPERTYBINDUNG\00"
@str-FUNKTIONSBINDUNG = private unnamed_addr constant [17 x i8] c"FUNKTIONSBINDUNG\00"
@str-CERROR = private unnamed_addr constant [7 x i8] c"CERROR\00"
@"str-Keine funktion wird ausgefuehrt" = private unnamed_addr constant [32 x i8] c"Keine funktion wird ausgefuehrt\00"
@"str-typ ~S ist nicht aus :wertbindung :propertybindung :Funktionsbindung" = private unnamed_addr constant [69 x i8] c"typ ~S ist nicht aus :wertbindung :propertybindung :Funktionsbindung\00"
@"str-B=LISPBINDUNGEN-SICHERN" = private unnamed_addr constant [24 x i8] c"B=LISPBINDUNGEN-SICHERN\00"
@str-SYMBOLLISTE = private unnamed_addr constant [12 x i8] c"SYMBOLLISTE\00"
@str-TYP = private unnamed_addr constant [4 x i8] c"TYP\00"
@"str-Falls typ\0D\0A:wertbindung -> Fuer alle symbole aus symbolliste (b=Wertbindung-sichern stream sybol\0D\0Aanalog bei :propertybindung und :Funktionsbindung" = private unnamed_addr constant [148 x i8] c"Falls typ\0D\0A:wertbindung -> Fuer alle symbole aus symbolliste (b=Wertbindung-sichern stream sybol\0D\0Aanalog bei :propertybindung und :Funktionsbindung\00"
@str-KEYWORDP = private unnamed_addr constant [9 x i8] c"KEYWORDP\00"
@str-SYMBOLP = private unnamed_addr constant [8 x i8] c"SYMBOLP\00"
@str-CHARACTER = private unnamed_addr constant [10 x i8] c"CHARACTER\00"
@"str-~a" = private unnamed_addr constant [3 x i8] c"~a\00"
@str-PRINC = private unnamed_addr constant [6 x i8] c"PRINC\00"
@str-STRING = private unnamed_addr constant [7 x i8] c"STRING\00"
@str- = private unnamed_addr constant [1 x i8] zeroinitializer
@"str-~s" = private unnamed_addr constant [3 x i8] c"~s\00"
@"str-B=ERZEUGE-STRING" = private unnamed_addr constant [17 x i8] c"B=ERZEUGE-STRING\00"
@str-IRGENDETWAS = private unnamed_addr constant [12 x i8] c"IRGENDETWAS\00"
@"str-Ausgabe: macht aus irgendwas einen String, nil wird zu \22\22" = private unnamed_addr constant [58 x i8] c"Ausgabe: macht aus irgendwas einen String, nil wird zu \22\22\00"
@str-FORMAT-ARG-284887 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284887\00"
@str-FORMAT-ARG-284870 = private unnamed_addr constant [18 x i8] c"FORMAT-ARG-284870\00"
@str-STRING-EQUAL = private unnamed_addr constant [13 x i8] c"STRING-EQUAL\00"
@"str-:" = private unnamed_addr constant [2 x i8] c":\00"
@"str-B=LEERSTRING-P" = private unnamed_addr constant [15 x i8] c"B=LEERSTRING-P\00"
@str-READ-FROM-STRING = private unnamed_addr constant [17 x i8] c"READ-FROM-STRING\00"
@"str-B=LESE-VON-STRING" = private unnamed_addr constant [18 x i8] c"B=LESE-VON-STRING\00"
@"str-Ausgabe: liest ersten Lispausdruck von String string und wandelt ihn um\0D\0A           wenn string kein String ist, wird string zurueckgegeben" = private unnamed_addr constant [140 x i8] c"Ausgabe: liest ersten Lispausdruck von String string und wandelt ihn um\0D\0A           wenn string kein String ist, wird string zurueckgegeben\00"
@str-REDUCE = private unnamed_addr constant [7 x i8] c"REDUCE\00"
@str-CONCATENATE = private unnamed_addr constant [12 x i8] c"CONCATENATE\00"
@str-MAPCAR = private unnamed_addr constant [7 x i8] c"MAPCAR\00"
@"str-B=KONKATENIERE-NACH-STRING" = private unnamed_addr constant [27 x i8] c"B=KONKATENIERE-NACH-STRING\00"
@str-PARAMETER = private unnamed_addr constant [10 x i8] c"PARAMETER\00"
@"str-Eingabe: Beliebig viele Parameter vom beliebigen Typ\0D\0A  Ausgabe: Konkatenierter String" = private unnamed_addr constant [87 x i8] c"Eingabe: Beliebig viele Parameter vom beliebigen Typ\0D\0A  Ausgabe: Konkatenierter String\00"
@str-A = private unnamed_addr constant [2 x i8] c"A\00"
@str-B = private unnamed_addr constant [2 x i8] c"B\00"
@str-WAS = private unnamed_addr constant [4 x i8] c"WAS\00"
@str-APPLY = private unnamed_addr constant [6 x i8] c"APPLY\00"
@"str-B=KONKATENIERE-NACH-ATOM" = private unnamed_addr constant [25 x i8] c"B=KONKATENIERE-NACH-ATOM\00"
@str-ATOME-ODER-STRINGS = private unnamed_addr constant [19 x i8] c"ATOME-ODER-STRINGS\00"
@"str-Erzeugt aus beliebig vielen Eingabewerten ein Atom" = private unnamed_addr constant [51 x i8] c"Erzeugt aus beliebig vielen Eingabewerten ein Atom\00"
@"str-B=STRING-NACH-LISTE" = private unnamed_addr constant [20 x i8] c"B=STRING-NACH-LISTE\00"
@"str-Ausgabe: Eine Liste aus den durch Leerzeichen getrennten Lispausdruecken des Strings String" = private unnamed_addr constant [92 x i8] c"Ausgabe: Eine Liste aus den durch Leerzeichen getrennten Lispausdruecken des Strings String\00"
@str-SUBSEQ = private unnamed_addr constant [7 x i8] c"SUBSEQ\00"
@str-VECTOR = private unnamed_addr constant [7 x i8] c"VECTOR\00"
@str-NULL = private unnamed_addr constant [5 x i8] c"NULL\00"
@str-ETYPECASE-ERROR = private unnamed_addr constant [16 x i8] c"ETYPECASE-ERROR\00"
@str-FIXNUM = private unnamed_addr constant [7 x i8] c"FIXNUM\00"
@str-SINGLE-FLOAT = private unnamed_addr constant [13 x i8] c"SINGLE-FLOAT\00"
@str-DOUBLE-FLOAT = private unnamed_addr constant [13 x i8] c"DOUBLE-FLOAT\00"
@str-CONVERT-OVERFLOW-RESULT-TO-BIGNUM = private unnamed_addr constant [34 x i8] c"CONVERT-OVERFLOW-RESULT-TO-BIGNUM\00"
@"str-TWO-ARG-+" = private unnamed_addr constant [10 x i8] c"TWO-ARG-+\00"
@str-TWO-ARG-- = private unnamed_addr constant [10 x i8] c"TWO-ARG--\00"
@"str-B=LISTE-NACH-STRING" = private unnamed_addr constant [20 x i8] c"B=LISTE-NACH-STRING\00"
@str-LISTE = private unnamed_addr constant [6 x i8] c"LISTE\00"
@"str-Ausgabe: Ein string, zusammengsetzt aus den Listenelelementen" = private unnamed_addr constant [62 x i8] c"Ausgabe: Ein string, zusammengsetzt aus den Listenelelementen\00"
@str-NUMBER = private unnamed_addr constant [7 x i8] c"NUMBER\00"
@str-ARRAY-RANK = private unnamed_addr constant [11 x i8] c"ARRAY-RANK\00"
@str-LINKS = private unnamed_addr constant [6 x i8] c"LINKS\00"
@"str-TWO-ARG->" = private unnamed_addr constant [10 x i8] c"TWO-ARG->\00"
@str-FLOOR = private unnamed_addr constant [6 x i8] c"FLOOR\00"
@str-MAKE-VECTOR = private unnamed_addr constant [12 x i8] c"MAKE-VECTOR\00"
@str-FILL-ARRAY-WITH-ELT = private unnamed_addr constant [20 x i8] c"FILL-ARRAY-WITH-ELT\00"
@str-ODDP = private unnamed_addr constant [5 x i8] c"ODDP\00"
@"str-B=STRING-ABSCHNEIDEN" = private unnamed_addr constant [21 x i8] c"B=STRING-ABSCHNEIDEN\00"
@str-AUFFUELLZEICHEN = private unnamed_addr constant [16 x i8] c"AUFFUELLZEICHEN\00"
@"str-B=ZENTRIERE-LISPAUSDRUCK" = private unnamed_addr constant [25 x i8] c"B=ZENTRIERE-LISPAUSDRUCK\00"
@str-LAENGE = private unnamed_addr constant [7 x i8] c"LAENGE\00"
@"str-&KEY" = private unnamed_addr constant [5 x i8] c"&KEY\00"
@str-RUNDUNGSRICHTUNG = private unnamed_addr constant [17 x i8] c"RUNDUNGSRICHTUNG\00"
@"str-Eingabe: Lispausdruck was, \0D\0A           laenge, auf die der Lispausdruck was zentriert werden soll\0D\0A           Auffuellzeichen, mit denen links und rechts des Strings aufgefuellt werden soll\0D\0A           Rundungsrichtung = :rechts oder :links\0D\0A  Ausgabe: String was zentriert" = private unnamed_addr constant [275 x i8] c"Eingabe: Lispausdruck was, \0D\0A           laenge, auf die der Lispausdruck was zentriert werden soll\0D\0A           Auffuellzeichen, mit denen links und rechts des Strings aufgefuellt werden soll\0D\0A           Rundungsrichtung = :rechts oder :links\0D\0A  Ausgabe: String was zentriert\00"
@str-ALLOW-OTHER-KEYS = private unnamed_addr constant [17 x i8] c"ALLOW-OTHER-KEYS\00"
@"str-TWO-ARG-<=" = private unnamed_addr constant [11 x i8] c"TWO-ARG-<=\00"
@str-MAKE-SEQUENCE = private unnamed_addr constant [14 x i8] c"MAKE-SEQUENCE\00"
@str-INITIAL-ELEMENT = private unnamed_addr constant [16 x i8] c"INITIAL-ELEMENT\00"
@str-MAXIMALLAENGE = private unnamed_addr constant [14 x i8] c"MAXIMALLAENGE\00"
@"str-schneidet einen String auf die angegebene Maximallaenge = Anzahl von Buchstaben ab" = private unnamed_addr constant [83 x i8] c"schneidet einen String auf die angegebene Maximallaenge = Anzahl von Buchstaben ab\00"
@str-B-N-POSITION = private unnamed_addr constant [13 x i8] c"B-N-POSITION\00"
@str-B-DREI-PUNKTE-EINFUEGEN = private unnamed_addr constant [24 x i8] c"B-DREI-PUNKTE-EINFUEGEN\00"
@str-TEXT = private unnamed_addr constant [5 x i8] c"TEXT\00"
@str-MAXHOEHE = private unnamed_addr constant [9 x i8] c"MAXHOEHE\00"
@str-ZEILENHOEHE = private unnamed_addr constant [12 x i8] c"ZEILENHOEHE\00"
@"str-Text ist groesser als maximale hoehe" = private unnamed_addr constant [37 x i8] c"Text ist groesser als maximale hoehe\00"
@str-INTERN = private unnamed_addr constant [7 x i8] c"INTERN\00"
@str-CHAR-UPCASE = private unnamed_addr constant [12 x i8] c"CHAR-UPCASE\00"
@"str-B=ASCII" = private unnamed_addr constant [8 x i8] c"B=ASCII\00"
@str-ARG = private unnamed_addr constant [4 x i8] c"ARG\00"
@"str-Wandelt ein Zeichen in ein Atom um" = private unnamed_addr constant [35 x i8] c"Wandelt ein Zeichen in ein Atom um\00"
@"str-STRING=" = private unnamed_addr constant [8 x i8] c"STRING=\00"
@"str- " = private unnamed_addr constant [2 x i8] c" \00"
@str-CHAR = private unnamed_addr constant [5 x i8] c"CHAR\00"
@"str-B=ERSTES-ZEICHEN" = private unnamed_addr constant [17 x i8] c"B=ERSTES-ZEICHEN\00"
@str-ATOM-ODER-STRING = private unnamed_addr constant [17 x i8] c"ATOM-ODER-STRING\00"
@"str-liefert erstes Zeichen von Atom-oder-String als Character;\0D\0A  nil, wenn Atom-oder-String ein String ohne Inhalt ist" = private unnamed_addr constant [116 x i8] c"liefert erstes Zeichen von Atom-oder-String als Character;\0D\0A  nil, wenn Atom-oder-String ein String ohne Inhalt ist\00"
@"str-B=LAENGE" = private unnamed_addr constant [9 x i8] c"B=LAENGE\00"
@str-ATOM = private unnamed_addr constant [5 x i8] c"ATOM\00"
@"str-liefert die Anzahl der Zeichen (Buchstaben oder Ziffern) eines Atoms" = private unnamed_addr constant [69 x i8] c"liefert die Anzahl der Zeichen (Buchstaben oder Ziffern) eines Atoms\00"
@str-SEARCH = private unnamed_addr constant [7 x i8] c"SEARCH\00"
@str-TEST = private unnamed_addr constant [5 x i8] c"TEST\00"
@"str-B=ERSETZE-ZEICHENKETTE" = private unnamed_addr constant [23 x i8] c"B=ERSETZE-ZEICHENKETTE\00"
@str-NEUE-ZEICHENKETTE = private unnamed_addr constant [18 x i8] c"NEUE-ZEICHENKETTE\00"
@str-ALTE-ZEICHENKETTE = private unnamed_addr constant [18 x i8] c"ALTE-ZEICHENKETTE\00"
@"str-ersetzt in einem String alte-Zeichenkette durch neue-Zeichenkette" = private unnamed_addr constant [66 x i8] c"ersetzt in einem String alte-Zeichenkette durch neue-Zeichenkette\00"
@"str-STRING<" = private unnamed_addr constant [8 x i8] c"STRING<\00"
@str-STRING-UPCASE = private unnamed_addr constant [14 x i8] c"STRING-UPCASE\00"
@"str-B=ALPHABETISCH<-P" = private unnamed_addr constant [18 x i8] c"B=ALPHABETISCH<-P\00"
@str-ATOM-ODER-STRING1 = private unnamed_addr constant [18 x i8] c"ATOM-ODER-STRING1\00"
@str-ATOM-ODER-STRING2 = private unnamed_addr constant [18 x i8] c"ATOM-ODER-STRING2\00"
@"str-liefert t, wenn Atom-oder-String1 alphabetisch vor Atom-oder-String2 kommt,\0D\0A   nil, sonst" = private unnamed_addr constant [91 x i8] c"liefert t, wenn Atom-oder-String1 alphabetisch vor Atom-oder-String2 kommt,\0D\0A   nil, sonst\00"
@"str-STRING>" = private unnamed_addr constant [8 x i8] c"STRING>\00"
@"str-B=ALPHABETISCH>-P" = private unnamed_addr constant [18 x i8] c"B=ALPHABETISCH>-P\00"
@"str-liefert t, wenn Atom-oder-String1 alphabetisch nach Atom-oder-String2 kommt,\0D\0A   nil, sonst" = private unnamed_addr constant [92 x i8] c"liefert t, wenn Atom-oder-String1 alphabetisch nach Atom-oder-String2 kommt,\0D\0A   nil, sonst\00"
@str-FIND-IF = private unnamed_addr constant [8 x i8] c"FIND-IF\00"
@"str-liefert t, wenn der String String nur Leerzeichen enthaelt bzw \22\22 ist\0D\0A   nil sonst" = private unnamed_addr constant [84 x i8] c"liefert t, wenn der String String nur Leerzeichen enthaelt bzw \22\22 ist\0D\0A   nil sonst\00"
@str-ITEM = private unnamed_addr constant [5 x i8] c"ITEM\00"
@str-POSITION = private unnamed_addr constant [9 x i8] c"POSITION\00"
@str-START = private unnamed_addr constant [6 x i8] c"START\00"
@"str-TWO-ARG-=" = private unnamed_addr constant [10 x i8] c"TWO-ARG-=\00"
@str-WORIN = private unnamed_addr constant [6 x i8] c"WORIN\00"
@str-N = private unnamed_addr constant [2 x i8] c"N\00"
@"str-Liefert die Position des n'ten Auftrtens von was in worin" = private unnamed_addr constant [58 x i8] c"Liefert die Position des n'ten Auftrtens von was in worin\00"
@"str-<" = private unnamed_addr constant [2 x i8] c"<\00"
@str-MAKE-LIST = private unnamed_addr constant [10 x i8] c"MAKE-LIST\00"
@str-MIN = private unnamed_addr constant [4 x i8] c"MIN\00"
@str-MAKE-SEQ-ITERATOR = private unnamed_addr constant [18 x i8] c"MAKE-SEQ-ITERATOR\00"
@str-SEQ-ITERATOR-SET = private unnamed_addr constant [17 x i8] c"SEQ-ITERATOR-SET\00"
@str-SEQ-ITERATOR-REF = private unnamed_addr constant [17 x i8] c"SEQ-ITERATOR-REF\00"
@str-SEQ-ITERATOR-NEXT = private unnamed_addr constant [18 x i8] c"SEQ-ITERATOR-NEXT\00"
@str-SEQ-ITERATOR-ENDP = private unnamed_addr constant [18 x i8] c"SEQ-ITERATOR-ENDP\00"
@"str-B=MIN" = private unnamed_addr constant [6 x i8] c"B=MIN\00"
@str-SEQUENZ = private unnamed_addr constant [8 x i8] c"SEQUENZ\00"
@str-VERGLEICHSFUNKTION = private unnamed_addr constant [19 x i8] c"VERGLEICHSFUNKTION\00"
@str-TESTFUNKTION = private unnamed_addr constant [13 x i8] c"TESTFUNKTION\00"
@"str-Eingabe Sequenz, Ausgabe minimum der Sequenz\0D\0A   &key testfunktion wird erst auf element der Sequenz angewendet bevor \0D\0A         verglichen wird (wie :key bei find)\0D\0A   &key vergleichsfunktion (wie :test be find)" = private unnamed_addr constant [213 x i8] c"Eingabe Sequenz, Ausgabe minimum der Sequenz\0D\0A   &key testfunktion wird erst auf element der Sequenz angewendet bevor \0D\0A         verglichen wird (wie :key bei find)\0D\0A   &key vergleichsfunktion (wie :test be find)\00"
@str-MEMBER = private unnamed_addr constant [7 x i8] c"MEMBER\00"
@str-APPEND = private unnamed_addr constant [7 x i8] c"APPEND\00"
@"str-B=POSITIONEN-IF" = private unnamed_addr constant [16 x i8] c"B=POSITIONEN-IF\00"
@str-SEQUENCE = private unnamed_addr constant [9 x i8] c"SEQUENCE\00"
@str-SIMPLE-ARRAY = private unnamed_addr constant [13 x i8] c"SIMPLE-ARRAY\00"
@"str-*" = private unnamed_addr constant [2 x i8] c"*\00"
@str-ARRAY = private unnamed_addr constant [6 x i8] c"ARRAY\00"
@"str-TWO-ARG-<" = private unnamed_addr constant [10 x i8] c"TWO-ARG-<\00"
@"str-~d is not a valid row-major index for ~a" = private unnamed_addr constant [41 x i8] c"~d is not a valid row-major index for ~a\00"
@str-BASE-CHAR = private unnamed_addr constant [10 x i8] c"BASE-CHAR\00"
@str-INTEGER64 = private unnamed_addr constant [10 x i8] c"INTEGER64\00"
@str-EXT = private unnamed_addr constant [4 x i8] c"EXT\00"
@str-INTEGER32 = private unnamed_addr constant [10 x i8] c"INTEGER32\00"
@str-INTEGER16 = private unnamed_addr constant [10 x i8] c"INTEGER16\00"
@str-INTEGER8 = private unnamed_addr constant [9 x i8] c"INTEGER8\00"
@str-BYTE64 = private unnamed_addr constant [7 x i8] c"BYTE64\00"
@str-BYTE32 = private unnamed_addr constant [7 x i8] c"BYTE32\00"
@str-BYTE16 = private unnamed_addr constant [7 x i8] c"BYTE16\00"
@str-BYTE8 = private unnamed_addr constant [6 x i8] c"BYTE8\00"
@str-BIT = private unnamed_addr constant [4 x i8] c"BIT\00"
@str-BFORMAT = private unnamed_addr constant [8 x i8] c"BFORMAT\00"
@"str-unsafe-vector-ref array-element-type: %s%N" = private unnamed_addr constant [43 x i8] c"unsafe-vector-ref array-element-type: %s%N\00"
@str-ARRAY-ELEMENT-TYPE = private unnamed_addr constant [19 x i8] c"ARRAY-ELEMENT-TYPE\00"
@"str-BUG: unsafe-vector-ref unknown vector ~a" = private unnamed_addr constant [41 x i8] c"BUG: unsafe-vector-ref unknown vector ~a\00"
@str-NTHCDR = private unnamed_addr constant [7 x i8] c"NTHCDR\00"
@"str-BUG: Unknown vector ~a" = private unnamed_addr constant [23 x i8] c"BUG: Unknown vector ~a\00"
@"str-B=IN-SEQUENCE-ERSETZEN" = private unnamed_addr constant [23 x i8] c"B=IN-SEQUENCE-ERSETZEN\00"
@str-PAARE = private unnamed_addr constant [6 x i8] c"PAARE\00"
@"str-Ersetz in einer Sequence elemente durch neue analog substitute,\0D\0A   aber auch fuer meherere Werte" = private unnamed_addr constant [98 x i8] c"Ersetz in einer Sequence elemente durch neue analog substitute,\0D\0A   aber auch fuer meherere Werte\00"
@str-BASE-CHAR-P = private unnamed_addr constant [12 x i8] c"BASE-CHAR-P\00"
@str--9223372036854775808 = private unnamed_addr constant [21 x i8] c"-9223372036854775808\00"
@"str->=" = private unnamed_addr constant [3 x i8] c">=\00"
@str-9223372036854775807 = private unnamed_addr constant [20 x i8] c"9223372036854775807\00"
@"str-<=" = private unnamed_addr constant [3 x i8] c"<=\00"
@str-18446744073709551615 = private unnamed_addr constant [21 x i8] c"18446744073709551615\00"
@str-NEQ = private unnamed_addr constant [4 x i8] c"NEQ\00"
@str-PSEUDO = private unnamed_addr constant [7 x i8] c"PSEUDO\00"
@"str-B=PSEUDO-PROPERTIES-LOESCHEN" = private unnamed_addr constant [29 x i8] c"B=PSEUDO-PROPERTIES-LOESCHEN\00"
@"str-B=IN-SORTIERTE-LISTE-EINFUEGEN" = private unnamed_addr constant [31 x i8] c"B=IN-SORTIERTE-LISTE-EINFUEGEN\00"
@str-ELEMENT = private unnamed_addr constant [8 x i8] c"ELEMENT\00"
@str-PRAEDIKAT = private unnamed_addr constant [10 x i8] c"PRAEDIKAT\00"
@str-KEY = private unnamed_addr constant [4 x i8] c"KEY\00"
@"str-fuegt das Element Element in eine mit Praedikat sortierte Liste Liste ein\0D\0A   aufpassen: key wird auch auf Element angewendet" = private unnamed_addr constant [126 x i8] c"fuegt das Element Element in eine mit Praedikat sortierte Liste Liste ein\0D\0A   aufpassen: key wird auch auf Element angewendet\00"
@str-REVERSE = private unnamed_addr constant [8 x i8] c"REVERSE\00"
@"str-B=SCHLUESSELWOERTER" = private unnamed_addr constant [20 x i8] c"B=SCHLUESSELWOERTER\00"
@"str-liefert die jeweils Elemente der Liste Liste, die an 1., 3., etc. Position stehen" = private unnamed_addr constant [82 x i8] c"liefert die jeweils Elemente der Liste Liste, die an 1., 3., etc. Position stehen\00"
@str-SORT = private unnamed_addr constant [5 x i8] c"SORT\00"
@str-COPY-LIST = private unnamed_addr constant [10 x i8] c"COPY-LIST\00"
@"str-B=SORTIERE-ALPHABETISCH" = private unnamed_addr constant [24 x i8] c"B=SORTIERE-ALPHABETISCH\00"
@"str-liefert die alphabetisch sortierte Liste Liste" = private unnamed_addr constant [47 x i8] c"liefert die alphabetisch sortierte Liste Liste\00"
@str-LAST = private unnamed_addr constant [5 x i8] c"LAST\00"
@"str-B=LETZTES-LISTENELEMENT" = private unnamed_addr constant [24 x i8] c"B=LETZTES-LISTENELEMENT\00"
@"str-liefert das letzte Element der Liste Liste" = private unnamed_addr constant [43 x i8] c"liefert das letzte Element der Liste Liste\00"
@"str-TWO-ARG->=" = private unnamed_addr constant [11 x i8] c"TWO-ARG->=\00"
@"str-B=LOESCHE-NTES-ELEMENT" = private unnamed_addr constant [23 x i8] c"B=LOESCHE-NTES-ELEMENT\00"
@str-BEGINN-BEI-0 = private unnamed_addr constant [13 x i8] c"BEGINN-BEI-0\00"
@"str-loescht das Element an Position Position aus der Liste" = private unnamed_addr constant [55 x i8] c"loescht das Element an Position Position aus der Liste\00"
@str-INTERSECTION = private unnamed_addr constant [13 x i8] c"INTERSECTION\00"
@"str-B=INTERSECTION" = private unnamed_addr constant [15 x i8] c"B=INTERSECTION\00"
@"str-intersection von n Listen" = private unnamed_addr constant [26 x i8] c"intersection von n Listen\00"
@str-UNION = private unnamed_addr constant [6 x i8] c"UNION\00"
@"str-B=UNION" = private unnamed_addr constant [8 x i8] c"B=UNION\00"
@str-LISTEN = private unnamed_addr constant [7 x i8] c"LISTEN\00"
@"str-Wie union, aber auch fuer n Listen" = private unnamed_addr constant [35 x i8] c"Wie union, aber auch fuer n Listen\00"
@str-EQL = private unnamed_addr constant [4 x i8] c"EQL\00"
@str-SET-DIFFERENCE = private unnamed_addr constant [15 x i8] c"SET-DIFFERENCE\00"
@"str-B=MENGEN-GLEICH-P" = private unnamed_addr constant [18 x i8] c"B=MENGEN-GLEICH-P\00"
@str-MENGE1 = private unnamed_addr constant [7 x i8] c"MENGE1\00"
@str-MENGE2 = private unnamed_addr constant [7 x i8] c"MENGE2\00"
@"str-t, wenn Menge1 = Menge 2 ist. Duplikate in Mengen werden wie 1 Element behandelt." = private unnamed_addr constant [82 x i8] c"t, wenn Menge1 = Menge 2 ist. Duplikate in Mengen werden wie 1 Element behandelt.\00"
@str-GET = private unnamed_addr constant [4 x i8] c"GET\00"
@str-B_STRINGS = private unnamed_addr constant [10 x i8] c"B_STRINGS\00"
@str-KEIN-TEXT = private unnamed_addr constant [10 x i8] c"KEIN-TEXT\00"
@"str-B=S" = private unnamed_addr constant [4 x i8] c"B=S\00"
@"str-liefert den unter key in b_strings abgespeicherten String, bzw.\0D\0A   das Aequivalent zu <<kein Text>>, wenn kein Text gefunden wurde" = private unnamed_addr constant [132 x i8] c"liefert den unter key in b_strings abgespeicherten String, bzw.\0D\0A   das Aequivalent zu <<kein Text>>, wenn kein Text gefunden wurde\00"
@"str-B=S1" = private unnamed_addr constant [5 x i8] c"B=S1\00"
@str-REMPROP = private unnamed_addr constant [8 x i8] c"REMPROP\00"
@"str-B=NEUE-SPRACHTEXTE" = private unnamed_addr constant [19 x i8] c"B=NEUE-SPRACHTEXTE\00"
@str-SPRACHPROPERTIES = private unnamed_addr constant [17 x i8] c"SPRACHPROPERTIES\00"
@"str-Erweitert die Bibliothekstexte um die sprachproperties" = private unnamed_addr constant [55 x i8] c"Erweitert die Bibliothekstexte um die sprachproperties\00"
@str-GET-DECODED-TIME = private unnamed_addr constant [17 x i8] c"GET-DECODED-TIME\00"
@str-. = private unnamed_addr constant [2 x i8] c".\00"
@"str-B=DATUM" = private unnamed_addr constant [8 x i8] c"B=DATUM\00"
@"str-Liefert den Datumstext" = private unnamed_addr constant [23 x i8] c"Liefert den Datumstext\00"
@"str- Uhr" = private unnamed_addr constant [5 x i8] c" Uhr\00"
@"str-B=UHRZEIT" = private unnamed_addr constant [10 x i8] c"B=UHRZEIT\00"
@str-UHRTEXT-P = private unnamed_addr constant [10 x i8] c"UHRTEXT-P\00"
@"str-Liefert den Uhrzeittext" = private unnamed_addr constant [24 x i8] c"Liefert den Uhrzeittext\00"
@str-COMPILED-FUNCTION-P = private unnamed_addr constant [20 x i8] c"COMPILED-FUNCTION-P\00"
@str-UNCOMPILE-FUNCTION = private unnamed_addr constant [19 x i8] c"UNCOMPILE-FUNCTION\00"
@str-DEFUN = private unnamed_addr constant [6 x i8] c"DEFUN\00"
@str-BLOCK = private unnamed_addr constant [6 x i8] c"BLOCK\00"
@str-LISTP = private unnamed_addr constant [6 x i8] c"LISTP\00"
@str-FUNKTIONSNAME = private unnamed_addr constant [14 x i8] c"FUNKTIONSNAME\00"
@str-LEERE-FUNKTION-ZURUECK-P = private unnamed_addr constant [25 x i8] c"LEERE-FUNKTION-ZURUECK-P\00"
@"str-Versucht den Quellcode von funktionsname zu rekostruieren" = private unnamed_addr constant [58 x i8] c"Versucht den Quellcode von funktionsname zu rekostruieren\00"
@str-ELEM = private unnamed_addr constant [5 x i8] c"ELEM\00"
@"str-B=LESE-ERSTES-WORT-AUS-STRING" = private unnamed_addr constant [30 x i8] c"B=LESE-ERSTES-WORT-AUS-STRING\00"
@"str-Funktion sucht erstes Wort eines Strings; Spaces und Newlines werden ueberlesen.\0D\0ADie Funktion liefert drei Werte, das gefundene Wort, den string ohne das Wort und\0D\0Adas trennende Space- bzw. Newline-Zeichen und das entsprechende Trennzeichen" = private unnamed_addr constant [242 x i8] c"Funktion sucht erstes Wort eines Strings; Spaces und Newlines werden ueberlesen.\0D\0ADie Funktion liefert drei Werte, das gefundene Wort, den string ohne das Wort und\0D\0Adas trennende Space- bzw. Newline-Zeichen und das entsprechende Trennzeichen\00"
@CONTAB5362 = internal global [1004 x {}*] undef
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 2, void ()* @CLASP-CTOR, i8* null }]

; Function Attrs: uwtable
define internal void @RUN-ALL() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !9 {
entry:
  tail call void @cc_initialize_gcroots_in_module({ i8*, i8*, i64 }* nonnull @constants-table, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), i64 1004, {}* null)
  tail call void @ltvc_assign_source_file_info_handle(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @":::global-str-/Users/karstenpoeck/lisp/coke/library/funktionenclisp.lisp", i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @":::global-str-/Users/karstenpoeck/lisp/coke/library/funktionenclisp.lisp", i64 0, i64 0), i64 0, i32 1, i32* nonnull @source-file-info-handle)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.46)
  ret void
}

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #1

; Function Attrs: nounwind
declare void @ltvc_assign_source_file_info_handle(i8*, i8*, i64, i32, i32*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^1^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !13 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^1^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G283799.0 = phi {}* [ %18, %header-check-br ], [ %G283799.1, %normal-dest63 ], [ %G283799.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 30), align 16
  %ptrtoint22 = ptrtoint {}* %G283799.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G283799.0, i64 2, {}* %"closure->B=ORDNER-P", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest56, %maybe-more-tests21, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 30), align 16
  %"closure->B=ORDNER-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ORDNER-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ORDNER-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 0, i64 1, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %21 = icmp ult i64 %.off106, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 36), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->B=ORDNER-P", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 41), align 8
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->B=ORDNER-P", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %32, {}* inttoptr (i64 40 to {}*))
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 30), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %33, 0
  %35 = insertvalue { {}*, i64 } %34, i64 1, 1
  ret { {}*, i64 } %35

normal-dest56:                                    ; preds = %maybe-more-tests21
  %ptrtoint57 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt101 = extractvalue { {}*, i64 } %36, 0
  %.elt103 = extractvalue { {}*, i64 } %36, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283799.1 = select i1 %cond82, {}* %37, {}* %.elt101
  br label %tag2

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 27), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283799.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag2
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

; Function Attrs: nounwind
declare void @cc_pop_InvocationHistoryFrame({}*, <{ i8*, { i32, i32, i8*, i8* }, i64 }>*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @cc_push_InvocationHistoryFrame({}*, <{ i8*, { i32, i32, i8*, i8* }, i64 }>*, { i32, i32, i8*, i8* }*, i64) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ORDNER-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !23 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ORDNER-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ORDNER-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc33 unwind label %cleanup-lpad

.noexc33:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %normal-dest23
  %return-value.sroa.5.0 = phi i64 [ %.elt29, %normal-dest23 ], [ 1, %normal-dest10 ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt27, %normal-dest23 ], [ %19, %normal-dest10 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.5.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest10
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 5), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest16 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest16, %tag2, %normal-dest7, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 1), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %18, 0
  %.elt25 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt25, 0
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283821.0 = select i1 %cond, {}* %19, {}* %.elt
  %20 = icmp eq {}* %G283821.0, %19
  br i1 %20, label %tag1, label %tag2

normal-dest16:                                    ; preds = %tag2
  %ptrtoint17 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %14, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt27 = extractvalue { {}*, i64 } %21, 0
  %.elt29 = extractvalue { {}*, i64 } %21, 1
  br label %tag1
}

declare {}* @cc_safe_fdefinition({}*) local_unnamed_addr #3

declare {}* @cc_enclose({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) local_unnamed_addr #3

declare {}* @cc_safe_setfdefinition({}*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @cc_setSymbolValue({}*, {}*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^15^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !24 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^15^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G283846.0 = phi {}* [ %18, %header-check-br ], [ %G283846.1, %normal-dest17 ], [ %G283846.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 79), align 8
  %ptrtoint20 = ptrtoint {}* %G283846.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G283846.0, i64 2, {}* %"closure->B=KONKATENIERE-DATEIEN", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag4, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %maybe-more-tests67, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 79), align 8
  %"closure->B=KONKATENIERE-DATEIEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 343, i64 15, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br59

normal-dest13:                                    ; preds = %maybe-more-tests67
  %ptrtoint14 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %37, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283846.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 81), align 8
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->B=KONKATENIERE-DATEIEN", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 88), align 16
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->B=KONKATENIERE-DATEIEN", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %31, {}* inttoptr (i64 60 to {}*))
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 79), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %33 = insertvalue { {}*, i64 } undef, {}* %32, 0
  %34 = insertvalue { {}*, i64 } %33, i64 1, 1
  ret { {}*, i64 } %34

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %35 = icmp ult i64 %.off106, 5
  br i1 %35, label %maybe-more-tests67, label %tag4

maybe-more-tests67:                               ; preds = %header-check-br59
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 78), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283846.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !25 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure58 = alloca [128 x i8], align 1
  %stack-allocated-closure3559 = alloca [120 x i8], align 1
  %stack-allocated-closure3559.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure3559, i64 0, i64 0
  %stack-allocated-closure58.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure58, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %normal-dest45, %normal-dest11
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 53), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest15 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest11
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 51), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest45 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest45, %tag1, %normal-dest31, %normal-dest22, %normal-dest15, %tag, %normal-dest8, %normal-dest7, %normal-dest6, %continue, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @":::global-str-B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %14 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  %15 = invoke {}* @cc_makeCell()
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

normal-dest6:                                     ; preds = %continue
  %16 = invoke {}* @cc_makeCell()
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest6
  call void @cc_writeCell({}* %16, {}* %14)
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 1), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %18 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %18, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest8
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt61 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt61, 0
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283944.0 = select i1 %cond, {}* %20, {}* %.elt
  %21 = icmp eq {}* %G283944.0, %20
  br i1 %21, label %tag, label %tag1

normal-dest15:                                    ; preds = %tag
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 55), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 57), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 59), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 61), align 8
  %ptrtoint16 = ptrtoint {}* %10 to i64
  %entry-point-addr-uint17 = add i64 %ptrtoint16, 7
  %entry-point-addr18 = inttoptr i64 %entry-point-addr-uint17 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point19 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr18, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point19({}* %10, i64 5, {}* %vaarg, {}* %22, {}* %23, {}* %24, {}* %25)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %normal-dest15
  %.elt67 = extractvalue { {}*, i64 } %26, 0
  %.elt69 = extractvalue { {}*, i64 } %26, 1
  %cond57 = icmp eq i64 %.elt69, 0
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283828.0 = select i1 %cond57, {}* %27, {}* %.elt67
  call void @cc_writeCell({}* %15, {}* %G283828.0)
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 63), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest22
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure58.sub, {}* %30, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 343, i64 15, i64 0, i64 2, {}* %16, {}* %15)
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA36" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure3559.sub, {}* %31, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.3", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.3^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 343, i64 15, i64 0, i64 1, {}* %15)
  %ptrtoint37 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint38 = add i64 %ptrtoint37, 7
  %entry-point-addr39 = inttoptr i64 %entry-point-addr-uint38 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point40 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr39, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point40({}* %29, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA36", {}* null, {}* null)
          to label %normal-dest43 unwind label %cleanup-lpad

normal-dest43:                                    ; preds = %normal-dest31
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %32

normal-dest45:                                    ; preds = %tag1
  %ptrtoint46 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %12, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %tag unwind label %cleanup-lpad
}

declare void @va_notEnoughArgumentsException(i8*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @unreachableError() local_unnamed_addr #1

; Function Attrs: nounwind
declare {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }*, i64*) local_unnamed_addr #1

declare {}* @cc_makeCell() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @cc_writeCell({}*, {}*) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !26 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure14 = alloca [128 x i8], align 1
  %stack-allocated-closure915 = alloca [120 x i8], align 1
  %stack-allocated-closure915.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure915, i64 0, i64 0
  %stack-allocated-closure14.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure14, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest6, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 1, i32 0
  %16 = load %"class.core::T_O"*, %"class.core::T_O"** %15, align 8, !tbaa !27
  %17 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %18 = load %"class.core::T_O"*, %"class.core::T_O"** %17, align 8, !tbaa !27
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 65), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure14.sub, {}* %21, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.1", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.1^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 343, i64 15, i64 0, i64 2, %"class.core::T_O"* %18, %"class.core::T_O"* %16)
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA10" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure915.sub, {}* %22, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.2", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.2^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 343, i64 15, i64 0, i64 1, %"class.core::T_O"* %16)
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA10", {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.1"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !29 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.1^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest33
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %12 = icmp eq {}* %"%DOLIST-VAR.0101", %11
  %.val99 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G283901.0 = select i1 %12, {}* %.val99, {}* %11
  %13 = icmp eq {}* %G283901.0, %11
  br i1 %13, label %tag5, label %tag7

tag2:                                             ; preds = %normal-dest61, %tag20
  %DATEI.0 = phi {}* [ %30, %tag20 ], [ %DATEI.1, %normal-dest61 ]
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 72), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest29 unwind label %cleanup-lpad.loopexit

tag5:                                             ; preds = %tag
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest38 unwind label %cleanup-lpad.loopexit

tag7:                                             ; preds = %tag, %tag3.backedge, %normal-dest
  %18 = phi {}* [ %39, %normal-dest ], [ %55, %tag3.backedge ], [ %11, %tag ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %19 = insertvalue { {}*, i64 } undef, {}* %18, 0
  %20 = insertvalue { {}*, i64 } %19, i64 1, 1
  ret { {}*, i64 } %20

tag9:                                             ; preds = %tag10
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest53 unwind label %cleanup-lpad.loopexit

tag10:                                            ; preds = %tag10.lr.ph, %tag3.backedge
  %.val98 = phi {}* [ %40, %tag10.lr.ph ], [ %55, %tag3.backedge ]
  %"%DOLIST-VAR.0101" = phi {}* [ %39, %tag10.lr.ph ], [ %"%DOLIST-VAR.0.be", %tag3.backedge ]
  %23 = ptrtoint {}* %"%DOLIST-VAR.0101" to i64
  %tag-only7281 = and i64 %23, 7
  %consp-test73 = icmp eq i64 %tag-only7281, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G283928.0 = select i1 %consp-test73, {}* %.val, {}* %.val98
  %24 = icmp eq {}* %G283928.0, %.val98
  br i1 %24, label %tag9, label %tag20

tag11:                                            ; preds = %normal-dest33
  %25 = add i64 %23, 5
  %26 = inttoptr i64 %25 to {}**
  %27 = load {}*, {}** %26, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag3.backedge

tag20:                                            ; preds = %tag10
  %28 = add i64 %23, -3
  %29 = inttoptr i64 %28 to {}**
  %30 = load {}*, {}** %29, align 8
  br label %tag2

cleanup-lpad.loopexit:                            ; preds = %tag2, %normal-dest29, %tag5, %normal-dest38, %tag9, %normal-dest53
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %31 = ptrtoint {}* %closure-ptr to i64
  %32 = and i64 %31, -8
  %33 = inttoptr i64 %32 to %1*
  %34 = getelementptr inbounds %1, %1* %33, i64 0, i32 4, i32 1, i64 0, i32 0
  %35 = bitcast %"class.core::T_O"** %34 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !27
  %37 = add i64 %36, -3
  %38 = inttoptr i64 %37 to {}**
  %39 = load {}*, {}** %38, align 8, !tbaa !27
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %41 = icmp eq {}* %39, %40
  br i1 %41, label %tag7, label %tag10.lr.ph

tag10.lr.ph:                                      ; preds = %normal-dest
  %42 = getelementptr inbounds %1, %1* %33, i64 0, i32 4, i32 1, i64 1, i32 0
  %43 = bitcast %"class.core::T_O"** %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !27
  %45 = add i64 %44, -3
  %46 = inttoptr i64 %45 to {}**
  br label %tag10

normal-dest29:                                    ; preds = %tag2
  %47 = load {}*, {}** %46, align 8, !tbaa !27
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 2, {}* %DATEI.0, {}* %47, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad.loopexit

normal-dest33:                                    ; preds = %normal-dest29
  br i1 %consp-test73, label %tag11, label %tag

normal-dest38:                                    ; preds = %tag5
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint39 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint40 = add i64 %ptrtoint39, 7
  %entry-point-addr41 = inttoptr i64 %entry-point-addr-uint40 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point42 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr41, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point42({}* %17, i64 5, {}* %49, {}* %50, {}* %"%DOLIST-VAR.0101", {}* %51, {}* %52)
          to label %normal-dest45 unwind label %cleanup-lpad.loopexit

normal-dest45:                                    ; preds = %normal-dest38
  %.elt86 = extractvalue { {}*, i64 } %53, 0
  %.elt88 = extractvalue { {}*, i64 } %53, 1
  %cond = icmp eq i64 %.elt88, 0
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %"%DOLIST-VAR.1" = select i1 %cond, {}* %54, {}* %.elt86
  br label %tag3.backedge

tag3.backedge:                                    ; preds = %normal-dest45, %tag11
  %55 = phi {}* [ %.pre, %tag11 ], [ %54, %normal-dest45 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %27, %tag11 ], [ %"%DOLIST-VAR.1", %normal-dest45 ]
  %56 = icmp eq {}* %"%DOLIST-VAR.0.be", %55
  br i1 %56, label %tag7, label %tag10

normal-dest53:                                    ; preds = %tag9
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint55 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %22, i64 5, {}* %57, {}* %58, {}* %"%DOLIST-VAR.0101", {}* %59, {}* %60)
          to label %normal-dest61 unwind label %cleanup-lpad.loopexit

normal-dest61:                                    ; preds = %normal-dest53
  %.elt90 = extractvalue { {}*, i64 } %61, 0
  %.elt92 = extractvalue { {}*, i64 } %61, 1
  %cond80 = icmp eq i64 %.elt92, 0
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %DATEI.1 = select i1 %cond80, {}* %62, {}* %.elt90
  br label %tag2
}

; Function Attrs: nounwind
declare {}* @cc_stack_enclose(i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.2"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !30 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.2^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest, %normal-dest13
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest13 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest13 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 74), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest9 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest9, %tag2
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !27
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !27
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag1, label %tag2

normal-dest9:                                     ; preds = %tag2
  %27 = load {}*, {}** %23, align 8, !tbaa !27
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 1, {}* %27, {}* null, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt15 = extractvalue { {}*, i64 } %28, 1
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.3"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !31 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.3^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest, %normal-dest11
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest11 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest11 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %12

tag1:                                             ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 74), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest7 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest7, %tag1
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !27
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !27
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag, label %tag1

normal-dest7:                                     ; preds = %tag1
  %27 = load {}*, {}** %23, align 8, !tbaa !27
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 76), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 3, {}* %27, {}* %28, {}* %29, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt15 = extractvalue { {}*, i64 } %30, 1
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^27^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !32 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^27^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest17, %header-check-br
  %G283987.0 = phi {}* [ %18, %header-check-br ], [ %G283987.1, %normal-dest17 ], [ %G283987.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 72), align 16
  %ptrtoint20 = ptrtoint {}* %G283987.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G283987.0, i64 2, {}* %"closure->B-KONKATENIERE-EINE-DATEI", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag3, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %maybe-more-tests67, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 72), align 16
  %"closure->B-KONKATENIERE-EINE-DATEI" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 862, i64 27, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br59

normal-dest13:                                    ; preds = %maybe-more-tests67
  %ptrtoint14 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %37, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283987.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 105), align 8
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->B-KONKATENIERE-EINE-DATEI", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 112), align 16
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->B-KONKATENIERE-EINE-DATEI", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %31, {}* inttoptr (i64 108 to {}*))
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 72), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %33 = insertvalue { {}*, i64 } undef, {}* %32, 0
  %34 = insertvalue { {}*, i64 } %33, i64 1, 1
  ret { {}*, i64 } %34

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %35 = icmp ult i64 %.off106, 5
  br i1 %35, label %maybe-more-tests67, label %tag3

maybe-more-tests67:                               ; preds = %header-check-br59
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag3
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 104), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283987.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !33 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure31 = alloca [128 x i8], align 1
  %stack-allocated-closure2132 = alloca [120 x i8], align 1
  %stack-allocated-closure2132.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure2132, i64 0, i64 0
  %stack-allocated-closure31.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure31, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %12 [
    i64 2, label %req-bb
    i64 0, label %11
  ]

cleanup-lpad:                                     ; preds = %14, %11, %normal-dest17, %normal-dest11, %normal-dest8, %normal-dest7, %normal-dest6, %req-bb
  %9 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %9

req-bb:                                           ; preds = %entry, %12
  %G283971.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %12 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %entry ]
  %G283971.0 = load {}*, {}** %G283971.0.in, align 8
  %10 = invoke {}* @cc_makeCell()
          to label %normal-dest6 unwind label %cleanup-lpad

; <label>:11:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %11
  unreachable

; <label>:12:                                     ; preds = %entry
  %13 = icmp ugt i64 %nargs, 2
  br i1 %13, label %14, label %req-bb

; <label>:14:                                     ; preds = %12
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc42 unwind label %cleanup-lpad

.noexc42:                                         ; preds = %14
  unreachable

normal-dest6:                                     ; preds = %req-bb
  %15 = invoke {}* @cc_makeCell()
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest6
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %17 = icmp eq {}* %G283971.0, %16
  %stream.0 = select i1 %17, {}* %16, {}* %farg1
  call void @cc_writeCell({}* %15, {}* %stream.0)
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 53), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest7
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 55), align 8
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 92), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 59), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 94), align 16
  %ptrtoint = ptrtoint {}* %19 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %19, i64 5, {}* %farg0, {}* %20, {}* %21, {}* %22, {}* %23)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest8
  %.elt = extractvalue { {}*, i64 } %24, 0
  %.elt34 = extractvalue { {}*, i64 } %24, 1
  %cond30 = icmp eq i64 %.elt34, 0
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G283967.0 = select i1 %cond30, {}* %25, {}* %.elt
  call void @cc_writeCell({}* %10, {}* %G283967.0)
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 63), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest11
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure31.sub, {}* %28, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.4", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.4^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 862, i64 27, i64 0, i64 2, {}* %15, {}* %10)
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA22" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure2132.sub, {}* %29, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.7", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.7^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 862, i64 27, i64 0, i64 1, {}* %10)
  %ptrtoint23 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint24 = add i64 %ptrtoint23, 7
  %entry-point-addr25 = inttoptr i64 %entry-point-addr-uint24 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point26 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr25, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point26({}* %27, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA22", {}* null, {}* null)
          to label %normal-dest29 unwind label %cleanup-lpad

normal-dest29:                                    ; preds = %normal-dest17
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %30
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.4"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !34 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %stack-allocated-closure14 = alloca [128 x i8], align 1
  %stack-allocated-closure915 = alloca [120 x i8], align 1
  %stack-allocated-closure915.sub = getelementptr inbounds [120 x i8], [120 x i8]* %stack-allocated-closure915, i64 0, i64 0
  %stack-allocated-closure14.sub = getelementptr inbounds [128 x i8], [128 x i8]* %stack-allocated-closure14, i64 0, i64 0
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.4^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %normal-dest6, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = ptrtoint {}* %closure-ptr to i64
  %13 = and i64 %12, -8
  %14 = inttoptr i64 %13 to %1*
  %15 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 1, i32 0
  %16 = load %"class.core::T_O"*, %"class.core::T_O"** %15, align 8, !tbaa !27
  %17 = getelementptr inbounds %1, %1* %14, i64 0, i32 4, i32 1, i64 0, i32 0
  %18 = load %"class.core::T_O"*, %"class.core::T_O"** %17, align 8, !tbaa !27
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 65), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure14.sub, {}* %21, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.5", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.5^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 862, i64 27, i64 0, i64 2, %"class.core::T_O"* %18, %"class.core::T_O"* %16)
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA10" = call {}* (i8*, {}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_stack_enclose(i8* nonnull %stack-allocated-closure915.sub, {}* %22, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.6", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.6^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 862, i64 27, i64 0, i64 1, %"class.core::T_O"* %16)
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 2, {}* %"closure->LAMBDA", {}* %"closure->LAMBDA10", {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest6
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.5"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !35 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.5^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest43
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 102), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest15 unwind label %cleanup-lpad.loopexit

tag4:                                             ; preds = %normal-dest57
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 96), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest22 unwind label %cleanup-lpad.loopexit

tag5:                                             ; preds = %tag5.backedge, %normal-dest
  %ALLES.0 = phi {}* [ %28, %normal-dest ], [ %ALLES.1, %tag5.backedge ]
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 100), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest50 unwind label %cleanup-lpad.loopexit

tag7:                                             ; preds = %normal-dest57
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %17 = insertvalue { {}*, i64 } undef, {}* %49, 0
  %18 = insertvalue { {}*, i64 } %17, i64 1, 1
  ret { {}*, i64 } %18

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest15, %tag4, %normal-dest22, %normal-dest30, %normal-dest36, %tag5, %normal-dest50
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %19 = ptrtoint {}* %closure-ptr to i64
  %20 = and i64 %19, -8
  %21 = inttoptr i64 %20 to %1*
  %22 = getelementptr inbounds %1, %1* %21, i64 0, i32 4, i32 1, i64 1, i32 0
  %23 = bitcast %"class.core::T_O"** %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !27
  %25 = getelementptr inbounds %1, %1* %21, i64 0, i32 4, i32 1, i64 0, i32 0
  %26 = bitcast %"class.core::T_O"** %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !27
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %29 = add i64 %24, -3
  %30 = inttoptr i64 %29 to {}**
  %31 = add i64 %27, -3
  %32 = inttoptr i64 %31 to {}**
  br label %tag5

normal-dest15:                                    ; preds = %tag1
  %33 = load {}*, {}** %32, align 8, !tbaa !27
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 2, {}* %ALLES.1, {}* %33, {}* null, {}* null)
          to label %tag5.backedge unwind label %cleanup-lpad.loopexit

tag5.backedge:                                    ; preds = %normal-dest15, %normal-dest43
  br label %tag5

normal-dest22:                                    ; preds = %tag4
  %35 = load {}*, {}** %30, align 8, !tbaa !27
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 98), align 16
  %ptrtoint24 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint25 = add i64 %ptrtoint24, 7
  %entry-point-addr26 = inttoptr i64 %entry-point-addr-uint25 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point27 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr26, align 8
  %38 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point27({}* %14, i64 3, {}* %35, {}* %36, {}* %37, {}* null)
          to label %normal-dest30 unwind label %cleanup-lpad.loopexit

normal-dest30:                                    ; preds = %normal-dest22
  %.elt72 = extractvalue { {}*, i64 } %38, 0
  %.elt74 = extractvalue { {}*, i64 } %38, 1
  %cond67 = icmp eq i64 %.elt74, 0
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ALLES.1 = select i1 %cond67, {}* %39, {}* %.elt72
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 100), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest36 unwind label %cleanup-lpad.loopexit

normal-dest36:                                    ; preds = %normal-dest30
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 98), align 16
  %ptrtoint37 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint38 = add i64 %ptrtoint37, 7
  %entry-point-addr39 = inttoptr i64 %entry-point-addr-uint38 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point40 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr39, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point40({}* %41, i64 2, {}* %42, {}* %ALLES.1, {}* null, {}* null)
          to label %normal-dest43 unwind label %cleanup-lpad.loopexit

normal-dest43:                                    ; preds = %normal-dest36
  %.elt76 = extractvalue { {}*, i64 } %43, 0
  %.elt78 = extractvalue { {}*, i64 } %43, 1
  %cond68 = icmp eq i64 %.elt78, 0
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond68, {}* %44, {}* %.elt76
  %45 = icmp eq {}* %object.0, %44
  %.val89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G284044.0 = select i1 %45, {}* %.val89, {}* %44
  %46 = icmp eq {}* %G284044.0, %44
  br i1 %46, label %tag5.backedge, label %tag1

normal-dest50:                                    ; preds = %tag5
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 98), align 16
  %ptrtoint51 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint52 = add i64 %ptrtoint51, 7
  %entry-point-addr53 = inttoptr i64 %entry-point-addr-uint52 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point54 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr53, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point54({}* %16, i64 2, {}* %ALLES.0, {}* %47, {}* null, {}* null)
          to label %normal-dest57 unwind label %cleanup-lpad.loopexit

normal-dest57:                                    ; preds = %normal-dest50
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt70 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt70, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object58.0 = select i1 %cond, {}* %49, {}* %.elt
  %50 = icmp eq {}* %object58.0, %49
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G284031.0 = select i1 %50, {}* %.val, {}* %49
  %51 = icmp eq {}* %G284031.0, %49
  br i1 %51, label %tag7, label %tag4
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.6"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !36 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.6^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest, %normal-dest13
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest13 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest13 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 74), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest9 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest9, %tag2
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !27
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !27
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag1, label %tag2

normal-dest9:                                     ; preds = %tag2
  %27 = load {}*, {}** %23, align 8, !tbaa !27
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 1, {}* %27, {}* null, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt15 = extractvalue { {}*, i64 } %28, 1
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.7"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !37 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.7^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 74), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest7 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest, %normal-dest11
  %return-value.sroa.3.0 = phi i64 [ %.elt15, %normal-dest11 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt, %normal-dest11 ], [ %24, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %13 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %14 = insertvalue { {}*, i64 } %13, i64 %return-value.sroa.3.0, 1
  ret { {}*, i64 } %14

cleanup-lpad:                                     ; preds = %10, %normal-dest7, %tag
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = ptrtoint {}* %closure-ptr to i64
  %17 = and i64 %16, -8
  %18 = inttoptr i64 %17 to %1*
  %19 = getelementptr inbounds %1, %1* %18, i64 0, i32 4, i32 1, i64 0, i32 0
  %20 = bitcast %"class.core::T_O"** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !27
  %22 = add i64 %21, -3
  %23 = inttoptr i64 %22 to {}**
  %24 = load {}*, {}** %23, align 8, !tbaa !27
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %26 = icmp eq {}* %25, %24
  br i1 %26, label %tag2, label %tag

normal-dest7:                                     ; preds = %tag
  %27 = load {}*, {}** %23, align 8, !tbaa !27
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 76), align 16
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 3, {}* %27, {}* %28, {}* %29, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt15 = extractvalue { {}*, i64 } %30, 1
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^38^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !38 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^38^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G284126.0 = phi {}* [ %18, %header-check-br ], [ %G284126.1, %normal-dest17 ], [ %G284126.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 150), align 16
  %ptrtoint20 = ptrtoint {}* %G284126.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G284126.0, i64 2, {}* %"closure->B=PROPERTYLISTEBINDUNG-SICHERN", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br72
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %maybe-more-tests80, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 150), align 16
  %"closure->B=PROPERTYLISTEBINDUNG-SICHERN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 1262, i64 38, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br72

normal-dest13:                                    ; preds = %maybe-more-tests80
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284126.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 152), align 16
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->B=PROPERTYLISTEBINDUNG-SICHERN", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 155), align 8
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->B=PROPERTYLISTEBINDUNG-SICHERN", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 150), align 16
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 158), align 16
  %ptrtoint59 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %32, i64 3, {}* %33, {}* %34, {}* %35, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 180 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 150), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %41 = icmp ult i64 %.off123, 5
  br i1 %41, label %maybe-more-tests80, label %tag4

maybe-more-tests80:                               ; preds = %header-check-br72
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 149), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284126.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !39 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc498 unwind label %cleanup-lpad

.noexc498:                                        ; preds = %13
  unreachable

tag2:                                             ; preds = %normal-dest343
  %ptrtoint58 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only59 = and i64 %ptrtoint58, 7
  %test60 = icmp eq i64 %tag-only59, 1
  br i1 %test60, label %header-check-br57, label %tag22

tag3:                                             ; preds = %normal-dest239
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 138), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest67 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest343
  %16 = icmp eq {}* %.val514, %farg0
  %G284217.0 = select i1 %16, {}* %119, {}* %.val514
  %17 = icmp eq {}* %G284217.0, %.val514
  br i1 %17, label %tag19, label %tag27

tag5:                                             ; preds = %normal-dest42
  %18 = ptrtoint {}* %47 to i64
  br label %tag9

tag8:                                             ; preds = %normal-dest74, %header-check-br
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest108 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest390, %normal-dest224, %normal-dest196, %normal-dest155, %tag5
  %return-value.sroa.42.0 = phi i64 [ 1, %tag5 ], [ 1, %normal-dest196 ], [ 1, %normal-dest155 ], [ %.elt446, %normal-dest390 ], [ 1, %normal-dest224 ]
  %return-value.sroa.0.0 = phi i64 [ %18, %tag5 ], [ %84, %normal-dest196 ], [ %78, %normal-dest155 ], [ %131, %normal-dest390 ], [ %90, %normal-dest224 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %21 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %22 = insertvalue { {}*, i64 } undef, {}* %21, 0
  %23 = insertvalue { {}*, i64 } %22, i64 %return-value.sroa.42.0, 1
  ret { {}*, i64 } %23

tag11:                                            ; preds = %tag28, %header-check-br259
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest122 unwind label %cleanup-lpad

tag12:                                            ; preds = %normal-dest170, %normal-dest115, %header-check-br80
  %G284166.0 = phi {}* [ %"closure->LAMBDA", %header-check-br80 ], [ %G284166.1, %normal-dest115 ], [ %G284166.2, %normal-dest170 ]
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 114), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest136 unwind label %cleanup-lpad

tag17:                                            ; preds = %header-check-br320, %normal-dest129, %normal-dest101
  %G284146.0 = phi {}* [ %G284146.1, %normal-dest101 ], [ %G284146.2, %normal-dest129 ], [ %"closure->LAMBDA", %header-check-br320 ]
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 114), align 16
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest177 unwind label %cleanup-lpad

tag18:                                            ; preds = %normal-dest337, %normal-dest276, %header-check-br57
  %G284224.0 = phi {}* [ %"closure->LAMBDA", %header-check-br57 ], [ %G284224.1, %normal-dest276 ], [ %G284224.2, %normal-dest337 ]
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 147), align 8
  %31 = invoke {}* @cc_safe_symbol_value({}* %30)
          to label %normal-dest203 unwind label %cleanup-lpad

tag19:                                            ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest232 unwind label %cleanup-lpad

tag20:                                            ; preds = %normal-dest304, %header-check-br348
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest246 unwind label %cleanup-lpad

tag22:                                            ; preds = %tag2, %header-check-br48
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest269 unwind label %cleanup-lpad

tag27:                                            ; preds = %tag4
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 141), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest297 unwind label %cleanup-lpad

tag28:                                            ; preds = %normal-dest239
  %ptrtoint321 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only322 = and i64 %ptrtoint321, 7
  %test323 = icmp eq i64 %tag-only322, 1
  br i1 %test323, label %header-check-br320, label %tag11

tag31:                                            ; preds = %normal-dest42
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %40, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.8", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.8^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 1262, i64 38, i64 0, i64 0)
          to label %normal-dest343 unwind label %cleanup-lpad

tag33:                                            ; preds = %header-check-br311, %normal-dest290, %normal-dest253
  %G284196.0 = phi {}* [ %G284196.1, %normal-dest253 ], [ %G284196.2, %normal-dest290 ], [ %"closure->LAMBDA", %header-check-br311 ]
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 114), align 16
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest358 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest383, %normal-dest377, %normal-dest365, %normal-dest358, %tag33, %tag31, %normal-dest330, %maybe-more-tests56, %normal-dest297, %tag27, %normal-dest283, %maybe-more-tests356, %normal-dest269, %tag22, %normal-dest246, %tag20, %normal-dest232, %tag19, %normal-dest212, %normal-dest205, %normal-dest203, %tag18, %normal-dest184, %normal-dest177, %tag17, %normal-dest163, %maybe-more-tests, %normal-dest143, %normal-dest136, %tag12, %normal-dest122, %tag11, %normal-dest108, %tag8, %normal-dest94, %maybe-more-tests267, %normal-dest67, %tag3, %normal-dest39, %normal-dest
  %43 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %43

normal-dest:                                      ; preds = %11
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 114), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %45 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %45, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest39
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt407 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt407, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284297.0 = select i1 %cond, {}* %47, {}* %.elt
  %48 = icmp eq {}* %G284297.0, %47
  br i1 %48, label %tag5, label %tag31

header-check-br:                                  ; preds = %header-check-br80
  %.off520 = add i64 %59, -1001
  %49 = icmp ult i64 %.off520, 5
  br i1 %49, label %maybe-more-tests, label %tag8

maybe-more-tests:                                 ; preds = %header-check-br
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest163 unwind label %cleanup-lpad

header-check-br48:                                ; preds = %header-check-br57
  %.off515 = add i64 %55, -1001
  %52 = icmp ult i64 %.off515, 5
  br i1 %52, label %maybe-more-tests56, label %tag22

maybe-more-tests56:                               ; preds = %header-check-br48
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %54 = invoke {}* @cc_safe_fdefinition({}* %53)
          to label %normal-dest330 unwind label %cleanup-lpad

header-check-br57:                                ; preds = %tag2
  %irc-bit-cast61 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep62 = getelementptr inbounds i8, i8* %irc-bit-cast61, i64 -9
  %irc-bit-cast63 = bitcast i8* %gep62 to i64*
  %55 = load i64, i64* %irc-bit-cast63, align 8
  %.off = add i64 %55, -913
  %56 = icmp ult i64 %.off, 85
  br i1 %56, label %tag18, label %header-check-br48

normal-dest67:                                    ; preds = %tag3
  %ptrtoint68 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %57 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %15, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad

normal-dest74:                                    ; preds = %normal-dest67
  %.elt456 = extractvalue { {}*, i64 } %57, 0
  %.elt458 = extractvalue { {}*, i64 } %57, 1
  %cond399 = icmp eq i64 %.elt458, 0
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUT284088.0 = select i1 %cond399, {}* %58, {}* %.elt456
  %ptrtoint81 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only82 = and i64 %ptrtoint81, 7
  %test83 = icmp eq i64 %tag-only82, 1
  br i1 %test83, label %header-check-br80, label %tag8

header-check-br80:                                ; preds = %normal-dest74
  %irc-bit-cast84 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep85 = getelementptr inbounds i8, i8* %irc-bit-cast84, i64 -9
  %irc-bit-cast86 = bitcast i8* %gep85 to i64*
  %59 = load i64, i64* %irc-bit-cast86, align 8
  %.off519 = add i64 %59, -913
  %60 = icmp ult i64 %.off519, 85
  br i1 %60, label %tag12, label %header-check-br

normal-dest94:                                    ; preds = %maybe-more-tests267
  %ptrtoint95 = ptrtoint {}* %102 to i64
  %entry-point-addr-uint96 = add i64 %ptrtoint95, 7
  %entry-point-addr97 = inttoptr i64 %entry-point-addr-uint96 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point98 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr97, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point98({}* %102, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest101 unwind label %cleanup-lpad

normal-dest101:                                   ; preds = %normal-dest94
  %.elt488 = extractvalue { {}*, i64 } %61, 0
  %.elt490 = extractvalue { {}*, i64 } %61, 1
  %cond405 = icmp eq i64 %.elt490, 0
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284146.1 = select i1 %cond405, {}* %62, {}* %.elt488
  br label %tag17

normal-dest108:                                   ; preds = %tag8
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 140), align 16
  %ptrtoint109 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint110 = add i64 %ptrtoint109, 7
  %entry-point-addr111 = inttoptr i64 %entry-point-addr-uint110 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point112 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr111, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point112({}* %20, i64 5, {}* %63, {}* %64, {}* %"closure->LAMBDA", {}* %65, {}* %66)
          to label %normal-dest115 unwind label %cleanup-lpad

normal-dest115:                                   ; preds = %normal-dest108
  %.elt460 = extractvalue { {}*, i64 } %67, 0
  %.elt462 = extractvalue { {}*, i64 } %67, 1
  %cond400 = icmp eq i64 %.elt462, 0
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284166.1 = select i1 %cond400, {}* %68, {}* %.elt460
  br label %tag12

normal-dest122:                                   ; preds = %tag11
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %70 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %72 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 137), align 8
  %ptrtoint123 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint124 = add i64 %ptrtoint123, 7
  %entry-point-addr125 = inttoptr i64 %entry-point-addr-uint124 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point126 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr125, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point126({}* %25, i64 5, {}* %69, {}* %70, {}* %"closure->LAMBDA", {}* %71, {}* %72)
          to label %normal-dest129 unwind label %cleanup-lpad

normal-dest129:                                   ; preds = %normal-dest122
  %.elt476 = extractvalue { {}*, i64 } %73, 0
  %.elt478 = extractvalue { {}*, i64 } %73, 1
  %cond403 = icmp eq i64 %.elt478, 0
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284146.2 = select i1 %cond403, {}* %74, {}* %.elt476
  br label %tag17

normal-dest136:                                   ; preds = %tag12
  %ptrtoint137 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint138 = add i64 %ptrtoint137, 7
  %entry-point-addr139 = inttoptr i64 %entry-point-addr-uint138 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point140 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr139, align 8
  %75 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point140({}* %27, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest143 unwind label %cleanup-lpad

normal-dest143:                                   ; preds = %normal-dest136
  %.elt464 = extractvalue { {}*, i64 } %75, 0
  %.elt466 = extractvalue { {}*, i64 } %75, 1
  %cond401 = icmp eq i64 %.elt466, 0
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284169.0 = select i1 %cond401, {}* %76, {}* %.elt464
  %ptrtoint149 = ptrtoint {}* %G284166.0 to i64
  %entry-point-addr-uint150 = add i64 %ptrtoint149, 7
  %entry-point-addr151 = inttoptr i64 %entry-point-addr-uint150 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point152 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr151, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point152({}* %G284166.0, i64 3, {}* %OUT284088.0, {}* %farg1, {}* %G284169.0, {}* null)
          to label %normal-dest155 unwind label %cleanup-lpad

normal-dest155:                                   ; preds = %normal-dest143
  %78 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag9

normal-dest163:                                   ; preds = %maybe-more-tests
  %ptrtoint164 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint165 = add i64 %ptrtoint164, 7
  %entry-point-addr166 = inttoptr i64 %entry-point-addr-uint165 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point167 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr166, align 8
  %79 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point167({}* %51, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest170 unwind label %cleanup-lpad

normal-dest170:                                   ; preds = %normal-dest163
  %.elt472 = extractvalue { {}*, i64 } %79, 0
  %.elt474 = extractvalue { {}*, i64 } %79, 1
  %cond402 = icmp eq i64 %.elt474, 0
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284166.2 = select i1 %cond402, {}* %80, {}* %.elt472
  br label %tag12

normal-dest177:                                   ; preds = %tag17
  %ptrtoint178 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint179 = add i64 %ptrtoint178, 7
  %entry-point-addr180 = inttoptr i64 %entry-point-addr-uint179 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point181 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr180, align 8
  %81 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point181({}* %29, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest184 unwind label %cleanup-lpad

normal-dest184:                                   ; preds = %normal-dest177
  %.elt480 = extractvalue { {}*, i64 } %81, 0
  %.elt482 = extractvalue { {}*, i64 } %81, 1
  %cond404 = icmp eq i64 %.elt482, 0
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284149.0 = select i1 %cond404, {}* %82, {}* %.elt480
  %ptrtoint190 = ptrtoint {}* %G284146.0 to i64
  %entry-point-addr-uint191 = add i64 %ptrtoint190, 7
  %entry-point-addr192 = inttoptr i64 %entry-point-addr-uint191 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point193 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr192, align 8
  %83 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point193({}* %G284146.0, i64 3, {}* %farg0, {}* %farg1, {}* %G284149.0, {}* null)
          to label %normal-dest196 unwind label %cleanup-lpad

normal-dest196:                                   ; preds = %normal-dest184
  %84 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag9

normal-dest203:                                   ; preds = %tag18
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 114), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest205 unwind label %cleanup-lpad

normal-dest205:                                   ; preds = %normal-dest203
  %ptrtoint206 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint207 = add i64 %ptrtoint206, 7
  %entry-point-addr208 = inttoptr i64 %entry-point-addr-uint207 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point209 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr208, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point209({}* %86, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest212 unwind label %cleanup-lpad

normal-dest212:                                   ; preds = %normal-dest205
  %.elt413 = extractvalue { {}*, i64 } %87, 0
  %.elt415 = extractvalue { {}*, i64 } %87, 1
  %cond392 = icmp eq i64 %.elt415, 0
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284227.0 = select i1 %cond392, {}* %88, {}* %.elt413
  %ptrtoint218 = ptrtoint {}* %G284224.0 to i64
  %entry-point-addr-uint219 = add i64 %ptrtoint218, 7
  %entry-point-addr220 = inttoptr i64 %entry-point-addr-uint219 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point221 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr220, align 8
  %89 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point221({}* %G284224.0, i64 3, {}* %31, {}* %farg1, {}* %G284227.0, {}* null)
          to label %normal-dest224 unwind label %cleanup-lpad

normal-dest224:                                   ; preds = %normal-dest212
  %90 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag9

normal-dest232:                                   ; preds = %tag19
  %ptrtoint233 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint234 = add i64 %ptrtoint233, 7
  %entry-point-addr235 = inttoptr i64 %entry-point-addr-uint234 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point236 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr235, align 8
  %91 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point236({}* %33, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest239 unwind label %cleanup-lpad

normal-dest239:                                   ; preds = %normal-dest232
  %.elt452 = extractvalue { {}*, i64 } %91, 0
  %.elt454 = extractvalue { {}*, i64 } %91, 1
  %cond398 = icmp eq i64 %.elt454, 0
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284188.0 = select i1 %cond398, {}* %92, {}* %.elt452
  %93 = icmp eq {}* %G284188.0, %92
  br i1 %93, label %tag28, label %tag3

normal-dest246:                                   ; preds = %tag20
  %94 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 143), align 8
  %ptrtoint247 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint248 = add i64 %ptrtoint247, 7
  %entry-point-addr249 = inttoptr i64 %entry-point-addr-uint248 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point250 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr249, align 8
  %98 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point250({}* %35, i64 5, {}* %94, {}* %95, {}* %"closure->LAMBDA", {}* %96, {}* %97)
          to label %normal-dest253 unwind label %cleanup-lpad

normal-dest253:                                   ; preds = %normal-dest246
  %.elt432 = extractvalue { {}*, i64 } %98, 0
  %.elt434 = extractvalue { {}*, i64 } %98, 1
  %cond395 = icmp eq i64 %.elt434, 0
  %99 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284196.1 = select i1 %cond395, {}* %99, {}* %.elt432
  br label %tag33

header-check-br259:                               ; preds = %header-check-br320
  %.off522 = add i64 %115, -1001
  %100 = icmp ult i64 %.off522, 5
  br i1 %100, label %maybe-more-tests267, label %tag11

maybe-more-tests267:                              ; preds = %header-check-br259
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %102 = invoke {}* @cc_safe_fdefinition({}* %101)
          to label %normal-dest94 unwind label %cleanup-lpad

normal-dest269:                                   ; preds = %tag22
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 146), align 16
  %ptrtoint270 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint271 = add i64 %ptrtoint270, 7
  %entry-point-addr272 = inttoptr i64 %entry-point-addr-uint271 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point273 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr272, align 8
  %107 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point273({}* %37, i64 5, {}* %103, {}* %104, {}* %"closure->LAMBDA", {}* %105, {}* %106)
          to label %normal-dest276 unwind label %cleanup-lpad

normal-dest276:                                   ; preds = %normal-dest269
  %.elt409 = extractvalue { {}*, i64 } %107, 0
  %.elt411 = extractvalue { {}*, i64 } %107, 1
  %cond391 = icmp eq i64 %.elt411, 0
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284224.1 = select i1 %cond391, {}* %108, {}* %.elt409
  br label %tag18

normal-dest283:                                   ; preds = %maybe-more-tests356
  %ptrtoint284 = ptrtoint {}* %124 to i64
  %entry-point-addr-uint285 = add i64 %ptrtoint284, 7
  %entry-point-addr286 = inttoptr i64 %entry-point-addr-uint285 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point287 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr286, align 8
  %109 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point287({}* %124, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest290 unwind label %cleanup-lpad

normal-dest290:                                   ; preds = %normal-dest283
  %.elt448 = extractvalue { {}*, i64 } %109, 0
  %.elt450 = extractvalue { {}*, i64 } %109, 1
  %cond397 = icmp eq i64 %.elt450, 0
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284196.2 = select i1 %cond397, {}* %110, {}* %.elt448
  br label %tag33

normal-dest297:                                   ; preds = %tag27
  %ptrtoint298 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint299 = add i64 %ptrtoint298, 7
  %entry-point-addr300 = inttoptr i64 %entry-point-addr-uint299 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point301 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr300, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point301({}* %39, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest304 unwind label %cleanup-lpad

normal-dest304:                                   ; preds = %normal-dest297
  %.elt428 = extractvalue { {}*, i64 } %111, 0
  %.elt430 = extractvalue { {}*, i64 } %111, 1
  %cond394 = icmp eq i64 %.elt430, 0
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284098.0 = select i1 %cond394, {}* %112, {}* %.elt428
  %ptrtoint312 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only313 = and i64 %ptrtoint312, 7
  %test314 = icmp eq i64 %tag-only313, 1
  br i1 %test314, label %header-check-br311, label %tag20

header-check-br311:                               ; preds = %normal-dest304
  %irc-bit-cast315 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep316 = getelementptr inbounds i8, i8* %irc-bit-cast315, i64 -9
  %irc-bit-cast317 = bitcast i8* %gep316 to i64*
  %113 = load i64, i64* %irc-bit-cast317, align 8
  %.off517 = add i64 %113, -913
  %114 = icmp ult i64 %.off517, 85
  br i1 %114, label %tag33, label %header-check-br348

header-check-br320:                               ; preds = %tag28
  %irc-bit-cast324 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep325 = getelementptr inbounds i8, i8* %irc-bit-cast324, i64 -9
  %irc-bit-cast326 = bitcast i8* %gep325 to i64*
  %115 = load i64, i64* %irc-bit-cast326, align 8
  %.off521 = add i64 %115, -913
  %116 = icmp ult i64 %.off521, 85
  br i1 %116, label %tag17, label %header-check-br259

normal-dest330:                                   ; preds = %maybe-more-tests56
  %ptrtoint331 = ptrtoint {}* %54 to i64
  %entry-point-addr-uint332 = add i64 %ptrtoint331, 7
  %entry-point-addr333 = inttoptr i64 %entry-point-addr-uint332 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point334 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr333, align 8
  %117 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point334({}* %54, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest337 unwind label %cleanup-lpad

normal-dest337:                                   ; preds = %normal-dest330
  %.elt424 = extractvalue { {}*, i64 } %117, 0
  %.elt426 = extractvalue { {}*, i64 } %117, 1
  %cond393 = icmp eq i64 %.elt426, 0
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284224.2 = select i1 %cond393, {}* %118, {}* %.elt424
  br label %tag18

normal-dest343:                                   ; preds = %tag31
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %120 = icmp eq {}* %119, %farg0
  %.val514 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284244.0 = select i1 %120, {}* %119, {}* %.val514
  %121 = icmp eq {}* %G284244.0, %.val514
  br i1 %121, label %tag4, label %tag2

header-check-br348:                               ; preds = %header-check-br311
  %.off518 = add i64 %113, -1001
  %122 = icmp ult i64 %.off518, 5
  br i1 %122, label %maybe-more-tests356, label %tag20

maybe-more-tests356:                              ; preds = %header-check-br348
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %124 = invoke {}* @cc_safe_fdefinition({}* %123)
          to label %normal-dest283 unwind label %cleanup-lpad

normal-dest358:                                   ; preds = %tag33
  %ptrtoint359 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint360 = add i64 %ptrtoint359, 7
  %entry-point-addr361 = inttoptr i64 %entry-point-addr-uint360 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point362 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr361, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point362({}* %42, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest365 unwind label %cleanup-lpad

normal-dest365:                                   ; preds = %normal-dest358
  %.elt436 = extractvalue { {}*, i64 } %125, 0
  %.elt438 = extractvalue { {}*, i64 } %125, 1
  %cond396 = icmp eq i64 %.elt438, 0
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284199.0 = select i1 %cond396, {}* %126, {}* %.elt436
  %ptrtoint371 = ptrtoint {}* %G284196.0 to i64
  %entry-point-addr-uint372 = add i64 %ptrtoint371, 7
  %entry-point-addr373 = inttoptr i64 %entry-point-addr-uint372 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point374 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr373, align 8
  %127 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point374({}* %G284196.0, i64 3, {}* %G284098.0, {}* %farg1, {}* %G284199.0, {}* null)
          to label %normal-dest377 unwind label %cleanup-lpad

normal-dest377:                                   ; preds = %normal-dest365
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 144), align 16
  %129 = invoke {}* @cc_safe_fdefinition({}* %128)
          to label %normal-dest383 unwind label %cleanup-lpad

normal-dest383:                                   ; preds = %normal-dest377
  %ptrtoint384 = ptrtoint {}* %129 to i64
  %entry-point-addr-uint385 = add i64 %ptrtoint384, 7
  %entry-point-addr386 = inttoptr i64 %entry-point-addr-uint385 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point387 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr386, align 8
  %130 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point387({}* %129, i64 1, {}* %G284098.0, {}* null, {}* null, {}* null)
          to label %normal-dest390 unwind label %cleanup-lpad

normal-dest390:                                   ; preds = %normal-dest383
  %.elt444 = extractvalue { {}*, i64 } %130, 0
  %131 = ptrtoint {}* %.elt444 to i64
  %.elt446 = extractvalue { {}*, i64 } %130, 1
  br label %tag9
}

declare {}* @cc_safe_symbol_value({}*) local_unnamed_addr #3

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.8"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !40 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %tag1
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest22 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest116, %process-rest-argument
  %11 = phi {}* [ %21, %process-rest-argument ], [ %59, %normal-dest116 ]
  %format-arg-284090.0 = phi {}* [ %format-arg-284090.1160, %process-rest-argument ], [ %format-arg-284090.2, %normal-dest116 ]
  %12 = icmp eq {}* %G284094.0, %11
  br i1 %12, label %tag, label %tag2

tag2:                                             ; preds = %normal-dest25, %tag1
  %format-arg-284091.0 = phi {}* [ %format-arg-284091.1, %tag1 ], [ %format-arg-284091.2, %normal-dest25 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 126), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest29 unwind label %cleanup-lpad

tag3:                                             ; preds = %process-rest-argument
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest109 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest109, %tag3, %normal-dest94, %normal-dest88, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %normal-dest42, %normal-dest36, %normal-dest29, %tag2, %normal-dest22, %tag, %error
  %17 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %17

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-cont.thread, label %opt-cont

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-cont.thread:                                  ; preds = %continue
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

opt-cont:                                         ; preds = %continue
  %rem-nargs8 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-19 = add i64 %rem-nargs8, -1
  store i64 %rem-nargs-19, i64* %"remaining-nargs*", align 8
  %vaarg10 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args15 = icmp sgt i64 %nargs, 2
  br i1 %enough-given-args15, label %opt-arg12, label %opt-cont.opt-init13_crit_edge

opt-cont.opt-init13_crit_edge:                    ; preds = %opt-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

opt-arg12:                                        ; preds = %opt-cont
  %rem-nargs16 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-117 = add i64 %rem-nargs16, -1
  store i64 %rem-nargs-117, i64* %"remaining-nargs*", align 8
  %vaarg18 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-cont.thread, %opt-cont.opt-init13_crit_edge, %opt-arg12
  %format-arg-284090.1160 = phi {}* [ %vaarg10, %opt-arg12 ], [ undef, %opt-cont.thread ], [ %vaarg10, %opt-cont.opt-init13_crit_edge ]
  %G284095.0158 = phi {}* [ %18, %opt-arg12 ], [ %19, %opt-cont.thread ], [ %18, %opt-cont.opt-init13_crit_edge ]
  %format-arg-284091.1 = phi {}* [ %vaarg18, %opt-arg12 ], [ undef, %opt-cont.thread ], [ undef, %opt-cont.opt-init13_crit_edge ]
  %G284094.0 = phi {}* [ %18, %opt-arg12 ], [ %19, %opt-cont.thread ], [ %.pre, %opt-cont.opt-init13_crit_edge ]
  %20 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %22 = icmp eq {}* %G284095.0158, %21
  br i1 %22, label %tag3, label %tag1

normal-dest22:                                    ; preds = %tag
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 123), align 8
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %23, {}* %24, {}* %25, {}* %26, {}* %27, {}* %28, {}* inttoptr (i64 72 to {}*))
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest22
  %.elt149 = extractvalue { {}*, i64 } %29, 0
  %.elt151 = extractvalue { {}*, i64 } %29, 1
  %cond = icmp eq i64 %.elt151, 0
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284091.2 = select i1 %cond, {}* %30, {}* %.elt149
  br label %tag2

normal-dest29:                                    ; preds = %tag2
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 128), align 16
  %ptrtoint30 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint31 = add i64 %ptrtoint30, 7
  %entry-point-addr32 = inttoptr i64 %entry-point-addr-uint31 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point33 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr32, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point33({}* %14, i64 2, {}* %31, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest36 unwind label %cleanup-lpad

normal-dest36:                                    ; preds = %normal-dest29
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 129), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest36
  %ptrtoint43 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %34, i64 2, {}* %format-arg-284090.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %normal-dest42
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 126), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 131), align 8
  %ptrtoint56 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %37, i64 2, {}* %38, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 129), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %ptrtoint69 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %41, i64 2, {}* %format-arg-284091.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 126), align 16
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 132), align 16
  %ptrtoint82 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %44, i64 2, {}* %45, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 133), align 8
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest94 unwind label %cleanup-lpad

normal-dest94:                                    ; preds = %normal-dest88
  %ptrtoint95 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint96 = add i64 %ptrtoint95, 7
  %entry-point-addr97 = inttoptr i64 %entry-point-addr-uint96 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point98 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr97, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point98({}* %48, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest101 unwind label %cleanup-lpad

normal-dest101:                                   ; preds = %normal-dest94
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %50 = insertvalue { {}*, i64 } undef, {}* %20, 0
  %51 = insertvalue { {}*, i64 } %50, i64 1, 1
  ret { {}*, i64 } %51

normal-dest109:                                   ; preds = %tag3
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 123), align 8
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint110 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint111 = add i64 %ptrtoint110, 7
  %entry-point-addr112 = inttoptr i64 %entry-point-addr-uint111 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point113 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr112, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point113({}* %16, i64 7, {}* %52, {}* %53, {}* %54, {}* %55, {}* %56, {}* %57, {}* inttoptr (i64 56 to {}*))
          to label %normal-dest116 unwind label %cleanup-lpad

normal-dest116:                                   ; preds = %normal-dest109
  %.elt153 = extractvalue { {}*, i64 } %58, 0
  %.elt155 = extractvalue { {}*, i64 } %58, 1
  %cond122 = icmp eq i64 %.elt155, 0
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284090.2 = select i1 %cond122, {}* %59, {}* %.elt153
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^52^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !41 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^52^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br86
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G284343.0 = phi {}* [ %18, %header-check-br ], [ %G284343.1, %normal-dest17 ], [ %G284343.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 188), align 16
  %ptrtoint34 = ptrtoint {}* %G284343.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G284343.0, i64 2, {}* %"closure->B=WERTBINDUNG-SICHERN", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest72, %normal-dest66, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag2, %normal-dest21, %maybe-more-tests94, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 188), align 16
  %"closure->B=WERTBINDUNG-SICHERN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 1722, i64 52, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br86

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 187), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284343.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest21:                                    ; preds = %maybe-more-tests94
  %ptrtoint22 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt118 = extractvalue { {}*, i64 } %27, 0
  %.elt120 = extractvalue { {}*, i64 } %27, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284343.2 = select i1 %cond95, {}* %28, {}* %.elt118
  br label %tag2

normal-dest40:                                    ; preds = %tag2
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 190), align 16
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->B=WERTBINDUNG-SICHERN", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 193), align 8
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->B=WERTBINDUNG-SICHERN", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest72 unwind label %cleanup-lpad

normal-dest72:                                    ; preds = %normal-dest66
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 188), align 16
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 194), align 16
  %ptrtoint73 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint74 = add i64 %ptrtoint73, 7
  %entry-point-addr75 = inttoptr i64 %entry-point-addr-uint74 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point76 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr75, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point76({}* %38, i64 3, {}* %39, {}* %40, {}* %41, {}* null)
          to label %normal-dest79 unwind label %cleanup-lpad

normal-dest79:                                    ; preds = %normal-dest72
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %43, {}* inttoptr (i64 208 to {}*))
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 188), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %45 = insertvalue { {}*, i64 } undef, {}* %44, 0
  %46 = insertvalue { {}*, i64 } %45, i64 1, 1
  ret { {}*, i64 } %46

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !42 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc498 unwind label %cleanup-lpad

.noexc498:                                        ; preds = %13
  unreachable

tag2:                                             ; preds = %normal-dest235, %header-check-br
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest63 unwind label %cleanup-lpad

tag5:                                             ; preds = %header-check-br341, %normal-dest166, %normal-dest53
  %G284363.0 = phi {}* [ %G284363.1, %normal-dest53 ], [ %G284363.2, %normal-dest166 ], [ %"closure->LAMBDA", %header-check-br341 ]
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 182), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest86 unwind label %cleanup-lpad

tag10:                                            ; preds = %normal-dest186
  %18 = icmp eq {}* %.val514, %farg0
  %G284434.0 = select i1 %18, {}* %86, {}* %.val514
  %19 = icmp eq {}* %G284434.0, %.val514
  br i1 %19, label %tag14, label %tag33

tag14:                                            ; preds = %tag10
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest129 unwind label %cleanup-lpad

tag15:                                            ; preds = %normal-dest42
  %22 = ptrtoint {}* %47 to i64
  br label %tag22

tag16:                                            ; preds = %normal-dest367, %header-check-br191
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest145 unwind label %cleanup-lpad

tag17:                                            ; preds = %tag31, %header-check-br76
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest159 unwind label %cleanup-lpad

tag19:                                            ; preds = %normal-dest42
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %27, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.9", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.9^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 1722, i64 52, i64 0, i64 0)
          to label %normal-dest186 unwind label %cleanup-lpad

tag22:                                            ; preds = %normal-dest320, %normal-dest284, %normal-dest220, %tag15, %normal-dest105
  %return-value.sroa.42.0 = phi i64 [ 1, %tag15 ], [ 1, %normal-dest105 ], [ 1, %normal-dest220 ], [ %.elt446, %normal-dest284 ], [ 1, %normal-dest320 ]
  %return-value.sroa.0.0 = phi i64 [ %22, %tag15 ], [ %66, %normal-dest105 ], [ %95, %normal-dest220 ], [ %106, %normal-dest284 ], [ %114, %normal-dest320 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %28 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %29 = insertvalue { {}*, i64 } undef, {}* %28, 0
  %30 = insertvalue { {}*, i64 } %29, i64 %return-value.sroa.42.0, 1
  ret { {}*, i64 } %30

tag24:                                            ; preds = %normal-dest293, %header-check-br241, %normal-dest70
  %G284383.0 = phi {}* [ %G284383.1, %normal-dest70 ], [ %"closure->LAMBDA", %header-check-br241 ], [ %G284383.2, %normal-dest293 ]
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 182), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest201 unwind label %cleanup-lpad

tag26:                                            ; preds = %normal-dest136
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 138), align 16
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest228 unwind label %cleanup-lpad

tag27:                                            ; preds = %header-check-br373, %normal-dest152, %normal-dest120
  %G284413.0 = phi {}* [ %G284413.1, %normal-dest120 ], [ %G284413.2, %normal-dest152 ], [ %"closure->LAMBDA", %header-check-br373 ]
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 182), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest252 unwind label %cleanup-lpad

tag29:                                            ; preds = %header-check-br382, %normal-dest335, %normal-dest180
  %G284441.0 = phi {}* [ %G284441.1, %normal-dest180 ], [ %G284441.2, %normal-dest335 ], [ %"closure->LAMBDA", %header-check-br382 ]
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 147), align 8
  %38 = invoke {}* @cc_safe_symbol_value({}* %37)
          to label %normal-dest299 unwind label %cleanup-lpad

tag30:                                            ; preds = %tag34, %header-check-br350
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest328 unwind label %cleanup-lpad

tag31:                                            ; preds = %normal-dest136
  %ptrtoint342 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only343 = and i64 %ptrtoint342, 7
  %test344 = icmp eq i64 %tag-only343, 1
  br i1 %test344, label %header-check-br341, label %tag17

tag33:                                            ; preds = %tag10
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 141), align 8
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest360 unwind label %cleanup-lpad

tag34:                                            ; preds = %normal-dest186
  %ptrtoint383 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only384 = and i64 %ptrtoint383, 7
  %test385 = icmp eq i64 %tag-only384, 1
  br i1 %test385, label %header-check-br382, label %tag30

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest360, %tag33, %normal-dest328, %tag30, %normal-dest308, %normal-dest301, %normal-dest299, %tag29, %normal-dest286, %maybe-more-tests, %normal-dest277, %normal-dest271, %normal-dest259, %normal-dest252, %tag27, %normal-dest228, %tag26, %normal-dest208, %normal-dest201, %tag24, %tag19, %normal-dest173, %maybe-more-tests358, %normal-dest159, %tag17, %normal-dest145, %tag16, %normal-dest129, %tag14, %normal-dest113, %maybe-more-tests199, %normal-dest93, %normal-dest86, %tag5, %normal-dest63, %tag2, %normal-dest46, %maybe-more-tests84, %normal-dest39, %normal-dest
  %43 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %43

normal-dest:                                      ; preds = %11
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 175), align 8
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %45 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %45, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest39
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt407 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt407, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284514.0 = select i1 %cond, {}* %47, {}* %.elt
  %48 = icmp eq {}* %G284514.0, %47
  br i1 %48, label %tag15, label %tag19

normal-dest46:                                    ; preds = %maybe-more-tests84
  %ptrtoint47 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %62, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %.elt488 = extractvalue { {}*, i64 } %49, 0
  %.elt490 = extractvalue { {}*, i64 } %49, 1
  %cond405 = icmp eq i64 %.elt490, 0
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284363.1 = select i1 %cond405, {}* %50, {}* %.elt488
  br label %tag5

header-check-br:                                  ; preds = %header-check-br241
  %.off520 = add i64 %98, -1001
  %51 = icmp ult i64 %.off520, 5
  br i1 %51, label %maybe-more-tests, label %tag2

maybe-more-tests:                                 ; preds = %header-check-br
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest286 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %tag2
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 184), align 16
  %ptrtoint64 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint65 = add i64 %ptrtoint64, 7
  %entry-point-addr66 = inttoptr i64 %entry-point-addr-uint65 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point67 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr66, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point67({}* %15, i64 5, {}* %54, {}* %55, {}* %"closure->LAMBDA", {}* %56, {}* %57)
          to label %normal-dest70 unwind label %cleanup-lpad

normal-dest70:                                    ; preds = %normal-dest63
  %.elt460 = extractvalue { {}*, i64 } %58, 0
  %.elt462 = extractvalue { {}*, i64 } %58, 1
  %cond400 = icmp eq i64 %.elt462, 0
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284383.1 = select i1 %cond400, {}* %59, {}* %.elt460
  br label %tag24

header-check-br76:                                ; preds = %header-check-br341
  %.off522 = add i64 %121, -1001
  %60 = icmp ult i64 %.off522, 5
  br i1 %60, label %maybe-more-tests84, label %tag17

maybe-more-tests84:                               ; preds = %header-check-br76
  %61 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest86:                                    ; preds = %tag5
  %ptrtoint87 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint88 = add i64 %ptrtoint87, 7
  %entry-point-addr89 = inttoptr i64 %entry-point-addr-uint88 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point90 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr89, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point90({}* %17, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest93 unwind label %cleanup-lpad

normal-dest93:                                    ; preds = %normal-dest86
  %.elt480 = extractvalue { {}*, i64 } %63, 0
  %.elt482 = extractvalue { {}*, i64 } %63, 1
  %cond404 = icmp eq i64 %.elt482, 0
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284366.0 = select i1 %cond404, {}* %64, {}* %.elt480
  %ptrtoint99 = ptrtoint {}* %G284363.0 to i64
  %entry-point-addr-uint100 = add i64 %ptrtoint99, 7
  %entry-point-addr101 = inttoptr i64 %entry-point-addr-uint100 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point102 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr101, align 8
  %65 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point102({}* %G284363.0, i64 3, {}* %farg0, {}* %farg1, {}* %G284366.0, {}* null)
          to label %normal-dest105 unwind label %cleanup-lpad

normal-dest105:                                   ; preds = %normal-dest93
  %66 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag22

normal-dest113:                                   ; preds = %maybe-more-tests199
  %ptrtoint114 = ptrtoint {}* %91 to i64
  %entry-point-addr-uint115 = add i64 %ptrtoint114, 7
  %entry-point-addr116 = inttoptr i64 %entry-point-addr-uint115 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point117 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr116, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point117({}* %91, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest120 unwind label %cleanup-lpad

normal-dest120:                                   ; preds = %normal-dest113
  %.elt448 = extractvalue { {}*, i64 } %67, 0
  %.elt450 = extractvalue { {}*, i64 } %67, 1
  %cond397 = icmp eq i64 %.elt450, 0
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284413.1 = select i1 %cond397, {}* %68, {}* %.elt448
  br label %tag27

normal-dest129:                                   ; preds = %tag14
  %ptrtoint130 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint131 = add i64 %ptrtoint130, 7
  %entry-point-addr132 = inttoptr i64 %entry-point-addr-uint131 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point133 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr132, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point133({}* %21, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest136 unwind label %cleanup-lpad

normal-dest136:                                   ; preds = %normal-dest129
  %.elt452 = extractvalue { {}*, i64 } %69, 0
  %.elt454 = extractvalue { {}*, i64 } %69, 1
  %cond398 = icmp eq i64 %.elt454, 0
  %70 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284405.0 = select i1 %cond398, {}* %70, {}* %.elt452
  %71 = icmp eq {}* %G284405.0, %70
  br i1 %71, label %tag31, label %tag26

normal-dest145:                                   ; preds = %tag16
  %72 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %75 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 185), align 8
  %ptrtoint146 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint147 = add i64 %ptrtoint146, 7
  %entry-point-addr148 = inttoptr i64 %entry-point-addr-uint147 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point149 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr148, align 8
  %76 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point149({}* %24, i64 5, {}* %72, {}* %73, {}* %"closure->LAMBDA", {}* %74, {}* %75)
          to label %normal-dest152 unwind label %cleanup-lpad

normal-dest152:                                   ; preds = %normal-dest145
  %.elt432 = extractvalue { {}*, i64 } %76, 0
  %.elt434 = extractvalue { {}*, i64 } %76, 1
  %cond395 = icmp eq i64 %.elt434, 0
  %77 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284413.2 = select i1 %cond395, {}* %77, {}* %.elt432
  br label %tag27

normal-dest159:                                   ; preds = %tag17
  %78 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 181), align 8
  %ptrtoint160 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint161 = add i64 %ptrtoint160, 7
  %entry-point-addr162 = inttoptr i64 %entry-point-addr-uint161 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point163 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr162, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point163({}* %26, i64 5, {}* %78, {}* %79, {}* %"closure->LAMBDA", {}* %80, {}* %81)
          to label %normal-dest166 unwind label %cleanup-lpad

normal-dest166:                                   ; preds = %normal-dest159
  %.elt476 = extractvalue { {}*, i64 } %82, 0
  %.elt478 = extractvalue { {}*, i64 } %82, 1
  %cond403 = icmp eq i64 %.elt478, 0
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284363.2 = select i1 %cond403, {}* %83, {}* %.elt476
  br label %tag5

normal-dest173:                                   ; preds = %maybe-more-tests358
  %ptrtoint174 = ptrtoint {}* %125 to i64
  %entry-point-addr-uint175 = add i64 %ptrtoint174, 7
  %entry-point-addr176 = inttoptr i64 %entry-point-addr-uint175 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point177 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr176, align 8
  %84 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point177({}* %125, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest180 unwind label %cleanup-lpad

normal-dest180:                                   ; preds = %normal-dest173
  %.elt424 = extractvalue { {}*, i64 } %84, 0
  %.elt426 = extractvalue { {}*, i64 } %84, 1
  %cond393 = icmp eq i64 %.elt426, 0
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284441.1 = select i1 %cond393, {}* %85, {}* %.elt424
  br label %tag29

normal-dest186:                                   ; preds = %tag19
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %87 = icmp eq {}* %86, %farg0
  %.val514 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284461.0 = select i1 %87, {}* %86, {}* %.val514
  %88 = icmp eq {}* %G284461.0, %.val514
  br i1 %88, label %tag10, label %tag34

header-check-br191:                               ; preds = %header-check-br373
  %.off518 = add i64 %128, -1001
  %89 = icmp ult i64 %.off518, 5
  br i1 %89, label %maybe-more-tests199, label %tag16

maybe-more-tests199:                              ; preds = %header-check-br191
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %91 = invoke {}* @cc_safe_fdefinition({}* %90)
          to label %normal-dest113 unwind label %cleanup-lpad

normal-dest201:                                   ; preds = %tag24
  %ptrtoint202 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint203 = add i64 %ptrtoint202, 7
  %entry-point-addr204 = inttoptr i64 %entry-point-addr-uint203 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point205 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr204, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point205({}* %32, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest208 unwind label %cleanup-lpad

normal-dest208:                                   ; preds = %normal-dest201
  %.elt464 = extractvalue { {}*, i64 } %92, 0
  %.elt466 = extractvalue { {}*, i64 } %92, 1
  %cond401 = icmp eq i64 %.elt466, 0
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284386.0 = select i1 %cond401, {}* %93, {}* %.elt464
  %ptrtoint214 = ptrtoint {}* %G284383.0 to i64
  %entry-point-addr-uint215 = add i64 %ptrtoint214, 7
  %entry-point-addr216 = inttoptr i64 %entry-point-addr-uint215 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point217 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr216, align 8
  %94 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point217({}* %G284383.0, i64 3, {}* %OUT284305.0, {}* %farg1, {}* %G284386.0, {}* null)
          to label %normal-dest220 unwind label %cleanup-lpad

normal-dest220:                                   ; preds = %normal-dest208
  %95 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag22

normal-dest228:                                   ; preds = %tag26
  %ptrtoint229 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint230 = add i64 %ptrtoint229, 7
  %entry-point-addr231 = inttoptr i64 %entry-point-addr-uint230 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point232 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr231, align 8
  %96 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point232({}* %34, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest235 unwind label %cleanup-lpad

normal-dest235:                                   ; preds = %normal-dest228
  %.elt456 = extractvalue { {}*, i64 } %96, 0
  %.elt458 = extractvalue { {}*, i64 } %96, 1
  %cond399 = icmp eq i64 %.elt458, 0
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUT284305.0 = select i1 %cond399, {}* %97, {}* %.elt456
  %ptrtoint242 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only243 = and i64 %ptrtoint242, 7
  %test244 = icmp eq i64 %tag-only243, 1
  br i1 %test244, label %header-check-br241, label %tag2

header-check-br241:                               ; preds = %normal-dest235
  %irc-bit-cast245 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep246 = getelementptr inbounds i8, i8* %irc-bit-cast245, i64 -9
  %irc-bit-cast247 = bitcast i8* %gep246 to i64*
  %98 = load i64, i64* %irc-bit-cast247, align 8
  %.off519 = add i64 %98, -913
  %99 = icmp ult i64 %.off519, 85
  br i1 %99, label %tag24, label %header-check-br

normal-dest252:                                   ; preds = %tag27
  %ptrtoint253 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint254 = add i64 %ptrtoint253, 7
  %entry-point-addr255 = inttoptr i64 %entry-point-addr-uint254 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point256 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr255, align 8
  %100 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point256({}* %36, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest259 unwind label %cleanup-lpad

normal-dest259:                                   ; preds = %normal-dest252
  %.elt436 = extractvalue { {}*, i64 } %100, 0
  %.elt438 = extractvalue { {}*, i64 } %100, 1
  %cond396 = icmp eq i64 %.elt438, 0
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284416.0 = select i1 %cond396, {}* %101, {}* %.elt436
  %ptrtoint265 = ptrtoint {}* %G284413.0 to i64
  %entry-point-addr-uint266 = add i64 %ptrtoint265, 7
  %entry-point-addr267 = inttoptr i64 %entry-point-addr-uint266 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point268 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr267, align 8
  %102 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point268({}* %G284413.0, i64 3, {}* %G284315.0, {}* %farg1, {}* %G284416.0, {}* null)
          to label %normal-dest271 unwind label %cleanup-lpad

normal-dest271:                                   ; preds = %normal-dest259
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 144), align 16
  %104 = invoke {}* @cc_safe_fdefinition({}* %103)
          to label %normal-dest277 unwind label %cleanup-lpad

normal-dest277:                                   ; preds = %normal-dest271
  %ptrtoint278 = ptrtoint {}* %104 to i64
  %entry-point-addr-uint279 = add i64 %ptrtoint278, 7
  %entry-point-addr280 = inttoptr i64 %entry-point-addr-uint279 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point281 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr280, align 8
  %105 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point281({}* %104, i64 1, {}* %G284315.0, {}* null, {}* null, {}* null)
          to label %normal-dest284 unwind label %cleanup-lpad

normal-dest284:                                   ; preds = %normal-dest277
  %.elt444 = extractvalue { {}*, i64 } %105, 0
  %106 = ptrtoint {}* %.elt444 to i64
  %.elt446 = extractvalue { {}*, i64 } %105, 1
  br label %tag22

normal-dest286:                                   ; preds = %maybe-more-tests
  %ptrtoint287 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint288 = add i64 %ptrtoint287, 7
  %entry-point-addr289 = inttoptr i64 %entry-point-addr-uint288 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point290 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr289, align 8
  %107 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point290({}* %53, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest293 unwind label %cleanup-lpad

normal-dest293:                                   ; preds = %normal-dest286
  %.elt472 = extractvalue { {}*, i64 } %107, 0
  %.elt474 = extractvalue { {}*, i64 } %107, 1
  %cond402 = icmp eq i64 %.elt474, 0
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284383.2 = select i1 %cond402, {}* %108, {}* %.elt472
  br label %tag24

normal-dest299:                                   ; preds = %tag29
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 182), align 16
  %110 = invoke {}* @cc_safe_fdefinition({}* %109)
          to label %normal-dest301 unwind label %cleanup-lpad

normal-dest301:                                   ; preds = %normal-dest299
  %ptrtoint302 = ptrtoint {}* %110 to i64
  %entry-point-addr-uint303 = add i64 %ptrtoint302, 7
  %entry-point-addr304 = inttoptr i64 %entry-point-addr-uint303 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point305 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr304, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point305({}* %110, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest308 unwind label %cleanup-lpad

normal-dest308:                                   ; preds = %normal-dest301
  %.elt413 = extractvalue { {}*, i64 } %111, 0
  %.elt415 = extractvalue { {}*, i64 } %111, 1
  %cond392 = icmp eq i64 %.elt415, 0
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284444.0 = select i1 %cond392, {}* %112, {}* %.elt413
  %ptrtoint314 = ptrtoint {}* %G284441.0 to i64
  %entry-point-addr-uint315 = add i64 %ptrtoint314, 7
  %entry-point-addr316 = inttoptr i64 %entry-point-addr-uint315 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point317 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr316, align 8
  %113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point317({}* %G284441.0, i64 3, {}* %38, {}* %farg1, {}* %G284444.0, {}* null)
          to label %normal-dest320 unwind label %cleanup-lpad

normal-dest320:                                   ; preds = %normal-dest308
  %114 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag22

normal-dest328:                                   ; preds = %tag30
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 186), align 16
  %ptrtoint329 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint330 = add i64 %ptrtoint329, 7
  %entry-point-addr331 = inttoptr i64 %entry-point-addr-uint330 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point332 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr331, align 8
  %119 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point332({}* %40, i64 5, {}* %115, {}* %116, {}* %"closure->LAMBDA", {}* %117, {}* %118)
          to label %normal-dest335 unwind label %cleanup-lpad

normal-dest335:                                   ; preds = %normal-dest328
  %.elt409 = extractvalue { {}*, i64 } %119, 0
  %.elt411 = extractvalue { {}*, i64 } %119, 1
  %cond391 = icmp eq i64 %.elt411, 0
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284441.2 = select i1 %cond391, {}* %120, {}* %.elt409
  br label %tag29

header-check-br341:                               ; preds = %tag31
  %irc-bit-cast345 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep346 = getelementptr inbounds i8, i8* %irc-bit-cast345, i64 -9
  %irc-bit-cast347 = bitcast i8* %gep346 to i64*
  %121 = load i64, i64* %irc-bit-cast347, align 8
  %.off521 = add i64 %121, -913
  %122 = icmp ult i64 %.off521, 85
  br i1 %122, label %tag5, label %header-check-br76

header-check-br350:                               ; preds = %header-check-br382
  %.off515 = add i64 %130, -1001
  %123 = icmp ult i64 %.off515, 5
  br i1 %123, label %maybe-more-tests358, label %tag30

maybe-more-tests358:                              ; preds = %header-check-br350
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %125 = invoke {}* @cc_safe_fdefinition({}* %124)
          to label %normal-dest173 unwind label %cleanup-lpad

normal-dest360:                                   ; preds = %tag33
  %ptrtoint361 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint362 = add i64 %ptrtoint361, 7
  %entry-point-addr363 = inttoptr i64 %entry-point-addr-uint362 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point364 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr363, align 8
  %126 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point364({}* %42, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest367 unwind label %cleanup-lpad

normal-dest367:                                   ; preds = %normal-dest360
  %.elt428 = extractvalue { {}*, i64 } %126, 0
  %.elt430 = extractvalue { {}*, i64 } %126, 1
  %cond394 = icmp eq i64 %.elt430, 0
  %127 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284315.0 = select i1 %cond394, {}* %127, {}* %.elt428
  %ptrtoint374 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only375 = and i64 %ptrtoint374, 7
  %test376 = icmp eq i64 %tag-only375, 1
  br i1 %test376, label %header-check-br373, label %tag16

header-check-br373:                               ; preds = %normal-dest367
  %irc-bit-cast377 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep378 = getelementptr inbounds i8, i8* %irc-bit-cast377, i64 -9
  %irc-bit-cast379 = bitcast i8* %gep378 to i64*
  %128 = load i64, i64* %irc-bit-cast379, align 8
  %.off517 = add i64 %128, -913
  %129 = icmp ult i64 %.off517, 85
  br i1 %129, label %tag27, label %header-check-br191

header-check-br382:                               ; preds = %tag34
  %irc-bit-cast386 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep387 = getelementptr inbounds i8, i8* %irc-bit-cast386, i64 -9
  %irc-bit-cast388 = bitcast i8* %gep387 to i64*
  %130 = load i64, i64* %irc-bit-cast388, align 8
  %.off = add i64 %130, -913
  %131 = icmp ult i64 %.off, 85
  br i1 %131, label %tag29, label %header-check-br350
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.9"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !43 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %tag2
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest22 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest25, %tag2
  %format-arg-284308.0 = phi {}* [ %format-arg-284308.1, %tag2 ], [ %format-arg-284308.2, %normal-dest25 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 126), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest29 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest116, %process-rest-argument
  %13 = phi {}* [ %21, %process-rest-argument ], [ %59, %normal-dest116 ]
  %format-arg-284307.0 = phi {}* [ %format-arg-284307.1160, %process-rest-argument ], [ %format-arg-284307.2, %normal-dest116 ]
  %14 = icmp eq {}* %G284311.0, %13
  br i1 %14, label %tag, label %tag1

tag3:                                             ; preds = %process-rest-argument
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest109 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest109, %tag3, %normal-dest94, %normal-dest88, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %normal-dest42, %normal-dest36, %normal-dest29, %tag1, %normal-dest22, %tag, %error
  %17 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %17

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-cont.thread, label %opt-cont

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-cont.thread:                                  ; preds = %continue
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

opt-cont:                                         ; preds = %continue
  %rem-nargs8 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-19 = add i64 %rem-nargs8, -1
  store i64 %rem-nargs-19, i64* %"remaining-nargs*", align 8
  %vaarg10 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args15 = icmp sgt i64 %nargs, 2
  br i1 %enough-given-args15, label %opt-arg12, label %opt-cont.opt-init13_crit_edge

opt-cont.opt-init13_crit_edge:                    ; preds = %opt-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

opt-arg12:                                        ; preds = %opt-cont
  %rem-nargs16 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-117 = add i64 %rem-nargs16, -1
  store i64 %rem-nargs-117, i64* %"remaining-nargs*", align 8
  %vaarg18 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-cont.thread, %opt-cont.opt-init13_crit_edge, %opt-arg12
  %format-arg-284307.1160 = phi {}* [ %vaarg10, %opt-arg12 ], [ undef, %opt-cont.thread ], [ %vaarg10, %opt-cont.opt-init13_crit_edge ]
  %G284312.0158 = phi {}* [ %18, %opt-arg12 ], [ %19, %opt-cont.thread ], [ %18, %opt-cont.opt-init13_crit_edge ]
  %format-arg-284308.1 = phi {}* [ %vaarg18, %opt-arg12 ], [ undef, %opt-cont.thread ], [ undef, %opt-cont.opt-init13_crit_edge ]
  %G284311.0 = phi {}* [ %18, %opt-arg12 ], [ %19, %opt-cont.thread ], [ %.pre, %opt-cont.opt-init13_crit_edge ]
  %20 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %22 = icmp eq {}* %G284312.0158, %21
  br i1 %22, label %tag3, label %tag2

normal-dest22:                                    ; preds = %tag
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 177), align 8
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %23, {}* %24, {}* %25, {}* %26, {}* %27, {}* %28, {}* inttoptr (i64 44 to {}*))
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest22
  %.elt149 = extractvalue { {}*, i64 } %29, 0
  %.elt151 = extractvalue { {}*, i64 } %29, 1
  %cond = icmp eq i64 %.elt151, 0
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284308.2 = select i1 %cond, {}* %30, {}* %.elt149
  br label %tag1

normal-dest29:                                    ; preds = %tag1
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 178), align 16
  %ptrtoint30 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint31 = add i64 %ptrtoint30, 7
  %entry-point-addr32 = inttoptr i64 %entry-point-addr-uint31 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point33 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr32, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point33({}* %12, i64 2, {}* %31, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest36 unwind label %cleanup-lpad

normal-dest36:                                    ; preds = %normal-dest29
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 129), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest36
  %ptrtoint43 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %34, i64 2, {}* %format-arg-284307.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %normal-dest42
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 126), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 179), align 8
  %ptrtoint56 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %37, i64 2, {}* %38, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 129), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %ptrtoint69 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %41, i64 2, {}* %format-arg-284308.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 126), align 16
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 180), align 16
  %ptrtoint82 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %44, i64 2, {}* %45, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 133), align 8
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest94 unwind label %cleanup-lpad

normal-dest94:                                    ; preds = %normal-dest88
  %ptrtoint95 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint96 = add i64 %ptrtoint95, 7
  %entry-point-addr97 = inttoptr i64 %entry-point-addr-uint96 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point98 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr97, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point98({}* %48, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest101 unwind label %cleanup-lpad

normal-dest101:                                   ; preds = %normal-dest94
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %50 = insertvalue { {}*, i64 } undef, {}* %20, 0
  %51 = insertvalue { {}*, i64 } %50, i64 1, 1
  ret { {}*, i64 } %51

normal-dest109:                                   ; preds = %tag3
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 177), align 8
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint110 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint111 = add i64 %ptrtoint110, 7
  %entry-point-addr112 = inttoptr i64 %entry-point-addr-uint111 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point113 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr112, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point113({}* %16, i64 7, {}* %52, {}* %53, {}* %54, {}* %55, {}* %56, {}* %57, {}* inttoptr (i64 28 to {}*))
          to label %normal-dest116 unwind label %cleanup-lpad

normal-dest116:                                   ; preds = %normal-dest109
  %.elt153 = extractvalue { {}*, i64 } %58, 0
  %.elt155 = extractvalue { {}*, i64 } %58, 1
  %cond122 = icmp eq i64 %.elt155, 0
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284307.2 = select i1 %cond122, {}* %59, {}* %.elt153
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^58^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !44 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^58^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br72
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G284559.0 = phi {}* [ %18, %header-check-br ], [ %G284559.1, %normal-dest17 ], [ %G284559.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 225), align 8
  %ptrtoint20 = ptrtoint {}* %G284559.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G284559.0, i64 2, {}* %"closure->B=FUNKTIONSBINDUNG-SICHERN", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests80, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 225), align 8
  %"closure->B=FUNKTIONSBINDUNG-SICHERN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 1975, i64 58, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br72

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 224), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284559.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 227), align 8
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->B=FUNKTIONSBINDUNG-SICHERN", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 230), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->B=FUNKTIONSBINDUNG-SICHERN", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 225), align 8
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 231), align 8
  %ptrtoint59 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %36, i64 3, {}* %37, {}* %38, {}* %39, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %41, {}* inttoptr (i64 232 to {}*))
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 225), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %45 = icmp ult i64 %.off123, 5
  br i1 %45, label %maybe-more-tests80, label %tag

maybe-more-tests80:                               ; preds = %header-check-br72
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %maybe-more-tests80
  %ptrtoint83 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %47, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284559.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !45 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc568 unwind label %cleanup-lpad

.noexc568:                                        ; preds = %13
  unreachable

tag4:                                             ; preds = %normal-dest176
  %ptrtoint92 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only93 = and i64 %ptrtoint92, 7
  %test94 = icmp eq i64 %tag-only93, 1
  br i1 %test94, label %header-check-br91, label %tag52

tag8:                                             ; preds = %normal-dest383, %header-check-br130
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest103 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest408, %normal-dest302, %header-check-br91
  %G284646.0 = phi {}* [ %"closure->LAMBDA", %header-check-br91 ], [ %G284646.1, %normal-dest302 ], [ %G284646.2, %normal-dest408 ]
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 147), align 8
  %17 = invoke {}* @cc_safe_symbol_value({}* %16)
          to label %normal-dest116 unwind label %cleanup-lpad

tag15:                                            ; preds = %header-check-br264, %header-check-br264, %header-check-br264, %header-check-br264
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 217), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest163 unwind label %cleanup-lpad

tag17:                                            ; preds = %tag29
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %20, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.10", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.10^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 1975, i64 58, i64 0, i64 0)
          to label %normal-dest176 unwind label %cleanup-lpad

tag20:                                            ; preds = %normal-dest461, %normal-dest279, %header-check-br255
  %G284622.0 = phi {}* [ %"closure->LAMBDA", %header-check-br255 ], [ %G284622.1, %normal-dest279 ], [ %G284622.2, %normal-dest461 ]
  %ptrtoint179 = ptrtoint {}* %G284622.0 to i64
  %entry-point-addr-uint180 = add i64 %ptrtoint179, 7
  %entry-point-addr181 = inttoptr i64 %entry-point-addr-uint180 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point182 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr181, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point182({}* %G284622.0, i64 2, {}* %G284531.0, {}* %.in, {}* null, {}* null)
          to label %normal-dest185 unwind label %cleanup-lpad

tag21:                                            ; preds = %tag34
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest200 unwind label %cleanup-lpad

tag22:                                            ; preds = %tag31, %header-check-br330
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest214 unwind label %cleanup-lpad

tag25:                                            ; preds = %tag34
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 141), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest242 unwind label %cleanup-lpad

tag28:                                            ; preds = %tag29, %normal-dest426, %tag55, %normal-dest347, %normal-dest198, %normal-dest123
  %return-value.sroa.39.0 = phi i64 [ 1, %tag55 ], [ 1, %normal-dest426 ], [ 1, %normal-dest347 ], [ %.elt516, %normal-dest198 ], [ 1, %normal-dest123 ], [ 1, %tag29 ]
  %return-value.sroa.0.0 = phi i64 [ %46, %tag55 ], [ %136, %normal-dest426 ], [ %120, %normal-dest347 ], [ %86, %normal-dest198 ], [ %70, %normal-dest123 ], [ %31, %tag29 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %28 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %29 = insertvalue { {}*, i64 } undef, {}* %28, 0
  %30 = insertvalue { {}*, i64 } %29, i64 %return-value.sroa.39.0, 1
  ret { {}*, i64 } %30

tag29:                                            ; preds = %header-check-br361, %header-check-br264, %normal-dest441, %tag36, %tag54, %normal-dest170
  %31 = phi i64 [ %79, %normal-dest170 ], [ %143, %tag36 ], [ %143, %tag54 ], [ %143, %normal-dest441 ], [ %143, %header-check-br264 ], [ %143, %header-check-br361 ]
  %.val587 = phi {}* [ %.val587.pre, %normal-dest170 ], [ %.val, %tag36 ], [ %.val, %tag54 ], [ %.val, %normal-dest441 ], [ %.val, %header-check-br264 ], [ %.val, %header-check-br361 ]
  %32 = phi {}* [ %78, %normal-dest170 ], [ %138, %tag36 ], [ %138, %tag54 ], [ %138, %normal-dest441 ], [ %138, %header-check-br264 ], [ %138, %header-check-br361 ]
  %object.0 = phi {}* [ %object.1, %normal-dest170 ], [ %138, %tag36 ], [ %138, %tag54 ], [ %.val, %normal-dest441 ], [ %138, %header-check-br264 ], [ %138, %header-check-br361 ]
  %33 = icmp eq {}* %object.0, %32
  %G284688.0 = select i1 %33, {}* %.val587, {}* %32
  %34 = icmp eq {}* %G284688.0, %32
  br i1 %34, label %tag28, label %tag17

tag30:                                            ; preds = %normal-dest249, %header-check-br
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest272 unwind label %cleanup-lpad

tag31:                                            ; preds = %normal-dest207
  %ptrtoint286 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only287 = and i64 %ptrtoint286, 7
  %test288 = icmp eq i64 %tag-only287, 1
  br i1 %test288, label %header-check-br285, label %tag22

tag34:                                            ; preds = %normal-dest176
  %37 = icmp eq {}* %.val590, %farg0
  %G284639.0 = select i1 %37, {}* %80, {}* %.val590
  %38 = icmp eq {}* %G284639.0, %.val590
  br i1 %38, label %tag21, label %tag25

tag36:                                            ; preds = %normal-dest441
  %39 = ptrtoint {}* %.in to i64
  %single-float-tag-only = and i64 %39, 7
  %fixnum-tag-only328553 = and i64 %39, 3
  %fixnump-test329 = icmp ne i64 %fixnum-tag-only328553, 0
  %test364 = icmp eq i64 %single-float-tag-only, 1
  %or.cond585 = and i1 %fixnump-test329, %test364
  br i1 %or.cond585, label %header-check-br361, label %tag29

tag42:                                            ; preds = %header-check-br389, %normal-dest235, %normal-dest110
  %G284596.0 = phi {}* [ %G284596.1, %normal-dest110 ], [ %G284596.2, %normal-dest235 ], [ %"closure->LAMBDA", %header-check-br389 ]
  %ptrtoint341 = ptrtoint {}* %G284596.0 to i64
  %entry-point-addr-uint342 = add i64 %ptrtoint341, 7
  %entry-point-addr343 = inttoptr i64 %entry-point-addr-uint342 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point344 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr343, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point344({}* %G284596.0, i64 2, {}* %OUT284523340.0, {}* %.in, {}* null, {}* null)
          to label %normal-dest347 unwind label %cleanup-lpad

tag50:                                            ; preds = %normal-dest207
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 138), align 16
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest376 unwind label %cleanup-lpad

tag52:                                            ; preds = %tag4, %header-check-br139
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest401 unwind label %cleanup-lpad

tag54:                                            ; preds = %header-check-br361, %header-check-br361, %header-check-br361, %header-check-br361
  %45 = ptrtoint {}* %140 to i64
  %single-float-tag-only416 = and i64 %45, 7
  %fixnum-tag-only555 = and i64 %45, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only555, 0
  %test267 = icmp eq i64 %single-float-tag-only416, 1
  %or.cond583 = and i1 %fixnump-test, %test267
  br i1 %or.cond583, label %header-check-br264, label %tag29

tag55:                                            ; preds = %normal-dest71
  %46 = ptrtoint {}* %54 to i64
  br label %tag28

tag58:                                            ; preds = %header-check-br285, %normal-dest221, %normal-dest85
  %G284580.0 = phi {}* [ %G284580.1, %normal-dest85 ], [ %G284580.2, %normal-dest221 ], [ %"closure->LAMBDA", %header-check-br285 ]
  %ptrtoint420 = ptrtoint {}* %G284580.0 to i64
  %entry-point-addr-uint421 = add i64 %ptrtoint420, 7
  %entry-point-addr422 = inttoptr i64 %entry-point-addr-uint421 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point423 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr422, align 8
  %47 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point423({}* %G284580.0, i64 2, {}* %farg0, {}* %.in, {}* null, {}* null)
          to label %normal-dest426 unwind label %cleanup-lpad

tag60:                                            ; preds = %normal-dest71
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 209), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest434 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest454, %maybe-more-tests, %normal-dest434, %tag60, %tag58, %normal-dest401, %tag52, %normal-dest376, %tag50, %tag42, %normal-dest295, %maybe-more-tests147, %normal-dest272, %tag30, %normal-dest242, %tag25, %normal-dest228, %maybe-more-tests138, %normal-dest214, %tag22, %normal-dest200, %tag21, %normal-dest191, %normal-dest185, %tag20, %tag17, %normal-dest163, %tag15, %normal-dest116, %tag9, %normal-dest103, %tag8, %normal-dest78, %maybe-more-tests338, %normal-dest68, %normal-dest
  %50 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %50

normal-dest:                                      ; preds = %11
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 207), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %52 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %52, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest71 unwind label %cleanup-lpad

normal-dest71:                                    ; preds = %normal-dest68
  %.elt = extractvalue { {}*, i64 } %53, 0
  %.elt481 = extractvalue { {}*, i64 } %53, 1
  %cond = icmp eq i64 %.elt481, 0
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284708.0 = select i1 %cond, {}* %54, {}* %.elt
  %55 = icmp eq {}* %G284708.0, %54
  br i1 %55, label %tag55, label %tag60

header-check-br:                                  ; preds = %header-check-br255
  %.off595 = add i64 %100, -1001
  %56 = icmp ult i64 %.off595, 5
  br i1 %56, label %maybe-more-tests, label %tag30

maybe-more-tests:                                 ; preds = %header-check-br
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %58 = invoke {}* @cc_safe_fdefinition({}* %57)
          to label %normal-dest454 unwind label %cleanup-lpad

normal-dest78:                                    ; preds = %maybe-more-tests338
  %ptrtoint79 = ptrtoint {}* %119 to i64
  %entry-point-addr-uint80 = add i64 %ptrtoint79, 7
  %entry-point-addr81 = inttoptr i64 %entry-point-addr-uint80 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point82 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr81, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point82({}* %119, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest85 unwind label %cleanup-lpad

normal-dest85:                                    ; preds = %normal-dest78
  %.elt550 = extractvalue { {}*, i64 } %59, 0
  %.elt552 = extractvalue { {}*, i64 } %59, 1
  %cond478 = icmp eq i64 %.elt552, 0
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284580.1 = select i1 %cond478, {}* %60, {}* %.elt550
  br label %tag58

header-check-br91:                                ; preds = %tag4
  %irc-bit-cast95 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep96 = getelementptr inbounds i8, i8* %irc-bit-cast95, i64 -9
  %irc-bit-cast97 = bitcast i8* %gep96 to i64*
  %61 = load i64, i64* %irc-bit-cast97, align 8
  %.off = add i64 %61, -913
  %62 = icmp ult i64 %.off, 85
  br i1 %62, label %tag9, label %header-check-br139

normal-dest103:                                   ; preds = %tag8
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 221), align 8
  %ptrtoint104 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint105 = add i64 %ptrtoint104, 7
  %entry-point-addr106 = inttoptr i64 %entry-point-addr-uint105 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point107 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr106, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point107({}* %15, i64 5, {}* %63, {}* %64, {}* %"closure->LAMBDA", {}* %65, {}* %66)
          to label %normal-dest110 unwind label %cleanup-lpad

normal-dest110:                                   ; preds = %normal-dest103
  %.elt530 = extractvalue { {}*, i64 } %67, 0
  %.elt532 = extractvalue { {}*, i64 } %67, 1
  %cond475 = icmp eq i64 %.elt532, 0
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284596.1 = select i1 %cond475, {}* %68, {}* %.elt530
  br label %tag42

normal-dest116:                                   ; preds = %tag9
  %ptrtoint117 = ptrtoint {}* %G284646.0 to i64
  %entry-point-addr-uint118 = add i64 %ptrtoint117, 7
  %entry-point-addr119 = inttoptr i64 %entry-point-addr-uint118 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point120 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr119, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point120({}* %G284646.0, i64 2, {}* %17, {}* %.in, {}* null, {}* null)
          to label %normal-dest123 unwind label %cleanup-lpad

normal-dest123:                                   ; preds = %normal-dest116
  %70 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag28

header-check-br130:                               ; preds = %header-check-br389
  %.off597 = add i64 %128, -1001
  %71 = icmp ult i64 %.off597, 5
  br i1 %71, label %maybe-more-tests138, label %tag8

maybe-more-tests138:                              ; preds = %header-check-br130
  %72 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %73 = invoke {}* @cc_safe_fdefinition({}* %72)
          to label %normal-dest228 unwind label %cleanup-lpad

header-check-br139:                               ; preds = %header-check-br91
  %.off591 = add i64 %61, -1001
  %74 = icmp ult i64 %.off591, 5
  br i1 %74, label %maybe-more-tests147, label %tag52

maybe-more-tests147:                              ; preds = %header-check-br139
  %75 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %76 = invoke {}* @cc_safe_fdefinition({}* %75)
          to label %normal-dest295 unwind label %cleanup-lpad

normal-dest163:                                   ; preds = %tag15
  %ptrtoint164 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint165 = add i64 %ptrtoint164, 7
  %entry-point-addr166 = inttoptr i64 %entry-point-addr-uint165 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point167 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr166, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point167({}* %19, i64 2, {}* nonnull %.in, {}* nonnull %140, {}* null, {}* null)
          to label %normal-dest170 unwind label %cleanup-lpad

normal-dest170:                                   ; preds = %normal-dest163
  %.elt558 = extractvalue { {}*, i64 } %77, 0
  %.elt560 = extractvalue { {}*, i64 } %77, 1
  %cond479 = icmp eq i64 %.elt560, 0
  %78 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.1 = select i1 %cond479, {}* %78, {}* %.elt558
  %.val587.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %79 = ptrtoint {}* %78 to i64
  br label %tag29

normal-dest176:                                   ; preds = %tag17
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %81 = icmp eq {}* %80, %farg0
  %.val590 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284662.0 = select i1 %81, {}* %80, {}* %.val590
  %82 = icmp eq {}* %G284662.0, %.val590
  br i1 %82, label %tag34, label %tag4

normal-dest185:                                   ; preds = %tag20
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 144), align 16
  %84 = invoke {}* @cc_safe_fdefinition({}* %83)
          to label %normal-dest191 unwind label %cleanup-lpad

normal-dest191:                                   ; preds = %normal-dest185
  %ptrtoint192 = ptrtoint {}* %84 to i64
  %entry-point-addr-uint193 = add i64 %ptrtoint192, 7
  %entry-point-addr194 = inttoptr i64 %entry-point-addr-uint193 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point195 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr194, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point195({}* %84, i64 1, {}* %G284531.0, {}* null, {}* null, {}* null)
          to label %normal-dest198 unwind label %cleanup-lpad

normal-dest198:                                   ; preds = %normal-dest191
  %.elt514 = extractvalue { {}*, i64 } %85, 0
  %86 = ptrtoint {}* %.elt514 to i64
  %.elt516 = extractvalue { {}*, i64 } %85, 1
  br label %tag28

normal-dest200:                                   ; preds = %tag21
  %ptrtoint201 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint202 = add i64 %ptrtoint201, 7
  %entry-point-addr203 = inttoptr i64 %entry-point-addr-uint202 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point204 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr203, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point204({}* %23, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest207 unwind label %cleanup-lpad

normal-dest207:                                   ; preds = %normal-dest200
  %.elt522 = extractvalue { {}*, i64 } %87, 0
  %.elt524 = extractvalue { {}*, i64 } %87, 1
  %cond473 = icmp eq i64 %.elt524, 0
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284614.0 = select i1 %cond473, {}* %88, {}* %.elt522
  %89 = icmp eq {}* %G284614.0, %88
  br i1 %89, label %tag31, label %tag50

normal-dest214:                                   ; preds = %tag22
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 220), align 16
  %ptrtoint215 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint216 = add i64 %ptrtoint215, 7
  %entry-point-addr217 = inttoptr i64 %entry-point-addr-uint216 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point218 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr217, align 8
  %94 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point218({}* %25, i64 5, {}* %90, {}* %91, {}* %"closure->LAMBDA", {}* %92, {}* %93)
          to label %normal-dest221 unwind label %cleanup-lpad

normal-dest221:                                   ; preds = %normal-dest214
  %.elt542 = extractvalue { {}*, i64 } %94, 0
  %.elt544 = extractvalue { {}*, i64 } %94, 1
  %cond477 = icmp eq i64 %.elt544, 0
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284580.2 = select i1 %cond477, {}* %95, {}* %.elt542
  br label %tag58

normal-dest228:                                   ; preds = %maybe-more-tests138
  %ptrtoint229 = ptrtoint {}* %73 to i64
  %entry-point-addr-uint230 = add i64 %ptrtoint229, 7
  %entry-point-addr231 = inttoptr i64 %entry-point-addr-uint230 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point232 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr231, align 8
  %96 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point232({}* %73, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest235 unwind label %cleanup-lpad

normal-dest235:                                   ; preds = %normal-dest228
  %.elt538 = extractvalue { {}*, i64 } %96, 0
  %.elt540 = extractvalue { {}*, i64 } %96, 1
  %cond476 = icmp eq i64 %.elt540, 0
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284596.2 = select i1 %cond476, {}* %97, {}* %.elt538
  br label %tag42

normal-dest242:                                   ; preds = %tag25
  %ptrtoint243 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint244 = add i64 %ptrtoint243, 7
  %entry-point-addr245 = inttoptr i64 %entry-point-addr-uint244 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point246 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr245, align 8
  %98 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point246({}* %27, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest249 unwind label %cleanup-lpad

normal-dest249:                                   ; preds = %normal-dest242
  %.elt502 = extractvalue { {}*, i64 } %98, 0
  %.elt504 = extractvalue { {}*, i64 } %98, 1
  %cond470 = icmp eq i64 %.elt504, 0
  %99 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284531.0 = select i1 %cond470, {}* %99, {}* %.elt502
  %ptrtoint256 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only257 = and i64 %ptrtoint256, 7
  %test258 = icmp eq i64 %tag-only257, 1
  br i1 %test258, label %header-check-br255, label %tag30

header-check-br255:                               ; preds = %normal-dest249
  %irc-bit-cast259 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep260 = getelementptr inbounds i8, i8* %irc-bit-cast259, i64 -9
  %irc-bit-cast261 = bitcast i8* %gep260 to i64*
  %100 = load i64, i64* %irc-bit-cast261, align 8
  %.off594 = add i64 %100, -913
  %101 = icmp ult i64 %.off594, 85
  br i1 %101, label %tag20, label %header-check-br

header-check-br264:                               ; preds = %tag54
  %irc-bit-cast268 = bitcast {}* %140 to i8*
  %gep269 = getelementptr inbounds i8, i8* %irc-bit-cast268, i64 -9
  %irc-bit-cast270 = bitcast i8* %gep269 to i64*
  %102 = load i64, i64* %irc-bit-cast270, align 8
  %103 = add i64 %102, -1309
  %104 = lshr i64 %103, 3
  %105 = shl i64 %103, 61
  %106 = or i64 %104, %105
  switch i64 %106, label %tag29 [
    i64 2, label %tag15
    i64 4, label %tag15
    i64 5, label %tag15
    i64 0, label %tag15
  ]

normal-dest272:                                   ; preds = %tag30
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 222), align 16
  %ptrtoint273 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint274 = add i64 %ptrtoint273, 7
  %entry-point-addr275 = inttoptr i64 %entry-point-addr-uint274 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point276 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr275, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point276({}* %36, i64 5, {}* %107, {}* %108, {}* %"closure->LAMBDA", {}* %109, {}* %110)
          to label %normal-dest279 unwind label %cleanup-lpad

normal-dest279:                                   ; preds = %normal-dest272
  %.elt506 = extractvalue { {}*, i64 } %111, 0
  %.elt508 = extractvalue { {}*, i64 } %111, 1
  %cond471 = icmp eq i64 %.elt508, 0
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284622.1 = select i1 %cond471, {}* %112, {}* %.elt506
  br label %tag20

header-check-br285:                               ; preds = %tag31
  %irc-bit-cast289 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep290 = getelementptr inbounds i8, i8* %irc-bit-cast289, i64 -9
  %irc-bit-cast291 = bitcast i8* %gep290 to i64*
  %113 = load i64, i64* %irc-bit-cast291, align 8
  %.off598 = add i64 %113, -913
  %114 = icmp ult i64 %.off598, 85
  br i1 %114, label %tag58, label %header-check-br330

normal-dest295:                                   ; preds = %maybe-more-tests147
  %ptrtoint296 = ptrtoint {}* %76 to i64
  %entry-point-addr-uint297 = add i64 %ptrtoint296, 7
  %entry-point-addr298 = inttoptr i64 %entry-point-addr-uint297 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point299 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr298, align 8
  %115 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point299({}* %76, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest302 unwind label %cleanup-lpad

normal-dest302:                                   ; preds = %normal-dest295
  %.elt498 = extractvalue { {}*, i64 } %115, 0
  %.elt500 = extractvalue { {}*, i64 } %115, 1
  %cond469 = icmp eq i64 %.elt500, 0
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284646.1 = select i1 %cond469, {}* %116, {}* %.elt498
  br label %tag9

header-check-br330:                               ; preds = %header-check-br285
  %.off599 = add i64 %113, -1001
  %117 = icmp ult i64 %.off599, 5
  br i1 %117, label %maybe-more-tests338, label %tag22

maybe-more-tests338:                              ; preds = %header-check-br330
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %119 = invoke {}* @cc_safe_fdefinition({}* %118)
          to label %normal-dest78 unwind label %cleanup-lpad

normal-dest347:                                   ; preds = %tag42
  %120 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag28

header-check-br361:                               ; preds = %tag36
  %gep366 = getelementptr inbounds i8, i8* %139, i64 -9
  %irc-bit-cast367 = bitcast i8* %gep366 to i64*
  %121 = load i64, i64* %irc-bit-cast367, align 8
  %122 = add i64 %121, -1309
  %123 = lshr i64 %122, 3
  %124 = shl i64 %122, 61
  %125 = or i64 %123, %124
  switch i64 %125, label %tag29 [
    i64 2, label %tag54
    i64 4, label %tag54
    i64 5, label %tag54
    i64 0, label %tag54
  ]

normal-dest376:                                   ; preds = %tag50
  %ptrtoint377 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint378 = add i64 %ptrtoint377, 7
  %entry-point-addr379 = inttoptr i64 %entry-point-addr-uint378 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point380 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr379, align 8
  %126 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point380({}* %42, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest383 unwind label %cleanup-lpad

normal-dest383:                                   ; preds = %normal-dest376
  %.elt526 = extractvalue { {}*, i64 } %126, 0
  %.elt528 = extractvalue { {}*, i64 } %126, 1
  %cond474 = icmp eq i64 %.elt528, 0
  %127 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUT284523340.0 = select i1 %cond474, {}* %127, {}* %.elt526
  %ptrtoint390 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only391 = and i64 %ptrtoint390, 7
  %test392 = icmp eq i64 %tag-only391, 1
  br i1 %test392, label %header-check-br389, label %tag8

header-check-br389:                               ; preds = %normal-dest383
  %irc-bit-cast393 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep394 = getelementptr inbounds i8, i8* %irc-bit-cast393, i64 -9
  %irc-bit-cast395 = bitcast i8* %gep394 to i64*
  %128 = load i64, i64* %irc-bit-cast395, align 8
  %.off596 = add i64 %128, -913
  %129 = icmp ult i64 %.off596, 85
  br i1 %129, label %tag42, label %header-check-br130

normal-dest401:                                   ; preds = %tag52
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %132 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 223), align 8
  %ptrtoint402 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint403 = add i64 %ptrtoint402, 7
  %entry-point-addr404 = inttoptr i64 %entry-point-addr-uint403 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point405 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr404, align 8
  %134 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point405({}* %44, i64 5, {}* %130, {}* %131, {}* %"closure->LAMBDA", {}* %132, {}* %133)
          to label %normal-dest408 unwind label %cleanup-lpad

normal-dest408:                                   ; preds = %normal-dest401
  %.elt487 = extractvalue { {}*, i64 } %134, 0
  %.elt489 = extractvalue { {}*, i64 } %134, 1
  %cond468 = icmp eq i64 %.elt489, 0
  %135 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284646.2 = select i1 %cond468, {}* %135, {}* %.elt487
  br label %tag9

normal-dest426:                                   ; preds = %tag58
  %136 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag28

normal-dest434:                                   ; preds = %tag60
  %ptrtoint435 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint436 = add i64 %ptrtoint435, 7
  %entry-point-addr437 = inttoptr i64 %entry-point-addr-uint436 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point438 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr437, align 8
  %137 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point438({}* %49, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest441 unwind label %cleanup-lpad

normal-dest441:                                   ; preds = %normal-dest434
  %.elt483 = extractvalue { {}*, i64 } %137, 0
  %.elt485 = extractvalue { {}*, i64 } %137, 1
  %cond467 = icmp eq i64 %.elt485, 0
  %138 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond467, {}* %138, {}* %.elt483
  %139 = bitcast {}* %.in to i8*
  %140 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 211), align 8
  %141 = icmp eq {}* %.in, %140
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G284700.0 = select i1 %141, {}* %.val, {}* %138
  %142 = icmp eq {}* %G284700.0, %138
  %143 = ptrtoint {}* %138 to i64
  br i1 %142, label %tag36, label %tag29

normal-dest454:                                   ; preds = %maybe-more-tests
  %ptrtoint455 = ptrtoint {}* %58 to i64
  %entry-point-addr-uint456 = add i64 %ptrtoint455, 7
  %entry-point-addr457 = inttoptr i64 %entry-point-addr-uint456 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point458 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr457, align 8
  %144 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point458({}* %58, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest461 unwind label %cleanup-lpad

normal-dest461:                                   ; preds = %normal-dest454
  %.elt518 = extractvalue { {}*, i64 } %144, 0
  %.elt520 = extractvalue { {}*, i64 } %144, 1
  %cond472 = icmp eq i64 %.elt520, 0
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284622.2 = select i1 %cond472, {}* %145, {}* %.elt518
  br label %tag20
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.10"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !46 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %process-rest-argument
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest11 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest14, %process-rest-argument
  %format-arg-284525.0 = phi {}* [ %format-arg-284525.1, %process-rest-argument ], [ %format-arg-284525.2, %normal-dest14 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 129), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest18 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest31, %normal-dest25, %normal-dest18, %tag1, %normal-dest11, %tag, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-init, label %opt-arg

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-arg:                                          ; preds = %continue
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %rem-nargs6 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-17 = add i64 %rem-nargs6, -1
  store i64 %rem-nargs-17, i64* %"remaining-nargs*", align 8
  %vaarg8 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

opt-init:                                         ; preds = %continue
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-arg, %opt-init
  %format-arg-284525.1 = phi {}* [ %vaarg8, %opt-arg ], [ undef, %opt-init ]
  %G284528.0 = phi {}* [ %14, %opt-arg ], [ %15, %opt-init ]
  %16 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %18 = icmp eq {}* %G284528.0, %17
  br i1 %18, label %tag, label %tag1

normal-dest11:                                    ; preds = %tag
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 219), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %19, {}* %20, {}* %21, {}* %22, {}* %23, {}* %24, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest11
  %.elt55 = extractvalue { {}*, i64 } %25, 0
  %.elt57 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt57, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284525.2 = select i1 %cond, {}* %26, {}* %.elt55
  br label %tag1

normal-dest18:                                    ; preds = %tag1
  %ptrtoint19 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %12, i64 2, {}* %format-arg-284525.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 133), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %normal-dest25
  %ptrtoint32 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint33 = add i64 %ptrtoint32, 7
  %entry-point-addr34 = inttoptr i64 %entry-point-addr-uint33 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point35 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr34, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point35({}* %29, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest31
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^65^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !47 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^65^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G284742.0 = phi {}* [ %18, %header-check-br ], [ %G284742.1, %normal-dest17 ], [ %G284742.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 251), align 8
  %ptrtoint20 = ptrtoint {}* %G284742.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G284742.0, i64 2, {}* %"closure->B=LISPBINDUNGEN-SICHERN", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br72
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %maybe-more-tests80, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 251), align 8
  %"closure->B=LISPBINDUNGEN-SICHERN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 2327, i64 65, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br72

normal-dest13:                                    ; preds = %maybe-more-tests80
  %ptrtoint14 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284742.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 253), align 8
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->B=LISPBINDUNGEN-SICHERN", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 258), align 16
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->B=LISPBINDUNGEN-SICHERN", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 251), align 8
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 259), align 8
  %ptrtoint59 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %32, i64 3, {}* %33, {}* %34, {}* %35, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 260 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 251), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %41 = icmp ult i64 %.off123, 5
  br i1 %41, label %maybe-more-tests80, label %tag4

maybe-more-tests80:                               ; preds = %header-check-br72
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 250), align 16
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284742.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !48 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc552 unwind label %cleanup-lpad.loopexit.split-lp

.noexc552:                                        ; preds = %13
  unreachable

tag1:                                             ; preds = %tag22
  %14 = ptrtoint {}* %farg2 to i64
  %single-float-tag-only = and i64 %14, 7
  %fixnum-tag-only235522 = and i64 %14, 3
  %fixnump-test236 = icmp ne i64 %fixnum-tag-only235522, 0
  %test476 = icmp eq i64 %single-float-tag-only, 1
  %or.cond569 = and i1 %fixnump-test236, %test476
  br i1 %or.cond569, label %header-check-br473, label %tag102

tag5:                                             ; preds = %tag16.tag5_crit_edge, %header-check-br311, %header-check-br181, %tag26, %tag29, %tag36
  %.val576 = phi {}* [ %.val576.pre, %tag16.tag5_crit_edge ], [ %.val, %tag36 ], [ %.val, %tag29 ], [ %.val, %tag26 ], [ %.val, %header-check-br181 ], [ %.val, %header-check-br311 ]
  %.val577581 = phi {}* [ %.val577, %tag16.tag5_crit_edge ], [ %.val570, %tag36 ], [ %.val570, %tag29 ], [ %.val570, %tag26 ], [ %.val570, %header-check-br181 ], [ %.val570, %header-check-br311 ]
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 241), align 8
  %16 = icmp eq {}* %15, %farg2
  %G284846.0 = select i1 %16, {}* %.val576, {}* %.val577581
  %17 = icmp eq {}* %G284846.0, %.val577581
  br i1 %17, label %tag34, label %tag24

tag6:                                             ; preds = %tag63
  %18 = add i64 %42, -3
  %19 = inttoptr i64 %18 to {}**
  %20 = load {}*, {}** %19, align 8
  br label %tag18

tag10:                                            ; preds = %tag24
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 150), align 16
  br label %tag56

tag16:                                            ; preds = %normal-dest, %normal-dest334
  %.val577 = phi {}* [ %97, %normal-dest334 ], [ %.val570, %normal-dest ]
  %G284851.0 = phi {}* [ %G284851.1, %normal-dest334 ], [ %.val, %normal-dest ]
  %22 = icmp eq {}* %G284851.0, %.val577
  br i1 %22, label %tag16.tag5_crit_edge, label %tag84

tag16.tag5_crit_edge:                             ; preds = %tag16
  %.val576.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag5

tag18:                                            ; preds = %normal-dest392, %tag6
  %OBJEKT.0 = phi {}* [ %20, %tag6 ], [ %OBJEKT.1, %normal-dest392 ]
  br i1 %test168, label %header-check-br165, label %tag96

tag22:                                            ; preds = %tag24.tag22_crit_edge, %header-check-br350, %header-check-br210, %tag34, %tag92, %tag87
  %.val578 = phi {}* [ %.val578.pre, %tag24.tag22_crit_edge ], [ %.val576, %tag87 ], [ %.val576, %tag92 ], [ %.val576, %tag34 ], [ %.val576, %header-check-br210 ], [ %.val576, %header-check-br350 ]
  %.val579582 = phi {}* [ %.val579, %tag24.tag22_crit_edge ], [ %.val577581, %tag87 ], [ %.val577581, %tag92 ], [ %.val577581, %tag34 ], [ %.val577581, %header-check-br210 ], [ %.val577581, %header-check-br350 ]
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 243), align 8
  %24 = icmp eq {}* %23, %farg2
  %G284832.0 = select i1 %24, {}* %.val578, {}* %.val579582
  %25 = icmp eq {}* %G284832.0, %.val579582
  br i1 %25, label %tag1, label %tag81

tag24:                                            ; preds = %tag5, %normal-dest245
  %.val579 = phi {}* [ %88, %normal-dest245 ], [ %.val577581, %tag5 ]
  %G284837.0 = phi {}* [ %G284837.1, %normal-dest245 ], [ %.val576, %tag5 ]
  %26 = icmp eq {}* %G284837.0, %.val579
  br i1 %26, label %tag24.tag22_crit_edge, label %tag10

tag24.tag22_crit_edge:                            ; preds = %tag24
  %.val578.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag22

tag26:                                            ; preds = %normal-dest
  %27 = ptrtoint {}* %farg2 to i64
  %single-float-tag-only189 = and i64 %27, 7
  %fixnum-tag-only142538 = and i64 %27, 3
  %fixnump-test143 = icmp ne i64 %fixnum-tag-only142538, 0
  %test314 = icmp eq i64 %single-float-tag-only189, 1
  %or.cond566 = and i1 %fixnump-test143, %test314
  br i1 %or.cond566, label %header-check-br311, label %tag5

tag29:                                            ; preds = %tag36
  %fixnum-tag-only199540 = and i64 %30, 3
  %fixnump-test200 = icmp ne i64 %fixnum-tag-only199540, 0
  %test184 = icmp eq i64 %single-float-tag-only218, 1
  %or.cond562 = and i1 %fixnump-test200, %test184
  br i1 %or.cond562, label %header-check-br181, label %tag5

tag34:                                            ; preds = %tag5
  %28 = ptrtoint {}* %farg2 to i64
  %single-float-tag-only217 = and i64 %28, 7
  %29 = icmp eq i64 %single-float-tag-only217, 6
  br i1 %29, label %tag22, label %tag92

tag36:                                            ; preds = %header-check-br311, %header-check-br311, %header-check-br311, %header-check-br311
  %30 = ptrtoint {}* %70 to i64
  %single-float-tag-only218 = and i64 %30, 7
  %31 = icmp eq i64 %single-float-tag-only218, 6
  br i1 %31, label %tag5, label %tag29

tag38:                                            ; preds = %tag81
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 225), align 8
  br label %tag56

tag42:                                            ; preds = %header-check-br350, %header-check-br350, %header-check-br350, %header-check-br350
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 217), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest238 unwind label %cleanup-lpad.loopexit.split-lp

tag47:                                            ; preds = %normal-dest430, %header-check-br165, %normal-dest155
  %G284781.0 = phi {}* [ %G284781.1, %normal-dest155 ], [ %.in506, %header-check-br165 ], [ %G284781.2, %normal-dest430 ]
  %ptrtoint251 = ptrtoint {}* %G284781.0 to i64
  %entry-point-addr-uint252 = add i64 %ptrtoint251, 7
  %entry-point-addr253 = inttoptr i64 %entry-point-addr-uint252 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point254 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr253, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point254({}* %G284781.0, i64 2, {}* %farg0, {}* %OBJEKT.0, {}* null, {}* null)
          to label %normal-dest257 unwind label %cleanup-lpad.loopexit

tag52:                                            ; preds = %tag56
  %36 = icmp eq {}* %37, %farg1
  br i1 %36, label %tag97, label %tag63.lr.ph

tag63.lr.ph:                                      ; preds = %tag52
  %ptrtoint166 = ptrtoint {}* %.in506 to i64
  %tag-only167 = and i64 %ptrtoint166, 7
  %test168 = icmp eq i64 %tag-only167, 1
  %gep170 = getelementptr inbounds i8, i8* %38, i64 -9
  %irc-bit-cast171 = bitcast i8* %gep170 to i64*
  br label %tag63

tag56:                                            ; preds = %normal-dest460, %tag84, %tag38, %tag10
  %37 = phi {}* [ %48, %tag38 ], [ %.val579, %tag10 ], [ %.val577, %tag84 ], [ %132, %normal-dest460 ]
  %.in506 = phi {}* [ %32, %tag38 ], [ %21, %tag10 ], [ %50, %tag84 ], [ %.in, %normal-dest460 ]
  %38 = bitcast {}* %.in506 to i8*
  %39 = icmp eq {}* %.in506, %37
  br i1 %39, label %tag97, label %tag52

tag58:                                            ; preds = %header-check-br415, %header-check-br415, %header-check-br415, %header-check-br415
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 217), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest294 unwind label %cleanup-lpad.loopexit.split-lp

tag63:                                            ; preds = %tag63.lr.ph, %tag.backedge
  %.val572 = phi {}* [ %37, %tag63.lr.ph ], [ %44, %tag.backedge ]
  %"%DOLIST-VAR.0580" = phi {}* [ %farg1, %tag63.lr.ph ], [ %"%DOLIST-VAR.0.be", %tag.backedge ]
  %42 = ptrtoint {}* %"%DOLIST-VAR.0580" to i64
  %tag-only323494 = and i64 %42, 7
  %consp-test324 = icmp eq i64 %tag-only323494, 3
  %.val571 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G284812.0 = select i1 %consp-test324, {}* %.val571, {}* %.val572
  %43 = icmp eq {}* %G284812.0, %.val572
  br i1 %43, label %tag89, label %tag6

tag.backedge:                                     ; preds = %normal-dest445, %tag101
  %44 = phi {}* [ %.pre, %tag101 ], [ %128, %normal-dest445 ]
  %"%DOLIST-VAR.0.be" = phi {}* [ %67, %tag101 ], [ %"%DOLIST-VAR.1", %normal-dest445 ]
  %45 = icmp eq {}* %"%DOLIST-VAR.0.be", %44
  br i1 %45, label %tag97, label %tag63

tag67:                                            ; preds = %header-check-br181, %header-check-br181, %header-check-br181, %header-check-br181
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 217), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest327 unwind label %cleanup-lpad.loopexit.split-lp

tag81:                                            ; preds = %tag22, %normal-dest301
  %48 = phi {}* [ %90, %normal-dest301 ], [ %.val579582, %tag22 ]
  %G284823.0 = phi {}* [ %G284823.1, %normal-dest301 ], [ %.val578, %tag22 ]
  %49 = icmp eq {}* %G284823.0, %48
  br i1 %49, label %tag102, label %tag38

tag84:                                            ; preds = %tag16
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 188), align 16
  br label %tag56

tag87:                                            ; preds = %header-check-br210, %header-check-br210, %header-check-br210, %header-check-br210
  %51 = ptrtoint {}* %15 to i64
  %single-float-tag-only382 = and i64 %51, 7
  %fixnum-tag-only201532 = and i64 %51, 3
  %fixnump-test202 = icmp ne i64 %fixnum-tag-only201532, 0
  %test353 = icmp eq i64 %single-float-tag-only382, 1
  %or.cond567 = and i1 %fixnump-test202, %test353
  br i1 %or.cond567, label %header-check-br350, label %tag22

tag89:                                            ; preds = %tag63
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest385 unwind label %cleanup-lpad.loopexit

tag92:                                            ; preds = %tag34
  %fixnum-tag-only405530 = and i64 %28, 3
  %fixnump-test406 = icmp ne i64 %fixnum-tag-only405530, 0
  %test213 = icmp eq i64 %single-float-tag-only217, 1
  %or.cond564 = and i1 %fixnump-test406, %test213
  br i1 %or.cond564, label %header-check-br210, label %tag22

tag94:                                            ; preds = %normal-dest257
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %55 = icmp eq {}* %"%DOLIST-VAR.0580", %54
  %.val573 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G284774.0 = select i1 %55, {}* %.val573, {}* %54
  %56 = icmp eq {}* %G284774.0, %54
  br i1 %56, label %tag99, label %tag97

tag96:                                            ; preds = %tag18, %header-check-br366
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %58 = invoke {}* @cc_safe_fdefinition({}* %57)
          to label %normal-dest423 unwind label %cleanup-lpad.loopexit

tag97:                                            ; preds = %tag.backedge, %tag94, %tag52, %tag56
  %59 = phi {}* [ %farg1, %tag52 ], [ %37, %tag56 ], [ %44, %tag.backedge ], [ %54, %tag94 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %60 = insertvalue { {}*, i64 } undef, {}* %59, 0
  %61 = insertvalue { {}*, i64 } %60, i64 1, 1
  ret { {}*, i64 } %61

tag98:                                            ; preds = %header-check-br473, %header-check-br473, %header-check-br473, %header-check-br473
  %62 = ptrtoint {}* %23 to i64
  %single-float-tag-only436 = and i64 %62, 7
  %fixnum-tag-only524 = and i64 %62, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only524, 0
  %test418 = icmp eq i64 %single-float-tag-only436, 1
  %or.cond568 = and i1 %fixnump-test, %test418
  br i1 %or.cond568, label %header-check-br415, label %tag102

tag99:                                            ; preds = %tag94
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %64 = invoke {}* @cc_safe_fdefinition({}* %63)
          to label %normal-dest438 unwind label %cleanup-lpad.loopexit

tag101:                                           ; preds = %normal-dest257
  %65 = add i64 %42, 5
  %66 = inttoptr i64 %65 to {}**
  %67 = load {}*, {}** %66, align 8
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag.backedge

tag102:                                           ; preds = %header-check-br473, %header-check-br415, %tag98, %tag1, %tag81
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 245), align 8
  %69 = invoke {}* @cc_safe_fdefinition({}* %68)
          to label %normal-dest453 unwind label %cleanup-lpad.loopexit.split-lp

cleanup-lpad.loopexit:                            ; preds = %maybe-more-tests374, %normal-dest151, %tag47, %tag89, %normal-dest385, %tag96, %normal-dest423, %tag99, %normal-dest438
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %tag42, %normal-dest238, %tag58, %normal-dest294, %tag67, %normal-dest327, %tag102, %normal-dest453, %10, %13
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %70 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 239), align 8
  %71 = icmp eq {}* %70, %farg2
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val570 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284860.0 = select i1 %71, {}* %.val, {}* %.val570
  %72 = icmp eq {}* %G284860.0, %.val570
  br i1 %72, label %tag26, label %tag16

normal-dest151:                                   ; preds = %maybe-more-tests374
  %ptrtoint152 = ptrtoint {}* %105 to i64
  %entry-point-addr-uint = add i64 %ptrtoint152, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %105, i64 1, {}* nonnull %.in506, {}* null, {}* null, {}* null)
          to label %normal-dest155 unwind label %cleanup-lpad.loopexit

normal-dest155:                                   ; preds = %normal-dest151
  %.elt508 = extractvalue { {}*, i64 } %73, 0
  %.elt510 = extractvalue { {}*, i64 } %73, 1
  %cond488 = icmp eq i64 %.elt510, 0
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284781.1 = select i1 %cond488, {}* %74, {}* %.elt508
  br label %tag47

header-check-br165:                               ; preds = %tag18
  %75 = load i64, i64* %irc-bit-cast171, align 8
  %.off = add i64 %75, -913
  %76 = icmp ult i64 %.off, 85
  br i1 %76, label %tag47, label %header-check-br366

header-check-br181:                               ; preds = %tag29
  %irc-bit-cast185 = bitcast {}* %70 to i8*
  %gep186 = getelementptr inbounds i8, i8* %irc-bit-cast185, i64 -9
  %irc-bit-cast187 = bitcast i8* %gep186 to i64*
  %77 = load i64, i64* %irc-bit-cast187, align 8
  %78 = add i64 %77, -1309
  %79 = lshr i64 %78, 3
  %80 = shl i64 %78, 61
  %81 = or i64 %79, %80
  switch i64 %81, label %tag5 [
    i64 2, label %tag67
    i64 4, label %tag67
    i64 5, label %tag67
    i64 0, label %tag67
  ]

header-check-br210:                               ; preds = %tag92
  %irc-bit-cast214 = bitcast {}* %farg2 to i8*
  %gep215 = getelementptr inbounds i8, i8* %irc-bit-cast214, i64 -9
  %irc-bit-cast216 = bitcast i8* %gep215 to i64*
  %82 = load i64, i64* %irc-bit-cast216, align 8
  %83 = add i64 %82, -1309
  %84 = lshr i64 %83, 3
  %85 = shl i64 %83, 61
  %86 = or i64 %84, %85
  switch i64 %86, label %tag22 [
    i64 2, label %tag87
    i64 4, label %tag87
    i64 5, label %tag87
    i64 0, label %tag87
  ]

normal-dest238:                                   ; preds = %tag42
  %ptrtoint239 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint240 = add i64 %ptrtoint239, 7
  %entry-point-addr241 = inttoptr i64 %entry-point-addr-uint240 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point242 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr241, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point242({}* %34, i64 2, {}* nonnull %farg2, {}* nonnull %15, {}* null, {}* null)
          to label %normal-dest245 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest245:                                   ; preds = %normal-dest238
  %.elt535 = extractvalue { {}*, i64 } %87, 0
  %.elt537 = extractvalue { {}*, i64 } %87, 1
  %cond492 = icmp eq i64 %.elt537, 0
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284837.1 = select i1 %cond492, {}* %88, {}* %.elt535
  br label %tag24

normal-dest257:                                   ; preds = %tag47
  br i1 %consp-test324, label %tag101, label %tag94

normal-dest294:                                   ; preds = %tag58
  %ptrtoint295 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint296 = add i64 %ptrtoint295, 7
  %entry-point-addr297 = inttoptr i64 %entry-point-addr-uint296 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point298 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr297, align 8
  %89 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point298({}* %41, i64 2, {}* nonnull %farg2, {}* nonnull %23, {}* null, {}* null)
          to label %normal-dest301 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest301:                                   ; preds = %normal-dest294
  %.elt527 = extractvalue { {}*, i64 } %89, 0
  %.elt529 = extractvalue { {}*, i64 } %89, 1
  %cond491 = icmp eq i64 %.elt529, 0
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284823.1 = select i1 %cond491, {}* %90, {}* %.elt527
  br label %tag81

header-check-br311:                               ; preds = %tag26
  %irc-bit-cast315 = bitcast {}* %farg2 to i8*
  %gep316 = getelementptr inbounds i8, i8* %irc-bit-cast315, i64 -9
  %irc-bit-cast317 = bitcast i8* %gep316 to i64*
  %91 = load i64, i64* %irc-bit-cast317, align 8
  %92 = add i64 %91, -1309
  %93 = lshr i64 %92, 3
  %94 = shl i64 %92, 61
  %95 = or i64 %93, %94
  switch i64 %95, label %tag5 [
    i64 2, label %tag36
    i64 4, label %tag36
    i64 5, label %tag36
    i64 0, label %tag36
  ]

normal-dest327:                                   ; preds = %tag67
  %ptrtoint328 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint329 = add i64 %ptrtoint328, 7
  %entry-point-addr330 = inttoptr i64 %entry-point-addr-uint329 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point331 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr330, align 8
  %96 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point331({}* %47, i64 2, {}* nonnull %farg2, {}* nonnull %70, {}* null, {}* null)
          to label %normal-dest334 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest334:                                   ; preds = %normal-dest327
  %.elt543 = extractvalue { {}*, i64 } %96, 0
  %.elt545 = extractvalue { {}*, i64 } %96, 1
  %cond493 = icmp eq i64 %.elt545, 0
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284851.1 = select i1 %cond493, {}* %97, {}* %.elt543
  br label %tag16

header-check-br350:                               ; preds = %tag87
  %irc-bit-cast354 = bitcast {}* %15 to i8*
  %gep355 = getelementptr inbounds i8, i8* %irc-bit-cast354, i64 -9
  %irc-bit-cast356 = bitcast i8* %gep355 to i64*
  %98 = load i64, i64* %irc-bit-cast356, align 8
  %99 = add i64 %98, -1309
  %100 = lshr i64 %99, 3
  %101 = shl i64 %99, 61
  %102 = or i64 %100, %101
  switch i64 %102, label %tag22 [
    i64 2, label %tag42
    i64 4, label %tag42
    i64 5, label %tag42
    i64 0, label %tag42
  ]

header-check-br366:                               ; preds = %header-check-br165
  %.off575 = add i64 %75, -1001
  %103 = icmp ult i64 %.off575, 5
  br i1 %103, label %maybe-more-tests374, label %tag96

maybe-more-tests374:                              ; preds = %header-check-br366
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %105 = invoke {}* @cc_safe_fdefinition({}* %104)
          to label %normal-dest151 unwind label %cleanup-lpad.loopexit

normal-dest385:                                   ; preds = %tag89
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint386 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint387 = add i64 %ptrtoint386, 7
  %entry-point-addr388 = inttoptr i64 %entry-point-addr-uint387 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point389 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr388, align 8
  %110 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point389({}* %53, i64 5, {}* %106, {}* %107, {}* %"%DOLIST-VAR.0580", {}* %108, {}* %109)
          to label %normal-dest392 unwind label %cleanup-lpad.loopexit

normal-dest392:                                   ; preds = %normal-dest385
  %.elt512 = extractvalue { {}*, i64 } %110, 0
  %.elt514 = extractvalue { {}*, i64 } %110, 1
  %cond489 = icmp eq i64 %.elt514, 0
  %111 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OBJEKT.1 = select i1 %cond489, {}* %111, {}* %.elt512
  br label %tag18

header-check-br415:                               ; preds = %tag98
  %irc-bit-cast419 = bitcast {}* %23 to i8*
  %gep420 = getelementptr inbounds i8, i8* %irc-bit-cast419, i64 -9
  %irc-bit-cast421 = bitcast i8* %gep420 to i64*
  %112 = load i64, i64* %irc-bit-cast421, align 8
  %113 = add i64 %112, -1309
  %114 = lshr i64 %113, 3
  %115 = shl i64 %113, 61
  %116 = or i64 %114, %115
  switch i64 %116, label %tag102 [
    i64 2, label %tag58
    i64 4, label %tag58
    i64 5, label %tag58
    i64 0, label %tag58
  ]

normal-dest423:                                   ; preds = %tag96
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 249), align 8
  %ptrtoint424 = ptrtoint {}* %58 to i64
  %entry-point-addr-uint425 = add i64 %ptrtoint424, 7
  %entry-point-addr426 = inttoptr i64 %entry-point-addr-uint425 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point427 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr426, align 8
  %121 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point427({}* %58, i64 5, {}* %117, {}* %118, {}* %.in506, {}* %119, {}* %120)
          to label %normal-dest430 unwind label %cleanup-lpad.loopexit

normal-dest430:                                   ; preds = %normal-dest423
  %.elt = extractvalue { {}*, i64 } %121, 0
  %.elt496 = extractvalue { {}*, i64 } %121, 1
  %cond = icmp eq i64 %.elt496, 0
  %122 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284781.2 = select i1 %cond, {}* %122, {}* %.elt
  br label %tag47

normal-dest438:                                   ; preds = %tag99
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint439 = ptrtoint {}* %64 to i64
  %entry-point-addr-uint440 = add i64 %ptrtoint439, 7
  %entry-point-addr441 = inttoptr i64 %entry-point-addr-uint440 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point442 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr441, align 8
  %127 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point442({}* %64, i64 5, {}* %123, {}* %124, {}* %"%DOLIST-VAR.0580", {}* %125, {}* %126)
          to label %normal-dest445 unwind label %cleanup-lpad.loopexit

normal-dest445:                                   ; preds = %normal-dest438
  %.elt503 = extractvalue { {}*, i64 } %127, 0
  %.elt505 = extractvalue { {}*, i64 } %127, 1
  %cond487 = icmp eq i64 %.elt505, 0
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %"%DOLIST-VAR.1" = select i1 %cond487, {}* %128, {}* %.elt503
  br label %tag.backedge

normal-dest453:                                   ; preds = %tag102
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 247), align 8
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 248), align 16
  %ptrtoint454 = ptrtoint {}* %69 to i64
  %entry-point-addr-uint455 = add i64 %ptrtoint454, 7
  %entry-point-addr456 = inttoptr i64 %entry-point-addr-uint455 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point457 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr456, align 8
  %131 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point457({}* %69, i64 3, {}* %129, {}* %130, {}* %farg2, {}* null)
          to label %normal-dest460 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest460:                                   ; preds = %normal-dest453
  %.elt519 = extractvalue { {}*, i64 } %131, 0
  %.elt521 = extractvalue { {}*, i64 } %131, 1
  %cond490 = icmp eq i64 %.elt521, 0
  %132 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond490, {}* %132, {}* %.elt519
  br label %tag56

header-check-br473:                               ; preds = %tag1
  %irc-bit-cast477 = bitcast {}* %farg2 to i8*
  %gep478 = getelementptr inbounds i8, i8* %irc-bit-cast477, i64 -9
  %irc-bit-cast479 = bitcast i8* %gep478 to i64*
  %133 = load i64, i64* %irc-bit-cast479, align 8
  %134 = add i64 %133, -1309
  %135 = lshr i64 %134, 3
  %136 = shl i64 %134, 61
  %137 = or i64 %135, %136
  switch i64 %137, label %tag102 [
    i64 2, label %tag98
    i64 4, label %tag98
    i64 5, label %tag98
    i64 0, label %tag98
  ]
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^80^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !49 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^80^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G284921.0 = phi {}* [ %18, %header-check-br ], [ %G284921.1, %normal-dest76 ], [ %G284921.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %ptrtoint22 = ptrtoint {}* %G284921.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G284921.0, i64 2, {}* %"closure->B=ERZEUGE-STRING", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests21, %normal-dest69, %tag3, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %"closure->B=ERZEUGE-STRING" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3080, i64 80, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 285), align 8
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->B=ERZEUGE-STRING", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 288), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->B=ERZEUGE-STRING", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 289), align 8
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 3, {}* %34, {}* %35, {}* %36, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 400 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %tag3
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 282), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %42, {}* %43, {}* %18, {}* %44, {}* %45)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt97 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt97, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284921.1 = select i1 %cond, {}* %47, {}* %.elt
  br label %tag2

normal-dest82:                                    ; preds = %maybe-more-tests21
  %ptrtoint83 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284921.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !50 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc923 unwind label %cleanup-lpad

.noexc923:                                        ; preds = %10
  unreachable

tag1:                                             ; preds = %header-check-br434, %normal-dest414, %normal-dest154
  %G285115.0 = phi {}* [ %G285115.1, %normal-dest154 ], [ %G285115.2, %normal-dest414 ], [ %"closure->LAMBDA711", %header-check-br434 ]
  %ptrtoint91 = ptrtoint {}* %G285115.0 to i64
  %entry-point-addr-uint92 = add i64 %ptrtoint91, 7
  %entry-point-addr93 = inttoptr i64 %entry-point-addr-uint92 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point94 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr93, align 8
  %11 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point94({}* %G285115.0, i64 2, {}* %G284876.0, {}* %farg0, {}* null, {}* null)
          to label %normal-dest97 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest400
  %ptrtoint111 = ptrtoint {}* %"closure->LAMBDA711" to i64
  %tag-only = and i64 %ptrtoint111, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag10

tag3:                                             ; preds = %tag8
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest115 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest656
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest133 unwind label %cleanup-lpad

tag8:                                             ; preds = %normal-dest140
  %character-tag-only = and i64 %79, 7
  %16 = icmp eq i64 %character-tag-only, 2
  %.val957 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285048.0 = select i1 %16, {}* %.val957, {}* %77
  %17 = icmp eq {}* %G285048.0, %77
  br i1 %17, label %tag9, label %tag3

tag9:                                             ; preds = %tag8
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %18, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.11", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.11^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3080, i64 80, i64 0, i64 0)
          to label %normal-dest160 unwind label %cleanup-lpad

tag10:                                            ; preds = %tag2, %header-check-br294
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest162 unwind label %cleanup-lpad

tag14:                                            ; preds = %normal-dest670, %normal-dest169, %header-check-br
  %G285073.0 = phi {}* [ %"closure->LAMBDA711", %header-check-br ], [ %G285073.1, %normal-dest169 ], [ %G285073.2, %normal-dest670 ]
  %ptrtoint184 = ptrtoint {}* %G285073.0 to i64
  %entry-point-addr-uint185 = add i64 %ptrtoint184, 7
  %entry-point-addr186 = inttoptr i64 %entry-point-addr-uint185 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point187 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr186, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point187({}* %G285073.0, i64 2, {}* %182, {}* %farg0, {}* null, {}* null)
          to label %normal-dest190 unwind label %cleanup-lpad

tag15:                                            ; preds = %normal-dest474, %header-check-br326, %normal-dest218
  %G284940.0 = phi {}* [ %G284940.1, %normal-dest218 ], [ %"closure->LAMBDA", %header-check-br326 ], [ %G284940.2, %normal-dest474 ]
  %ptrtoint197 = ptrtoint {}* %G284940.0 to i64
  %entry-point-addr-uint198 = add i64 %ptrtoint197, 7
  %entry-point-addr199 = inttoptr i64 %entry-point-addr-uint198 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point200 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr199, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point200({}* %G284940.0, i64 2, {}* %82, {}* %farg0, {}* null, {}* null)
          to label %normal-dest203 unwind label %cleanup-lpad

tag16:                                            ; preds = %tag30, %header-check-br123
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest211 unwind label %cleanup-lpad

tag23:                                            ; preds = %normal-dest605, %header-check-br528
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest257 unwind label %cleanup-lpad

tag25:                                            ; preds = %normal-dest400
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 138), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest271 unwind label %cleanup-lpad

tag30:                                            ; preds = %normal-dest545
  %ptrtoint327 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only328 = and i64 %ptrtoint327, 7
  %test329 = icmp eq i64 %tag-only328, 1
  br i1 %test329, label %header-check-br326, label %tag16

tag31:                                            ; preds = %tag53
  %29 = load i64, i64* bitcast ({}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 276) to i64*), align 16
  br label %tag65

tag32:                                            ; preds = %normal-dest545
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 138), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest338 unwind label %cleanup-lpad

tag37:                                            ; preds = %normal-dest710
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest393 unwind label %cleanup-lpad

tag38:                                            ; preds = %normal-dest428, %header-check-br443
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest407 unwind label %cleanup-lpad

tag45:                                            ; preds = %normal-dest710
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 141), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest421 unwind label %cleanup-lpad

tag53:                                            ; preds = %normal-dest88
  %38 = icmp eq {}* %63, %farg0
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285066.0 = select i1 %38, {}* %.val, {}* %63
  %39 = icmp eq {}* %G285066.0, %63
  br i1 %39, label %tag71, label %tag31

tag58:                                            ; preds = %normal-dest278, %header-check-br247
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest515 unwind label %cleanup-lpad

tag61:                                            ; preds = %normal-dest160
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest538 unwind label %cleanup-lpad

tag62:                                            ; preds = %header-check-br611, %normal-dest311, %normal-dest264
  %G284982.0 = phi {}* [ %G284982.1, %normal-dest264 ], [ %G284982.2, %normal-dest311 ], [ %"closure->LAMBDA", %header-check-br611 ]
  %ptrtoint552 = ptrtoint {}* %G284982.0 to i64
  %entry-point-addr-uint553 = add i64 %ptrtoint552, 7
  %entry-point-addr554 = inttoptr i64 %entry-point-addr-uint553 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point555 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr554, align 8
  %44 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point555({}* %G284982.0, i64 2, {}* %G284893.0, {}* %farg0, {}* null, {}* null)
          to label %normal-dest558 unwind label %cleanup-lpad

tag65:                                            ; preds = %normal-dest140, %normal-dest728, %normal-dest626, %normal-dest596, %normal-dest571, %tag31, %normal-dest203, %normal-dest190, %normal-dest122, %normal-dest110
  %return-value.sroa.71.0 = phi i64 [ 1, %normal-dest203 ], [ 1, %normal-dest728 ], [ %.elt871, %normal-dest571 ], [ %.elt843, %normal-dest122 ], [ %.elt835, %normal-dest596 ], [ 1, %tag31 ], [ 1, %normal-dest190 ], [ 1, %normal-dest626 ], [ %.elt791, %normal-dest110 ], [ 1, %normal-dest140 ]
  %return-value.sroa.0.0 = phi i64 [ %92, %normal-dest203 ], [ %185, %normal-dest728 ], [ %161, %normal-dest571 ], [ %72, %normal-dest122 ], [ %163, %normal-dest596 ], [ %29, %tag31 ], [ %91, %normal-dest190 ], [ %168, %normal-dest626 ], [ %68, %normal-dest110 ], [ %79, %normal-dest140 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %45 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %46 = insertvalue { {}*, i64 } undef, {}* %45, 0
  %47 = insertvalue { {}*, i64 } %46, i64 %return-value.sroa.71.0, 1
  ret { {}*, i64 } %47

tag66:                                            ; preds = %normal-dest656
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest589 unwind label %cleanup-lpad

tag67:                                            ; preds = %normal-dest160
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 141), align 8
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest598 unwind label %cleanup-lpad

tag68:                                            ; preds = %normal-dest704, %normal-dest522, %header-check-br285
  %G285089.0 = phi {}* [ %"closure->LAMBDA711", %header-check-br285 ], [ %G285089.1, %normal-dest522 ], [ %G285089.2, %normal-dest704 ]
  %ptrtoint620 = ptrtoint {}* %G285089.0 to i64
  %entry-point-addr-uint621 = add i64 %ptrtoint620, 7
  %entry-point-addr622 = inttoptr i64 %entry-point-addr-uint621 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point623 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr622, align 8
  %52 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point623({}* %G285089.0, i64 2, {}* %OUT284868279.0, {}* %farg0, {}* null, {}* null)
          to label %normal-dest626 unwind label %cleanup-lpad

tag71:                                            ; preds = %tag53
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 263), align 8
  %54 = invoke {}* @cc_safe_fdefinition({}* %53)
          to label %normal-dest649 unwind label %cleanup-lpad

tag74:                                            ; preds = %normal-dest345, %header-check-br360
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %56 = invoke {}* @cc_safe_fdefinition({}* %55)
          to label %normal-dest677 unwind label %cleanup-lpad

tag78:                                            ; preds = %normal-dest88
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA711" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %57, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.12", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.12^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3080, i64 80, i64 0, i64 0)
          to label %normal-dest710 unwind label %cleanup-lpad

tag80:                                            ; preds = %normal-dest684, %normal-dest460, %header-check-br351
  %G284956.0 = phi {}* [ %"closure->LAMBDA", %header-check-br351 ], [ %G284956.1, %normal-dest460 ], [ %G284956.2, %normal-dest684 ]
  %ptrtoint722 = ptrtoint {}* %G284956.0 to i64
  %entry-point-addr-uint723 = add i64 %ptrtoint722, 7
  %entry-point-addr724 = inttoptr i64 %entry-point-addr-uint723 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point725 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr724, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point725({}* %G284956.0, i64 2, {}* %OUT284885.0, {}* %farg0, {}* null, {}* null)
          to label %normal-dest728 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %tag80, %tag78, %normal-dest697, %maybe-more-tests255, %normal-dest677, %tag74, %normal-dest663, %maybe-more-tests302, %normal-dest649, %tag71, %tag68, %normal-dest598, %tag67, %normal-dest589, %tag66, %normal-dest564, %normal-dest558, %tag62, %normal-dest538, %tag61, %normal-dest515, %tag58, %normal-dest467, %maybe-more-tests131, %normal-dest453, %maybe-more-tests368, %normal-dest421, %tag45, %normal-dest407, %tag38, %normal-dest393, %tag37, %normal-dest338, %tag32, %normal-dest304, %maybe-more-tests536, %normal-dest271, %tag25, %normal-dest257, %tag23, %normal-dest211, %tag16, %tag15, %tag14, %normal-dest162, %tag10, %tag9, %normal-dest147, %maybe-more-tests451, %normal-dest133, %tag5, %normal-dest115, %tag3, %normal-dest103, %normal-dest97, %tag1, %normal-dest85, %normal-dest
  %59 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %59

normal-dest:                                      ; preds = %entry
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 261), align 8
  %61 = invoke {}* @cc_safe_fdefinition({}* %60)
          to label %normal-dest85 unwind label %cleanup-lpad

normal-dest85:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %61 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %61, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest85
  %.elt = extractvalue { {}*, i64 } %62, 0
  %.elt760 = extractvalue { {}*, i64 } %62, 1
  %cond = icmp eq i64 %.elt760, 0
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285178.0 = select i1 %cond, {}* %63, {}* %.elt
  %64 = icmp eq {}* %G285178.0, %63
  br i1 %64, label %tag53, label %tag78

normal-dest97:                                    ; preds = %tag1
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 144), align 16
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest103 unwind label %cleanup-lpad

normal-dest103:                                   ; preds = %normal-dest97
  %ptrtoint104 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint105 = add i64 %ptrtoint104, 7
  %entry-point-addr106 = inttoptr i64 %entry-point-addr-uint105 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point107 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr106, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point107({}* %66, i64 1, {}* %G284876.0, {}* null, {}* null, {}* null)
          to label %normal-dest110 unwind label %cleanup-lpad

normal-dest110:                                   ; preds = %normal-dest103
  %.elt789 = extractvalue { {}*, i64 } %67, 0
  %68 = ptrtoint {}* %.elt789 to i64
  %.elt791 = extractvalue { {}*, i64 } %67, 1
  br label %tag65

header-check-br:                                  ; preds = %tag2
  %irc-bit-cast112 = bitcast {}* %"closure->LAMBDA711" to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast112, i64 -9
  %irc-bit-cast113 = bitcast i8* %gep to i64*
  %69 = load i64, i64* %irc-bit-cast113, align 8
  %.off954 = add i64 %69, -913
  %70 = icmp ult i64 %.off954, 85
  br i1 %70, label %tag14, label %header-check-br294

normal-dest115:                                   ; preds = %tag3
  %ptrtoint116 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint117 = add i64 %ptrtoint116, 7
  %entry-point-addr118 = inttoptr i64 %entry-point-addr-uint117 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point119 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr118, align 8
  %71 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point119({}* %13, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest122 unwind label %cleanup-lpad

normal-dest122:                                   ; preds = %normal-dest115
  %.elt841 = extractvalue { {}*, i64 } %71, 0
  %72 = ptrtoint {}* %.elt841 to i64
  %.elt843 = extractvalue { {}*, i64 } %71, 1
  br label %tag65

header-check-br123:                               ; preds = %header-check-br326
  %.off968 = add i64 %117, -1001
  %73 = icmp ult i64 %.off968, 5
  br i1 %73, label %maybe-more-tests131, label %tag16

maybe-more-tests131:                              ; preds = %header-check-br123
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %75 = invoke {}* @cc_safe_fdefinition({}* %74)
          to label %normal-dest467 unwind label %cleanup-lpad

normal-dest133:                                   ; preds = %tag5
  %ptrtoint134 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint135 = add i64 %ptrtoint134, 7
  %entry-point-addr136 = inttoptr i64 %entry-point-addr-uint135 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point137 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr136, align 8
  %76 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point137({}* %15, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest140 unwind label %cleanup-lpad

normal-dest140:                                   ; preds = %normal-dest133
  %.elt837 = extractvalue { {}*, i64 } %76, 0
  %.elt839 = extractvalue { {}*, i64 } %76, 1
  %cond747 = icmp eq i64 %.elt839, 0
  %77 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285052.0 = select i1 %cond747, {}* %77, {}* %.elt837
  %78 = icmp eq {}* %G285052.0, %77
  %79 = ptrtoint {}* %farg0 to i64
  br i1 %78, label %tag8, label %tag65

normal-dest147:                                   ; preds = %maybe-more-tests451
  %ptrtoint148 = ptrtoint {}* %141 to i64
  %entry-point-addr-uint149 = add i64 %ptrtoint148, 7
  %entry-point-addr150 = inttoptr i64 %entry-point-addr-uint149 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point151 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr150, align 8
  %80 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point151({}* %141, i64 1, {}* nonnull %"closure->LAMBDA711", {}* null, {}* null, {}* null)
          to label %normal-dest154 unwind label %cleanup-lpad

normal-dest154:                                   ; preds = %normal-dest147
  %.elt793 = extractvalue { {}*, i64 } %80, 0
  %.elt795 = extractvalue { {}*, i64 } %80, 1
  %cond739 = icmp eq i64 %.elt795, 0
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285115.1 = select i1 %cond739, {}* %81, {}* %.elt793
  br label %tag1

normal-dest160:                                   ; preds = %tag9
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %84 = icmp eq {}* %82, %83
  br i1 %84, label %tag61, label %tag67

normal-dest162:                                   ; preds = %tag10
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %87 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 278), align 16
  %ptrtoint163 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint164 = add i64 %ptrtoint163, 7
  %entry-point-addr165 = inttoptr i64 %entry-point-addr-uint164 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point166 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr165, align 8
  %89 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point166({}* %20, i64 5, {}* %85, {}* %86, {}* %"closure->LAMBDA711", {}* %87, {}* %88)
          to label %normal-dest169 unwind label %cleanup-lpad

normal-dest169:                                   ; preds = %normal-dest162
  %.elt817 = extractvalue { {}*, i64 } %89, 0
  %.elt819 = extractvalue { {}*, i64 } %89, 1
  %cond744 = icmp eq i64 %.elt819, 0
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285073.1 = select i1 %cond744, {}* %90, {}* %.elt817
  br label %tag14

normal-dest190:                                   ; preds = %tag14
  %91 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag65

normal-dest203:                                   ; preds = %tag15
  %92 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag65

normal-dest211:                                   ; preds = %tag16
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %94 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 270), align 16
  %ptrtoint212 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint213 = add i64 %ptrtoint212, 7
  %entry-point-addr214 = inttoptr i64 %entry-point-addr-uint213 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point215 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr214, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point215({}* %24, i64 5, {}* %93, {}* %94, {}* %"closure->LAMBDA", {}* %95, {}* %96)
          to label %normal-dest218 unwind label %cleanup-lpad

normal-dest218:                                   ; preds = %normal-dest211
  %.elt897 = extractvalue { {}*, i64 } %97, 0
  %.elt899 = extractvalue { {}*, i64 } %97, 1
  %cond757 = icmp eq i64 %.elt899, 0
  %98 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284940.1 = select i1 %cond757, {}* %98, {}* %.elt897
  br label %tag15

header-check-br247:                               ; preds = %header-check-br285
  %.off953 = add i64 %110, -1001
  %99 = icmp ult i64 %.off953, 5
  br i1 %99, label %maybe-more-tests255, label %tag58

maybe-more-tests255:                              ; preds = %header-check-br247
  %100 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %101 = invoke {}* @cc_safe_fdefinition({}* %100)
          to label %normal-dest697 unwind label %cleanup-lpad

normal-dest257:                                   ; preds = %tag23
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 272), align 16
  %ptrtoint258 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint259 = add i64 %ptrtoint258, 7
  %entry-point-addr260 = inttoptr i64 %entry-point-addr-uint259 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point261 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr260, align 8
  %106 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point261({}* %26, i64 5, {}* %102, {}* %103, {}* %"closure->LAMBDA", {}* %104, {}* %105)
          to label %normal-dest264 unwind label %cleanup-lpad

normal-dest264:                                   ; preds = %normal-dest257
  %.elt861 = extractvalue { {}*, i64 } %106, 0
  %.elt863 = extractvalue { {}*, i64 } %106, 1
  %cond751 = icmp eq i64 %.elt863, 0
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284982.1 = select i1 %cond751, {}* %107, {}* %.elt861
  br label %tag62

normal-dest271:                                   ; preds = %tag25
  %ptrtoint272 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint273 = add i64 %ptrtoint272, 7
  %entry-point-addr274 = inttoptr i64 %entry-point-addr-uint273 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point275 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr274, align 8
  %108 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point275({}* %28, i64 1, {}* %182, {}* null, {}* null, {}* null)
          to label %normal-dest278 unwind label %cleanup-lpad

normal-dest278:                                   ; preds = %normal-dest271
  %.elt801 = extractvalue { {}*, i64 } %108, 0
  %.elt803 = extractvalue { {}*, i64 } %108, 1
  %cond741 = icmp eq i64 %.elt803, 0
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUT284868279.0 = select i1 %cond741, {}* %109, {}* %.elt801
  %ptrtoint286 = ptrtoint {}* %"closure->LAMBDA711" to i64
  %tag-only287 = and i64 %ptrtoint286, 7
  %test288 = icmp eq i64 %tag-only287, 1
  br i1 %test288, label %header-check-br285, label %tag58

header-check-br285:                               ; preds = %normal-dest278
  %irc-bit-cast289 = bitcast {}* %"closure->LAMBDA711" to i8*
  %gep290 = getelementptr inbounds i8, i8* %irc-bit-cast289, i64 -9
  %irc-bit-cast291 = bitcast i8* %gep290 to i64*
  %110 = load i64, i64* %irc-bit-cast291, align 8
  %.off952 = add i64 %110, -913
  %111 = icmp ult i64 %.off952, 85
  br i1 %111, label %tag68, label %header-check-br247

header-check-br294:                               ; preds = %header-check-br
  %.off955 = add i64 %69, -1001
  %112 = icmp ult i64 %.off955, 5
  br i1 %112, label %maybe-more-tests302, label %tag10

maybe-more-tests302:                              ; preds = %header-check-br294
  %113 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %114 = invoke {}* @cc_safe_fdefinition({}* %113)
          to label %normal-dest663 unwind label %cleanup-lpad

normal-dest304:                                   ; preds = %maybe-more-tests536
  %ptrtoint305 = ptrtoint {}* %154 to i64
  %entry-point-addr-uint306 = add i64 %ptrtoint305, 7
  %entry-point-addr307 = inttoptr i64 %entry-point-addr-uint306 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point308 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr307, align 8
  %115 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point308({}* %154, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest311 unwind label %cleanup-lpad

normal-dest311:                                   ; preds = %normal-dest304
  %.elt873 = extractvalue { {}*, i64 } %115, 0
  %.elt875 = extractvalue { {}*, i64 } %115, 1
  %cond752 = icmp eq i64 %.elt875, 0
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284982.2 = select i1 %cond752, {}* %116, {}* %.elt873
  br label %tag62

header-check-br326:                               ; preds = %tag30
  %irc-bit-cast330 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep331 = getelementptr inbounds i8, i8* %irc-bit-cast330, i64 -9
  %irc-bit-cast332 = bitcast i8* %gep331 to i64*
  %117 = load i64, i64* %irc-bit-cast332, align 8
  %.off967 = add i64 %117, -913
  %118 = icmp ult i64 %.off967, 85
  br i1 %118, label %tag15, label %header-check-br123

normal-dest338:                                   ; preds = %tag32
  %ptrtoint339 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint340 = add i64 %ptrtoint339, 7
  %entry-point-addr341 = inttoptr i64 %entry-point-addr-uint340 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point342 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr341, align 8
  %119 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point342({}* %31, i64 1, {}* %82, {}* null, {}* null, {}* null)
          to label %normal-dest345 unwind label %cleanup-lpad

normal-dest345:                                   ; preds = %normal-dest338
  %.elt881 = extractvalue { {}*, i64 } %119, 0
  %.elt883 = extractvalue { {}*, i64 } %119, 1
  %cond754 = icmp eq i64 %.elt883, 0
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUT284885.0 = select i1 %cond754, {}* %120, {}* %.elt881
  %ptrtoint352 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only353 = and i64 %ptrtoint352, 7
  %test354 = icmp eq i64 %tag-only353, 1
  br i1 %test354, label %header-check-br351, label %tag74

header-check-br351:                               ; preds = %normal-dest345
  %irc-bit-cast355 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep356 = getelementptr inbounds i8, i8* %irc-bit-cast355, i64 -9
  %irc-bit-cast357 = bitcast i8* %gep356 to i64*
  %121 = load i64, i64* %irc-bit-cast357, align 8
  %.off965 = add i64 %121, -913
  %122 = icmp ult i64 %.off965, 85
  br i1 %122, label %tag80, label %header-check-br360

header-check-br360:                               ; preds = %header-check-br351
  %.off966 = add i64 %121, -1001
  %123 = icmp ult i64 %.off966, 5
  br i1 %123, label %maybe-more-tests368, label %tag74

maybe-more-tests368:                              ; preds = %header-check-br360
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %125 = invoke {}* @cc_safe_fdefinition({}* %124)
          to label %normal-dest453 unwind label %cleanup-lpad

normal-dest393:                                   ; preds = %tag37
  %ptrtoint394 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint395 = add i64 %ptrtoint394, 7
  %entry-point-addr396 = inttoptr i64 %entry-point-addr-uint395 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point397 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr396, align 8
  %126 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point397({}* %33, i64 1, {}* %182, {}* null, {}* null, {}* null)
          to label %normal-dest400 unwind label %cleanup-lpad

normal-dest400:                                   ; preds = %normal-dest393
  %.elt797 = extractvalue { {}*, i64 } %126, 0
  %.elt799 = extractvalue { {}*, i64 } %126, 1
  %cond740 = icmp eq i64 %.elt799, 0
  %127 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285107.0 = select i1 %cond740, {}* %127, {}* %.elt797
  %128 = icmp eq {}* %G285107.0, %127
  br i1 %128, label %tag2, label %tag25

normal-dest407:                                   ; preds = %tag38
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %132 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 280), align 16
  %ptrtoint408 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint409 = add i64 %ptrtoint408, 7
  %entry-point-addr410 = inttoptr i64 %entry-point-addr-uint409 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point411 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr410, align 8
  %133 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point411({}* %35, i64 5, {}* %129, {}* %130, {}* %"closure->LAMBDA711", {}* %131, {}* %132)
          to label %normal-dest414 unwind label %cleanup-lpad

normal-dest414:                                   ; preds = %normal-dest407
  %.elt781 = extractvalue { {}*, i64 } %133, 0
  %.elt783 = extractvalue { {}*, i64 } %133, 1
  %cond738 = icmp eq i64 %.elt783, 0
  %134 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285115.2 = select i1 %cond738, {}* %134, {}* %.elt781
  br label %tag1

normal-dest421:                                   ; preds = %tag45
  %ptrtoint422 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint423 = add i64 %ptrtoint422, 7
  %entry-point-addr424 = inttoptr i64 %entry-point-addr-uint423 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point425 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr424, align 8
  %135 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point425({}* %37, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest428 unwind label %cleanup-lpad

normal-dest428:                                   ; preds = %normal-dest421
  %.elt777 = extractvalue { {}*, i64 } %135, 0
  %.elt779 = extractvalue { {}*, i64 } %135, 1
  %cond737 = icmp eq i64 %.elt779, 0
  %136 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284876.0 = select i1 %cond737, {}* %136, {}* %.elt777
  %ptrtoint435 = ptrtoint {}* %"closure->LAMBDA711" to i64
  %tag-only436 = and i64 %ptrtoint435, 7
  %test437 = icmp eq i64 %tag-only436, 1
  br i1 %test437, label %header-check-br434, label %tag38

header-check-br434:                               ; preds = %normal-dest428
  %irc-bit-cast438 = bitcast {}* %"closure->LAMBDA711" to i8*
  %gep439 = getelementptr inbounds i8, i8* %irc-bit-cast438, i64 -9
  %irc-bit-cast440 = bitcast i8* %gep439 to i64*
  %137 = load i64, i64* %irc-bit-cast440, align 8
  %.off950 = add i64 %137, -913
  %138 = icmp ult i64 %.off950, 85
  br i1 %138, label %tag1, label %header-check-br443

header-check-br443:                               ; preds = %header-check-br434
  %.off951 = add i64 %137, -1001
  %139 = icmp ult i64 %.off951, 5
  br i1 %139, label %maybe-more-tests451, label %tag38

maybe-more-tests451:                              ; preds = %header-check-br443
  %140 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %141 = invoke {}* @cc_safe_fdefinition({}* %140)
          to label %normal-dest147 unwind label %cleanup-lpad

normal-dest453:                                   ; preds = %maybe-more-tests368
  %ptrtoint454 = ptrtoint {}* %125 to i64
  %entry-point-addr-uint455 = add i64 %ptrtoint454, 7
  %entry-point-addr456 = inttoptr i64 %entry-point-addr-uint455 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point457 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr456, align 8
  %142 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point457({}* %125, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest460 unwind label %cleanup-lpad

normal-dest460:                                   ; preds = %normal-dest453
  %.elt893 = extractvalue { {}*, i64 } %142, 0
  %.elt895 = extractvalue { {}*, i64 } %142, 1
  %cond756 = icmp eq i64 %.elt895, 0
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284956.1 = select i1 %cond756, {}* %143, {}* %.elt893
  br label %tag80

normal-dest467:                                   ; preds = %maybe-more-tests131
  %ptrtoint468 = ptrtoint {}* %75 to i64
  %entry-point-addr-uint469 = add i64 %ptrtoint468, 7
  %entry-point-addr470 = inttoptr i64 %entry-point-addr-uint469 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point471 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr470, align 8
  %144 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point471({}* %75, i64 1, {}* nonnull %"closure->LAMBDA", {}* null, {}* null, {}* null)
          to label %normal-dest474 unwind label %cleanup-lpad

normal-dest474:                                   ; preds = %normal-dest467
  %.elt905 = extractvalue { {}*, i64 } %144, 0
  %.elt907 = extractvalue { {}*, i64 } %144, 1
  %cond758 = icmp eq i64 %.elt907, 0
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284940.2 = select i1 %cond758, {}* %145, {}* %.elt905
  br label %tag15

normal-dest515:                                   ; preds = %tag58
  %146 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %147 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %148 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %149 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 279), align 8
  %ptrtoint516 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint517 = add i64 %ptrtoint516, 7
  %entry-point-addr518 = inttoptr i64 %entry-point-addr-uint517 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point519 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr518, align 8
  %150 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point519({}* %41, i64 5, {}* %146, {}* %147, {}* %"closure->LAMBDA711", {}* %148, {}* %149)
          to label %normal-dest522 unwind label %cleanup-lpad

normal-dest522:                                   ; preds = %normal-dest515
  %.elt805 = extractvalue { {}*, i64 } %150, 0
  %.elt807 = extractvalue { {}*, i64 } %150, 1
  %cond742 = icmp eq i64 %.elt807, 0
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285089.1 = select i1 %cond742, {}* %151, {}* %.elt805
  br label %tag68

header-check-br528:                               ; preds = %header-check-br611
  %.off964 = add i64 %166, -1001
  %152 = icmp ult i64 %.off964, 5
  br i1 %152, label %maybe-more-tests536, label %tag23

maybe-more-tests536:                              ; preds = %header-check-br528
  %153 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %154 = invoke {}* @cc_safe_fdefinition({}* %153)
          to label %normal-dest304 unwind label %cleanup-lpad

normal-dest538:                                   ; preds = %tag61
  %ptrtoint539 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint540 = add i64 %ptrtoint539, 7
  %entry-point-addr541 = inttoptr i64 %entry-point-addr-uint540 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point542 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr541, align 8
  %155 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point542({}* %43, i64 1, {}* %82, {}* null, {}* null, {}* null)
          to label %normal-dest545 unwind label %cleanup-lpad

normal-dest545:                                   ; preds = %normal-dest538
  %.elt877 = extractvalue { {}*, i64 } %155, 0
  %.elt879 = extractvalue { {}*, i64 } %155, 1
  %cond753 = icmp eq i64 %.elt879, 0
  %156 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284974.0 = select i1 %cond753, {}* %156, {}* %.elt877
  %157 = icmp eq {}* %G284974.0, %156
  br i1 %157, label %tag30, label %tag32

normal-dest558:                                   ; preds = %tag62
  %158 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 144), align 16
  %159 = invoke {}* @cc_safe_fdefinition({}* %158)
          to label %normal-dest564 unwind label %cleanup-lpad

normal-dest564:                                   ; preds = %normal-dest558
  %ptrtoint565 = ptrtoint {}* %159 to i64
  %entry-point-addr-uint566 = add i64 %ptrtoint565, 7
  %entry-point-addr567 = inttoptr i64 %entry-point-addr-uint566 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point568 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr567, align 8
  %160 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point568({}* %159, i64 1, {}* %G284893.0, {}* null, {}* null, {}* null)
          to label %normal-dest571 unwind label %cleanup-lpad

normal-dest571:                                   ; preds = %normal-dest564
  %.elt869 = extractvalue { {}*, i64 } %160, 0
  %161 = ptrtoint {}* %.elt869 to i64
  %.elt871 = extractvalue { {}*, i64 } %160, 1
  br label %tag65

normal-dest589:                                   ; preds = %tag66
  %ptrtoint590 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint591 = add i64 %ptrtoint590, 7
  %entry-point-addr592 = inttoptr i64 %entry-point-addr-uint591 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point593 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr592, align 8
  %162 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point593({}* %49, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest596 unwind label %cleanup-lpad

normal-dest596:                                   ; preds = %normal-dest589
  %.elt833 = extractvalue { {}*, i64 } %162, 0
  %163 = ptrtoint {}* %.elt833 to i64
  %.elt835 = extractvalue { {}*, i64 } %162, 1
  br label %tag65

normal-dest598:                                   ; preds = %tag67
  %ptrtoint599 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint600 = add i64 %ptrtoint599, 7
  %entry-point-addr601 = inttoptr i64 %entry-point-addr-uint600 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point602 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr601, align 8
  %164 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point602({}* %51, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest605 unwind label %cleanup-lpad

normal-dest605:                                   ; preds = %normal-dest598
  %.elt857 = extractvalue { {}*, i64 } %164, 0
  %.elt859 = extractvalue { {}*, i64 } %164, 1
  %cond750 = icmp eq i64 %.elt859, 0
  %165 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284893.0 = select i1 %cond750, {}* %165, {}* %.elt857
  %ptrtoint612 = ptrtoint {}* %"closure->LAMBDA" to i64
  %tag-only613 = and i64 %ptrtoint612, 7
  %test614 = icmp eq i64 %tag-only613, 1
  br i1 %test614, label %header-check-br611, label %tag23

header-check-br611:                               ; preds = %normal-dest605
  %irc-bit-cast615 = bitcast {}* %"closure->LAMBDA" to i8*
  %gep616 = getelementptr inbounds i8, i8* %irc-bit-cast615, i64 -9
  %irc-bit-cast617 = bitcast i8* %gep616 to i64*
  %166 = load i64, i64* %irc-bit-cast617, align 8
  %.off963 = add i64 %166, -913
  %167 = icmp ult i64 %.off963, 85
  br i1 %167, label %tag62, label %header-check-br528

normal-dest626:                                   ; preds = %tag68
  %168 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag65

normal-dest649:                                   ; preds = %tag71
  %ptrtoint650 = ptrtoint {}* %54 to i64
  %entry-point-addr-uint651 = add i64 %ptrtoint650, 7
  %entry-point-addr652 = inttoptr i64 %entry-point-addr-uint651 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point653 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr652, align 8
  %169 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point653({}* %54, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest656 unwind label %cleanup-lpad

normal-dest656:                                   ; preds = %normal-dest649
  %.elt829 = extractvalue { {}*, i64 } %169, 0
  %.elt831 = extractvalue { {}*, i64 } %169, 1
  %cond746 = icmp eq i64 %.elt831, 0
  %170 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285060.0 = select i1 %cond746, {}* %170, {}* %.elt829
  %171 = icmp eq {}* %G285060.0, %170
  br i1 %171, label %tag5, label %tag66

normal-dest663:                                   ; preds = %maybe-more-tests302
  %ptrtoint664 = ptrtoint {}* %114 to i64
  %entry-point-addr-uint665 = add i64 %ptrtoint664, 7
  %entry-point-addr666 = inttoptr i64 %entry-point-addr-uint665 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point667 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr666, align 8
  %172 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point667({}* %114, i64 1, {}* nonnull %"closure->LAMBDA711", {}* null, {}* null, {}* null)
          to label %normal-dest670 unwind label %cleanup-lpad

normal-dest670:                                   ; preds = %normal-dest663
  %.elt825 = extractvalue { {}*, i64 } %172, 0
  %.elt827 = extractvalue { {}*, i64 } %172, 1
  %cond745 = icmp eq i64 %.elt827, 0
  %173 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285073.2 = select i1 %cond745, {}* %173, {}* %.elt825
  br label %tag14

normal-dest677:                                   ; preds = %tag74
  %174 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %175 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %176 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %177 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 271), align 8
  %ptrtoint678 = ptrtoint {}* %56 to i64
  %entry-point-addr-uint679 = add i64 %ptrtoint678, 7
  %entry-point-addr680 = inttoptr i64 %entry-point-addr-uint679 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point681 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr680, align 8
  %178 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point681({}* %56, i64 5, {}* %174, {}* %175, {}* %"closure->LAMBDA", {}* %176, {}* %177)
          to label %normal-dest684 unwind label %cleanup-lpad

normal-dest684:                                   ; preds = %normal-dest677
  %.elt885 = extractvalue { {}*, i64 } %178, 0
  %.elt887 = extractvalue { {}*, i64 } %178, 1
  %cond755 = icmp eq i64 %.elt887, 0
  %179 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G284956.2 = select i1 %cond755, {}* %179, {}* %.elt885
  br label %tag80

normal-dest697:                                   ; preds = %maybe-more-tests255
  %ptrtoint698 = ptrtoint {}* %101 to i64
  %entry-point-addr-uint699 = add i64 %ptrtoint698, 7
  %entry-point-addr700 = inttoptr i64 %entry-point-addr-uint699 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point701 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr700, align 8
  %180 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point701({}* %101, i64 1, {}* nonnull %"closure->LAMBDA711", {}* null, {}* null, {}* null)
          to label %normal-dest704 unwind label %cleanup-lpad

normal-dest704:                                   ; preds = %normal-dest697
  %.elt813 = extractvalue { {}*, i64 } %180, 0
  %.elt815 = extractvalue { {}*, i64 } %180, 1
  %cond743 = icmp eq i64 %.elt815, 0
  %181 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285089.2 = select i1 %cond743, {}* %181, {}* %.elt813
  br label %tag68

normal-dest710:                                   ; preds = %tag78
  %182 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %183 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %184 = icmp eq {}* %182, %183
  br i1 %184, label %tag37, label %tag45

normal-dest728:                                   ; preds = %tag80
  %185 = load i64, i64* bitcast ([1004 x {}*]* @CONTAB5362 to i64*), align 16
  br label %tag65
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.11"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !51 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %process-rest-argument
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest11 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest14, %process-rest-argument
  %format-arg-284887.0 = phi {}* [ %format-arg-284887.1, %process-rest-argument ], [ %format-arg-284887.2, %normal-dest14 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 268), align 16
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest18 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest18, %tag1, %normal-dest11, %tag, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-init, label %opt-arg

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-arg:                                          ; preds = %continue
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %rem-nargs6 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-17 = add i64 %rem-nargs6, -1
  store i64 %rem-nargs-17, i64* %"remaining-nargs*", align 8
  %vaarg8 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

opt-init:                                         ; preds = %continue
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-arg, %opt-init
  %format-arg-284887.1 = phi {}* [ %vaarg8, %opt-arg ], [ undef, %opt-init ]
  %G284890.0 = phi {}* [ %14, %opt-arg ], [ %15, %opt-init ]
  %16 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %18 = icmp eq {}* %G284890.0, %17
  br i1 %18, label %tag, label %tag1

normal-dest11:                                    ; preds = %tag
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 267), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %19, {}* %20, {}* %21, {}* %22, {}* %23, {}* %24, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest11
  %.elt38 = extractvalue { {}*, i64 } %25, 0
  %.elt40 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt40, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284887.2 = select i1 %cond, {}* %26, {}* %.elt38
  br label %tag1

normal-dest18:                                    ; preds = %tag1
  %ptrtoint19 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %12, i64 2, {}* %format-arg-284887.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %28 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %29 = insertvalue { {}*, i64 } %28, i64 1, 1
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.12"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !52 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %process-rest-argument
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest11 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest14, %process-rest-argument
  %format-arg-284870.0 = phi {}* [ %format-arg-284870.1, %process-rest-argument ], [ %format-arg-284870.2, %normal-dest14 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 129), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest18 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %normal-dest18, %tag1, %normal-dest11, %tag, %error
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @":::global-str-LAMBDA^COMMON-LISP^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %enough-given-args = icmp eq i64 %nargs, 1
  br i1 %enough-given-args, label %opt-init, label %opt-arg

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

opt-arg:                                          ; preds = %continue
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %rem-nargs6 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-17 = add i64 %rem-nargs6, -1
  store i64 %rem-nargs-17, i64* %"remaining-nargs*", align 8
  %vaarg8 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  br label %process-rest-argument

opt-init:                                         ; preds = %continue
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %process-rest-argument

process-rest-argument:                            ; preds = %opt-arg, %opt-init
  %format-arg-284870.1 = phi {}* [ %vaarg8, %opt-arg ], [ undef, %opt-init ]
  %G284873.0 = phi {}* [ %14, %opt-arg ], [ %15, %opt-init ]
  %16 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* nonnull %"remaining-nargs*")
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %18 = icmp eq {}* %G284873.0, %17
  br i1 %18, label %tag, label %tag1

normal-dest11:                                    ; preds = %tag
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 277), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 7, {}* %19, {}* %20, {}* %21, {}* %22, {}* %23, {}* %24, {}* inttoptr (i64 4 to {}*))
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest11
  %.elt38 = extractvalue { {}*, i64 } %25, 0
  %.elt40 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt40, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %format-arg-284870.2 = select i1 %cond, {}* %26, {}* %.elt38
  br label %tag1

normal-dest18:                                    ; preds = %tag1
  %ptrtoint19 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint20 = add i64 %ptrtoint19, 7
  %entry-point-addr21 = inttoptr i64 %entry-point-addr-uint20 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point22 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr21, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point22({}* %12, i64 2, {}* %format-arg-284870.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %normal-dest18
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %28 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %29 = insertvalue { {}*, i64 } %28, i64 1, 1
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^110^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !53 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^110^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G285205.0 = phi {}* [ %18, %header-check-br ], [ %G285205.1, %normal-dest17 ], [ %G285205.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 313), align 8
  %ptrtoint43 = ptrtoint {}* %G285205.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G285205.0, i64 2, {}* %"closure->B=LESE-VON-STRING", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %maybe-more-tests42, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 313), align 8
  %"closure->B=LESE-VON-STRING" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 3871, i64 110, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 312), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285205.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

normal-dest21:                                    ; preds = %maybe-more-tests42
  %ptrtoint22 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt118 = extractvalue { {}*, i64 } %27, 0
  %.elt120 = extractvalue { {}*, i64 } %27, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285205.2 = select i1 %cond95, {}* %28, {}* %.elt118
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %29 = icmp ult i64 %.off123, 5
  br i1 %29, label %maybe-more-tests42, label %tag1

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 315), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=LESE-VON-STRING", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 316), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=LESE-VON-STRING", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 313), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 317), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 500 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 313), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !54 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LESE-VON-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc84 unwind label %cleanup-lpad

.noexc84:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest56
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 310), align 16
  br label %tag9

tag5:                                             ; preds = %normal-dest42
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 308), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest21 unwind label %cleanup-lpad

tag6:                                             ; preds = %normal-dest56
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 306), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest35 unwind label %cleanup-lpad

tag8:                                             ; preds = %normal-dest17
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 303), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest49 unwind label %cleanup-lpad

tag9:                                             ; preds = %normal-dest42, %normal-dest28, %normal-dest17, %tag1
  %G285223.0 = phi {}* [ %11, %tag1 ], [ %farg0, %normal-dest17 ], [ %G285223.1, %normal-dest28 ], [ %30, %normal-dest42 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %18 = insertvalue { {}*, i64 } undef, {}* %G285223.0, 0
  %19 = insertvalue { {}*, i64 } %18, i64 1, 1
  ret { {}*, i64 } %19

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest49, %tag8, %normal-dest35, %tag6, %normal-dest21, %tag5, %normal-dest14, %normal-dest
  %20 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %20

normal-dest:                                      ; preds = %entry
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest14 unwind label %cleanup-lpad

normal-dest14:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %22 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %22, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest14
  %.elt = extractvalue { {}*, i64 } %23, 0
  %.elt68 = extractvalue { {}*, i64 } %23, 1
  %cond = icmp eq i64 %.elt68, 0
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond, {}* %24, {}* %.elt
  %25 = icmp eq {}* %object.0, %24
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285238.0 = select i1 %25, {}* %.val, {}* %24
  %26 = icmp eq {}* %G285238.0, %24
  br i1 %26, label %tag8, label %tag9

normal-dest21:                                    ; preds = %tag5
  %ptrtoint22 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %13, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt81 = extractvalue { {}*, i64 } %27, 0
  %.elt83 = extractvalue { {}*, i64 } %27, 1
  %cond66 = icmp eq i64 %.elt83, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285223.1 = select i1 %cond66, {}* %28, {}* %.elt81
  br label %tag9

normal-dest35:                                    ; preds = %tag6
  %ptrtoint36 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint37 = add i64 %ptrtoint36, 7
  %entry-point-addr38 = inttoptr i64 %entry-point-addr-uint37 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point39 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr38, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point39({}* %15, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest42 unwind label %cleanup-lpad

normal-dest42:                                    ; preds = %normal-dest35
  %.elt77 = extractvalue { {}*, i64 } %29, 0
  %.elt79 = extractvalue { {}*, i64 } %29, 1
  %cond65 = icmp eq i64 %.elt79, 0
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285227.0 = select i1 %cond65, {}* %30, {}* %.elt77
  %31 = icmp eq {}* %G285227.0, %30
  br i1 %31, label %tag5, label %tag9

normal-dest49:                                    ; preds = %tag8
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 305), align 8
  %ptrtoint50 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint51 = add i64 %ptrtoint50, 7
  %entry-point-addr52 = inttoptr i64 %entry-point-addr-uint51 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point53 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr52, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point53({}* %17, i64 2, {}* %farg0, {}* %32, {}* null, {}* null)
          to label %normal-dest56 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %normal-dest49
  %.elt73 = extractvalue { {}*, i64 } %33, 0
  %.elt75 = extractvalue { {}*, i64 } %33, 1
  %cond64 = icmp eq i64 %.elt75, 0
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285232.0 = select i1 %cond64, {}* %34, {}* %.elt73
  %35 = icmp eq {}* %G285232.0, %34
  br i1 %35, label %tag6, label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^134^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !55 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^134^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G285268.0 = phi {}* [ %18, %header-check-br ], [ %G285268.1, %normal-dest17 ], [ %G285268.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %ptrtoint43 = ptrtoint {}* %G285268.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G285268.0, i64 2, {}* %"closure->B=KONKATENIERE-NACH-STRING", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %tag1, %normal-dest13, %maybe-more-tests42, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %"closure->B=KONKATENIERE-NACH-STRING" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4484, i64 134, i64 1, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %maybe-more-tests42
  %ptrtoint14 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285268.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag4

normal-dest21:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 325), align 8
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt97 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt97, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285268.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %29 = icmp ult i64 %.off123, 5
  br i1 %29, label %maybe-more-tests42, label %tag1

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 328), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=KONKATENIERE-NACH-STRING", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 331), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=KONKATENIERE-NACH-STRING", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 332), align 16
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 604 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !56 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 0
  br i1 %enough-args, label %error, label %process-rest-argument

cleanup-lpad:                                     ; preds = %normal-dest13, %normal-dest9, %normal-dest8, %normal-dest6, %normal-dest5, %process-rest-argument, %error
  %9 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %9

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @":::global-str-B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 0)
          to label %normal-dest unwind label %cleanup-lpad

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

process-rest-argument:                            ; preds = %entry
  %10 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 319), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %process-rest-argument
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %13, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.13", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.13^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4484, i64 134, i64 1, i64 0)
          to label %normal-dest6 unwind label %cleanup-lpad

normal-dest6:                                     ; preds = %normal-dest5
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 323), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest6
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA10" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.14", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.14^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 4484, i64 134, i64 1, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest8
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %17 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 2, {}* %"closure->LAMBDA10", {}* %10, {}* null, {}* null)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest13:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %17, 0
  %.elt24 = extractvalue { {}*, i64 } %17, 1
  %cond = icmp eq i64 %.elt24, 0
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285288.0 = select i1 %cond, {}* %18, {}* %.elt
  %ptrtoint16 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint17 = add i64 %ptrtoint16, 7
  %entry-point-addr18 = inttoptr i64 %entry-point-addr-uint17 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point19 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr18, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point19({}* %12, i64 2, {}* %"closure->LAMBDA", {}* %G285288.0, {}* null, {}* null)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %normal-dest13
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %19
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.13"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !57 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.13^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.13^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 321), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 3, {}* %17, {}* %farg0, {}* %farg1, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.14"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !58 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.14^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.14^DESC" to %0*)) #7
          to label %.noexc33 unwind label %cleanup-lpad

.noexc33:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %normal-dest23
  %return-value.sroa.5.0 = phi i64 [ %.elt32, %normal-dest23 ], [ 1, %normal-dest10 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt30, %normal-dest23 ], [ %farg0, %normal-dest10 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %11 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %12 = insertvalue { {}*, i64 } %11, i64 %return-value.sroa.5.0, 1
  ret { {}*, i64 } %12

tag2:                                             ; preds = %normal-dest10
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest16 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest16, %tag2, %normal-dest7, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %18, 0
  %.elt25 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt25, 0
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285297.0 = select i1 %cond, {}* %19, {}* %.elt
  %20 = icmp eq {}* %G285297.0, %19
  br i1 %20, label %tag2, label %tag1

normal-dest16:                                    ; preds = %tag2
  %ptrtoint17 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %14, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt30 = extractvalue { {}*, i64 } %21, 0
  %.elt32 = extractvalue { {}*, i64 } %21, 1
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^164^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !59 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^164^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G285332.0 = phi {}* [ %18, %header-check-br ], [ %G285332.1, %normal-dest17 ], [ %G285332.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 345), align 8
  %ptrtoint29 = ptrtoint {}* %G285332.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G285332.0, i64 2, {}* %"closure->B=KONKATENIERE-NACH-ATOM", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests28, %normal-dest67, %normal-dest61, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 345), align 8
  %"closure->B=KONKATENIERE-NACH-ATOM" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5142, i64 164, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 344), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285332.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %27 = icmp ult i64 %.off123, 5
  br i1 %27, label %maybe-more-tests28, label %tag1

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 347), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->B=KONKATENIERE-NACH-ATOM", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 350), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->B=KONKATENIERE-NACH-ATOM", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest61
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 345), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 351), align 8
  %ptrtoint68 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %39, i64 3, {}* %40, {}* %41, {}* %42, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad

normal-dest74:                                    ; preds = %normal-dest67
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %44, {}* inttoptr (i64 656 to {}*))
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 345), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %46 = insertvalue { {}*, i64 } undef, {}* %45, 0
  %47 = insertvalue { {}*, i64 } %46, i64 1, 1
  ret { {}*, i64 } %47

normal-dest82:                                    ; preds = %maybe-more-tests28
  %ptrtoint83 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285332.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !60 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 0
  br i1 %enough-args, label %error, label %process-rest-argument

cleanup-lpad:                                     ; preds = %normal-dest10, %normal-dest7, %normal-dest5, %process-rest-argument, %error
  %9 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %9

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @":::global-str-B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 0)
          to label %normal-dest unwind label %cleanup-lpad

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

process-rest-argument:                            ; preds = %entry
  %10 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 313), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %process-rest-argument
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 342), align 16
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 2, {}* %15, {}* %10, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %16, 0
  %.elt21 = extractvalue { {}*, i64 } %16, 1
  %cond = icmp eq i64 %.elt21, 0
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285351.0 = select i1 %cond, {}* %17, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %12, i64 1, {}* %G285351.0, {}* null, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^170^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !61 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^170^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest89, %normal-dest26, %header-check-br
  %G285379.0 = phi {}* [ %18, %header-check-br ], [ %G285379.1, %normal-dest26 ], [ %G285379.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 354), align 16
  %ptrtoint29 = ptrtoint {}* %G285379.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G285379.0, i64 2, {}* %"closure->B=STRING-NACH-LISTE", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests21, %normal-dest67, %normal-dest61, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest22, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 354), align 16
  %"closure->B=STRING-NACH-LISTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5360, i64 170, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 353), align 8
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt97 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt97, 0
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285379.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag3

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 356), align 16
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->B=STRING-NACH-LISTE", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 357), align 8
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->B=STRING-NACH-LISTE", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest61
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 354), align 16
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 358), align 16
  %ptrtoint68 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %39, i64 3, {}* %40, {}* %41, {}* %42, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad

normal-dest74:                                    ; preds = %normal-dest67
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %44, {}* inttoptr (i64 680 to {}*))
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 354), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %46 = insertvalue { {}*, i64 } undef, {}* %45, 0
  %47 = insertvalue { {}*, i64 } %46, i64 1, 1
  ret { {}*, i64 } %47

normal-dest82:                                    ; preds = %maybe-more-tests21
  %ptrtoint83 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285379.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !62 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 313), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 3, {}* inttoptr (i64 322 to {}*), {}* %farg0, {}* inttoptr (i64 330 to {}*), {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %16, 0
  %.elt21 = extractvalue { {}*, i64 } %16, 1
  %cond = icmp eq i64 %.elt21, 0
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285398.0 = select i1 %cond, {}* %17, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %13, i64 1, {}* %G285398.0, {}* null, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %18
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^178^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !63 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^178^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br72
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G285428.0 = phi {}* [ %18, %header-check-br ], [ %G285428.1, %normal-dest17 ], [ %G285428.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 384), align 16
  %ptrtoint20 = ptrtoint {}* %G285428.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G285428.0, i64 2, {}* %"closure->B=LISTE-NACH-STRING", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests80, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 384), align 16
  %"closure->B=LISTE-NACH-STRING" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 5717, i64 178, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br72

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 383), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285428.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 386), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->B=LISTE-NACH-STRING", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 389), align 8
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->B=LISTE-NACH-STRING", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 384), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 390), align 16
  %ptrtoint59 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %36, i64 3, {}* %37, {}* %38, {}* %39, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %41, {}* inttoptr (i64 712 to {}*))
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 384), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %45 = icmp ult i64 %.off123, 5
  br i1 %45, label %maybe-more-tests80, label %tag

maybe-more-tests80:                               ; preds = %header-check-br72
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %maybe-more-tests80
  %ptrtoint83 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %47, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285428.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !64 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc381 unwind label %cleanup-lpad.loopexit.split-lp

.noexc381:                                        ; preds = %10
  unreachable

tag:                                              ; preds = %tag46
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest78 unwind label %cleanup-lpad.loopexit.split-lp

tag4:                                             ; preds = %tag48
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest234 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag8:                                             ; preds = %normal-dest
  %15 = load i64, i64* bitcast ({}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 360) to i64*), align 16
  br label %tag12

tag10:                                            ; preds = %normal-dest279, %normal-dest202, %tag55
  %G285450.0 = phi {}* [ %43, %tag55 ], [ %G285450.1, %normal-dest202 ], [ %G285450.2, %normal-dest279 ]
  %ptrtoint103 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint104 = add i64 %ptrtoint103, 7
  %entry-point-addr105 = inttoptr i64 %entry-point-addr-uint104 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point106 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr105, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point106({}* %90, i64 3, {}* %.in, {}* inttoptr (i64 4 to {}*), {}* %G285450.0, {}* null)
          to label %normal-dest109 unwind label %cleanup-lpad.loopexit.split-lp

tag12:                                            ; preds = %normal-dest109, %tag8
  %return-value.sroa.20.0 = phi i64 [ 1, %tag8 ], [ %.elt356, %normal-dest109 ]
  %return-value.sroa.0.0 = phi i64 [ %15, %tag8 ], [ %61, %normal-dest109 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %17 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %18 = insertvalue { {}*, i64 } undef, {}* %17, 0
  %19 = insertvalue { {}*, i64 } %18, i64 %return-value.sroa.20.0, 1
  ret { {}*, i64 } %19

tag17:                                            ; preds = %tag24
  %20 = icmp eq {}* %G2095854.0, %.val395
  %G285494.0 = select i1 %20, {}* %.val392, {}* %.val395
  %21 = icmp eq {}* %G285494.0, %.val395
  br i1 %21, label %tag34, label %tag67

tag18:                                            ; preds = %tag68
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest112 unwind label %cleanup-lpad.loopexit.loopexit

tag21:                                            ; preds = %tag72
  %24 = add i64 %91, 7
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25, align 8
  %"tag fixnum" = shl nuw i64 %26, 2
  %27 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag67

tag22:                                            ; preds = %normal-dest137, %tag22.outer
  br i1 %consp-test, label %tag53, label %tag68

tag24:                                            ; preds = %tag68, %normal-dest120, %tag53
  %.val395 = phi {}* [ %.val393.pre, %tag53 ], [ %67, %normal-dest120 ], [ %47, %tag68 ]
  %G2095854.0 = phi {}* [ %41, %tag53 ], [ %G2095854.1, %normal-dest120 ], [ %47, %tag68 ]
  %28 = ptrtoint {}* %G2095854.0 to i64
  %tag-only131338 = and i64 %28, 7
  %consp-test132 = icmp eq i64 %tag-only131338, 3
  %.val392 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285523.0 = select i1 %consp-test132, {}* %.val392, {}* %.val395
  %29 = icmp eq {}* %G285523.0, %.val395
  br i1 %29, label %tag17, label %tag48

tag33:                                            ; preds = %tag48
  %30 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %36, i64 4)
  %result = extractvalue { i64, i1 } %30, 0
  %overflow = extractvalue { i64, i1 } %30, 1
  %31 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag51, label %tag22.outer.backedge

tag22.outer.backedge:                             ; preds = %tag33, %normal-dest216, %normal-dest241
  %LENGTH.0.ph.be = phi {}* [ %LENGTH.2, %normal-dest241 ], [ %LENGTH.1, %normal-dest216 ], [ %31, %tag33 ]
  br label %tag22.outer

tag34:                                            ; preds = %tag17
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest137 unwind label %cleanup-lpad.loopexit.loopexit

tag37:                                            ; preds = %tag60, %header-check-br300, %normal-dest95
  %.pre = phi {}* [ %.val389, %tag60 ], [ %.val389, %header-check-br300 ], [ %59, %normal-dest95 ]
  br label %tag72

tag46:                                            ; preds = %tag72
  %34 = icmp eq {}* %.in, %.val397
  %.val396 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285482.0 = select i1 %34, {}* %.val396, {}* %.val397
  %35 = icmp eq {}* %G285482.0, %.val397
  br i1 %35, label %tag, label %tag67

tag48:                                            ; preds = %tag24
  %36 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only189339 = and i64 %36, 3
  %fixnump-test190 = icmp eq i64 %fixnum-tag-only189339, 0
  br i1 %fixnump-test190, label %tag33, label %tag4

tag50:                                            ; preds = %tag67
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest195 unwind label %cleanup-lpad.loopexit.split-lp

tag51:                                            ; preds = %tag33
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest209 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag53:                                            ; preds = %tag22
  %41 = load {}*, {}** %76, align 8
  %.val393.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag24

tag55:                                            ; preds = %tag67
  %42 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %46, i64 4)
  %result192 = extractvalue { i64, i1 } %42, 0
  %overflow193 = extractvalue { i64, i1 } %42, 1
  %43 = inttoptr i64 %result192 to {}*
  br i1 %overflow193, label %tag63, label %tag10

tag60:                                            ; preds = %normal-dest324
  %test257 = icmp eq i64 %tag-only325336, 1
  br i1 %test257, label %header-check-br254, label %tag37

tag63:                                            ; preds = %tag55
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest272 unwind label %cleanup-lpad.loopexit.split-lp

tag67:                                            ; preds = %tag17, %normal-dest81, %tag21, %tag46
  %x.0 = phi {}* [ %27, %tag21 ], [ null, %tag46 ], [ %x.1, %normal-dest81 ], [ %LENGTH.0.ph, %tag17 ]
  %46 = ptrtoint {}* %x.0 to i64
  %fixnum-tag-only348 = and i64 %46, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only348, 0
  br i1 %fixnump-test, label %tag55, label %tag50

tag68:                                            ; preds = %tag22
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %48 = icmp eq {}* %SEQUENCE.0.ph, %47
  %.val390 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285535.0 = select i1 %48, {}* %.val390, {}* %47
  %49 = icmp eq {}* %G285535.0, %47
  br i1 %49, label %tag18, label %tag24

tag72:                                            ; preds = %header-check-br254, %normal-dest95, %tag37
  %.val397 = phi {}* [ %.pre, %tag37 ], [ %59, %normal-dest95 ], [ %.val389, %header-check-br254 ]
  %G285486.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag37 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest95 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br254 ]
  %G285486.0 = load {}*, {}** %G285486.0.in, align 8
  %50 = icmp eq {}* %G285486.0, %.val397
  br i1 %50, label %tag46, label %tag21

tag73:                                            ; preds = %normal-dest
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest310 unwind label %cleanup-lpad.loopexit.split-lp

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest137, %tag34, %normal-dest112, %tag18
  %lpad.loopexit399 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest234, %tag4, %normal-dest209, %tag51
  %lpad.loopexit.split-lp400 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %tag, %normal-dest78, %maybe-more-tests308, %normal-dest88, %tag10, %tag50, %normal-dest195, %tag63, %normal-dest272, %tag73, %normal-dest310, %normal-dest317, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ], [ %lpad.loopexit399, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp400, %cleanup-lpad.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %54 = icmp eq {}* %53, %farg0
  br i1 %54, label %tag8, label %tag73

normal-dest78:                                    ; preds = %tag
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 369), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 2, {}* %.in, {}* %55, {}* null, {}* null)
          to label %normal-dest81 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest81:                                    ; preds = %normal-dest78
  %.elt373 = extractvalue { {}*, i64 } %56, 0
  %.elt375 = extractvalue { {}*, i64 } %56, 1
  %cond332 = icmp eq i64 %.elt375, 0
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x.1 = select i1 %cond332, {}* %57, {}* %.elt373
  br label %tag67

normal-dest88:                                    ; preds = %maybe-more-tests308
  %ptrtoint89 = ptrtoint {}* %85 to i64
  %entry-point-addr-uint90 = add i64 %ptrtoint89, 7
  %entry-point-addr91 = inttoptr i64 %entry-point-addr-uint90 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point92 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr91, align 8
  %58 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point92({}* %85, i64 1, {}* nonnull %.in, {}* null, {}* null, {}* null)
          to label %normal-dest95 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest95:                                    ; preds = %normal-dest88
  %.elt377 = extractvalue { {}*, i64 } %58, 0
  %.elt379 = extractvalue { {}*, i64 } %58, 1
  %cond333 = icmp eq i64 %.elt379, 0
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285553.0 = select i1 %cond333, {}* %59, {}* %.elt377
  %60 = icmp eq {}* %G285553.0, inttoptr (i64 4 to {}*)
  br i1 %60, label %tag72, label %tag37

normal-dest109:                                   ; preds = %tag10
  %.elt354 = extractvalue { {}*, i64 } %16, 0
  %61 = ptrtoint {}* %.elt354 to i64
  %.elt356 = extractvalue { {}*, i64 } %16, 1
  br label %tag12

normal-dest112:                                   ; preds = %tag18
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint114 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint115 = add i64 %ptrtoint114, 7
  %entry-point-addr116 = inttoptr i64 %entry-point-addr-uint115 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point117 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr116, align 8
  %66 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point117({}* %23, i64 5, {}* %62, {}* %63, {}* %SEQUENCE.0.ph, {}* %64, {}* %65)
          to label %normal-dest120 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest120:                                   ; preds = %normal-dest112
  %.elt369 = extractvalue { {}*, i64 } %66, 0
  %.elt371 = extractvalue { {}*, i64 } %66, 1
  %cond331 = icmp eq i64 %.elt371, 0
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond331, {}* %67, {}* %.elt369
  br label %tag24

normal-dest137:                                   ; preds = %tag34
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 370), align 16
  %ptrtoint138 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint139 = add i64 %ptrtoint138, 7
  %entry-point-addr140 = inttoptr i64 %entry-point-addr-uint139 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point141 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr140, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point141({}* %33, i64 2, {}* %G2095854.0, {}* %68, {}* null, {}* null)
          to label %tag22 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest195:                                   ; preds = %tag50
  %ptrtoint196 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint197 = add i64 %ptrtoint196, 7
  %entry-point-addr198 = inttoptr i64 %entry-point-addr-uint197 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point199 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr198, align 8
  %70 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point199({}* %38, i64 2, {}* %x.0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest202 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest202:                                   ; preds = %normal-dest195
  %.elt350 = extractvalue { {}*, i64 } %70, 0
  %.elt352 = extractvalue { {}*, i64 } %70, 1
  %cond329 = icmp eq i64 %.elt352, 0
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285450.1 = select i1 %cond329, {}* %71, {}* %.elt350
  br label %tag10

normal-dest209:                                   ; preds = %tag51
  %ptrtoint210 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint211 = add i64 %ptrtoint210, 7
  %entry-point-addr212 = inttoptr i64 %entry-point-addr-uint211 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point213 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr212, align 8
  %72 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point213({}* %40, i64 1, {}* %31, {}* null, {}* null, {}* null)
          to label %normal-dest216 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest216:                                   ; preds = %normal-dest209
  %.elt345 = extractvalue { {}*, i64 } %72, 0
  %.elt347 = extractvalue { {}*, i64 } %72, 1
  %cond328 = icmp eq i64 %.elt347, 0
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond328, {}* %73, {}* %.elt345
  br label %tag22.outer.backedge

tag22.outer:                                      ; preds = %tag22.outer.backedge, %tag22.outer.preheader
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag22.outer.preheader ], [ %LENGTH.0.ph.be, %tag22.outer.backedge ]
  %SEQUENCE.0.ph = phi {}* [ %.in, %tag22.outer.preheader ], [ %G2095854.0, %tag22.outer.backedge ]
  %74 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only337 = and i64 %74, 7
  %consp-test = icmp eq i64 %tag-only337, 3
  %75 = add i64 %74, 5
  %76 = inttoptr i64 %75 to {}**
  br label %tag22

normal-dest234:                                   ; preds = %tag4
  %ptrtoint235 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint236 = add i64 %ptrtoint235, 7
  %entry-point-addr237 = inttoptr i64 %entry-point-addr-uint236 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point238 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr237, align 8
  %77 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point238({}* %14, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest241 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest241:                                   ; preds = %normal-dest234
  %.elt341 = extractvalue { {}*, i64 } %77, 0
  %.elt343 = extractvalue { {}*, i64 } %77, 1
  %cond327 = icmp eq i64 %.elt343, 0
  %78 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond327, {}* %78, {}* %.elt341
  br label %tag22.outer.backedge

header-check-br254:                               ; preds = %tag60
  %gep259 = getelementptr inbounds i8, i8* %88, i64 -9
  %irc-bit-cast260 = bitcast i8* %gep259 to i64*
  %79 = load i64, i64* %irc-bit-cast260, align 8
  %.off = add i64 %79, -1081
  %80 = icmp ult i64 %.off, 69
  br i1 %80, label %tag72, label %header-check-br300

normal-dest272:                                   ; preds = %tag63
  %ptrtoint273 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint274 = add i64 %ptrtoint273, 7
  %entry-point-addr275 = inttoptr i64 %entry-point-addr-uint274 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point276 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr275, align 8
  %81 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point276({}* %45, i64 1, {}* %43, {}* null, {}* null, {}* null)
          to label %normal-dest279 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest279:                                   ; preds = %normal-dest272
  %.elt361 = extractvalue { {}*, i64 } %81, 0
  %.elt363 = extractvalue { {}*, i64 } %81, 1
  %cond330 = icmp eq i64 %.elt363, 0
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285450.2 = select i1 %cond330, {}* %82, {}* %.elt361
  br label %tag10

header-check-br300:                               ; preds = %header-check-br254
  %.off398 = add i64 %79, -1153
  %83 = icmp ult i64 %.off398, 149
  br i1 %83, label %maybe-more-tests308, label %tag37

maybe-more-tests308:                              ; preds = %header-check-br300
  %84 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %85 = invoke {}* @cc_safe_fdefinition({}* %84)
          to label %normal-dest88 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest310:                                   ; preds = %tag73
  %ptrtoint311 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint312 = add i64 %ptrtoint311, 7
  %entry-point-addr313 = inttoptr i64 %entry-point-addr-uint312 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point314 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr313, align 8
  %86 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point314({}* %52, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest317 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest317:                                   ; preds = %normal-dest310
  %.elt = extractvalue { {}*, i64 } %86, 0
  %.elt335 = extractvalue { {}*, i64 } %86, 1
  %cond = icmp eq i64 %.elt335, 0
  %87 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond, {}* %87, {}* %.elt
  %88 = bitcast {}* %.in to i8*
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest324 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest324:                                   ; preds = %normal-dest317
  %91 = ptrtoint {}* %.in to i64
  %tag-only325336 = and i64 %91, 7
  %consp-test326 = icmp eq i64 %tag-only325336, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val389 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285542.0 = select i1 %consp-test326, {}* %.val, {}* %.val389
  %92 = icmp eq {}* %G285542.0, %.val389
  br i1 %92, label %tag60, label %tag22.outer.preheader

tag22.outer.preheader:                            ; preds = %normal-dest324
  br label %tag22.outer
}

declare float @from_object_float({}*) local_unnamed_addr #3

declare {}* @to_object_float(float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

declare double @from_object_double({}*) local_unnamed_addr #3

declare {}* @to_object_double(double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #4

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^191^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !65 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^191^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G285593.0 = phi {}* [ %18, %header-check-br ], [ %G285593.1, %normal-dest26 ], [ %G285593.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 415), align 8
  %ptrtoint43 = ptrtoint {}* %G285593.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G285593.0, i64 2, {}* %"closure->B=ZENTRIERE-LISPAUSDRUCK", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 415), align 8
  %"closure->B=ZENTRIERE-LISPAUSDRUCK" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 6086, i64 191, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 414), align 16
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt97 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt97, 0
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285593.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt118 = extractvalue { {}*, i64 } %30, 0
  %.elt120 = extractvalue { {}*, i64 } %30, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285593.2 = select i1 %cond95, {}* %31, {}* %.elt118
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 417), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=ZENTRIERE-LISPAUSDRUCK", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 428), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=ZENTRIERE-LISPAUSDRUCK", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 415), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 429), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 764 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 415), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !66 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 2
  br i1 %enough-args, label %error, label %continue

tag.thread:                                       ; preds = %header-check-br436, %header-check-br518, %tag79, %tag15
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  br label %tag119

tag:                                              ; preds = %tag36, %normal-dest451
  %10 = phi {}* [ %177, %normal-dest451 ], [ %158, %tag36 ]
  %G285628.0 = phi {}* [ %G285628.1, %normal-dest451 ], [ %.val740, %tag36 ]
  %11 = icmp eq {}* %G285628.0, %10
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  br i1 %11, label %tag119, label %tag25

tag2:                                             ; preds = %tag106
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest142 unwind label %cleanup-lpad.loopexit.loopexit

tag4:                                             ; preds = %switch.early.test, %tag64
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest149 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag5:                                             ; preds = %tag106, %normal-dest145, %tag52
  %.val738 = phi {}* [ %.val736.pre, %tag52 ], [ %114, %normal-dest145 ], [ %84, %tag106 ]
  %G2095854.0 = phi {}* [ %54, %tag52 ], [ %G2095854.1, %normal-dest145 ], [ %84, %tag106 ]
  %17 = ptrtoint {}* %G2095854.0 to i64
  %tag-only619 = and i64 %17, 7
  %consp-test = icmp eq i64 %tag-only619, 3
  %.val735 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285766.0 = select i1 %consp-test, {}* %.val735, {}* %.val738
  %18 = icmp eq {}* %G285766.0, %.val738
  br i1 %18, label %tag19, label %tag95

tag8:                                             ; preds = %tag63
  %trunc739 = trunc i64 %61 to i3
  switch i3 %trunc739, label %tag55 [
    i3 -2, label %tag49
    i3 1, label %header-check-br478
  ]

tag10:                                            ; preds = %header-check-br261
  %19 = invoke double @from_object_double({}* nonnull %STRINGLAENGE.0)
          to label %normal-dest163 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag14:                                            ; preds = %tag37, %normal-dest283, %tag97, %tag90, %tag69, %tag66
  %G285697.0 = phi {}* [ %64, %tag69 ], [ %63, %tag66 ], [ %73, %tag90 ], [ %79, %tag97 ], [ %G285697.1, %normal-dest283 ], [ %., %tag37 ]
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %21 = icmp eq {}* %G285697.0, %20
  br i1 %21, label %tag105, label %tag85

tag15:                                            ; preds = %header-check-br518, %header-check-br518, %header-check-br518, %header-check-br518
  %22 = ptrtoint {}* %36 to i64
  %single-float-tag-only174 = and i64 %22, 7
  %fixnum-tag-only434677 = and i64 %22, 3
  %fixnump-test435 = icmp ne i64 %fixnum-tag-only434677, 0
  %test439 = icmp eq i64 %single-float-tag-only174, 1
  %or.cond729 = and i1 %fixnump-test435, %test439
  br i1 %or.cond729, label %header-check-br436, label %tag.thread

tag16:                                            ; preds = %header-check-br358
  %23 = invoke double @from_object_double({}* nonnull %vaarg128)
          to label %normal-dest175 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag19:                                            ; preds = %tag5
  %24 = icmp eq {}* %G2095854.0, %.val738
  %G285737.0 = select i1 %24, {}* %.val735, {}* %.val738
  %25 = icmp eq {}* %G285737.0, %.val738
  br i1 %25, label %tag77, label %tag54

tag20:                                            ; preds = %tag51
  %26 = icmp eq {}* %.in, %.val743
  %.val742 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285725.0 = select i1 %26, {}* %.val742, {}* %.val743
  %27 = icmp eq {}* %G285725.0, %.val743
  br i1 %27, label %tag94, label %tag54

tag21:                                            ; preds = %tag92
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest198 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag22:                                            ; preds = %normal-dest189
  %test214 = icmp eq i64 %tag-only195617, 1
  br i1 %test214, label %header-check-br211, label %tag93

tag23:                                            ; preds = %tag54
  %trunc = trunc i64 %56 to i3
  switch i3 %trunc, label %tag34 [
    i3 -2, label %tag45
    i3 1, label %header-check-br155
  ]

tag25:                                            ; preds = %tag
  %30 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest228 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag60.outer:                                      ; preds = %tag60.outer.backedge, %tag60.outer.preheader
  %SEQUENCE.0.ph = phi {}* [ %.in, %tag60.outer.preheader ], [ %G2095854.0, %tag60.outer.backedge ]
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag60.outer.preheader ], [ %LENGTH.0.ph.be, %tag60.outer.backedge ]
  %31 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only417618 = and i64 %31, 7
  %consp-test418 = icmp eq i64 %tag-only417618, 3
  %32 = add i64 %31, 5
  %33 = inttoptr i64 %32 to {}**
  br label %tag60

tag31:                                            ; preds = %header-check-br155
  %ptrtoint262 = ptrtoint {}* %vaarg128 to i64
  %tag-only263 = and i64 %ptrtoint262, 7
  %test264 = icmp eq i64 %tag-only263, 1
  br i1 %test264, label %header-check-br261, label %tag34

tag34:                                            ; preds = %tag23, %tag72, %tag45, %header-check-br261, %tag31, %header-check-br155
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 400), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest276 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag36:                                            ; preds = %normal-dest347
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 396), align 16
  %37 = icmp eq {}* %rundungsrichtung.0, %36
  %.val740 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285637.0 = select i1 %37, {}* %.val740, {}* %158
  %38 = icmp eq {}* %G285637.0, %158
  br i1 %38, label %tag79, label %tag

tag37:                                            ; preds = %tag72
  %39 = icmp slt {}* %vaarg128, %STRINGLAENGE.0
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %. = select i1 %39, {}* %40, {}* %55
  br label %tag14

tag39:                                            ; preds = %tag51
  %41 = add i64 %130, 7
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 8
  %"tag fixnum" = shl nuw i64 %43, 2
  %44 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag54

tag44:                                            ; preds = %normal-dest556, %normal-dest384, %normal-dest205, %normal-dest177, %tag92
  %REST.0 = phi {}* [ %75, %tag92 ], [ %126, %normal-dest177 ], [ %REST.1, %normal-dest205 ], [ %REST.2, %normal-dest384 ], [ %197, %normal-dest556 ]
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 402), align 16
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest299 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag45:                                            ; preds = %tag23
  %47 = ptrtoint {}* %vaarg128 to i64
  %single-float-tag-only353 = and i64 %47, 7
  %48 = icmp eq i64 %single-float-tag-only353, 6
  br i1 %48, label %tag48, label %tag34

tag46:                                            ; preds = %tag95
  %49 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %78, i64 4)
  %result = extractvalue { i64, i1 } %49, 0
  %overflow = extractvalue { i64, i1 } %49, 1
  %50 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag58, label %tag60.outer.backedge

tag60.outer.backedge:                             ; preds = %tag46, %normal-dest407, %normal-dest244
  %LENGTH.0.ph.be = phi {}* [ %50, %tag46 ], [ %LENGTH.2, %normal-dest407 ], [ %LENGTH.1, %normal-dest244 ]
  br label %tag60.outer

tag48:                                            ; preds = %tag45
  %51 = invoke float @from_object_float({}* %STRINGLAENGE.0)
          to label %normal-dest355 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag49:                                            ; preds = %tag8
  %52 = icmp eq i64 %tag-only544, 6
  br i1 %52, label %tag107, label %tag55

tag51:                                            ; preds = %header-check-br211, %normal-dest597, %tag93
  %.val743 = phi {}* [ %.pre759, %tag93 ], [ %200, %normal-dest597 ], [ %128, %header-check-br211 ]
  %G285729.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag93 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest597 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br211 ]
  %G285729.0 = load {}*, {}** %G285729.0.in, align 8
  %53 = icmp eq {}* %G285729.0, %.val743
  br i1 %53, label %tag20, label %tag39

tag52:                                            ; preds = %tag60
  %54 = load {}*, {}** %33, align 8
  %.val736.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag5

tag54:                                            ; preds = %tag19, %normal-dest508, %tag20, %tag39
  %55 = phi {}* [ %.val743, %tag39 ], [ %.val743, %tag20 ], [ %186, %normal-dest508 ], [ %.val738, %tag19 ]
  %STRINGLAENGE.0 = phi {}* [ %44, %tag39 ], [ null, %tag20 ], [ %STRINGLAENGE.1, %normal-dest508 ], [ %LENGTH.0.ph, %tag19 ]
  %56 = ptrtoint {}* %STRINGLAENGE.0 to i64
  %fixnum-tag-only374629 = and i64 %56, 3
  %fixnump-test375 = icmp eq i64 %fixnum-tag-only374629, 0
  br i1 %fixnump-test375, label %tag72, label %tag23

tag55:                                            ; preds = %tag8, %header-check-br478, %tag62, %header-check-br358, %tag49
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %58 = invoke {}* @cc_safe_fdefinition({}* %57)
          to label %normal-dest377 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag58:                                            ; preds = %tag46
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %60 = invoke {}* @cc_safe_fdefinition({}* %59)
          to label %normal-dest400 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag60:                                            ; preds = %normal-dest465, %tag60.outer
  br i1 %consp-test418, label %tag52, label %tag106

tag62:                                            ; preds = %tag63
  br i1 %fixnump-test375, label %tag92, label %tag55

tag63:                                            ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %header-check-br542, %tag64
  %61 = ptrtoint {}* %vaarg128 to i64
  %fixnum-tag-only422646 = and i64 %61, 3
  %fixnump-test423 = icmp eq i64 %fixnum-tag-only422646, 0
  br i1 %fixnump-test423, label %tag62, label %tag8

tag64:                                            ; preds = %tag105
  %62 = icmp eq i64 %tag-only544, 6
  %brmerge = or i1 %62, %fixnump-test375
  br i1 %brmerge, label %tag63, label %tag4

tag66:                                            ; preds = %normal-dest356
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag14

tag69:                                            ; preds = %normal-dest356
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag14

tag72:                                            ; preds = %tag54
  %65 = ptrtoint {}* %vaarg128 to i64
  %fixnum-tag-only432692 = and i64 %65, 3
  %fixnump-test433 = icmp eq i64 %fixnum-tag-only432692, 0
  br i1 %fixnump-test433, label %tag37, label %tag34

tag75:                                            ; preds = %header-check-br436, %header-check-br436, %header-check-br436, %header-check-br436
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 217), align 8
  %67 = invoke {}* @cc_safe_fdefinition({}* %66)
          to label %normal-dest444 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag77:                                            ; preds = %tag19
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %69 = invoke {}* @cc_safe_fdefinition({}* %68)
          to label %normal-dest465 unwind label %cleanup-lpad.loopexit.loopexit

tag79:                                            ; preds = %tag36
  %70 = ptrtoint {}* %rundungsrichtung.0 to i64
  %single-float-tag-only477 = and i64 %70, 7
  %fixnum-tag-only496675 = and i64 %70, 3
  %fixnump-test497 = icmp ne i64 %fixnum-tag-only496675, 0
  %test521 = icmp eq i64 %single-float-tag-only477, 1
  %or.cond731 = and i1 %fixnump-test497, %test521
  br i1 %or.cond731, label %header-check-br518, label %tag.thread

tag85:                                            ; preds = %tag14
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 410), align 16
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest488 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag90:                                            ; preds = %normal-dest165
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag14

tag92:                                            ; preds = %tag62
  %74 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %61, i64 %56)
  %result498 = extractvalue { i64, i1 } %74, 0
  %overflow499 = extractvalue { i64, i1 } %74, 1
  %75 = inttoptr i64 %result498 to {}*
  br i1 %overflow499, label %tag21, label %tag44

tag93:                                            ; preds = %tag22, %normal-dest597, %header-check-br390
  %.pre759 = phi {}* [ %128, %tag22 ], [ %200, %normal-dest597 ], [ %128, %header-check-br390 ]
  br label %tag51

tag94:                                            ; preds = %tag20
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest501 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag95:                                            ; preds = %tag5
  %78 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only516620 = and i64 %78, 3
  %fixnump-test517 = icmp eq i64 %fixnum-tag-only516620, 0
  br i1 %fixnump-test517, label %tag46, label %tag101

tag97:                                            ; preds = %normal-dest165
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag14

tag98:                                            ; preds = %normal-dest347
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest526 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag101:                                           ; preds = %tag95
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %83 = invoke {}* @cc_safe_fdefinition({}* %82)
          to label %normal-dest237 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag105:                                           ; preds = %tag14
  %tag-only544 = and i64 %56, 7
  %test545 = icmp eq i64 %tag-only544, 1
  br i1 %test545, label %header-check-br542, label %tag64

tag106:                                           ; preds = %tag60
  %84 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %85 = icmp eq {}* %SEQUENCE.0.ph, %84
  %.val733 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285778.0 = select i1 %85, {}* %.val733, {}* %84
  %86 = icmp eq {}* %G285778.0, %84
  br i1 %86, label %tag2, label %tag5

tag107:                                           ; preds = %tag49
  %87 = invoke float @from_object_float({}* %vaarg128)
          to label %normal-dest555 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag116:                                           ; preds = %normal-dest228, %normal-dest581, %normal-dest526, %normal-dest488
  %.sink712 = phi { {}*, i64 } [ %183, %normal-dest488 ], [ %192, %normal-dest526 ], [ %198, %normal-dest581 ], [ %136, %normal-dest228 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %.sink712

tag119:                                           ; preds = %tag.thread, %tag
  %88 = phi {}* [ %9, %tag.thread ], [ %12, %tag ]
  %89 = invoke {}* @cc_safe_fdefinition({}* %88)
          to label %normal-dest581 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest465, %tag77, %normal-dest142, %tag2
  %lpad.loopexit745 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest400, %tag58, %normal-dest237, %tag101
  %lpad.loopexit.split-lp746 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %loop-kw-args
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %normal-dest590, %maybe-more-tests398, %normal-dest581, %tag119, %normal-dest556, %normal-dest555, %tag107, %normal-dest526, %tag98, %normal-dest501, %tag94, %normal-dest488, %tag85, %normal-dest444, %tag75, %normal-dest377, %tag55, %normal-dest149, %normal-dest355, %tag48, %normal-dest340, %normal-dest334, %normal-dest327, %normal-dest320, %normal-dest313, %normal-dest306, %normal-dest299, %tag44, %normal-dest276, %tag34, %normal-dest228, %tag25, %normal-dest198, %tag21, %normal-dest182, %kw-exit-block, %normal-dest177, %normal-dest175, %tag16, %normal-dest163, %tag10, %tag4, %loop-cont, %error
  %lpad.loopexit.split-lp748 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit745, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp746, %cleanup-lpad.loopexit.loopexit.split-lp ], [ %lpad.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp748, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @":::global-str-B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 2)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs126 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1127 = add i64 %rem-nargs126, -1
  store i64 %rem-nargs-1127, i64* %"remaining-nargs*", align 8
  %vaarg128 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %93 = icmp eq i64 %nargs, 2
  br i1 %93, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G285571.0 = phi {}* [ %G285571.2, %advance-arg-idx-block ], [ %91, %loop-kw-args.preheader ]
  %rundungsrichtung.1 = phi {}* [ %rundungsrichtung.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %G285572.0 = phi {}* [ %G285572.2, %advance-arg-idx-block ], [ %91, %loop-kw-args.preheader ]
  %auffuellzeichen.1 = phi {}* [ %auffuellzeichen.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %102, %advance-arg-idx-block ], [ 2, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs131 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1132 = add i64 %rem-nargs131, -1
  store i64 %rem-nargs-1132, i64* %"remaining-nargs*", align 8
  %vaarg133 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs134 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1135 = add i64 %rem-nargs134, -1
  store i64 %rem-nargs-1135, i64* %"remaining-nargs*", align 8
  %vaarg136 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg133, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest137 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %94 = phi {}* [ %91, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G285571.1 = phi {}* [ %91, %continue ], [ %G285571.2, %loop-cont.kw-exit-block_crit_edge ]
  %rundungsrichtung.2 = phi {}* [ undef, %continue ], [ %rundungsrichtung.3, %loop-cont.kw-exit-block_crit_edge ]
  %G285572.1 = phi {}* [ %91, %continue ], [ %G285572.2, %loop-cont.kw-exit-block_crit_edge ]
  %auffuellzeichen.2 = phi {}* [ undef, %continue ], [ %auffuellzeichen.3, %loop-cont.kw-exit-block_crit_edge ]
  %95 = icmp eq {}* %G285572.1, %94
  %auffuellzeichen.0 = select i1 %95, {}* inttoptr (i64 258 to {}*), {}* %auffuellzeichen.2
  %96 = icmp eq {}* %G285571.1, %94
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 396), align 16
  %rundungsrichtung.0 = select i1 %96, {}* %97, {}* %rundungsrichtung.2
  %98 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %99 = invoke {}* @cc_safe_fdefinition({}* %98)
          to label %normal-dest182 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg133, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %kw-exit-block

normal-dest137:                                   ; preds = %loop-kw-args
  %100 = icmp eq {}* %92, %vaarg133
  br i1 %100, label %aok-block, label %"kw-:AUFFUELLZEICHEN-test"

aok-block:                                        ; preds = %normal-dest137
  %101 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg136)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %"kw-:RUNDUNGSRICHTUNG-test", %"kw-:AUFFUELLZEICHEN-test", %not-seen-before-kw-block, %not-seen-before-kw-block139, %next-kw-block140, %aok-block
  %G285571.2 = phi {}* [ %G285571.0, %aok-block ], [ %G285571.0, %next-kw-block140 ], [ %90, %not-seen-before-kw-block139 ], [ %G285571.0, %not-seen-before-kw-block ], [ %G285571.0, %"kw-:AUFFUELLZEICHEN-test" ], [ %G285571.0, %"kw-:RUNDUNGSRICHTUNG-test" ]
  %rundungsrichtung.3 = phi {}* [ %rundungsrichtung.1, %aok-block ], [ %rundungsrichtung.1, %next-kw-block140 ], [ %vaarg136, %not-seen-before-kw-block139 ], [ %rundungsrichtung.1, %not-seen-before-kw-block ], [ %rundungsrichtung.1, %"kw-:AUFFUELLZEICHEN-test" ], [ %rundungsrichtung.1, %"kw-:RUNDUNGSRICHTUNG-test" ]
  %G285572.2 = phi {}* [ %G285572.0, %aok-block ], [ %G285572.0, %next-kw-block140 ], [ %G285572.0, %not-seen-before-kw-block139 ], [ %90, %not-seen-before-kw-block ], [ %G285572.0, %"kw-:AUFFUELLZEICHEN-test" ], [ %G285572.0, %"kw-:RUNDUNGSRICHTUNG-test" ]
  %auffuellzeichen.3 = phi {}* [ %auffuellzeichen.1, %aok-block ], [ %auffuellzeichen.1, %next-kw-block140 ], [ %auffuellzeichen.1, %not-seen-before-kw-block139 ], [ %vaarg136, %not-seen-before-kw-block ], [ %auffuellzeichen.1, %"kw-:AUFFUELLZEICHEN-test" ], [ %auffuellzeichen.1, %"kw-:RUNDUNGSRICHTUNG-test" ]
  %phi-this-was-aok = phi i64 [ %101, %aok-block ], [ %phi-saw-aok, %next-kw-block140 ], [ %phi-saw-aok, %not-seen-before-kw-block139 ], [ %phi-saw-aok, %not-seen-before-kw-block ], [ %phi-saw-aok, %"kw-:AUFFUELLZEICHEN-test" ], [ %phi-saw-aok, %"kw-:RUNDUNGSRICHTUNG-test" ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %108, %next-kw-block140 ], [ %phi-bad-kw-idx, %not-seen-before-kw-block139 ], [ %phi-bad-kw-idx, %not-seen-before-kw-block ], [ %phi-bad-kw-idx, %"kw-:AUFFUELLZEICHEN-test" ], [ %phi-bad-kw-idx, %"kw-:RUNDUNGSRICHTUNG-test" ]
  %102 = add i64 %phi-reg-arg-idx, 2
  %103 = icmp slt i64 %102, %nargs
  br i1 %103, label %loop-kw-args, label %loop-cont

"kw-:AUFFUELLZEICHEN-test":                       ; preds = %normal-dest137
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 412), align 16
  %105 = call i64 @cc_matchKeywordOnce({}* %104, {}* %vaarg133, {}* %G285572.0)
  switch i64 %105, label %not-seen-before-kw-block [
    i64 0, label %"kw-:RUNDUNGSRICHTUNG-test"
    i64 2, label %advance-arg-idx-block
  ]

not-seen-before-kw-block:                         ; preds = %"kw-:AUFFUELLZEICHEN-test"
  br label %advance-arg-idx-block

"kw-:RUNDUNGSRICHTUNG-test":                      ; preds = %"kw-:AUFFUELLZEICHEN-test"
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 435), align 8
  %107 = call i64 @cc_matchKeywordOnce({}* %106, {}* %vaarg133, {}* %G285571.0)
  switch i64 %107, label %not-seen-before-kw-block139 [
    i64 0, label %next-kw-block140
    i64 2, label %advance-arg-idx-block
  ]

not-seen-before-kw-block139:                      ; preds = %"kw-:RUNDUNGSRICHTUNG-test"
  br label %advance-arg-idx-block

next-kw-block140:                                 ; preds = %"kw-:RUNDUNGSRICHTUNG-test"
  %108 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest142:                                   ; preds = %tag2
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %111 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 5, {}* %109, {}* %110, {}* %SEQUENCE.0.ph, {}* %111, {}* %112)
          to label %normal-dest145 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest145:                                   ; preds = %normal-dest142
  %.elt698 = extractvalue { {}*, i64 } %113, 0
  %.elt700 = extractvalue { {}*, i64 } %113, 1
  %cond612 = icmp eq i64 %.elt700, 0
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond612, {}* %114, {}* %.elt698
  br label %tag5

normal-dest149:                                   ; preds = %tag4
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 391), align 8
  %ptrtoint365 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint366 = add i64 %ptrtoint365, 7
  %entry-point-addr367 = inttoptr i64 %entry-point-addr-uint366 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point368 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr367, align 8
  %119 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point368({}* %16, i64 5, {}* %115, {}* %116, {}* %STRINGLAENGE.0, {}* %117, {}* %118)
          to label %normal-dest371 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

header-check-br155:                               ; preds = %tag23
  %irc-bit-cast159 = bitcast {}* %STRINGLAENGE.0 to i8*
  %gep160 = getelementptr inbounds i8, i8* %irc-bit-cast159, i64 -9
  %irc-bit-cast161 = bitcast i8* %gep160 to i64*
  %120 = load i64, i64* %irc-bit-cast161, align 8
  %121 = icmp eq i64 %120, 1325
  br i1 %121, label %tag31, label %tag34

normal-dest163:                                   ; preds = %tag10
  %122 = invoke double @from_object_double({}* nonnull %vaarg128)
          to label %normal-dest165 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest165:                                   ; preds = %normal-dest163
  %123 = fcmp olt double %122, %19
  br i1 %123, label %tag90, label %tag97

normal-dest175:                                   ; preds = %tag16
  %124 = invoke double @from_object_double({}* nonnull %STRINGLAENGE.0)
          to label %normal-dest177 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest177:                                   ; preds = %normal-dest175
  %125 = fsub double %23, %124
  %126 = invoke {}* @to_object_double(double %125)
          to label %tag44 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest182:                                   ; preds = %kw-exit-block
  %ptrtoint183 = ptrtoint {}* %99 to i64
  %entry-point-addr-uint184 = add i64 %ptrtoint183, 7
  %entry-point-addr185 = inttoptr i64 %entry-point-addr-uint184 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point186 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr185, align 8
  %127 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point186({}* %99, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest189 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest189:                                   ; preds = %normal-dest182
  %.elt = extractvalue { {}*, i64 } %127, 0
  %.elt616 = extractvalue { {}*, i64 } %127, 1
  %cond = icmp eq i64 %.elt616, 0
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond, {}* %128, {}* %.elt
  %129 = bitcast {}* %.in to i8*
  %130 = ptrtoint {}* %.in to i64
  %tag-only195617 = and i64 %130, 7
  %consp-test196 = icmp eq i64 %tag-only195617, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G285785.0 = select i1 %consp-test196, {}* %.val, {}* %128
  %131 = icmp eq {}* %G285785.0, %128
  br i1 %131, label %tag22, label %tag60.outer.preheader

tag60.outer.preheader:                            ; preds = %normal-dest189
  br label %tag60.outer

normal-dest198:                                   ; preds = %tag21
  %ptrtoint199 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint200 = add i64 %ptrtoint199, 7
  %entry-point-addr201 = inttoptr i64 %entry-point-addr-uint200 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point202 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr201, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point202({}* %29, i64 1, {}* %75, {}* null, {}* null, {}* null)
          to label %normal-dest205 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest205:                                   ; preds = %normal-dest198
  %.elt689 = extractvalue { {}*, i64 } %132, 0
  %.elt691 = extractvalue { {}*, i64 } %132, 1
  %cond611 = icmp eq i64 %.elt691, 0
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %REST.1 = select i1 %cond611, {}* %133, {}* %.elt689
  br label %tag44

header-check-br211:                               ; preds = %tag22
  %gep216 = getelementptr inbounds i8, i8* %129, i64 -9
  %irc-bit-cast217 = bitcast i8* %gep216 to i64*
  %134 = load i64, i64* %irc-bit-cast217, align 8
  %.off = add i64 %134, -1081
  %135 = icmp ult i64 %.off, 69
  br i1 %135, label %tag51, label %header-check-br390

normal-dest228:                                   ; preds = %tag25
  %ptrtoint229 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint230 = add i64 %ptrtoint229, 7
  %entry-point-addr231 = inttoptr i64 %entry-point-addr-uint230 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point232 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr231, align 8
  %136 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point232({}* %30, i64 4, {}* %RESULT285567.0, {}* %.in, {}* %auffuellzeichen.0, {}* %RESULT285567.0)
          to label %tag116 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest237:                                   ; preds = %tag101
  %ptrtoint238 = ptrtoint {}* %83 to i64
  %entry-point-addr-uint239 = add i64 %ptrtoint238, 7
  %entry-point-addr240 = inttoptr i64 %entry-point-addr-uint239 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point241 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr240, align 8
  %137 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point241({}* %83, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest244 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest244:                                   ; preds = %normal-dest237
  %.elt622 = extractvalue { {}*, i64 } %137, 0
  %.elt624 = extractvalue { {}*, i64 } %137, 1
  %cond603 = icmp eq i64 %.elt624, 0
  %138 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond603, {}* %138, {}* %.elt622
  br label %tag60.outer.backedge

header-check-br261:                               ; preds = %tag31
  %irc-bit-cast265 = bitcast {}* %vaarg128 to i8*
  %gep266 = getelementptr inbounds i8, i8* %irc-bit-cast265, i64 -9
  %irc-bit-cast267 = bitcast i8* %gep266 to i64*
  %139 = load i64, i64* %irc-bit-cast267, align 8
  %140 = icmp eq i64 %139, 1325
  br i1 %140, label %tag10, label %tag34

normal-dest276:                                   ; preds = %tag34
  %ptrtoint277 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint278 = add i64 %ptrtoint277, 7
  %entry-point-addr279 = inttoptr i64 %entry-point-addr-uint278 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point280 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr279, align 8
  %141 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point280({}* %35, i64 2, {}* %STRINGLAENGE.0, {}* %vaarg128, {}* null, {}* null)
          to label %normal-dest283 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest283:                                   ; preds = %normal-dest276
  %.elt631 = extractvalue { {}*, i64 } %141, 0
  %.elt633 = extractvalue { {}*, i64 } %141, 1
  %cond605 = icmp eq i64 %.elt633, 0
  %142 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285697.1 = select i1 %cond605, {}* %142, {}* %.elt631
  br label %tag14

normal-dest299:                                   ; preds = %tag44
  %ptrtoint300 = ptrtoint {}* %46 to i64
  %entry-point-addr-uint301 = add i64 %ptrtoint300, 7
  %entry-point-addr302 = inttoptr i64 %entry-point-addr-uint301 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point303 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr302, align 8
  %143 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point303({}* %46, i64 2, {}* %REST.0, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest306 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest306:                                   ; preds = %normal-dest299
  %144 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 404), align 16
  %146 = invoke {}* @cc_safe_fdefinition({}* %145)
          to label %normal-dest313 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest313:                                   ; preds = %normal-dest306
  %.elt654 = extractvalue { {}*, i64 } %143, 1
  %cond607 = icmp eq i64 %.elt654, 0
  %.elt652 = extractvalue { {}*, i64 } %143, 0
  %SIZE285568.0 = select i1 %cond607, {}* %144, {}* %.elt652
  %147 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 265), align 8
  %148 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ptrtoint314 = ptrtoint {}* %146 to i64
  %entry-point-addr-uint315 = add i64 %ptrtoint314, 7
  %entry-point-addr316 = inttoptr i64 %entry-point-addr-uint315 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point317 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr316, align 8
  %149 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point317({}* %146, i64 6, {}* %147, {}* %SIZE285568.0, {}* %148, {}* %148, {}* %148, {}* null)
          to label %normal-dest320 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest320:                                   ; preds = %normal-dest313
  %.elt656 = extractvalue { {}*, i64 } %149, 0
  %.elt658 = extractvalue { {}*, i64 } %149, 1
  %cond608 = icmp eq i64 %.elt658, 0
  %150 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %RESULT285567.0 = select i1 %cond608, {}* %150, {}* %.elt656
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 406), align 16
  %152 = invoke {}* @cc_safe_fdefinition({}* %151)
          to label %normal-dest327 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest327:                                   ; preds = %normal-dest320
  %153 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ptrtoint328 = ptrtoint {}* %152 to i64
  %entry-point-addr-uint329 = add i64 %ptrtoint328, 7
  %entry-point-addr330 = inttoptr i64 %entry-point-addr-uint329 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point331 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr330, align 8
  %154 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point331({}* %152, i64 4, {}* %RESULT285567.0, {}* %auffuellzeichen.0, {}* null, {}* %153)
          to label %normal-dest334 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest334:                                   ; preds = %normal-dest327
  %155 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 408), align 16
  %156 = invoke {}* @cc_safe_fdefinition({}* %155)
          to label %normal-dest340 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest340:                                   ; preds = %normal-dest334
  %ptrtoint341 = ptrtoint {}* %156 to i64
  %entry-point-addr-uint342 = add i64 %ptrtoint341, 7
  %entry-point-addr343 = inttoptr i64 %entry-point-addr-uint342 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point344 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr343, align 8
  %157 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point344({}* %156, i64 1, {}* %REST.0, {}* null, {}* null, {}* null)
          to label %normal-dest347 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest347:                                   ; preds = %normal-dest340
  %.elt664 = extractvalue { {}*, i64 } %157, 0
  %.elt666 = extractvalue { {}*, i64 } %157, 1
  %cond609 = icmp eq i64 %.elt666, 0
  %158 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285642.0 = select i1 %cond609, {}* %158, {}* %.elt664
  %159 = icmp eq {}* %G285642.0, %158
  br i1 %159, label %tag98, label %tag36

normal-dest355:                                   ; preds = %tag48
  %160 = invoke float @from_object_float({}* %vaarg128)
          to label %normal-dest356 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest356:                                   ; preds = %normal-dest355
  %161 = fcmp olt float %160, %51
  br i1 %161, label %tag69, label %tag66

header-check-br358:                               ; preds = %header-check-br478
  %irc-bit-cast362 = bitcast {}* %STRINGLAENGE.0 to i8*
  %gep363 = getelementptr inbounds i8, i8* %irc-bit-cast362, i64 -9
  %irc-bit-cast364 = bitcast i8* %gep363 to i64*
  %162 = load i64, i64* %irc-bit-cast364, align 8
  %163 = icmp eq i64 %162, 1325
  br i1 %163, label %tag16, label %tag55

normal-dest371:                                   ; preds = %normal-dest149
  call void @unreachableError()
  unreachable

normal-dest377:                                   ; preds = %tag55
  %ptrtoint378 = ptrtoint {}* %58 to i64
  %entry-point-addr-uint379 = add i64 %ptrtoint378, 7
  %entry-point-addr380 = inttoptr i64 %entry-point-addr-uint379 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point381 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr380, align 8
  %164 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point381({}* %58, i64 2, {}* %vaarg128, {}* %STRINGLAENGE.0, {}* null, {}* null)
          to label %normal-dest384 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest384:                                   ; preds = %normal-dest377
  %.elt648 = extractvalue { {}*, i64 } %164, 0
  %.elt650 = extractvalue { {}*, i64 } %164, 1
  %cond606 = icmp eq i64 %.elt650, 0
  %165 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %REST.2 = select i1 %cond606, {}* %165, {}* %.elt648
  br label %tag44

header-check-br390:                               ; preds = %header-check-br211
  %.off744 = add i64 %134, -1153
  %166 = icmp ult i64 %.off744, 149
  br i1 %166, label %maybe-more-tests398, label %tag93

maybe-more-tests398:                              ; preds = %header-check-br390
  %167 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %168 = invoke {}* @cc_safe_fdefinition({}* %167)
          to label %normal-dest590 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest400:                                   ; preds = %tag58
  %ptrtoint401 = ptrtoint {}* %60 to i64
  %entry-point-addr-uint402 = add i64 %ptrtoint401, 7
  %entry-point-addr403 = inttoptr i64 %entry-point-addr-uint402 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point404 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr403, align 8
  %169 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point404({}* %60, i64 1, {}* %50, {}* null, {}* null, {}* null)
          to label %normal-dest407 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest407:                                   ; preds = %normal-dest400
  %.elt626 = extractvalue { {}*, i64 } %169, 0
  %.elt628 = extractvalue { {}*, i64 } %169, 1
  %cond604 = icmp eq i64 %.elt628, 0
  %170 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond604, {}* %170, {}* %.elt626
  br label %tag60.outer.backedge

header-check-br436:                               ; preds = %tag15
  %irc-bit-cast440 = bitcast {}* %36 to i8*
  %gep441 = getelementptr inbounds i8, i8* %irc-bit-cast440, i64 -9
  %irc-bit-cast442 = bitcast i8* %gep441 to i64*
  %171 = load i64, i64* %irc-bit-cast442, align 8
  %172 = add i64 %171, -1309
  %173 = lshr i64 %172, 3
  %174 = shl i64 %172, 61
  %175 = or i64 %173, %174
  switch i64 %175, label %tag.thread [
    i64 2, label %tag75
    i64 4, label %tag75
    i64 5, label %tag75
    i64 0, label %tag75
  ]

normal-dest444:                                   ; preds = %tag75
  %ptrtoint445 = ptrtoint {}* %67 to i64
  %entry-point-addr-uint446 = add i64 %ptrtoint445, 7
  %entry-point-addr447 = inttoptr i64 %entry-point-addr-uint446 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point448 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr447, align 8
  %176 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point448({}* %67, i64 2, {}* nonnull %rundungsrichtung.0, {}* nonnull %36, {}* null, {}* null)
          to label %normal-dest451 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest451:                                   ; preds = %normal-dest444
  %.elt680 = extractvalue { {}*, i64 } %176, 0
  %.elt682 = extractvalue { {}*, i64 } %176, 1
  %cond610 = icmp eq i64 %.elt682, 0
  %177 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285628.1 = select i1 %cond610, {}* %177, {}* %.elt680
  br label %tag

normal-dest465:                                   ; preds = %tag77
  %178 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 399), align 8
  %ptrtoint466 = ptrtoint {}* %69 to i64
  %entry-point-addr-uint467 = add i64 %ptrtoint466, 7
  %entry-point-addr468 = inttoptr i64 %entry-point-addr-uint467 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point469 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr468, align 8
  %179 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point469({}* %69, i64 2, {}* %G2095854.0, {}* %178, {}* null, {}* null)
          to label %tag60 unwind label %cleanup-lpad.loopexit.loopexit

header-check-br478:                               ; preds = %tag8
  %irc-bit-cast482 = bitcast {}* %vaarg128 to i8*
  %gep483 = getelementptr inbounds i8, i8* %irc-bit-cast482, i64 -9
  %irc-bit-cast484 = bitcast i8* %gep483 to i64*
  %180 = load i64, i64* %irc-bit-cast484, align 8
  %181 = icmp ne i64 %180, 1325
  %test545.not = xor i1 %test545, true
  %brmerge727 = or i1 %181, %test545.not
  br i1 %brmerge727, label %tag55, label %header-check-br358

normal-dest488:                                   ; preds = %tag85
  %182 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 412), align 16
  %ptrtoint489 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint490 = add i64 %ptrtoint489, 7
  %entry-point-addr491 = inttoptr i64 %entry-point-addr-uint490 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point492 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr491, align 8
  %183 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point492({}* %72, i64 4, {}* %.in, {}* %vaarg128, {}* %182, {}* %auffuellzeichen.0)
          to label %tag116 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest501:                                   ; preds = %tag94
  %184 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 398), align 16
  %ptrtoint502 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint503 = add i64 %ptrtoint502, 7
  %entry-point-addr504 = inttoptr i64 %entry-point-addr-uint503 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point505 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr504, align 8
  %185 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point505({}* %77, i64 2, {}* %.in, {}* %184, {}* null, {}* null)
          to label %normal-dest508 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest508:                                   ; preds = %normal-dest501
  %.elt702 = extractvalue { {}*, i64 } %185, 0
  %.elt704 = extractvalue { {}*, i64 } %185, 1
  %cond613 = icmp eq i64 %.elt704, 0
  %186 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %STRINGLAENGE.1 = select i1 %cond613, {}* %186, {}* %.elt702
  br label %tag54

header-check-br518:                               ; preds = %tag79
  %irc-bit-cast522 = bitcast {}* %rundungsrichtung.0 to i8*
  %gep523 = getelementptr inbounds i8, i8* %irc-bit-cast522, i64 -9
  %irc-bit-cast524 = bitcast i8* %gep523 to i64*
  %187 = load i64, i64* %irc-bit-cast524, align 8
  %188 = add i64 %187, -1309
  %189 = lshr i64 %188, 3
  %190 = shl i64 %188, 61
  %191 = or i64 %189, %190
  switch i64 %191, label %tag.thread [
    i64 2, label %tag15
    i64 4, label %tag15
    i64 5, label %tag15
    i64 0, label %tag15
  ]

normal-dest526:                                   ; preds = %tag98
  %ptrtoint527 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint528 = add i64 %ptrtoint527, 7
  %entry-point-addr529 = inttoptr i64 %entry-point-addr-uint528 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point530 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr529, align 8
  %192 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point530({}* %81, i64 3, {}* %RESULT285567.0, {}* %.in, {}* %RESULT285567.0, {}* null)
          to label %tag116 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

switch.early.test:                                ; preds = %header-check-br542
  switch i64 %193, label %tag4 [
    i64 1349, label %tag63
    i64 1341, label %tag63
    i64 1309, label %tag63
  ]

header-check-br542:                               ; preds = %tag105
  %irc-bit-cast546 = bitcast {}* %STRINGLAENGE.0 to i8*
  %gep547 = getelementptr inbounds i8, i8* %irc-bit-cast546, i64 -9
  %irc-bit-cast548 = bitcast i8* %gep547 to i64*
  %193 = load i64, i64* %irc-bit-cast548, align 8
  %194 = icmp eq i64 %193, 1325
  %brmerge766 = or i1 %fixnump-test375, %194
  br i1 %brmerge766, label %tag63, label %switch.early.test

normal-dest555:                                   ; preds = %tag107
  %195 = invoke float @from_object_float({}* %STRINGLAENGE.0)
          to label %normal-dest556 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest556:                                   ; preds = %normal-dest555
  %196 = fsub float %87, %195
  %197 = invoke {}* @to_object_float(float %196)
          to label %tag44 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest581:                                   ; preds = %tag119
  %ptrtoint582 = ptrtoint {}* %89 to i64
  %entry-point-addr-uint583 = add i64 %ptrtoint582, 7
  %entry-point-addr584 = inttoptr i64 %entry-point-addr-uint583 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point585 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr584, align 8
  %198 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point585({}* %89, i64 4, {}* %auffuellzeichen.0, {}* %RESULT285567.0, {}* %.in, {}* %RESULT285567.0)
          to label %tag116 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest590:                                   ; preds = %maybe-more-tests398
  %ptrtoint591 = ptrtoint {}* %168 to i64
  %entry-point-addr-uint592 = add i64 %ptrtoint591, 7
  %entry-point-addr593 = inttoptr i64 %entry-point-addr-uint592 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point594 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr593, align 8
  %199 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point594({}* %168, i64 1, {}* nonnull %.in, {}* null, {}* null, {}* null)
          to label %normal-dest597 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest597:                                   ; preds = %normal-dest590
  %.elt706 = extractvalue { {}*, i64 } %199, 0
  %.elt708 = extractvalue { {}*, i64 } %199, 1
  %cond614 = icmp eq i64 %.elt708, 0
  %200 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285797.0 = select i1 %cond614, {}* %200, {}* %.elt706
  %201 = icmp eq {}* %G285797.0, inttoptr (i64 4 to {}*)
  br i1 %201, label %tag51, label %tag93
}

declare void @cc_ifNotKeywordException({}*, i64, { i32, i32, i8*, i8* }*, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @cc_allowOtherKeywords(i64, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @cc_matchKeywordOnce({}*, {}*, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @cc_trackFirstUnexpectedKeyword(i64, i64) local_unnamed_addr #1

declare void @cc_ifBadKeywordArgumentException(i64, i64, {}*, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }*) local_unnamed_addr #3

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^219^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !67 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^219^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest67, %header-check-br
  %G285833.0 = phi {}* [ %18, %header-check-br ], [ %G285833.1, %normal-dest67 ], [ %G285833.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 410), align 16
  %ptrtoint13 = ptrtoint {}* %G285833.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G285833.0, i64 2, {}* %"closure->B=STRING-ABSCHNEIDEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br72
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest60, %maybe-more-tests80, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 410), align 16
  %"closure->B=STRING-ABSCHNEIDEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 7418, i64 219, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br72

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 445), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=STRING-ABSCHNEIDEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 449), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=STRING-ABSCHNEIDEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 410), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 450), align 16
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 960 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 410), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %maybe-more-tests80
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt118 = extractvalue { {}*, i64 } %39, 0
  %.elt120 = extractvalue { {}*, i64 } %39, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285833.1 = select i1 %cond95, {}* %40, {}* %.elt118
  br label %tag1

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %41 = icmp ult i64 %.off123, 5
  br i1 %41, label %maybe-more-tests80, label %tag4

maybe-more-tests80:                               ; preds = %header-check-br72
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 444), align 16
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285833.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !68 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 2
  br i1 %enough-args, label %error, label %continue

tag5:                                             ; preds = %tag129
  %9 = icmp eq {}* %G2095854.0, %.val1041
  %G286055.0 = select i1 %9, {}* %.val1038, {}* %.val1041
  %10 = icmp eq {}* %G286055.0, %.val1041
  br i1 %10, label %tag137, label %tag109

tag6:                                             ; preds = %tag168
  br i1 %fixnump-test415, label %tag72, label %tag117

tag8:                                             ; preds = %tag68
  %11 = icmp sgt {}* %G285811.0, %vaarg185
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %. = select i1 %11, {}* %64, {}* %12
  br label %tag157

tag25:                                            ; preds = %normal-dest640
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest269 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag27:                                            ; preds = %tag61
  %15 = load {}*, {}** %75, align 8
  %.val1039.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag129

tag28:                                            ; preds = %tag129
  %16 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only293904 = and i64 %16, 3
  %fixnump-test294 = icmp eq i64 %fixnum-tag-only293904, 0
  br i1 %fixnump-test294, label %tag99, label %tag160

tag32:                                            ; preds = %normal-dest499, %header-check-br779
  %G286047.0.pre = phi {}* [ %.val1034, %header-check-br779 ], [ %G286047.0.pre.pre, %normal-dest499 ]
  %17 = phi {}* [ %.val1035, %header-check-br779 ], [ %153, %normal-dest499 ]
  %18 = icmp eq {}* %G286047.0.pre, %17
  br i1 %18, label %tag102, label %tag177

tag36:                                            ; preds = %tag139, %header-check-br650, %header-check-br553, %tag94, %tag68, %tag45
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest318 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag42:                                            ; preds = %tag168
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest344 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag44:                                            ; preds = %tag72, %normal-dest665
  %23 = phi {}* [ %172, %normal-dest665 ], [ %94, %tag72 ]
  %G285933.0 = phi {}* [ %G285933.1, %normal-dest665 ], [ %.1031, %tag72 ]
  %24 = icmp eq {}* %G285933.0, %23
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  br i1 %24, label %tag114, label %tag91

tag45:                                            ; preds = %tag139
  %26 = ptrtoint {}* %vaarg185 to i64
  %single-float-tag-only355 = and i64 %26, 7
  %27 = icmp eq i64 %single-float-tag-only355, 6
  br i1 %27, label %tag85, label %tag36

tag50:                                            ; preds = %normal-dest346
  %28 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %33, i64 4)
  %result = extractvalue { i64, i1 } %28, 0
  %overflow = extractvalue { i64, i1 } %28, 1
  %29 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag93, label %tag153

tag53:                                            ; preds = %normal-dest264
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest363 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag55:                                            ; preds = %normal-dest533, %normal-dest276, %tag60
  %G285863.0 = phi {}* [ %37, %tag60 ], [ %G285863.1, %normal-dest276 ], [ %G285863.2, %normal-dest533 ]
  %ptrtoint378 = ptrtoint {}* %168 to i64
  %entry-point-addr-uint379 = add i64 %ptrtoint378, 7
  %entry-point-addr380 = inttoptr i64 %entry-point-addr-uint379 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point381 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr380, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point381({}* %168, i64 3, {}* %STRING.0, {}* null, {}* %G285863.0, {}* null)
          to label %normal-dest384 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag58:                                            ; preds = %tag157
  %33 = ptrtoint {}* %vaarg185 to i64
  %fixnum-tag-only414921 = and i64 %33, 3
  %fixnump-test415 = icmp eq i64 %fixnum-tag-only414921, 0
  br i1 %fixnump-test415, label %tag115, label %tag142

tag59:                                            ; preds = %tag157, %normal-dest810, %normal-dest737, %normal-dest410
  %return-value.sroa.48.0 = phi i64 [ %.elt985, %normal-dest410 ], [ %.elt964, %normal-dest737 ], [ %.elt938, %normal-dest810 ], [ 1, %tag157 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt983, %normal-dest410 ], [ %.elt962, %normal-dest737 ], [ %.elt936, %normal-dest810 ], [ %STRING.0, %tag157 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %34 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %35 = insertvalue { {}*, i64 } %34, i64 %return-value.sroa.48.0, 1
  ret { {}*, i64 } %35

tag60:                                            ; preds = %normal-dest640
  %36 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %33, i64 12)
  %result255 = extractvalue { i64, i1 } %36, 0
  %overflow256 = extractvalue { i64, i1 } %36, 1
  %37 = inttoptr i64 %result255 to {}*
  br i1 %overflow256, label %tag92, label %tag55

tag61:                                            ; preds = %normal-dest739, %tag61.outer
  br i1 %consp-test, label %tag27, label %tag98

tag64:                                            ; preds = %tag102
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest422 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag65:                                            ; preds = %normal-dest346
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest436 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag68:                                            ; preds = %tag109
  %42 = ptrtoint {}* %vaarg185 to i64
  %fixnum-tag-only449990 = and i64 %42, 3
  %fixnump-test450 = icmp eq i64 %fixnum-tag-only449990, 0
  br i1 %fixnump-test450, label %tag8, label %tag36

tag71:                                            ; preds = %normal-dest488
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag157

tag72:                                            ; preds = %tag6
  %44 = icmp slt {}* %vaarg185, inttoptr (i64 41 to {}*)
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.1031 = select i1 %44, {}* %45, {}* %94
  br label %tag44

tag85:                                            ; preds = %tag45
  %46 = invoke float @from_object_float({}* %G285811.0)
          to label %normal-dest487 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag86:                                            ; preds = %header-check-br553
  %47 = invoke double @from_object_double({}* nonnull %G285811.0)
          to label %normal-dest489 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag90:                                            ; preds = %normal-dest370, %normal-dest264
  %.val1035 = phi {}* [ %121, %normal-dest264 ], [ %134, %normal-dest370 ]
  %.val1034 = phi {}* [ %.val, %normal-dest264 ], [ %.val1034.pre, %normal-dest370 ]
  %STRING.0 = phi {}* [ %vaarg, %normal-dest264 ], [ %STRING.1, %normal-dest370 ]
  %48 = ptrtoint {}* %STRING.0 to i64
  %tag-only512901 = and i64 %48, 7
  %consp-test513 = icmp eq i64 %tag-only512901, 3
  %G286103.0 = select i1 %consp-test513, {}* %.val1034, {}* %.val1035
  %49 = icmp eq {}* %G286103.0, %.val1035
  br i1 %49, label %tag149, label %tag61.outer.preheader

tag61.outer.preheader:                            ; preds = %tag90
  br label %tag61.outer

tag91:                                            ; preds = %tag44
  %50 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest515 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag92:                                            ; preds = %tag60
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest526 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag93:                                            ; preds = %tag50
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %54 = invoke {}* @cc_safe_fdefinition({}* %53)
          to label %normal-dest540 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag94:                                            ; preds = %header-check-br650
  %ptrtoint554 = ptrtoint {}* %vaarg185 to i64
  %tag-only555 = and i64 %ptrtoint554, 7
  %test556 = icmp eq i64 %tag-only555, 1
  br i1 %test556, label %header-check-br553, label %tag36

tag97:                                            ; preds = %tag131
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %56 = invoke {}* @cc_safe_fdefinition({}* %55)
          to label %normal-dest569 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag98:                                            ; preds = %tag61
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %58 = icmp eq {}* %SEQUENCE.0.ph, %57
  %.val1036 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286096.0 = select i1 %58, {}* %.val1036, {}* %57
  %59 = icmp eq {}* %G286096.0, %57
  br i1 %59, label %tag121, label %tag129

tag99:                                            ; preds = %tag28
  %60 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %16, i64 4)
  %result332 = extractvalue { i64, i1 } %60, 0
  %overflow333 = extractvalue { i64, i1 } %60, 1
  %61 = inttoptr i64 %result332 to {}*
  br i1 %overflow333, label %tag175, label %tag61.outer.backedge

tag61.outer.backedge:                             ; preds = %tag99, %normal-dest859, %normal-dest819
  %LENGTH.0.ph.be = phi {}* [ %61, %tag99 ], [ %LENGTH.2, %normal-dest859 ], [ %LENGTH.1, %normal-dest819 ]
  br label %tag61.outer

tag102:                                           ; preds = %normal-dest499, %tag149, %header-check-br282, %tag32
  %.val1042 = phi {}* [ %G286047.0.pre, %tag32 ], [ %.val1034, %tag149 ], [ %.val1034, %header-check-br282 ], [ %G286047.0.pre.pre, %normal-dest499 ]
  %.val10431063 = phi {}* [ %G286047.0.pre, %tag32 ], [ %.val1035, %tag149 ], [ %.val1035, %header-check-br282 ], [ %153, %normal-dest499 ]
  %62 = icmp eq {}* %STRING.0, %.val10431063
  %G286043.0 = select i1 %62, {}* %.val1042, {}* %.val10431063
  %63 = icmp eq {}* %G286043.0, %.val10431063
  br i1 %63, label %tag64, label %tag109

tag109:                                           ; preds = %tag5, %normal-dest429, %tag102, %tag177
  %64 = phi {}* [ %17, %tag177 ], [ %.val10431063, %tag102 ], [ %145, %normal-dest429 ], [ %.val1041, %tag5 ]
  %G285811.0 = phi {}* [ %102, %tag177 ], [ null, %tag102 ], [ %G285811.1, %normal-dest429 ], [ %LENGTH.0.ph, %tag5 ]
  %65 = ptrtoint {}* %G285811.0 to i64
  %fixnum-tag-only627913 = and i64 %65, 3
  %fixnump-test628 = icmp eq i64 %fixnum-tag-only627913, 0
  br i1 %fixnump-test628, label %tag68, label %tag139

tag114:                                           ; preds = %tag44
  %66 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest638 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag115:                                           ; preds = %tag58
  %67 = icmp slt {}* %vaarg185, inttoptr (i64 17 to {}*)
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.1032 = select i1 %67, {}* %68, {}* %G286015.0
  br label %tag168

tag117:                                           ; preds = %tag6
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest658 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag121:                                           ; preds = %tag98
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest679 unwind label %cleanup-lpad.loopexit.loopexit

tag61.outer:                                      ; preds = %tag61.outer.backedge, %tag61.outer.preheader
  %SEQUENCE.0.ph = phi {}* [ %STRING.0, %tag61.outer.preheader ], [ %G2095854.0, %tag61.outer.backedge ]
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag61.outer.preheader ], [ %LENGTH.0.ph.be, %tag61.outer.backedge ]
  %73 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only419902 = and i64 %73, 7
  %consp-test = icmp eq i64 %tag-only419902, 3
  %74 = add i64 %73, 5
  %75 = inttoptr i64 %74 to {}**
  br label %tag61

tag129:                                           ; preds = %tag98, %normal-dest686, %tag27
  %.val1041 = phi {}* [ %.val1039.pre, %tag27 ], [ %178, %normal-dest686 ], [ %57, %tag98 ]
  %G2095854.0 = phi {}* [ %15, %tag27 ], [ %G2095854.1, %normal-dest686 ], [ %57, %tag98 ]
  %76 = ptrtoint {}* %G2095854.0 to i64
  %tag-only700903 = and i64 %76, 7
  %consp-test701 = icmp eq i64 %tag-only700903, 3
  %.val1038 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286084.0 = select i1 %consp-test701, {}* %.val1038, {}* %.val1041
  %77 = icmp eq {}* %G286084.0, %.val1041
  br i1 %77, label %tag5, label %tag28

tag131:                                           ; preds = %normal-dest517
  %78 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %33, i64 8)
  %result296 = extractvalue { i64, i1 } %78, 0
  %overflow297 = extractvalue { i64, i1 } %78, 1
  %79 = inttoptr i64 %result296 to {}*
  br i1 %overflow297, label %tag97, label %tag136

tag136:                                           ; preds = %normal-dest610, %normal-dest576, %tag131
  %G285904.0 = phi {}* [ %79, %tag131 ], [ %G285904.1, %normal-dest576 ], [ %G285904.2, %normal-dest610 ]
  %ptrtoint705 = ptrtoint {}* %156 to i64
  %entry-point-addr-uint706 = add i64 %ptrtoint705, 7
  %entry-point-addr707 = inttoptr i64 %entry-point-addr-uint706 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point708 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr707, align 8
  %80 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point708({}* %156, i64 3, {}* %STRING.0, {}* null, {}* %G285904.0, {}* null)
          to label %normal-dest711 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag137:                                           ; preds = %tag5
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %82 = invoke {}* @cc_safe_fdefinition({}* %81)
          to label %normal-dest739 unwind label %cleanup-lpad.loopexit.loopexit

tag139:                                           ; preds = %tag109
  %trunc = trunc i64 %65 to i3
  switch i3 %trunc, label %tag36 [
    i3 -2, label %tag45
    i3 1, label %header-check-br650
  ]

tag140:                                           ; preds = %normal-dest517
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %84 = invoke {}* @cc_safe_fdefinition({}* %83)
          to label %normal-dest603 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag142:                                           ; preds = %tag58
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest756 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag146:                                           ; preds = %normal-dest490
  %87 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag157

tag149:                                           ; preds = %tag90
  %test782 = icmp eq i64 %tag-only512901, 1
  br i1 %test782, label %header-check-br779, label %tag102

tag153:                                           ; preds = %normal-dest547, %normal-dest443, %tag50
  %G285962.0 = phi {}* [ %29, %tag50 ], [ %G285962.1, %normal-dest443 ], [ %G285962.2, %normal-dest547 ]
  %ptrtoint792 = ptrtoint {}* %132 to i64
  %entry-point-addr-uint793 = add i64 %ptrtoint792, 7
  %entry-point-addr794 = inttoptr i64 %entry-point-addr-uint793 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point795 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr794, align 8
  %88 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point795({}* %132, i64 3, {}* %STRING.0, {}* null, {}* %G285962.0, {}* null)
          to label %normal-dest798 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag155:                                           ; preds = %normal-dest488
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag157

tag157:                                           ; preds = %tag8, %normal-dest325, %tag174, %tag155, %tag146, %tag71
  %G286015.0 = phi {}* [ %89, %tag155 ], [ %43, %tag71 ], [ %87, %tag146 ], [ %96, %tag174 ], [ %G286015.1, %normal-dest325 ], [ %., %tag8 ]
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %91 = icmp eq {}* %G286015.0, %90
  br i1 %91, label %tag58, label %tag59

tag160:                                           ; preds = %tag28
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %93 = invoke {}* @cc_safe_fdefinition({}* %92)
          to label %normal-dest812 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag168:                                           ; preds = %tag115, %normal-dest763
  %94 = phi {}* [ %190, %normal-dest763 ], [ %G286015.0, %tag115 ]
  %G285991.0 = phi {}* [ %G285991.1, %normal-dest763 ], [ %.1032, %tag115 ]
  %95 = icmp eq {}* %G285991.0, %94
  br i1 %95, label %tag6, label %tag42

tag174:                                           ; preds = %normal-dest490
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag157

tag175:                                           ; preds = %tag99
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %98 = invoke {}* @cc_safe_fdefinition({}* %97)
          to label %normal-dest852 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag177:                                           ; preds = %tag32
  %99 = add i64 %48, 7
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 8
  %"tag fixnum" = shl nuw i64 %101, 2
  %102 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag109

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest739, %tag137, %normal-dest679, %tag121
  %lpad.loopexit1045 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest852, %tag175, %normal-dest812, %tag160
  %lpad.loopexit.split-lp1046 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %loop-kw-args
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %normal-dest798, %tag153, %normal-dest756, %tag142, %normal-dest725, %normal-dest718, %normal-dest711, %tag136, %normal-dest658, %tag117, %normal-dest638, %tag114, %normal-dest603, %tag140, %normal-dest569, %tag97, %normal-dest540, %tag93, %normal-dest526, %tag92, %normal-dest515, %tag91, %normal-dest492, %maybe-more-tests, %normal-dest489, %tag86, %normal-dest487, %tag85, %normal-dest436, %tag65, %normal-dest422, %tag64, %normal-dest398, %normal-dest391, %normal-dest384, %tag55, %normal-dest363, %tag53, %normal-dest344, %tag42, %normal-dest318, %tag36, %normal-dest269, %tag25, %normal-dest257, %kw-exit-block, %loop-cont, %error
  %lpad.loopexit.split-lp1048 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit1045, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp1046, %cleanup-lpad.loopexit.loopexit.split-lp ], [ %lpad.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp1048, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @":::global-str-B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 2)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs183 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1184 = add i64 %rem-nargs183, -1
  store i64 %rem-nargs-1184, i64* %"remaining-nargs*", align 8
  %vaarg185 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %106 = icmp eq i64 %nargs, 2
  br i1 %106, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G285812.0 = phi {}* [ %G285812.2, %advance-arg-idx-block ], [ %104, %loop-kw-args.preheader ]
  %auffuellzeichen.1 = phi {}* [ %auffuellzeichen.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %113, %advance-arg-idx-block ], [ 2, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs188 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1189 = add i64 %rem-nargs188, -1
  store i64 %rem-nargs-1189, i64* %"remaining-nargs*", align 8
  %vaarg190 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs191 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1192 = add i64 %rem-nargs191, -1
  store i64 %rem-nargs-1192, i64* %"remaining-nargs*", align 8
  %vaarg193 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg190, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest194 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %107 = phi {}* [ %104, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G285812.1 = phi {}* [ %104, %continue ], [ %G285812.2, %loop-cont.kw-exit-block_crit_edge ]
  %auffuellzeichen.2 = phi {}* [ undef, %continue ], [ %auffuellzeichen.3, %loop-cont.kw-exit-block_crit_edge ]
  %108 = icmp eq {}* %G285812.1, %107
  %auffuellzeichen.0 = select i1 %108, {}* inttoptr (i64 370 to {}*), {}* %auffuellzeichen.2
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 135), align 8
  %110 = invoke {}* @cc_safe_fdefinition({}* %109)
          to label %normal-dest257 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg190, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %kw-exit-block

normal-dest194:                                   ; preds = %loop-kw-args
  %111 = icmp eq {}* %105, %vaarg190
  br i1 %111, label %aok-block, label %"kw-:AUFFUELLZEICHEN-test"

aok-block:                                        ; preds = %normal-dest194
  %112 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg193)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G285812.2 = phi {}* [ %G285812.0, %aok-block ], [ %G285812.0, %next-kw-block ], [ %G285812.3, %matched-kw-block ]
  %auffuellzeichen.3 = phi {}* [ %auffuellzeichen.1, %aok-block ], [ %auffuellzeichen.1, %next-kw-block ], [ %auffuellzeichen.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %112, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %119, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %113 = add i64 %phi-reg-arg-idx, 2
  %114 = icmp slt i64 %113, %nargs
  br i1 %114, label %loop-kw-args, label %loop-cont

"kw-:AUFFUELLZEICHEN-test":                       ; preds = %normal-dest194
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 412), align 16
  %116 = call i64 @cc_matchKeywordOnce({}* %115, {}* %vaarg190, {}* %G285812.0)
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:AUFFUELLZEICHEN-test"
  %118 = icmp eq i64 %116, 2
  %G285812.3 = select i1 %118, {}* %G285812.0, {}* %103
  %auffuellzeichen.4 = select i1 %118, {}* %auffuellzeichen.1, {}* %vaarg193
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:AUFFUELLZEICHEN-test"
  %119 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest257:                                   ; preds = %kw-exit-block
  %ptrtoint258 = ptrtoint {}* %110 to i64
  %entry-point-addr-uint259 = add i64 %ptrtoint258, 7
  %entry-point-addr260 = inttoptr i64 %entry-point-addr-uint259 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point261 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr260, align 8
  %120 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point261({}* %110, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest264:                                   ; preds = %normal-dest257
  %.elt = extractvalue { {}*, i64 } %120, 0
  %.elt896 = extractvalue { {}*, i64 } %120, 1
  %cond = icmp eq i64 %.elt896, 0
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond, {}* %121, {}* %.elt
  %122 = icmp eq {}* %object.0, %121
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286109.0 = select i1 %122, {}* %.val, {}* %121
  %123 = icmp eq {}* %G286109.0, %121
  br i1 %123, label %tag90, label %tag53

normal-dest269:                                   ; preds = %tag25
  %ptrtoint270 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint271 = add i64 %ptrtoint270, 7
  %entry-point-addr272 = inttoptr i64 %entry-point-addr-uint271 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point273 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr272, align 8
  %124 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point273({}* %14, i64 2, {}* %vaarg185, {}* inttoptr (i64 12 to {}*), {}* null, {}* null)
          to label %normal-dest276 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest276:                                   ; preds = %normal-dest269
  %.elt971 = extractvalue { {}*, i64 } %124, 0
  %.elt973 = extractvalue { {}*, i64 } %124, 1
  %cond888 = icmp eq i64 %.elt973, 0
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285863.1 = select i1 %cond888, {}* %125, {}* %.elt971
  br label %tag55

header-check-br282:                               ; preds = %header-check-br779
  %.off1044 = add i64 %191, -1153
  %126 = icmp ult i64 %.off1044, 149
  br i1 %126, label %maybe-more-tests, label %tag102

maybe-more-tests:                                 ; preds = %header-check-br282
  %127 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %128 = invoke {}* @cc_safe_fdefinition({}* %127)
          to label %normal-dest492 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest318:                                   ; preds = %tag36
  %ptrtoint319 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint320 = add i64 %ptrtoint319, 7
  %entry-point-addr321 = inttoptr i64 %entry-point-addr-uint320 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point322 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr321, align 8
  %129 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point322({}* %20, i64 2, {}* %G285811.0, {}* %vaarg185, {}* null, {}* null)
          to label %normal-dest325 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest325:                                   ; preds = %normal-dest318
  %.elt915 = extractvalue { {}*, i64 } %129, 0
  %.elt917 = extractvalue { {}*, i64 } %129, 1
  %cond878 = icmp eq i64 %.elt917, 0
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286015.1 = select i1 %cond878, {}* %130, {}* %.elt915
  br label %tag157

normal-dest344:                                   ; preds = %tag42
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %132 = invoke {}* @cc_safe_fdefinition({}* %131)
          to label %normal-dest346 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest346:                                   ; preds = %normal-dest344
  br i1 %fixnump-test415, label %tag50, label %tag65

normal-dest363:                                   ; preds = %tag53
  %ptrtoint364 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint365 = add i64 %ptrtoint364, 7
  %entry-point-addr366 = inttoptr i64 %entry-point-addr-uint365 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point367 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr366, align 8
  %133 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point367({}* %31, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest370 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest370:                                   ; preds = %normal-dest363
  %.elt898 = extractvalue { {}*, i64 } %133, 0
  %.elt900 = extractvalue { {}*, i64 } %133, 1
  %cond875 = icmp eq i64 %.elt900, 0
  %134 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %STRING.1 = select i1 %cond875, {}* %134, {}* %.elt898
  %.val1034.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag90

normal-dest384:                                   ; preds = %tag55
  %.elt975 = extractvalue { {}*, i64 } %32, 0
  %.elt977 = extractvalue { {}*, i64 } %32, 1
  %cond889 = icmp eq i64 %.elt977, 0
  %135 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285852.0 = select i1 %cond889, {}* %135, {}* %.elt975
  %136 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 440), align 16
  %137 = invoke {}* @cc_safe_fdefinition({}* %136)
          to label %normal-dest391 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest391:                                   ; preds = %normal-dest384
  %138 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %139 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 442), align 16
  %ptrtoint392 = ptrtoint {}* %137 to i64
  %entry-point-addr-uint393 = add i64 %ptrtoint392, 7
  %entry-point-addr394 = inttoptr i64 %entry-point-addr-uint393 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point395 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr394, align 8
  %140 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point395({}* %137, i64 4, {}* %138, {}* inttoptr (i64 12 to {}*), {}* %139, {}* %auffuellzeichen.0)
          to label %normal-dest398 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest398:                                   ; preds = %normal-dest391
  %.elt979 = extractvalue { {}*, i64 } %140, 0
  %.elt981 = extractvalue { {}*, i64 } %140, 1
  %cond890 = icmp eq i64 %.elt981, 0
  %141 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285853.0 = select i1 %cond890, {}* %141, {}* %.elt979
  %ptrtoint404 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint405 = add i64 %ptrtoint404, 7
  %entry-point-addr406 = inttoptr i64 %entry-point-addr-uint405 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point407 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr406, align 8
  %142 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point407({}* %66, i64 2, {}* %G285852.0, {}* %G285853.0, {}* null, {}* null)
          to label %normal-dest410 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest410:                                   ; preds = %normal-dest398
  %.elt983 = extractvalue { {}*, i64 } %142, 0
  %.elt985 = extractvalue { {}*, i64 } %142, 1
  br label %tag59

normal-dest422:                                   ; preds = %tag64
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 436), align 16
  %ptrtoint423 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint424 = add i64 %ptrtoint423, 7
  %entry-point-addr425 = inttoptr i64 %entry-point-addr-uint424 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point426 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr425, align 8
  %144 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point426({}* %39, i64 2, {}* %STRING.0, {}* %143, {}* null, {}* null)
          to label %normal-dest429 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest429:                                   ; preds = %normal-dest422
  %.elt1000 = extractvalue { {}*, i64 } %144, 0
  %.elt1002 = extractvalue { {}*, i64 } %144, 1
  %cond893 = icmp eq i64 %.elt1002, 0
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285811.1 = select i1 %cond893, {}* %145, {}* %.elt1000
  br label %tag109

normal-dest436:                                   ; preds = %tag65
  %ptrtoint437 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint438 = add i64 %ptrtoint437, 7
  %entry-point-addr439 = inttoptr i64 %entry-point-addr-uint438 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point440 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr439, align 8
  %146 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point440({}* %41, i64 2, {}* %vaarg185, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest443 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest443:                                   ; preds = %normal-dest436
  %.elt928 = extractvalue { {}*, i64 } %146, 0
  %.elt930 = extractvalue { {}*, i64 } %146, 1
  %cond880 = icmp eq i64 %.elt930, 0
  %147 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285962.1 = select i1 %cond880, {}* %147, {}* %.elt928
  br label %tag153

normal-dest487:                                   ; preds = %tag85
  %148 = invoke float @from_object_float({}* %vaarg185)
          to label %normal-dest488 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest488:                                   ; preds = %normal-dest487
  %149 = fcmp ugt float %46, %148
  br i1 %149, label %tag71, label %tag155

normal-dest489:                                   ; preds = %tag86
  %150 = invoke double @from_object_double({}* nonnull %vaarg185)
          to label %normal-dest490 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest490:                                   ; preds = %normal-dest489
  %151 = fcmp ugt double %47, %150
  br i1 %151, label %tag174, label %tag146

normal-dest492:                                   ; preds = %maybe-more-tests
  %ptrtoint493 = ptrtoint {}* %128 to i64
  %entry-point-addr-uint494 = add i64 %ptrtoint493, 7
  %entry-point-addr495 = inttoptr i64 %entry-point-addr-uint494 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point496 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr495, align 8
  %152 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point496({}* %128, i64 1, {}* nonnull %STRING.0, {}* null, {}* null, {}* null)
          to label %normal-dest499 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest499:                                   ; preds = %normal-dest492
  %.elt1004 = extractvalue { {}*, i64 } %152, 0
  %.elt1006 = extractvalue { {}*, i64 } %152, 1
  %cond894 = icmp eq i64 %.elt1006, 0
  %153 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286123.0 = select i1 %cond894, {}* %153, {}* %.elt1004
  %154 = icmp eq {}* %G286123.0, inttoptr (i64 4 to {}*)
  %G286047.0.pre.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br i1 %154, label %tag32, label %tag102

normal-dest515:                                   ; preds = %tag91
  %155 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %156 = invoke {}* @cc_safe_fdefinition({}* %155)
          to label %normal-dest517 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest517:                                   ; preds = %normal-dest515
  br i1 %fixnump-test415, label %tag131, label %tag140

normal-dest526:                                   ; preds = %tag92
  %ptrtoint527 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint528 = add i64 %ptrtoint527, 7
  %entry-point-addr529 = inttoptr i64 %entry-point-addr-uint528 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point530 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr529, align 8
  %157 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point530({}* %52, i64 1, {}* %37, {}* null, {}* null, {}* null)
          to label %normal-dest533 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest533:                                   ; preds = %normal-dest526
  %.elt987 = extractvalue { {}*, i64 } %157, 0
  %.elt989 = extractvalue { {}*, i64 } %157, 1
  %cond891 = icmp eq i64 %.elt989, 0
  %158 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285863.2 = select i1 %cond891, {}* %158, {}* %.elt987
  br label %tag55

normal-dest540:                                   ; preds = %tag93
  %ptrtoint541 = ptrtoint {}* %54 to i64
  %entry-point-addr-uint542 = add i64 %ptrtoint541, 7
  %entry-point-addr543 = inttoptr i64 %entry-point-addr-uint542 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point544 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr543, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point544({}* %54, i64 1, {}* %29, {}* null, {}* null, {}* null)
          to label %normal-dest547 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest547:                                   ; preds = %normal-dest540
  %.elt940 = extractvalue { {}*, i64 } %159, 0
  %.elt942 = extractvalue { {}*, i64 } %159, 1
  %cond882 = icmp eq i64 %.elt942, 0
  %160 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285962.2 = select i1 %cond882, {}* %160, {}* %.elt940
  br label %tag153

header-check-br553:                               ; preds = %tag94
  %irc-bit-cast557 = bitcast {}* %vaarg185 to i8*
  %gep558 = getelementptr inbounds i8, i8* %irc-bit-cast557, i64 -9
  %irc-bit-cast559 = bitcast i8* %gep558 to i64*
  %161 = load i64, i64* %irc-bit-cast559, align 8
  %162 = icmp eq i64 %161, 1325
  br i1 %162, label %tag86, label %tag36

normal-dest569:                                   ; preds = %tag97
  %ptrtoint570 = ptrtoint {}* %56 to i64
  %entry-point-addr-uint571 = add i64 %ptrtoint570, 7
  %entry-point-addr572 = inttoptr i64 %entry-point-addr-uint571 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point573 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr572, align 8
  %163 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point573({}* %56, i64 1, {}* %79, {}* null, {}* null, {}* null)
          to label %normal-dest576 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest576:                                   ; preds = %normal-dest569
  %.elt966 = extractvalue { {}*, i64 } %163, 0
  %.elt968 = extractvalue { {}*, i64 } %163, 1
  %cond887 = icmp eq i64 %.elt968, 0
  %164 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285904.1 = select i1 %cond887, {}* %164, {}* %.elt966
  br label %tag136

normal-dest603:                                   ; preds = %tag140
  %ptrtoint604 = ptrtoint {}* %84 to i64
  %entry-point-addr-uint605 = add i64 %ptrtoint604, 7
  %entry-point-addr606 = inttoptr i64 %entry-point-addr-uint605 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point607 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr606, align 8
  %165 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point607({}* %84, i64 2, {}* %vaarg185, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest610 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest610:                                   ; preds = %normal-dest603
  %.elt950 = extractvalue { {}*, i64 } %165, 0
  %.elt952 = extractvalue { {}*, i64 } %165, 1
  %cond884 = icmp eq i64 %.elt952, 0
  %166 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285904.2 = select i1 %cond884, {}* %166, {}* %.elt950
  br label %tag136

normal-dest638:                                   ; preds = %tag114
  %167 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %168 = invoke {}* @cc_safe_fdefinition({}* %167)
          to label %normal-dest640 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest640:                                   ; preds = %normal-dest638
  br i1 %fixnump-test415, label %tag60, label %tag25

header-check-br650:                               ; preds = %tag139
  %irc-bit-cast654 = bitcast {}* %G285811.0 to i8*
  %gep655 = getelementptr inbounds i8, i8* %irc-bit-cast654, i64 -9
  %irc-bit-cast656 = bitcast i8* %gep655 to i64*
  %169 = load i64, i64* %irc-bit-cast656, align 8
  %170 = icmp eq i64 %169, 1325
  br i1 %170, label %tag94, label %tag36

normal-dest658:                                   ; preds = %tag117
  %ptrtoint659 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint660 = add i64 %ptrtoint659, 7
  %entry-point-addr661 = inttoptr i64 %entry-point-addr-uint660 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point662 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr661, align 8
  %171 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point662({}* %70, i64 2, {}* %vaarg185, {}* inttoptr (i64 40 to {}*), {}* null, {}* null)
          to label %normal-dest665 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest665:                                   ; preds = %normal-dest658
  %.elt945 = extractvalue { {}*, i64 } %171, 0
  %.elt947 = extractvalue { {}*, i64 } %171, 1
  %cond883 = icmp eq i64 %.elt947, 0
  %172 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285933.1 = select i1 %cond883, {}* %172, {}* %.elt945
  br label %tag44

normal-dest679:                                   ; preds = %tag121
  %173 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %174 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %175 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %176 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint680 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint681 = add i64 %ptrtoint680, 7
  %entry-point-addr682 = inttoptr i64 %entry-point-addr-uint681 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point683 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr682, align 8
  %177 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point683({}* %72, i64 5, {}* %173, {}* %174, {}* %SEQUENCE.0.ph, {}* %175, {}* %176)
          to label %normal-dest686 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest686:                                   ; preds = %normal-dest679
  %.elt996 = extractvalue { {}*, i64 } %177, 0
  %.elt998 = extractvalue { {}*, i64 } %177, 1
  %cond892 = icmp eq i64 %.elt998, 0
  %178 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond892, {}* %178, {}* %.elt996
  br label %tag129

normal-dest711:                                   ; preds = %tag136
  %.elt954 = extractvalue { {}*, i64 } %80, 0
  %.elt956 = extractvalue { {}*, i64 } %80, 1
  %cond885 = icmp eq i64 %.elt956, 0
  %179 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285893.0 = select i1 %cond885, {}* %179, {}* %.elt954
  %180 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 440), align 16
  %181 = invoke {}* @cc_safe_fdefinition({}* %180)
          to label %normal-dest718 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest718:                                   ; preds = %normal-dest711
  %182 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %183 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 442), align 16
  %ptrtoint719 = ptrtoint {}* %181 to i64
  %entry-point-addr-uint720 = add i64 %ptrtoint719, 7
  %entry-point-addr721 = inttoptr i64 %entry-point-addr-uint720 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point722 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr721, align 8
  %184 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point722({}* %181, i64 4, {}* %182, {}* inttoptr (i64 8 to {}*), {}* %183, {}* %auffuellzeichen.0)
          to label %normal-dest725 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest725:                                   ; preds = %normal-dest718
  %.elt958 = extractvalue { {}*, i64 } %184, 0
  %.elt960 = extractvalue { {}*, i64 } %184, 1
  %cond886 = icmp eq i64 %.elt960, 0
  %185 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285894.0 = select i1 %cond886, {}* %185, {}* %.elt958
  %ptrtoint731 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint732 = add i64 %ptrtoint731, 7
  %entry-point-addr733 = inttoptr i64 %entry-point-addr-uint732 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point734 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr733, align 8
  %186 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point734({}* %50, i64 2, {}* %G285893.0, {}* %G285894.0, {}* null, {}* null)
          to label %normal-dest737 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest737:                                   ; preds = %normal-dest725
  %.elt962 = extractvalue { {}*, i64 } %186, 0
  %.elt964 = extractvalue { {}*, i64 } %186, 1
  br label %tag59

normal-dest739:                                   ; preds = %tag137
  %187 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 437), align 8
  %ptrtoint740 = ptrtoint {}* %82 to i64
  %entry-point-addr-uint741 = add i64 %ptrtoint740, 7
  %entry-point-addr742 = inttoptr i64 %entry-point-addr-uint741 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point743 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr742, align 8
  %188 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point743({}* %82, i64 2, {}* %G2095854.0, {}* %187, {}* null, {}* null)
          to label %tag61 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest756:                                   ; preds = %tag142
  %ptrtoint757 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint758 = add i64 %ptrtoint757, 7
  %entry-point-addr759 = inttoptr i64 %entry-point-addr-uint758 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point760 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr759, align 8
  %189 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point760({}* %86, i64 2, {}* %vaarg185, {}* inttoptr (i64 16 to {}*), {}* null, {}* null)
          to label %normal-dest763 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest763:                                   ; preds = %normal-dest756
  %.elt923 = extractvalue { {}*, i64 } %189, 0
  %.elt925 = extractvalue { {}*, i64 } %189, 1
  %cond879 = icmp eq i64 %.elt925, 0
  %190 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285991.1 = select i1 %cond879, {}* %190, {}* %.elt923
  br label %tag168

header-check-br779:                               ; preds = %tag149
  %irc-bit-cast783 = bitcast {}* %STRING.0 to i8*
  %gep784 = getelementptr inbounds i8, i8* %irc-bit-cast783, i64 -9
  %irc-bit-cast785 = bitcast i8* %gep784 to i64*
  %191 = load i64, i64* %irc-bit-cast785, align 8
  %.off = add i64 %191, -1081
  %192 = icmp ult i64 %.off, 69
  br i1 %192, label %tag32, label %header-check-br282

normal-dest798:                                   ; preds = %tag153
  %.elt932 = extractvalue { {}*, i64 } %88, 0
  %.elt934 = extractvalue { {}*, i64 } %88, 1
  %cond881 = icmp eq i64 %.elt934, 0
  %193 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G285957.0 = select i1 %cond881, {}* %193, {}* %.elt932
  %ptrtoint804 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint805 = add i64 %ptrtoint804, 7
  %entry-point-addr806 = inttoptr i64 %entry-point-addr-uint805 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point807 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr806, align 8
  %194 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point807({}* %22, i64 2, {}* %G285957.0, {}* %auffuellzeichen.0, {}* null, {}* null)
          to label %normal-dest810 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest810:                                   ; preds = %normal-dest798
  %.elt936 = extractvalue { {}*, i64 } %194, 0
  %.elt938 = extractvalue { {}*, i64 } %194, 1
  br label %tag59

normal-dest812:                                   ; preds = %tag160
  %ptrtoint813 = ptrtoint {}* %93 to i64
  %entry-point-addr-uint814 = add i64 %ptrtoint813, 7
  %entry-point-addr815 = inttoptr i64 %entry-point-addr-uint814 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point816 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr815, align 8
  %195 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point816({}* %93, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest819 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest819:                                   ; preds = %normal-dest812
  %.elt906 = extractvalue { {}*, i64 } %195, 0
  %.elt908 = extractvalue { {}*, i64 } %195, 1
  %cond876 = icmp eq i64 %.elt908, 0
  %196 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond876, {}* %196, {}* %.elt906
  br label %tag61.outer.backedge

normal-dest852:                                   ; preds = %tag175
  %ptrtoint853 = ptrtoint {}* %98 to i64
  %entry-point-addr-uint854 = add i64 %ptrtoint853, 7
  %entry-point-addr855 = inttoptr i64 %entry-point-addr-uint854 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point856 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr855, align 8
  %197 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point856({}* %98, i64 1, {}* %61, {}* null, {}* null, {}* null)
          to label %normal-dest859 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest859:                                   ; preds = %normal-dest852
  %.elt910 = extractvalue { {}*, i64 } %197, 0
  %.elt912 = extractvalue { {}*, i64 } %197, 1
  %cond877 = icmp eq i64 %.elt912, 0
  %198 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond877, {}* %198, {}* %.elt910
  br label %tag61.outer.backedge
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^262^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !69 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^262^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G286167.0 = phi {}* [ %18, %header-check-br ], [ %G286167.1, %normal-dest76 ], [ %G286167.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 458), align 16
  %ptrtoint13 = ptrtoint {}* %G286167.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G286167.0, i64 2, {}* %"closure->B-DREI-PUNKTE-EINFUEGEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests67, %normal-dest69, %tag3, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 458), align 16
  %"closure->B-DREI-PUNKTE-EINFUEGEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 9450, i64 262, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br59

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 460), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B-DREI-PUNKTE-EINFUEGEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 467), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B-DREI-PUNKTE-EINFUEGEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 458), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 468), align 16
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 1048 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 458), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %39 = icmp ult i64 %.off123, 5
  br i1 %39, label %maybe-more-tests67, label %tag3

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag3
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 457), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %42, {}* %43, {}* %18, {}* %44, {}* %45)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt97 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt97, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286167.1 = select i1 %cond, {}* %47, {}* %.elt
  br label %tag1

normal-dest82:                                    ; preds = %maybe-more-tests67
  %ptrtoint83 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286167.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !70 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc488 unwind label %cleanup-lpad.loopexit.split-lp

.noexc488:                                        ; preds = %13
  unreachable

tag:                                              ; preds = %normal-dest311
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag87

tag4:                                             ; preds = %tag27
  %trunc = trunc i64 %24 to i3
  switch i3 %trunc, label %tag43 [
    i3 -2, label %tag89
    i3 1, label %header-check-br191
  ]

tag6:                                             ; preds = %header-check-br191
  %ptrtoint123 = ptrtoint {}* %y213.0 to i64
  %tag-only124 = and i64 %ptrtoint123, 7
  %test125 = icmp eq i64 %tag-only124, 1
  br i1 %test125, label %header-check-br122, label %tag43

tag13:                                            ; preds = %normal-dest103
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest148 unwind label %cleanup-lpad.loopexit.split-lp

tag14:                                            ; preds = %tag74
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest163 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag15:                                            ; preds = %tag91
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest177 unwind label %cleanup-lpad.loopexit.loopexit

tag18:                                            ; preds = %tag91, %normal-dest185, %tag34
  %.val505 = phi {}* [ %.val503.pre, %tag34 ], [ %96, %normal-dest185 ], [ %73, %tag91 ]
  %G2095854.0 = phi {}* [ %31, %tag34 ], [ %G2095854.1, %normal-dest185 ], [ %73, %tag91 ]
  %21 = ptrtoint {}* %G2095854.0 to i64
  %tag-only198438 = and i64 %21, 7
  %consp-test = icmp eq i64 %tag-only198438, 3
  %.val502 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286264.0 = select i1 %consp-test, {}* %.val502, {}* %.val505
  %22 = icmp eq {}* %G286264.0, %.val505
  br i1 %22, label %tag33, label %tag39

tag27:                                            ; preds = %tag33, %normal-dest262, %tag60, %tag31
  %23 = phi {}* [ %44, %tag31 ], [ %.val507521, %tag60 ], [ %105, %normal-dest262 ], [ %.val505, %tag33 ]
  %y213.0 = phi {}* [ %28, %tag31 ], [ null, %tag60 ], [ %y213.1, %normal-dest262 ], [ %LENGTH.0.ph, %tag33 ]
  %24 = ptrtoint {}* %.in to i64
  %fixnum-tag-only217448 = and i64 %24, 3
  %fixnump-test218 = icmp eq i64 %fixnum-tag-only217448, 0
  br i1 %fixnump-test218, label %tag47, label %tag4

tag28:                                            ; preds = %tag75
  %test222 = icmp eq i64 %tag-only332436, 1
  br i1 %test222, label %header-check-br219, label %tag60

tag31:                                            ; preds = %tag49
  %25 = add i64 %59, 7
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %26, align 8
  %"tag fixnum" = shl nuw i64 %27, 2
  %28 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag27

tag33:                                            ; preds = %tag18
  %29 = icmp eq {}* %G2095854.0, %.val505
  %G286235.0 = select i1 %29, {}* %.val502, {}* %.val505
  %30 = icmp eq {}* %G286235.0, %.val505
  br i1 %30, label %tag78, label %tag27

tag34:                                            ; preds = %tag63
  %31 = load {}*, {}** %56, align 8
  %.val503.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag18

tag39:                                            ; preds = %tag18
  %32 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only232439 = and i64 %32, 3
  %fixnump-test233 = icmp eq i64 %fixnum-tag-only232439, 0
  br i1 %fixnump-test233, label %tag74, label %tag46

tag40:                                            ; preds = %tag47
  %33 = icmp sgt {}* %.in, %y213.0
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %. = select i1 %33, {}* %23, {}* %34
  br label %tag87

tag41:                                            ; preds = %normal-dest284
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag87

tag43:                                            ; preds = %tag4, %tag89, %tag47, %header-check-br191, %header-check-br122, %tag6
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest238 unwind label %cleanup-lpad.loopexit.split-lp

tag45:                                            ; preds = %normal-dest311
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag87

tag46:                                            ; preds = %tag39
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest130 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag47:                                            ; preds = %tag27
  %41 = ptrtoint {}* %y213.0 to i64
  %fixnum-tag-only252464 = and i64 %41, 3
  %fixnump-test253 = icmp eq i64 %fixnum-tag-only252464, 0
  br i1 %fixnump-test253, label %tag40, label %tag43

tag48:                                            ; preds = %tag60
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest255 unwind label %cleanup-lpad.loopexit.split-lp

tag49:                                            ; preds = %normal-dest385, %header-check-br219
  %G286227.0.pre = phi {}* [ %.val, %header-check-br219 ], [ %G286227.0.pre.pre, %normal-dest385 ]
  %44 = phi {}* [ %106, %header-check-br219 ], [ %126, %normal-dest385 ]
  %45 = icmp eq {}* %G286227.0.pre, %44
  br i1 %45, label %tag60, label %tag31

tag51:                                            ; preds = %normal-dest293, %normal-dest156, %tag88
  %G286291.0 = phi {}* [ %70, %tag88 ], [ %G286291.1, %normal-dest156 ], [ %G286291.2, %normal-dest293 ]
  %ptrtoint269 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint270 = add i64 %ptrtoint269, 7
  %entry-point-addr271 = inttoptr i64 %entry-point-addr-uint270 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point272 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr271, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point272({}* %81, i64 3, {}* inttoptr (i64 82 to {}*), {}* %farg0, {}* %G286291.0, {}* null)
          to label %normal-dest275 unwind label %cleanup-lpad.loopexit.split-lp

tag53:                                            ; preds = %tag89
  %47 = invoke float @from_object_float({}* %.in)
          to label %normal-dest283 unwind label %cleanup-lpad.loopexit.split-lp

tag54:                                            ; preds = %tag88
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest286 unwind label %cleanup-lpad.loopexit.split-lp

tag60:                                            ; preds = %normal-dest385, %tag28, %header-check-br321, %tag49
  %.val506 = phi {}* [ %G286227.0.pre, %tag49 ], [ %.val, %tag28 ], [ %.val, %header-check-br321 ], [ %G286227.0.pre.pre, %normal-dest385 ]
  %.val507521 = phi {}* [ %G286227.0.pre, %tag49 ], [ %106, %tag28 ], [ %106, %header-check-br321 ], [ %126, %normal-dest385 ]
  %50 = icmp eq {}* %.val507521, %farg0
  %G286223.0 = select i1 %50, {}* %.val506, {}* %.val507521
  %51 = icmp eq {}* %G286223.0, %.val507521
  br i1 %51, label %tag48, label %tag27

tag61:                                            ; preds = %normal-dest284
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag87

tag63:                                            ; preds = %normal-dest358, %tag63.outer
  br i1 %consp-test309, label %tag34, label %tag91

tag64:                                            ; preds = %header-check-br122
  %53 = invoke double @from_object_double({}* nonnull %.in)
          to label %normal-dest310 unwind label %cleanup-lpad.loopexit.split-lp

tag63.outer:                                      ; preds = %tag63.outer.backedge, %tag63.outer.preheader
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag63.outer.preheader ], [ %LENGTH.0.ph.be, %tag63.outer.backedge ]
  %SEQUENCE.0.ph = phi {}* [ %farg0, %tag63.outer.preheader ], [ %G2095854.0, %tag63.outer.backedge ]
  %54 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only308437 = and i64 %54, 7
  %consp-test309 = icmp eq i64 %tag-only308437, 3
  %55 = add i64 %54, 5
  %56 = inttoptr i64 %55 to {}**
  br label %tag63

tag74:                                            ; preds = %tag39
  %57 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %32, i64 4)
  %result = extractvalue { i64, i1 } %57, 0
  %overflow = extractvalue { i64, i1 } %57, 1
  %58 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag14, label %tag63.outer.backedge

tag63.outer.backedge:                             ; preds = %tag74, %normal-dest170, %normal-dest139
  %LENGTH.0.ph.be = phi {}* [ %LENGTH.1, %normal-dest139 ], [ %LENGTH.2, %normal-dest170 ], [ %58, %tag74 ]
  br label %tag63.outer

tag75:                                            ; preds = %normal-dest275
  %59 = ptrtoint {}* %farg0 to i64
  %tag-only332436 = and i64 %59, 7
  %consp-test333 = icmp eq i64 %tag-only332436, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286283.0 = select i1 %consp-test333, {}* %.val, {}* %106
  %60 = icmp eq {}* %G286283.0, %106
  br i1 %60, label %tag28, label %tag63.outer.preheader

tag63.outer.preheader:                            ; preds = %tag75
  br label %tag63.outer

tag76:                                            ; preds = %tag87
  %61 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest335 unwind label %cleanup-lpad.loopexit.split-lp

tag78:                                            ; preds = %tag33
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %64 = invoke {}* @cc_safe_fdefinition({}* %63)
          to label %normal-dest358 unwind label %cleanup-lpad.loopexit.loopexit

tag83:                                            ; preds = %tag87, %normal-dest356
  %return-value.sroa.26.0 = phi i64 [ %.elt460, %normal-dest356 ], [ 1, %tag87 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt458, %normal-dest356 ], [ %farg0, %tag87 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %65 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %66 = insertvalue { {}*, i64 } %65, i64 %return-value.sroa.26.0, 1
  ret { {}*, i64 } %66

tag87:                                            ; preds = %tag40, %normal-dest275, %normal-dest245, %tag61, %tag45, %tag41, %tag
  %G286195.0 = phi {}* [ %35, %tag41 ], [ %52, %tag61 ], [ %38, %tag45 ], [ %14, %tag ], [ %G286195.1, %normal-dest245 ], [ %106, %normal-dest275 ], [ %., %tag40 ]
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %68 = icmp eq {}* %G286195.0, %67
  br i1 %68, label %tag83, label %tag76

tag88:                                            ; preds = %normal-dest103
  %69 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %82, i64 4)
  %result399 = extractvalue { i64, i1 } %69, 0
  %overflow400 = extractvalue { i64, i1 } %69, 1
  %70 = inttoptr i64 %result399 to {}*
  br i1 %overflow400, label %tag54, label %tag51

tag89:                                            ; preds = %tag4
  %71 = ptrtoint {}* %y213.0 to i64
  %single-float-tag-only401 = and i64 %71, 7
  %72 = icmp eq i64 %single-float-tag-only401, 6
  br i1 %72, label %tag53, label %tag43

tag91:                                            ; preds = %tag63
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %74 = icmp eq {}* %SEQUENCE.0.ph, %73
  %.val500 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286276.0 = select i1 %74, {}* %.val500, {}* %73
  %75 = icmp eq {}* %G286276.0, %73
  br i1 %75, label %tag15, label %tag18

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest358, %tag78, %normal-dest177, %tag15
  %lpad.loopexit509 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest163, %tag14, %normal-dest130, %tag46
  %lpad.loopexit.split-lp510 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest96, %normal-dest99, %tag13, %normal-dest148, %tag43, %normal-dest238, %tag48, %normal-dest255, %tag51, %tag53, %normal-dest283, %tag54, %normal-dest286, %tag64, %normal-dest310, %tag76, %normal-dest335, %normal-dest337, %normal-dest344, %maybe-more-tests329, %normal-dest378, %10, %13
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ], [ %lpad.loopexit509, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp510, %cleanup-lpad.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 402), align 16
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest96 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest96:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %77 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %77, i64 2, {}* %farg1, {}* %farg2, {}* null, {}* null)
          to label %normal-dest99 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest99:                                    ; preds = %normal-dest96
  %.elt = extractvalue { {}*, i64 } %78, 0
  %.elt426 = extractvalue { {}*, i64 } %78, 1
  %cond = icmp eq i64 %.elt426, 0
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in481 = select i1 %cond, {}* %79, {}* %.elt
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 453), align 8
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest103 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest103:                                   ; preds = %normal-dest99
  %82 = ptrtoint {}* %.in481 to i64
  %fixnum-tag-only330427 = and i64 %82, 3
  %fixnump-test331 = icmp eq i64 %fixnum-tag-only330427, 0
  br i1 %fixnump-test331, label %tag88, label %tag13

header-check-br122:                               ; preds = %tag6
  %irc-bit-cast126 = bitcast {}* %y213.0 to i8*
  %gep127 = getelementptr inbounds i8, i8* %irc-bit-cast126, i64 -9
  %irc-bit-cast128 = bitcast i8* %gep127 to i64*
  %83 = load i64, i64* %irc-bit-cast128, align 8
  %84 = icmp eq i64 %83, 1325
  br i1 %84, label %tag64, label %tag43

normal-dest130:                                   ; preds = %tag46
  %ptrtoint133 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint134 = add i64 %ptrtoint133, 7
  %entry-point-addr135 = inttoptr i64 %entry-point-addr-uint134 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point136 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr135, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point136({}* %40, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest139 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest139:                                   ; preds = %normal-dest130
  %.elt441 = extractvalue { {}*, i64 } %85, 0
  %.elt443 = extractvalue { {}*, i64 } %85, 1
  %cond417 = icmp eq i64 %.elt443, 0
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond417, {}* %86, {}* %.elt441
  br label %tag63.outer.backedge

normal-dest148:                                   ; preds = %tag13
  %ptrtoint150 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint151 = add i64 %ptrtoint150, 7
  %entry-point-addr152 = inttoptr i64 %entry-point-addr-uint151 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point153 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr152, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point153({}* %16, i64 2, {}* %.in481, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest156 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest156:                                   ; preds = %normal-dest148
  %.elt429 = extractvalue { {}*, i64 } %87, 0
  %.elt431 = extractvalue { {}*, i64 } %87, 1
  %cond415 = icmp eq i64 %.elt431, 0
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286291.1 = select i1 %cond415, {}* %88, {}* %.elt429
  br label %tag51

normal-dest163:                                   ; preds = %tag14
  %ptrtoint164 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint165 = add i64 %ptrtoint164, 7
  %entry-point-addr166 = inttoptr i64 %entry-point-addr-uint165 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point167 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr166, align 8
  %89 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point167({}* %18, i64 1, {}* %58, {}* null, {}* null, {}* null)
          to label %normal-dest170 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest170:                                   ; preds = %normal-dest163
  %.elt445 = extractvalue { {}*, i64 } %89, 0
  %.elt447 = extractvalue { {}*, i64 } %89, 1
  %cond418 = icmp eq i64 %.elt447, 0
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond418, {}* %90, {}* %.elt445
  br label %tag63.outer.backedge

normal-dest177:                                   ; preds = %tag15
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %94 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint179 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint180 = add i64 %ptrtoint179, 7
  %entry-point-addr181 = inttoptr i64 %entry-point-addr-uint180 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point182 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr181, align 8
  %95 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point182({}* %20, i64 5, {}* %91, {}* %92, {}* %SEQUENCE.0.ph, {}* %93, {}* %94)
          to label %normal-dest185 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest185:                                   ; preds = %normal-dest177
  %.elt470 = extractvalue { {}*, i64 } %95, 0
  %.elt472 = extractvalue { {}*, i64 } %95, 1
  %cond421 = icmp eq i64 %.elt472, 0
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond421, {}* %96, {}* %.elt470
  br label %tag18

header-check-br191:                               ; preds = %tag4
  %gep196 = getelementptr inbounds i8, i8* %107, i64 -9
  %irc-bit-cast197 = bitcast i8* %gep196 to i64*
  %97 = load i64, i64* %irc-bit-cast197, align 8
  %98 = icmp eq i64 %97, 1325
  br i1 %98, label %tag6, label %tag43

header-check-br219:                               ; preds = %tag28
  %irc-bit-cast223 = bitcast {}* %farg0 to i8*
  %gep224 = getelementptr inbounds i8, i8* %irc-bit-cast223, i64 -9
  %irc-bit-cast225 = bitcast i8* %gep224 to i64*
  %99 = load i64, i64* %irc-bit-cast225, align 8
  %.off = add i64 %99, -1081
  %100 = icmp ult i64 %.off, 69
  br i1 %100, label %tag49, label %header-check-br321

normal-dest238:                                   ; preds = %tag43
  %ptrtoint239 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint240 = add i64 %ptrtoint239, 7
  %entry-point-addr241 = inttoptr i64 %entry-point-addr-uint240 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point242 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr241, align 8
  %101 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point242({}* %37, i64 2, {}* %.in, {}* %y213.0, {}* null, {}* null)
          to label %normal-dest245 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest245:                                   ; preds = %normal-dest238
  %.elt450 = extractvalue { {}*, i64 } %101, 0
  %.elt452 = extractvalue { {}*, i64 } %101, 1
  %cond419 = icmp eq i64 %.elt452, 0
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286195.1 = select i1 %cond419, {}* %102, {}* %.elt450
  br label %tag87

normal-dest255:                                   ; preds = %tag48
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 455), align 8
  %ptrtoint256 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint257 = add i64 %ptrtoint256, 7
  %entry-point-addr258 = inttoptr i64 %entry-point-addr-uint257 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point259 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr258, align 8
  %104 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point259({}* %43, i64 2, {}* %farg0, {}* %103, {}* null, {}* null)
          to label %normal-dest262 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest262:                                   ; preds = %normal-dest255
  %.elt474 = extractvalue { {}*, i64 } %104, 0
  %.elt476 = extractvalue { {}*, i64 } %104, 1
  %cond422 = icmp eq i64 %.elt476, 0
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %y213.1 = select i1 %cond422, {}* %105, {}* %.elt474
  br label %tag27

normal-dest275:                                   ; preds = %tag51
  %.elt433 = extractvalue { {}*, i64 } %46, 0
  %.elt435 = extractvalue { {}*, i64 } %46, 1
  %cond416 = icmp eq i64 %.elt435, 0
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond416, {}* %106, {}* %.elt433
  %107 = bitcast {}* %.in to i8*
  %108 = icmp eq {}* %.in, %106
  br i1 %108, label %tag87, label %tag75

normal-dest283:                                   ; preds = %tag53
  %109 = invoke float @from_object_float({}* %y213.0)
          to label %normal-dest284 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest284:                                   ; preds = %normal-dest283
  %110 = fcmp ugt float %47, %109
  br i1 %110, label %tag61, label %tag41

normal-dest286:                                   ; preds = %tag54
  %ptrtoint287 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint288 = add i64 %ptrtoint287, 7
  %entry-point-addr289 = inttoptr i64 %entry-point-addr-uint288 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point290 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr289, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point290({}* %49, i64 1, {}* %70, {}* null, {}* null, {}* null)
          to label %normal-dest293 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest293:                                   ; preds = %normal-dest286
  %.elt483 = extractvalue { {}*, i64 } %111, 0
  %.elt485 = extractvalue { {}*, i64 } %111, 1
  %cond424 = icmp eq i64 %.elt485, 0
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286291.2 = select i1 %cond424, {}* %112, {}* %.elt483
  br label %tag51

normal-dest310:                                   ; preds = %tag64
  %113 = invoke double @from_object_double({}* nonnull %y213.0)
          to label %normal-dest311 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest311:                                   ; preds = %normal-dest310
  %114 = fcmp ugt double %53, %113
  br i1 %114, label %tag, label %tag45

header-check-br321:                               ; preds = %header-check-br219
  %.off508 = add i64 %99, -1153
  %115 = icmp ult i64 %.off508, 149
  br i1 %115, label %maybe-more-tests329, label %tag60

maybe-more-tests329:                              ; preds = %header-check-br321
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %117 = invoke {}* @cc_safe_fdefinition({}* %116)
          to label %normal-dest378 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest335:                                   ; preds = %tag76
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %119 = invoke {}* @cc_safe_fdefinition({}* %118)
          to label %normal-dest337 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest337:                                   ; preds = %normal-dest335
  %ptrtoint338 = ptrtoint {}* %119 to i64
  %entry-point-addr-uint339 = add i64 %ptrtoint338, 7
  %entry-point-addr340 = inttoptr i64 %entry-point-addr-uint339 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point341 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr340, align 8
  %120 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point341({}* %119, i64 3, {}* %farg0, {}* null, {}* %.in, {}* null)
          to label %normal-dest344 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest344:                                   ; preds = %normal-dest337
  %.elt454 = extractvalue { {}*, i64 } %120, 0
  %.elt456 = extractvalue { {}*, i64 } %120, 1
  %cond420 = icmp eq i64 %.elt456, 0
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286187.0 = select i1 %cond420, {}* %121, {}* %.elt454
  %ptrtoint350 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint351 = add i64 %ptrtoint350, 7
  %entry-point-addr352 = inttoptr i64 %entry-point-addr-uint351 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point353 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr352, align 8
  %122 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point353({}* %62, i64 2, {}* %G286187.0, {}* inttoptr (i64 82 to {}*), {}* null, {}* null)
          to label %normal-dest356 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest356:                                   ; preds = %normal-dest344
  %.elt458 = extractvalue { {}*, i64 } %122, 0
  %.elt460 = extractvalue { {}*, i64 } %122, 1
  br label %tag83

normal-dest358:                                   ; preds = %tag78
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 456), align 16
  %ptrtoint359 = ptrtoint {}* %64 to i64
  %entry-point-addr-uint360 = add i64 %ptrtoint359, 7
  %entry-point-addr361 = inttoptr i64 %entry-point-addr-uint360 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point362 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr361, align 8
  %124 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point362({}* %64, i64 2, {}* %G2095854.0, {}* %123, {}* null, {}* null)
          to label %tag63 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest378:                                   ; preds = %maybe-more-tests329
  %ptrtoint379 = ptrtoint {}* %117 to i64
  %entry-point-addr-uint380 = add i64 %ptrtoint379, 7
  %entry-point-addr381 = inttoptr i64 %entry-point-addr-uint380 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point382 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr381, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point382({}* %117, i64 1, {}* nonnull %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest385 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest385:                                   ; preds = %normal-dest378
  %.elt478 = extractvalue { {}*, i64 } %125, 0
  %.elt480 = extractvalue { {}*, i64 } %125, 1
  %cond423 = icmp eq i64 %.elt480, 0
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286325.0 = select i1 %cond423, {}* %126, {}* %.elt478
  %127 = icmp eq {}* %G286325.0, inttoptr (i64 4 to {}*)
  %G286227.0.pre.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br i1 %127, label %tag49, label %tag60
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^272^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !71 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^272^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br86
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G286359.0 = phi {}* [ %18, %header-check-br ], [ %G286359.1, %normal-dest17 ], [ %G286359.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 475), align 8
  %ptrtoint34 = ptrtoint {}* %G286359.0 to i64
  %entry-point-addr-uint35 = add i64 %ptrtoint34, 7
  %entry-point-addr36 = inttoptr i64 %entry-point-addr-uint35 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point37 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr36, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point37({}* %G286359.0, i64 2, {}* %"closure->B=ASCII", {}* %13, {}* null, {}* null)
          to label %normal-dest40 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest72, %normal-dest66, %normal-dest59, %normal-dest53, %normal-dest46, %normal-dest40, %tag2, %normal-dest21, %maybe-more-tests94, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 475), align 8
  %"closure->B=ASCII" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ASCII^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ASCII^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 9880, i64 272, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br86

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 474), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286359.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest21:                                    ; preds = %maybe-more-tests94
  %ptrtoint22 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt118 = extractvalue { {}*, i64 } %27, 0
  %.elt120 = extractvalue { {}*, i64 } %27, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286359.2 = select i1 %cond95, {}* %28, {}* %.elt118
  br label %tag2

normal-dest40:                                    ; preds = %tag2
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest46 unwind label %cleanup-lpad

normal-dest46:                                    ; preds = %normal-dest40
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 477), align 8
  %ptrtoint47 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %30, i64 2, {}* %"closure->B=ASCII", {}* %31, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest46
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest59 unwind label %cleanup-lpad

normal-dest59:                                    ; preds = %normal-dest53
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 480), align 16
  %ptrtoint60 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %34, i64 2, {}* %"closure->B=ASCII", {}* %35, {}* null, {}* null)
          to label %normal-dest66 unwind label %cleanup-lpad

normal-dest66:                                    ; preds = %normal-dest59
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest72 unwind label %cleanup-lpad

normal-dest72:                                    ; preds = %normal-dest66
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 475), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 481), align 8
  %ptrtoint73 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint74 = add i64 %ptrtoint73, 7
  %entry-point-addr75 = inttoptr i64 %entry-point-addr-uint74 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point76 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr75, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point76({}* %38, i64 3, {}* %39, {}* %40, {}* %41, {}* null)
          to label %normal-dest79 unwind label %cleanup-lpad

normal-dest79:                                    ; preds = %normal-dest72
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %43, {}* inttoptr (i64 1088 to {}*))
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 475), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %45 = insertvalue { {}*, i64 } undef, {}* %44, 0
  %46 = insertvalue { {}*, i64 } %45, i64 1, 1
  ret { {}*, i64 } %46

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest21 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ASCII^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !72 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ASCII^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ASCII^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest21, %normal-dest12, %normal-dest9, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 470), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 472), align 16
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %18 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %18, 0
  %.elt44 = extractvalue { {}*, i64 } %18, 1
  %cond = icmp eq i64 %.elt44, 0
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286381.0 = select i1 %cond, {}* %19, {}* %.elt
  %ptrtoint15 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %20 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %15, i64 1, {}* %G286381.0, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest12
  %.elt46 = extractvalue { {}*, i64 } %20, 0
  %.elt48 = extractvalue { {}*, i64 } %20, 1
  %cond41 = icmp eq i64 %.elt48, 0
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286379.0 = select i1 %cond41, {}* %21, {}* %.elt46
  %ptrtoint27 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint28 = add i64 %ptrtoint27, 7
  %entry-point-addr29 = inttoptr i64 %entry-point-addr-uint28 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point30 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr29, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point30({}* %13, i64 1, {}* %G286379.0, {}* null, {}* null, {}* null)
          to label %normal-dest33 unwind label %cleanup-lpad

normal-dest33:                                    ; preds = %normal-dest21
  %.elt50 = extractvalue { {}*, i64 } %22, 0
  %.elt52 = extractvalue { {}*, i64 } %22, 1
  %cond42 = icmp eq i64 %.elt52, 0
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286377.0 = select i1 %cond42, {}* %23, {}* %.elt50
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %24 = insertvalue { {}*, i64 } undef, {}* %G286377.0, 0
  %25 = insertvalue { {}*, i64 } %24, i64 1, 1
  ret { {}*, i64 } %25
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^276^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !73 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^276^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G286411.0 = phi {}* [ %18, %header-check-br ], [ %G286411.1, %normal-dest76 ], [ %G286411.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 490), align 16
  %ptrtoint13 = ptrtoint {}* %G286411.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G286411.0, i64 2, {}* %"closure->B=ERSTES-ZEICHEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest69, %maybe-more-tests67, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 490), align 16
  %"closure->B=ERSTES-ZEICHEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 9994, i64 276, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br59

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 492), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=ERSTES-ZEICHEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 495), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=ERSTES-ZEICHEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 490), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 496), align 16
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 1104 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 490), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %39 = icmp ult i64 %.off123, 5
  br i1 %39, label %maybe-more-tests67, label %tag4

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt118 = extractvalue { {}*, i64 } %42, 0
  %.elt120 = extractvalue { {}*, i64 } %42, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286411.1 = select i1 %cond95, {}* %43, {}* %.elt118
  br label %tag1

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 489), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286411.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !74 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc113 unwind label %cleanup-lpad

.noexc113:                                        ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest23
  %11 = ptrtoint {}* %28 to i64
  br label %tag4

tag1:                                             ; preds = %normal-dest76
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 475), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest32 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest23
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest55 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest76, %normal-dest53, %tag
  %return-value.sroa.14.0 = phi i64 [ %.elt112, %normal-dest53 ], [ 1, %tag ], [ 1, %normal-dest76 ]
  %return-value.sroa.0.0 = phi i64 [ %35, %normal-dest53 ], [ %11, %tag ], [ 258, %normal-dest76 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %16 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %17 = insertvalue { {}*, i64 } undef, {}* %16, 0
  %18 = insertvalue { {}*, i64 } %17, i64 %return-value.sroa.14.0, 1
  ret { {}*, i64 } %18

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest69, %normal-dest62, %normal-dest55, %tag2, %normal-dest41, %normal-dest34, %normal-dest32, %tag1, %normal-dest16, %normal-dest12, %normal-dest9, %normal-dest
  %19 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %19

normal-dest:                                      ; preds = %entry
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %21 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %22 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %21, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %22, 0
  %.elt89 = extractvalue { {}*, i64 } %22, 1
  %cond = icmp eq i64 %.elt89, 0
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286389.0 = select i1 %cond, {}* %23, {}* %.elt
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest16 unwind label %cleanup-lpad

normal-dest16:                                    ; preds = %normal-dest12
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 485), align 8
  %ptrtoint17 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint18 = add i64 %ptrtoint17, 7
  %entry-point-addr19 = inttoptr i64 %entry-point-addr-uint18 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point20 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr19, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point20({}* %25, i64 2, {}* %G286389.0, {}* %26, {}* null, {}* null)
          to label %normal-dest23 unwind label %cleanup-lpad

normal-dest23:                                    ; preds = %normal-dest16
  %.elt91 = extractvalue { {}*, i64 } %27, 0
  %.elt93 = extractvalue { {}*, i64 } %27, 1
  %cond84 = icmp eq i64 %.elt93, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286449.0 = select i1 %cond84, {}* %28, {}* %.elt91
  %29 = icmp eq {}* %G286449.0, %28
  br i1 %29, label %tag2, label %tag

normal-dest32:                                    ; preds = %tag1
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 487), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest34 unwind label %cleanup-lpad

normal-dest34:                                    ; preds = %normal-dest32
  %ptrtoint35 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint36 = add i64 %ptrtoint35, 7
  %entry-point-addr37 = inttoptr i64 %entry-point-addr-uint36 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point38 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr37, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point38({}* %31, i64 2, {}* %G286390.0, {}* null, {}* null, {}* null)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest34
  %.elt106 = extractvalue { {}*, i64 } %32, 0
  %.elt108 = extractvalue { {}*, i64 } %32, 1
  %cond87 = icmp eq i64 %.elt108, 0
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286430.0 = select i1 %cond87, {}* %33, {}* %.elt106
  %ptrtoint47 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint48 = add i64 %ptrtoint47, 7
  %entry-point-addr49 = inttoptr i64 %entry-point-addr-uint48 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point50 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr49, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point50({}* %13, i64 1, {}* %G286430.0, {}* null, {}* null, {}* null)
          to label %normal-dest53 unwind label %cleanup-lpad

normal-dest53:                                    ; preds = %normal-dest41
  %.elt110 = extractvalue { {}*, i64 } %34, 0
  %35 = ptrtoint {}* %.elt110 to i64
  %.elt112 = extractvalue { {}*, i64 } %34, 1
  br label %tag4

normal-dest55:                                    ; preds = %tag2
  %ptrtoint56 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %15, i64 3, {}* %G286389.0, {}* null, {}* inttoptr (i64 4 to {}*), {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %.elt98 = extractvalue { {}*, i64 } %36, 0
  %.elt100 = extractvalue { {}*, i64 } %36, 1
  %cond85 = icmp eq i64 %.elt100, 0
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286390.0 = select i1 %cond85, {}* %37, {}* %.elt98
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %normal-dest62
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 486), align 16
  %ptrtoint70 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %39, i64 2, {}* %G286390.0, {}* %40, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt102 = extractvalue { {}*, i64 } %41, 0
  %.elt104 = extractvalue { {}*, i64 } %41, 1
  %cond86 = icmp eq i64 %.elt104, 0
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286437.0 = select i1 %cond86, {}* %42, {}* %.elt102
  %43 = icmp eq {}* %G286437.0, %42
  br i1 %43, label %tag1, label %tag4
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^291^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !75 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^291^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br34
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest21 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest28, %normal-dest17, %header-check-br
  %G286480.0 = phi {}* [ %18, %header-check-br ], [ %G286480.1, %normal-dest17 ], [ %G286480.2, %normal-dest28 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 501), align 8
  %ptrtoint43 = ptrtoint {}* %G286480.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G286480.0, i64 2, {}* %"closure->B=LAENGE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest21, %tag1, %normal-dest13, %maybe-more-tests42, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 501), align 8
  %"closure->B=LAENGE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LAENGE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LAENGE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 10764, i64 291, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br34

normal-dest13:                                    ; preds = %maybe-more-tests42
  %ptrtoint14 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %31, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286480.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag4

normal-dest21:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 500), align 16
  %ptrtoint22 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint23 = add i64 %ptrtoint22, 7
  %entry-point-addr24 = inttoptr i64 %entry-point-addr-uint23 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point25 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr24, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point25({}* %12, i64 5, {}* %23, {}* %24, {}* %18, {}* %25, {}* %26)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt97 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt97, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286480.2 = select i1 %cond, {}* %28, {}* %.elt
  br label %tag4

header-check-br34:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %29 = icmp ult i64 %.off123, 5
  br i1 %29, label %maybe-more-tests42, label %tag1

maybe-more-tests42:                               ; preds = %header-check-br34
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 503), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=LAENGE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 506), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=LAENGE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 501), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 507), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 1204 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 501), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LAENGE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !76 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LAENGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LAENGE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc228 unwind label %cleanup-lpad.loopexit.split-lp

.noexc228:                                        ; preds = %10
  unreachable

tag1:                                             ; preds = %tag16
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest59 unwind label %cleanup-lpad.loopexit.loopexit

tag5:                                             ; preds = %tag24, %header-check-br108, %normal-dest80
  %.pre = phi {}* [ %47, %tag24 ], [ %47, %header-check-br108 ], [ %58, %normal-dest80 ]
  br label %tag10

tag9:                                             ; preds = %tag41
  %13 = load {}*, {}** %31, align 8
  %.val237.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag39

tag10:                                            ; preds = %header-check-br115, %normal-dest80, %tag5
  %.val241 = phi {}* [ %.pre, %tag5 ], [ %58, %normal-dest80 ], [ %47, %header-check-br115 ]
  %G286509.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag5 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest80 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br115 ]
  %G286509.0 = load {}*, {}** %G286509.0.in, align 8
  %14 = icmp eq {}* %G286509.0, %.val241
  br i1 %14, label %tag40, label %tag34

tag15:                                            ; preds = %tag39
  %15 = icmp eq {}* %G2095854.0, %.val239
  %G286519.0 = select i1 %15, {}* %.val236, {}* %.val239
  %16 = icmp eq {}* %G286519.0, %.val239
  br i1 %16, label %tag47, label %tag23

tag16:                                            ; preds = %tag41
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %18 = icmp eq {}* %SEQUENCE.0.ph, %17
  %.val234 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286560.0 = select i1 %18, {}* %.val234, {}* %17
  %19 = icmp eq {}* %G286560.0, %17
  br i1 %19, label %tag1, label %tag39

tag21:                                            ; preds = %tag40
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest100 unwind label %cleanup-lpad.loopexit.split-lp

tag23:                                            ; preds = %tag15, %tag40, %tag34, %normal-dest107
  %return-value.sroa.16.0 = phi i64 [ %.elt222, %normal-dest107 ], [ 1, %tag34 ], [ 1, %tag40 ], [ 1, %tag15 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt220, %normal-dest107 ], [ %28, %tag34 ], [ null, %tag40 ], [ %LENGTH.0.ph, %tag15 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %22 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %23 = insertvalue { {}*, i64 } %22, i64 %return-value.sroa.16.0, 1
  ret { {}*, i64 } %23

tag24:                                            ; preds = %normal-dest55
  %test118 = icmp eq i64 %tag-only196, 1
  br i1 %test118, label %header-check-br115, label %tag5

tag31:                                            ; preds = %tag39
  %24 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only139199 = and i64 %24, 3
  %fixnump-test140 = icmp eq i64 %fixnum-tag-only139199, 0
  br i1 %fixnump-test140, label %tag46, label %tag42

tag34:                                            ; preds = %tag10
  %25 = add i64 %49, 7
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %26, align 8
  %"tag fixnum" = shl nuw i64 %27, 2
  %28 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag23

tag41.outer:                                      ; preds = %tag41.outer.backedge, %tag41.outer.preheader
  %SEQUENCE.0.ph = phi {}* [ %.in, %tag41.outer.preheader ], [ %G2095854.0, %tag41.outer.backedge ]
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag41.outer.preheader ], [ %LENGTH.0.ph.be, %tag41.outer.backedge ]
  %29 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only174197 = and i64 %29, 7
  %consp-test175 = icmp eq i64 %tag-only174197, 3
  %30 = add i64 %29, 5
  %31 = inttoptr i64 %30 to {}**
  br label %tag41

tag37:                                            ; preds = %tag46
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest158 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag39:                                            ; preds = %tag16, %normal-dest66, %tag9
  %.val239 = phi {}* [ %.val237.pre, %tag9 ], [ %56, %normal-dest66 ], [ %17, %tag16 ]
  %G2095854.0 = phi {}* [ %13, %tag9 ], [ %G2095854.1, %normal-dest66 ], [ %17, %tag16 ]
  %34 = ptrtoint {}* %G2095854.0 to i64
  %tag-only171198 = and i64 %34, 7
  %consp-test172 = icmp eq i64 %tag-only171198, 3
  %.val236 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286548.0 = select i1 %consp-test172, {}* %.val236, {}* %.val239
  %35 = icmp eq {}* %G286548.0, %.val239
  br i1 %35, label %tag15, label %tag31

tag40:                                            ; preds = %tag10
  %36 = icmp eq {}* %.in, %.val241
  %.val240 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286504.0 = select i1 %36, {}* %.val240, {}* %.val241
  %37 = icmp eq {}* %G286504.0, %.val241
  br i1 %37, label %tag21, label %tag23

tag41:                                            ; preds = %normal-dest178, %tag41.outer
  br i1 %consp-test175, label %tag9, label %tag16

tag42:                                            ; preds = %tag31
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest142 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag46:                                            ; preds = %tag31
  %40 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %24, i64 4)
  %result = extractvalue { i64, i1 } %40, 0
  %overflow = extractvalue { i64, i1 } %40, 1
  %41 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag37, label %tag41.outer.backedge

tag41.outer.backedge:                             ; preds = %tag46, %normal-dest165, %normal-dest149
  %LENGTH.0.ph.be = phi {}* [ %41, %tag46 ], [ %LENGTH.2, %normal-dest165 ], [ %LENGTH.1, %normal-dest149 ]
  br label %tag41.outer

tag47:                                            ; preds = %tag15
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest178 unwind label %cleanup-lpad.loopexit.loopexit

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest178, %tag47, %normal-dest59, %tag1
  %lpad.loopexit243 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest158, %tag37, %normal-dest142, %tag42
  %lpad.loopexit.split-lp244 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest52, %maybe-more-tests, %normal-dest73, %tag21, %normal-dest100, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ], [ %lpad.loopexit243, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp244, %cleanup-lpad.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest52 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest52:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %45 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %45, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest55 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest55:                                    ; preds = %normal-dest52
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt195 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt195, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond, {}* %47, {}* %.elt
  %48 = bitcast {}* %.in to i8*
  %49 = ptrtoint {}* %.in to i64
  %tag-only196 = and i64 %49, 7
  %consp-test = icmp eq i64 %tag-only196, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286567.0 = select i1 %consp-test, {}* %.val, {}* %47
  %50 = icmp eq {}* %G286567.0, %47
  br i1 %50, label %tag24, label %tag41.outer.preheader

tag41.outer.preheader:                            ; preds = %normal-dest55
  br label %tag41.outer

normal-dest59:                                    ; preds = %tag1
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint60 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint61 = add i64 %ptrtoint60, 7
  %entry-point-addr62 = inttoptr i64 %entry-point-addr-uint61 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point63 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr62, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point63({}* %12, i64 5, {}* %51, {}* %52, {}* %SEQUENCE.0.ph, {}* %53, {}* %54)
          to label %normal-dest66 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest66:                                    ; preds = %normal-dest59
  %.elt216 = extractvalue { {}*, i64 } %55, 0
  %.elt218 = extractvalue { {}*, i64 } %55, 1
  %cond192 = icmp eq i64 %.elt218, 0
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond192, {}* %56, {}* %.elt216
  br label %tag39

normal-dest73:                                    ; preds = %maybe-more-tests
  %ptrtoint74 = ptrtoint {}* %64 to i64
  %entry-point-addr-uint75 = add i64 %ptrtoint74, 7
  %entry-point-addr76 = inttoptr i64 %entry-point-addr-uint75 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point77 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr76, align 8
  %57 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point77({}* %64, i64 1, {}* nonnull %.in, {}* null, {}* null, {}* null)
          to label %normal-dest80 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest80:                                    ; preds = %normal-dest73
  %.elt224 = extractvalue { {}*, i64 } %57, 0
  %.elt226 = extractvalue { {}*, i64 } %57, 1
  %cond193 = icmp eq i64 %.elt226, 0
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286574.0 = select i1 %cond193, {}* %58, {}* %.elt224
  %59 = icmp eq {}* %G286574.0, inttoptr (i64 4 to {}*)
  br i1 %59, label %tag10, label %tag5

normal-dest100:                                   ; preds = %tag21
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 498), align 16
  %ptrtoint101 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint102 = add i64 %ptrtoint101, 7
  %entry-point-addr103 = inttoptr i64 %entry-point-addr-uint102 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point104 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr103, align 8
  %61 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point104({}* %21, i64 2, {}* %.in, {}* %60, {}* null, {}* null)
          to label %normal-dest107 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest107:                                   ; preds = %normal-dest100
  %.elt220 = extractvalue { {}*, i64 } %61, 0
  %.elt222 = extractvalue { {}*, i64 } %61, 1
  br label %tag23

header-check-br108:                               ; preds = %header-check-br115
  %.off242 = add i64 %65, -1153
  %62 = icmp ult i64 %.off242, 149
  br i1 %62, label %maybe-more-tests, label %tag5

maybe-more-tests:                                 ; preds = %header-check-br108
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %64 = invoke {}* @cc_safe_fdefinition({}* %63)
          to label %normal-dest73 unwind label %cleanup-lpad.loopexit.split-lp

header-check-br115:                               ; preds = %tag24
  %gep120 = getelementptr inbounds i8, i8* %48, i64 -9
  %irc-bit-cast121 = bitcast i8* %gep120 to i64*
  %65 = load i64, i64* %irc-bit-cast121, align 8
  %.off = add i64 %65, -1081
  %66 = icmp ult i64 %.off, 69
  br i1 %66, label %tag10, label %header-check-br108

normal-dest142:                                   ; preds = %tag42
  %ptrtoint143 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint144 = add i64 %ptrtoint143, 7
  %entry-point-addr145 = inttoptr i64 %entry-point-addr-uint144 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point146 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr145, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point146({}* %39, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest149 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest149:                                   ; preds = %normal-dest142
  %.elt201 = extractvalue { {}*, i64 } %67, 0
  %.elt203 = extractvalue { {}*, i64 } %67, 1
  %cond190 = icmp eq i64 %.elt203, 0
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond190, {}* %68, {}* %.elt201
  br label %tag41.outer.backedge

normal-dest158:                                   ; preds = %tag37
  %ptrtoint159 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint160 = add i64 %ptrtoint159, 7
  %entry-point-addr161 = inttoptr i64 %entry-point-addr-uint160 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point162 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr161, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point162({}* %33, i64 1, {}* %41, {}* null, {}* null, {}* null)
          to label %normal-dest165 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest165:                                   ; preds = %normal-dest158
  %.elt205 = extractvalue { {}*, i64 } %69, 0
  %.elt207 = extractvalue { {}*, i64 } %69, 1
  %cond191 = icmp eq i64 %.elt207, 0
  %70 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond191, {}* %70, {}* %.elt205
  br label %tag41.outer.backedge

normal-dest178:                                   ; preds = %tag47
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 499), align 8
  %ptrtoint179 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint180 = add i64 %ptrtoint179, 7
  %entry-point-addr181 = inttoptr i64 %entry-point-addr-uint180 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point182 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr181, align 8
  %72 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point182({}* %43, i64 2, {}* %G2095854.0, {}* %71, {}* null, {}* null)
          to label %tag41 unwind label %cleanup-lpad.loopexit.loopexit
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^307^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !77 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^307^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G286609.0 = phi {}* [ %18, %header-check-br ], [ %G286609.1, %normal-dest26 ], [ %G286609.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 519), align 8
  %ptrtoint43 = ptrtoint {}* %G286609.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G286609.0, i64 2, {}* %"closure->B=ERSETZE-ZEICHENKETTE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 519), align 8
  %"closure->B=ERSETZE-ZEICHENKETTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 11088, i64 307, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag1

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 518), align 16
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt97 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt97, 0
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286609.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt118 = extractvalue { {}*, i64 } %30, 0
  %.elt120 = extractvalue { {}*, i64 } %30, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286609.2 = select i1 %cond95, {}* %31, {}* %.elt118
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 521), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=ERSETZE-ZEICHENKETTE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 526), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=ERSETZE-ZEICHENKETTE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 519), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 527), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 1228 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 519), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !78 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 3
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 3
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 3, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc733 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

.noexc733:                                        ; preds = %13
  unreachable

tag4:                                             ; preds = %tag54, %normal-dest303, %tag95
  %.val766 = phi {}* [ %.val764.pre, %tag95 ], [ %127, %normal-dest303 ], [ %49, %tag54 ]
  %G2095854.0 = phi {}* [ %80, %tag95 ], [ %G2095854.1, %normal-dest303 ], [ %49, %tag54 ]
  %14 = ptrtoint {}* %G2095854.0 to i64
  %tag-only140638 = and i64 %14, 7
  %consp-test141 = icmp eq i64 %tag-only140638, 3
  %.val763 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286762.0 = select i1 %consp-test141, {}* %.val763, {}* %.val766
  %15 = icmp eq {}* %G286762.0, %.val766
  br i1 %15, label %tag71, label %tag55

tag7:                                             ; preds = %tag119
  %16 = invoke {}* @cc_safe_fdefinition({}* %92)
          to label %normal-dest145 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag9:                                             ; preds = %tag43, %normal-dest317, %tag14
  %.val758 = phi {}* [ %.val756.pre, %tag14 ], [ %133, %normal-dest317 ], [ %36, %tag43 ]
  %G2095854149.0 = phi {}* [ %22, %tag14 ], [ %G2095854149.1, %normal-dest317 ], [ %36, %tag43 ]
  %17 = ptrtoint {}* %G2095854149.0 to i64
  %tag-only153628 = and i64 %17, 7
  %consp-test154 = icmp eq i64 %tag-only153628, 3
  %.val755 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286830.0 = select i1 %consp-test154, {}* %.val755, {}* %.val758
  %18 = icmp eq {}* %G286830.0, %.val758
  br i1 %18, label %tag80, label %tag72

tag10:                                            ; preds = %header-check-br250
  %19 = invoke double @from_object_double({}* nonnull %.in674)
          to label %normal-dest156 unwind label %cleanup-lpad.loopexit

tag12:                                            ; preds = %tag62
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest161 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag14:                                            ; preds = %tag123
  %22 = load {}*, {}** %160, align 8
  %.val756.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag9

tag15:                                            ; preds = %tag133
  %.751 = select i1 %184, {}* %.val767, {}* %81
  br label %tag119

tag18:                                            ; preds = %tag50
  %23 = add i64 %27, 7
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24, align 8
  %"tag fixnum" = shl nuw i64 %25, 2
  %26 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag118

tag22:                                            ; preds = %tag131, %normal-dest551, %header-check-br475
  %.pre = phi {}* [ %.val760, %tag131 ], [ %176, %normal-dest551 ], [ %.val760, %header-check-br475 ]
  br label %tag50

tag30:                                            ; preds = %tag80, %normal-dest334, %tag51, %tag88
  %.val759 = phi {}* [ %G286793.0, %tag88 ], [ %.val774, %tag51 ], [ %.val759.pre, %normal-dest334 ], [ %.val755, %tag80 ]
  %.val760 = phi {}* [ %.val775, %tag88 ], [ %.val775812, %tag51 ], [ %139, %normal-dest334 ], [ %.val758, %tag80 ]
  %G286583.0 = phi {}* [ %75, %tag88 ], [ null, %tag51 ], [ %G286583.1, %normal-dest334 ], [ %LENGTH.0.ph, %tag80 ]
  %27 = ptrtoint {}* %farg1 to i64
  %tag-only188636 = and i64 %27, 7
  %consp-test189 = icmp eq i64 %tag-only188636, 3
  %G286781.0 = select i1 %consp-test189, {}* %.val759, {}* %.val760
  %28 = icmp eq {}* %G286781.0, %.val760
  br i1 %28, label %tag131, label %tag35.outer.preheader

tag35.outer.preheader:                            ; preds = %tag30
  br label %tag35.outer

tag34:                                            ; preds = %tag55
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest198 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag35:                                            ; preds = %normal-dest485, %tag35.outer
  br i1 %consp-test215, label %tag95, label %tag54

tag37:                                            ; preds = %tag119
  %31 = invoke {}* @cc_safe_fdefinition({}* %92)
          to label %normal-dest217 unwind label %cleanup-lpad.loopexit

tag40:                                            ; preds = %tag73
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest265 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag41:                                            ; preds = %tag124
  %34 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %114, i64 %185)
  %result279 = extractvalue { i64, i1 } %34, 0
  %overflow280 = extractvalue { i64, i1 } %34, 1
  %35 = inttoptr i64 %result279 to {}*
  br i1 %overflow280, label %tag98, label %tag63

tag43:                                            ; preds = %tag123
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %37 = icmp eq {}* %SEQUENCE.0.ph, %36
  %.val753 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286842.0 = select i1 %37, {}* %.val753, {}* %36
  %38 = icmp eq {}* %G286842.0, %36
  br i1 %38, label %tag48, label %tag9

tag47:                                            ; preds = %tag54
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest296 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag48:                                            ; preds = %tag43
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest310 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

tag49:                                            ; preds = %tag79
  %43 = invoke float @from_object_float({}* %.in674)
          to label %normal-dest323 unwind label %cleanup-lpad.loopexit

tag50:                                            ; preds = %header-check-br598, %normal-dest551, %tag22
  %.val772 = phi {}* [ %.pre, %tag22 ], [ %176, %normal-dest551 ], [ %.val760, %header-check-br598 ]
  %G286725.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag22 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest551 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br598 ]
  %G286725.0 = load {}*, {}** %G286725.0.in, align 8
  %44 = icmp eq {}* %G286725.0, %.val772
  br i1 %44, label %tag62, label %tag18

tag51:                                            ; preds = %normal-dest375, %tag87, %header-check-br497, %tag86
  %.val774 = phi {}* [ %.val775, %tag86 ], [ %.val, %tag87 ], [ %.val, %header-check-br497 ], [ %G286793.0.pre.pre, %normal-dest375 ]
  %.val775812 = phi {}* [ %.val775, %tag86 ], [ %.val752, %tag87 ], [ %.val752, %header-check-br497 ], [ %143, %normal-dest375 ]
  %45 = icmp eq {}* %.val775812, %farg2
  %G286789.0 = select i1 %45, {}* %.val774, {}* %.val775812
  %46 = icmp eq {}* %G286789.0, %.val775812
  br i1 %46, label %tag52, label %tag30

tag52:                                            ; preds = %tag51
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest327 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag54:                                            ; preds = %tag35
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %50 = icmp eq {}* %SEQUENCE179.0.ph, %49
  %.val761 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286774.0 = select i1 %50, {}* %.val761, {}* %49
  %51 = icmp eq {}* %G286774.0, %49
  br i1 %51, label %tag47, label %tag4

tag55:                                            ; preds = %tag4
  %52 = ptrtoint {}* %LENGTH185.0.ph to i64
  %fixnum-tag-only348639 = and i64 %52, 3
  %fixnump-test349 = icmp eq i64 %fixnum-tag-only348639, 0
  br i1 %fixnump-test349, label %tag73, label %tag34

tag60:                                            ; preds = %tag133
  %53 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 400), align 16
  %54 = invoke {}* @cc_safe_fdefinition({}* %53)
          to label %normal-dest354 unwind label %cleanup-lpad.loopexit

tag62:                                            ; preds = %tag50
  %55 = icmp eq {}* %.val772, %farg1
  %.val771 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286721.0 = select i1 %55, {}* %.val771, {}* %.val772
  %56 = icmp eq {}* %G286721.0, %.val772
  br i1 %56, label %tag12, label %tag118

tag63:                                            ; preds = %normal-dest583, %normal-dest522, %normal-dest324, %normal-dest158, %tag41
  %G286672.0 = phi {}* [ %35, %tag41 ], [ %100, %normal-dest158 ], [ %136, %normal-dest324 ], [ %G286672.1, %normal-dest522 ], [ %G286672.2, %normal-dest583 ]
  %ptrtoint381 = ptrtoint {}* %113 to i64
  %entry-point-addr-uint382 = add i64 %ptrtoint381, 7
  %entry-point-addr383 = inttoptr i64 %entry-point-addr-uint382 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point384 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr383, align 8
  %57 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point384({}* %113, i64 2, {}* %STRING.0, {}* %G286672.0, {}* null, {}* null)
          to label %normal-dest387 unwind label %cleanup-lpad.loopexit

tag69:                                            ; preds = %normal-dest245
  %trunc = trunc i64 %114 to i3
  switch i3 %trunc, label %tag121 [
    i3 -2, label %tag79
    i3 1, label %header-check-br431
  ]

tag70:                                            ; preds = %tag80
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest412 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

tag71:                                            ; preds = %tag4
  %60 = icmp eq {}* %G2095854.0, %.val766
  %G286733.0 = select i1 %60, {}* %.val763, {}* %.val766
  %61 = icmp eq {}* %G286733.0, %.val766
  br i1 %61, label %tag90, label %tag118

tag72:                                            ; preds = %tag9
  %62 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only426629 = and i64 %62, 3
  %fixnump-test427 = icmp eq i64 %fixnum-tag-only426629, 0
  br i1 %fixnump-test427, label %tag93, label %tag78

tag73:                                            ; preds = %tag55
  %63 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %52, i64 4)
  %result428 = extractvalue { i64, i1 } %63, 0
  %overflow429 = extractvalue { i64, i1 } %63, 1
  %64 = inttoptr i64 %result428 to {}*
  br i1 %overflow429, label %tag40, label %tag35.outer.backedge

tag35.outer.backedge:                             ; preds = %tag73, %normal-dest273, %normal-dest206
  %LENGTH185.0.ph.be = phi {}* [ %64, %tag73 ], [ %LENGTH185.2, %normal-dest273 ], [ %LENGTH185.1, %normal-dest206 ]
  br label %tag35.outer

tag78:                                            ; preds = %tag72
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest439 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

tag79:                                            ; preds = %tag69
  br i1 %186, label %tag49, label %tag121

tag80:                                            ; preds = %tag9
  %67 = icmp eq {}* %G2095854149.0, %.val758
  %G286801.0 = select i1 %67, {}* %.val755, {}* %.val758
  %68 = icmp eq {}* %G286801.0, %.val758
  br i1 %68, label %tag70, label %tag30

tag85:                                            ; preds = %tag93
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest454 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

tag86:                                            ; preds = %normal-dest375, %header-check-br467
  %.val775 = phi {}* [ %.val752, %header-check-br467 ], [ %143, %normal-dest375 ]
  %G286793.0 = phi {}* [ %.val, %header-check-br467 ], [ %G286793.0.pre.pre, %normal-dest375 ]
  %71 = icmp eq {}* %G286793.0, %.val775
  br i1 %71, label %tag51, label %tag88

tag87:                                            ; preds = %normal-dest
  %test470 = icmp eq i64 %tag-only626, 1
  br i1 %test470, label %header-check-br467, label %tag51

tag88:                                            ; preds = %tag86
  %72 = add i64 %95, 7
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73, align 8
  %"tag fixnum474" = shl nuw i64 %74, 2
  %75 = inttoptr i64 %"tag fixnum474" to {}*
  br label %tag30

tag90:                                            ; preds = %tag71
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest485 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag93:                                            ; preds = %tag72
  %78 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %62, i64 4)
  %result = extractvalue { i64, i1 } %78, 0
  %overflow = extractvalue { i64, i1 } %78, 1
  %79 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag85, label %tag123.outer.backedge

tag123.outer.backedge:                            ; preds = %tag93, %normal-dest461, %normal-dest446
  %LENGTH.0.ph.be = phi {}* [ %LENGTH.1, %normal-dest446 ], [ %LENGTH.2, %normal-dest461 ], [ %79, %tag93 ]
  br label %tag123.outer

tag95:                                            ; preds = %tag35
  %80 = load {}*, {}** %121, align 8
  %.val764.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag4

tag97:                                            ; preds = %normal-dest569, %normal-dest401
  %81 = phi {}* [ %181, %normal-dest569 ], [ %151, %normal-dest401 ]
  %BISHERIGES-ERGEBNIS.0 = phi {}* [ %182, %normal-dest569 ], [ %BISHERIGES-ERGEBNIS.1, %normal-dest401 ]
  %.in674 = phi {}* [ %.in673, %normal-dest569 ], [ %.in, %normal-dest401 ]
  %STRING.0 = phi {}* [ %farg2, %normal-dest569 ], [ %STRING.1, %normal-dest401 ]
  %82 = bitcast {}* %.in674 to i8*
  %83 = icmp eq {}* %.in674, %81
  %.val767 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G286588.0 = select i1 %83, {}* %.val767, {}* %81
  %84 = icmp eq {}* %G286588.0, %81
  br i1 %84, label %tag133, label %tag119

tag98:                                            ; preds = %tag41
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %86 = invoke {}* @cc_safe_fdefinition({}* %85)
          to label %normal-dest515 unwind label %cleanup-lpad.loopexit

tag118:                                           ; preds = %tag71, %normal-dest169, %tag62, %tag18
  %G286584.0 = phi {}* [ %26, %tag18 ], [ null, %tag62 ], [ %G286584.1, %normal-dest169 ], [ %LENGTH185.0.ph, %tag71 ]
  %87 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 513), align 8
  %88 = invoke {}* @cc_safe_fdefinition({}* %87)
          to label %normal-dest562 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag119:                                           ; preds = %tag15, %normal-dest361, %tag97
  %.val769 = phi {}* [ %.val767, %tag97 ], [ %.val769.pre, %normal-dest361 ], [ %.val767, %tag15 ]
  %89 = phi {}* [ %81, %tag97 ], [ %141, %normal-dest361 ], [ %81, %tag15 ]
  %object.0 = phi {}* [ %G286588.0, %tag97 ], [ %object.1, %normal-dest361 ], [ %.751, %tag15 ]
  %90 = icmp eq {}* %object.0, %89
  %G286632.0 = select i1 %90, {}* %.val769, {}* %89
  %91 = icmp eq {}* %G286632.0, %89
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  br i1 %91, label %tag7, label %tag37

tag121:                                           ; preds = %header-check-br431, %tag69, %tag124, %tag79, %header-check-br250
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %94 = invoke {}* @cc_safe_fdefinition({}* %93)
          to label %normal-dest576 unwind label %cleanup-lpad.loopexit

tag123:                                           ; preds = %normal-dest412, %tag123.outer
  br i1 %consp-test591, label %tag14, label %tag43

tag124:                                           ; preds = %normal-dest245
  br i1 %fixnump-test593, label %tag41, label %tag121

tag131:                                           ; preds = %tag30
  %test601 = icmp eq i64 %tag-only188636, 1
  br i1 %test601, label %header-check-br598, label %tag22

tag133:                                           ; preds = %tag97
  br i1 %fixnump-test608, label %tag15, label %tag60

cleanup-lpad.loopexit:                            ; preds = %tag10, %normal-dest156, %normal-dest158, %tag37, %normal-dest217, %normal-dest219, %normal-dest226, %normal-dest238, %tag49, %normal-dest323, %normal-dest324, %tag60, %normal-dest354, %tag63, %normal-dest387, %normal-dest394, %tag98, %normal-dest515, %tag121, %normal-dest576
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit: ; preds = %tag47, %normal-dest296, %tag90, %normal-dest485
  %lpad.loopexit781 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp: ; preds = %tag34, %normal-dest198, %tag40, %normal-dest265
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit: ; preds = %normal-dest412, %tag70, %normal-dest310, %tag48
  %lpad.loopexit786 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp: ; preds = %normal-dest454, %tag85, %normal-dest439, %tag78
  %lpad.loopexit.split-lp787 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %tag7, %normal-dest145, %tag12, %normal-dest161, %tag52, %normal-dest327, %maybe-more-tests505, %normal-dest368, %maybe-more-tests483, %normal-dest544, %tag118, %normal-dest562, %10, %13
  %lpad.loopexit.split-lp784 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit781, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp ], [ %lpad.loopexit.split-lp784, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ], [ %lpad.loopexit786, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit ], [ %lpad.loopexit.split-lp787, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %95 = ptrtoint {}* %farg2 to i64
  %tag-only626 = and i64 %95, 7
  %consp-test = icmp eq i64 %tag-only626, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val752 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286849.0 = select i1 %consp-test, {}* %.val, {}* %.val752
  %96 = icmp eq {}* %G286849.0, %.val752
  br i1 %96, label %tag87, label %tag123.outer.preheader

tag123.outer.preheader:                           ; preds = %normal-dest
  br label %tag123.outer

normal-dest145:                                   ; preds = %tag7
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %97 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %BISHERIGES-ERGEBNIS.0, {}* %STRING.0, {}* null, {}* null)
          to label %normal-dest148 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest148:                                   ; preds = %normal-dest145
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %97

normal-dest156:                                   ; preds = %tag10
  %98 = invoke double @from_object_double({}* nonnull %G286584.0)
          to label %normal-dest158 unwind label %cleanup-lpad.loopexit

normal-dest158:                                   ; preds = %normal-dest156
  %99 = fadd double %19, %98
  %100 = invoke {}* @to_object_double(double %99)
          to label %tag63 unwind label %cleanup-lpad.loopexit

normal-dest161:                                   ; preds = %tag12
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 511), align 8
  %ptrtoint163 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint164 = add i64 %ptrtoint163, 7
  %entry-point-addr165 = inttoptr i64 %entry-point-addr-uint164 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point166 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr165, align 8
  %102 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point166({}* %21, i64 2, {}* %farg1, {}* %101, {}* null, {}* null)
          to label %normal-dest169 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest169:                                   ; preds = %normal-dest161
  %.elt701 = extractvalue { {}*, i64 } %102, 0
  %.elt703 = extractvalue { {}*, i64 } %102, 1
  %cond621 = icmp eq i64 %.elt703, 0
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286584.1 = select i1 %cond621, {}* %103, {}* %.elt701
  br label %tag118

normal-dest198:                                   ; preds = %tag34
  %ptrtoint200 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint201 = add i64 %ptrtoint200, 7
  %entry-point-addr202 = inttoptr i64 %entry-point-addr-uint201 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point203 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr202, align 8
  %104 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point203({}* %30, i64 2, {}* %LENGTH185.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest206 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest206:                                   ; preds = %normal-dest198
  %.elt641 = extractvalue { {}*, i64 } %104, 0
  %.elt643 = extractvalue { {}*, i64 } %104, 1
  %cond610 = icmp eq i64 %.elt643, 0
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH185.1 = select i1 %cond610, {}* %105, {}* %.elt641
  br label %tag35.outer.backedge

normal-dest217:                                   ; preds = %tag37
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %107 = invoke {}* @cc_safe_fdefinition({}* %106)
          to label %normal-dest219 unwind label %cleanup-lpad.loopexit

normal-dest219:                                   ; preds = %normal-dest217
  %ptrtoint220 = ptrtoint {}* %107 to i64
  %entry-point-addr-uint221 = add i64 %ptrtoint220, 7
  %entry-point-addr222 = inttoptr i64 %entry-point-addr-uint221 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point223 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr222, align 8
  %108 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point223({}* %107, i64 3, {}* %STRING.0, {}* null, {}* %.in674, {}* null)
          to label %normal-dest226 unwind label %cleanup-lpad.loopexit

normal-dest226:                                   ; preds = %normal-dest219
  %.elt653 = extractvalue { {}*, i64 } %108, 0
  %.elt655 = extractvalue { {}*, i64 } %108, 1
  %cond613 = icmp eq i64 %.elt655, 0
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286702.0 = select i1 %cond613, {}* %109, {}* %.elt653
  %ptrtoint232 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint233 = add i64 %ptrtoint232, 7
  %entry-point-addr234 = inttoptr i64 %entry-point-addr-uint233 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point235 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr234, align 8
  %110 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point235({}* %31, i64 3, {}* %BISHERIGES-ERGEBNIS.0, {}* %G286702.0, {}* %farg0, {}* null)
          to label %normal-dest238 unwind label %cleanup-lpad.loopexit

normal-dest238:                                   ; preds = %normal-dest226
  %.elt657 = extractvalue { {}*, i64 } %110, 0
  %.elt659 = extractvalue { {}*, i64 } %110, 1
  %cond614 = icmp eq i64 %.elt659, 0
  %111 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %BISHERIGES-ERGEBNIS.1 = select i1 %cond614, {}* %111, {}* %.elt657
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %113 = invoke {}* @cc_safe_fdefinition({}* %112)
          to label %normal-dest245 unwind label %cleanup-lpad.loopexit

normal-dest245:                                   ; preds = %normal-dest238
  %114 = ptrtoint {}* %.in674 to i64
  %fixnum-tag-only248660 = and i64 %114, 3
  %fixnump-test249 = icmp eq i64 %fixnum-tag-only248660, 0
  br i1 %fixnump-test249, label %tag124, label %tag69

header-check-br250:                               ; preds = %header-check-br431
  %115 = load i64, i64* %irc-bit-cast256, align 8
  %116 = icmp eq i64 %115, 1325
  br i1 %116, label %tag10, label %tag121

normal-dest265:                                   ; preds = %tag40
  %ptrtoint267 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint268 = add i64 %ptrtoint267, 7
  %entry-point-addr269 = inttoptr i64 %entry-point-addr-uint268 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point270 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr269, align 8
  %117 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point270({}* %33, i64 1, {}* %64, {}* null, {}* null, {}* null)
          to label %normal-dest273 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest273:                                   ; preds = %normal-dest265
  %.elt645 = extractvalue { {}*, i64 } %117, 0
  %.elt647 = extractvalue { {}*, i64 } %117, 1
  %cond611 = icmp eq i64 %.elt647, 0
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH185.2 = select i1 %cond611, {}* %118, {}* %.elt645
  br label %tag35.outer.backedge

tag35.outer:                                      ; preds = %tag35.outer.backedge, %tag35.outer.preheader
  %SEQUENCE179.0.ph = phi {}* [ %farg1, %tag35.outer.preheader ], [ %G2095854.0, %tag35.outer.backedge ]
  %LENGTH185.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag35.outer.preheader ], [ %LENGTH185.0.ph.be, %tag35.outer.backedge ]
  %119 = ptrtoint {}* %SEQUENCE179.0.ph to i64
  %tag-only214637 = and i64 %119, 7
  %consp-test215 = icmp eq i64 %tag-only214637, 3
  %120 = add i64 %119, 5
  %121 = inttoptr i64 %120 to {}**
  br label %tag35

normal-dest296:                                   ; preds = %tag47
  %122 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint297 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint298 = add i64 %ptrtoint297, 7
  %entry-point-addr299 = inttoptr i64 %entry-point-addr-uint298 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point300 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr299, align 8
  %126 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point300({}* %40, i64 5, {}* %122, {}* %123, {}* %SEQUENCE179.0.ph, {}* %124, {}* %125)
          to label %normal-dest303 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

normal-dest303:                                   ; preds = %normal-dest296
  %.elt697 = extractvalue { {}*, i64 } %126, 0
  %.elt699 = extractvalue { {}*, i64 } %126, 1
  %cond620 = icmp eq i64 %.elt699, 0
  %127 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond620, {}* %127, {}* %.elt697
  br label %tag4

normal-dest310:                                   ; preds = %tag48
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint311 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint312 = add i64 %ptrtoint311, 7
  %entry-point-addr313 = inttoptr i64 %entry-point-addr-uint312 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point314 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr313, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point314({}* %42, i64 5, {}* %128, {}* %129, {}* %SEQUENCE.0.ph, {}* %130, {}* %131)
          to label %normal-dest317 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

normal-dest317:                                   ; preds = %normal-dest310
  %.elt713 = extractvalue { {}*, i64 } %132, 0
  %.elt715 = extractvalue { {}*, i64 } %132, 1
  %cond623 = icmp eq i64 %.elt715, 0
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854149.1 = select i1 %cond623, {}* %133, {}* %.elt713
  br label %tag9

normal-dest323:                                   ; preds = %tag49
  %134 = invoke float @from_object_float({}* %G286584.0)
          to label %normal-dest324 unwind label %cleanup-lpad.loopexit

normal-dest324:                                   ; preds = %normal-dest323
  %135 = fadd float %43, %134
  %136 = invoke {}* @to_object_float(float %135)
          to label %tag63 unwind label %cleanup-lpad.loopexit

normal-dest327:                                   ; preds = %tag52
  %137 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 509), align 8
  %ptrtoint328 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint329 = add i64 %ptrtoint328, 7
  %entry-point-addr330 = inttoptr i64 %entry-point-addr-uint329 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point331 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr330, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point331({}* %48, i64 2, {}* %farg2, {}* %137, {}* null, {}* null)
          to label %normal-dest334 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest334:                                   ; preds = %normal-dest327
  %.elt717 = extractvalue { {}*, i64 } %138, 0
  %.elt719 = extractvalue { {}*, i64 } %138, 1
  %cond624 = icmp eq i64 %.elt719, 0
  %139 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286583.1 = select i1 %cond624, {}* %139, {}* %.elt717
  %.val759.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag30

normal-dest354:                                   ; preds = %tag60
  %ptrtoint355 = ptrtoint {}* %54 to i64
  %entry-point-addr-uint356 = add i64 %ptrtoint355, 7
  %entry-point-addr357 = inttoptr i64 %entry-point-addr-uint356 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point358 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr357, align 8
  %140 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point358({}* %54, i64 2, {}* null, {}* %G286583.0, {}* null, {}* null)
          to label %normal-dest361 unwind label %cleanup-lpad.loopexit

normal-dest361:                                   ; preds = %normal-dest354
  %.elt689 = extractvalue { {}*, i64 } %140, 0
  %.elt691 = extractvalue { {}*, i64 } %140, 1
  %cond619 = icmp eq i64 %.elt691, 0
  %141 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.1 = select i1 %cond619, {}* %141, {}* %.elt689
  %.val769.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag119

normal-dest368:                                   ; preds = %maybe-more-tests505
  %ptrtoint369 = ptrtoint {}* %172 to i64
  %entry-point-addr-uint370 = add i64 %ptrtoint369, 7
  %entry-point-addr371 = inttoptr i64 %entry-point-addr-uint370 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point372 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr371, align 8
  %142 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point372({}* %172, i64 1, {}* nonnull %farg2, {}* null, {}* null, {}* null)
          to label %normal-dest375 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest375:                                   ; preds = %normal-dest368
  %.elt721 = extractvalue { {}*, i64 } %142, 0
  %.elt723 = extractvalue { {}*, i64 } %142, 1
  %cond625 = icmp eq i64 %.elt723, 0
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286858.0 = select i1 %cond625, {}* %143, {}* %.elt721
  %144 = icmp eq {}* %G286858.0, inttoptr (i64 4 to {}*)
  %G286793.0.pre.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br i1 %144, label %tag86, label %tag51

normal-dest387:                                   ; preds = %tag63
  %.elt666 = extractvalue { {}*, i64 } %57, 0
  %.elt668 = extractvalue { {}*, i64 } %57, 1
  %cond616 = icmp eq i64 %.elt668, 0
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %STRING.1 = select i1 %cond616, {}* %145, {}* %.elt666
  %146 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 513), align 8
  %147 = invoke {}* @cc_safe_fdefinition({}* %146)
          to label %normal-dest394 unwind label %cleanup-lpad.loopexit

normal-dest394:                                   ; preds = %normal-dest387
  %148 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %149 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %ptrtoint395 = ptrtoint {}* %147 to i64
  %entry-point-addr-uint396 = add i64 %ptrtoint395, 7
  %entry-point-addr397 = inttoptr i64 %entry-point-addr-uint396 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point398 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr397, align 8
  %150 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point398({}* %147, i64 4, {}* %farg1, {}* %STRING.1, {}* %148, {}* %149)
          to label %normal-dest401 unwind label %cleanup-lpad.loopexit

normal-dest401:                                   ; preds = %normal-dest394
  %.elt670 = extractvalue { {}*, i64 } %150, 0
  %.elt672 = extractvalue { {}*, i64 } %150, 1
  %cond617 = icmp eq i64 %.elt672, 0
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond617, {}* %151, {}* %.elt670
  br label %tag97

normal-dest412:                                   ; preds = %tag70
  %152 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 510), align 16
  %ptrtoint413 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint414 = add i64 %ptrtoint413, 7
  %entry-point-addr415 = inttoptr i64 %entry-point-addr-uint414 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point416 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr415, align 8
  %153 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point416({}* %59, i64 2, {}* %G2095854149.0, {}* %152, {}* null, {}* null)
          to label %tag123 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

header-check-br431:                               ; preds = %tag69
  %gep436 = getelementptr inbounds i8, i8* %82, i64 -9
  %irc-bit-cast437 = bitcast i8* %gep436 to i64*
  %154 = load i64, i64* %irc-bit-cast437, align 8
  %155 = icmp ne i64 %154, 1325
  %brmerge = or i1 %test253, %155
  br i1 %brmerge, label %tag121, label %header-check-br250

normal-dest439:                                   ; preds = %tag78
  %ptrtoint440 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint441 = add i64 %ptrtoint440, 7
  %entry-point-addr442 = inttoptr i64 %entry-point-addr-uint441 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point443 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr442, align 8
  %156 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point443({}* %66, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest446 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest446:                                   ; preds = %normal-dest439
  %.elt = extractvalue { {}*, i64 } %156, 0
  %.elt631 = extractvalue { {}*, i64 } %156, 1
  %cond = icmp eq i64 %.elt631, 0
  %157 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond, {}* %157, {}* %.elt
  br label %tag123.outer.backedge

tag123.outer:                                     ; preds = %tag123.outer.backedge, %tag123.outer.preheader
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag123.outer.preheader ], [ %LENGTH.0.ph.be, %tag123.outer.backedge ]
  %SEQUENCE.0.ph = phi {}* [ %farg2, %tag123.outer.preheader ], [ %G2095854149.0, %tag123.outer.backedge ]
  %158 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only590627 = and i64 %158, 7
  %consp-test591 = icmp eq i64 %tag-only590627, 3
  %159 = add i64 %158, 5
  %160 = inttoptr i64 %159 to {}**
  br label %tag123

normal-dest454:                                   ; preds = %tag85
  %ptrtoint455 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint456 = add i64 %ptrtoint455, 7
  %entry-point-addr457 = inttoptr i64 %entry-point-addr-uint456 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point458 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr457, align 8
  %161 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point458({}* %70, i64 1, {}* %79, {}* null, {}* null, {}* null)
          to label %normal-dest461 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest461:                                   ; preds = %normal-dest454
  %.elt633 = extractvalue { {}*, i64 } %161, 0
  %.elt635 = extractvalue { {}*, i64 } %161, 1
  %cond609 = icmp eq i64 %.elt635, 0
  %162 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond609, {}* %162, {}* %.elt633
  br label %tag123.outer.backedge

header-check-br467:                               ; preds = %tag87
  %irc-bit-cast471 = bitcast {}* %farg2 to i8*
  %gep472 = getelementptr inbounds i8, i8* %irc-bit-cast471, i64 -9
  %irc-bit-cast473 = bitcast i8* %gep472 to i64*
  %163 = load i64, i64* %irc-bit-cast473, align 8
  %.off776 = add i64 %163, -1081
  %164 = icmp ult i64 %.off776, 69
  br i1 %164, label %tag86, label %header-check-br497

header-check-br475:                               ; preds = %header-check-br598
  %.off773 = add i64 %189, -1153
  %165 = icmp ult i64 %.off773, 149
  br i1 %165, label %maybe-more-tests483, label %tag22

maybe-more-tests483:                              ; preds = %header-check-br475
  %166 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %167 = invoke {}* @cc_safe_fdefinition({}* %166)
          to label %normal-dest544 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest485:                                   ; preds = %tag90
  %168 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 512), align 16
  %ptrtoint486 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint487 = add i64 %ptrtoint486, 7
  %entry-point-addr488 = inttoptr i64 %entry-point-addr-uint487 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point489 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr488, align 8
  %169 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point489({}* %77, i64 2, {}* %G2095854.0, {}* %168, {}* null, {}* null)
          to label %tag35 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

header-check-br497:                               ; preds = %header-check-br467
  %.off777 = add i64 %163, -1153
  %170 = icmp ult i64 %.off777, 149
  br i1 %170, label %maybe-more-tests505, label %tag51

maybe-more-tests505:                              ; preds = %header-check-br497
  %171 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %172 = invoke {}* @cc_safe_fdefinition({}* %171)
          to label %normal-dest368 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest515:                                   ; preds = %tag98
  %ptrtoint516 = ptrtoint {}* %86 to i64
  %entry-point-addr-uint517 = add i64 %ptrtoint516, 7
  %entry-point-addr518 = inttoptr i64 %entry-point-addr-uint517 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point519 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr518, align 8
  %173 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point519({}* %86, i64 1, {}* %35, {}* null, {}* null, {}* null)
          to label %normal-dest522 unwind label %cleanup-lpad.loopexit

normal-dest522:                                   ; preds = %normal-dest515
  %.elt677 = extractvalue { {}*, i64 } %173, 0
  %.elt679 = extractvalue { {}*, i64 } %173, 1
  %cond618 = icmp eq i64 %.elt679, 0
  %174 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286672.1 = select i1 %cond618, {}* %174, {}* %.elt677
  br label %tag63

normal-dest544:                                   ; preds = %maybe-more-tests483
  %ptrtoint545 = ptrtoint {}* %167 to i64
  %entry-point-addr-uint546 = add i64 %ptrtoint545, 7
  %entry-point-addr547 = inttoptr i64 %entry-point-addr-uint546 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point548 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr547, align 8
  %175 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point548({}* %167, i64 1, {}* nonnull %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest551 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest551:                                   ; preds = %normal-dest544
  %.elt705 = extractvalue { {}*, i64 } %175, 0
  %.elt707 = extractvalue { {}*, i64 } %175, 1
  %cond622 = icmp eq i64 %.elt707, 0
  %176 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286854.0 = select i1 %cond622, {}* %176, {}* %.elt705
  %177 = icmp eq {}* %G286854.0, inttoptr (i64 4 to {}*)
  br i1 %177, label %tag50, label %tag22

normal-dest562:                                   ; preds = %tag118
  %178 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %179 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %ptrtoint563 = ptrtoint {}* %88 to i64
  %entry-point-addr-uint564 = add i64 %ptrtoint563, 7
  %entry-point-addr565 = inttoptr i64 %entry-point-addr-uint564 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point566 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr565, align 8
  %180 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point566({}* %88, i64 4, {}* %farg1, {}* %farg2, {}* %178, {}* %179)
          to label %normal-dest569 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest569:                                   ; preds = %normal-dest562
  %.elt649 = extractvalue { {}*, i64 } %180, 0
  %.elt651 = extractvalue { {}*, i64 } %180, 1
  %cond612 = icmp eq i64 %.elt651, 0
  %181 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in673 = select i1 %cond612, {}* %181, {}* %.elt649
  %182 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 517), align 8
  %183 = ptrtoint {}* %G286583.0 to i64
  %fixnum-tag-only607687 = and i64 %183, 3
  %fixnump-test608 = icmp eq i64 %fixnum-tag-only607687, 0
  %184 = icmp slt {}* %G286583.0, null
  %185 = ptrtoint {}* %G286584.0 to i64
  %fixnum-tag-only592675 = and i64 %185, 3
  %fixnump-test593 = icmp eq i64 %fixnum-tag-only592675, 0
  %single-float-tag-only452 = and i64 %185, 7
  %186 = icmp eq i64 %single-float-tag-only452, 6
  %test253 = icmp ne i64 %single-float-tag-only452, 1
  %irc-bit-cast254 = bitcast {}* %G286584.0 to i8*
  %gep255 = getelementptr inbounds i8, i8* %irc-bit-cast254, i64 -9
  %irc-bit-cast256 = bitcast i8* %gep255 to i64*
  br label %tag97

normal-dest576:                                   ; preds = %tag121
  %ptrtoint577 = ptrtoint {}* %94 to i64
  %entry-point-addr-uint578 = add i64 %ptrtoint577, 7
  %entry-point-addr579 = inttoptr i64 %entry-point-addr-uint578 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point580 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr579, align 8
  %187 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point580({}* %94, i64 2, {}* %.in674, {}* %G286584.0, {}* null, {}* null)
          to label %normal-dest583 unwind label %cleanup-lpad.loopexit

normal-dest583:                                   ; preds = %normal-dest576
  %.elt662 = extractvalue { {}*, i64 } %187, 0
  %.elt664 = extractvalue { {}*, i64 } %187, 1
  %cond615 = icmp eq i64 %.elt664, 0
  %188 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286672.2 = select i1 %cond615, {}* %188, {}* %.elt662
  br label %tag63

header-check-br598:                               ; preds = %tag131
  %irc-bit-cast602 = bitcast {}* %farg1 to i8*
  %gep603 = getelementptr inbounds i8, i8* %irc-bit-cast602, i64 -9
  %irc-bit-cast604 = bitcast i8* %gep603 to i64*
  %189 = load i64, i64* %irc-bit-cast604, align 8
  %.off = add i64 %189, -1081
  %190 = icmp ult i64 %.off, 69
  br i1 %190, label %tag50, label %header-check-br475
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^324^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !79 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^324^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G286890.0 = phi {}* [ %18, %header-check-br ], [ %G286890.1, %normal-dest26 ], [ %G286890.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 534), align 16
  %ptrtoint43 = ptrtoint {}* %G286890.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G286890.0, i64 2, {}* %"closure->B=ALPHABETISCH<-P", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 534), align 16
  %"closure->B=ALPHABETISCH<-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 12175, i64 324, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt118 = extractvalue { {}*, i64 } %24, 0
  %.elt120 = extractvalue { {}*, i64 } %24, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286890.1 = select i1 %cond95, {}* %25, {}* %.elt118
  br label %tag4

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 533), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt97 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt97, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286890.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 536), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=ALPHABETISCH<-P", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 541), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=ALPHABETISCH<-P", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 534), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 542), align 16
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 1360 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 534), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !80 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc86 unwind label %cleanup-lpad

.noexc86:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest49, %normal-dest37, %normal-dest30, %normal-dest28, %normal-dest21, %normal-dest12, %normal-dest9, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 529), align 8
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 531), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %21, 0
  %.elt66 = extractvalue { {}*, i64 } %21, 1
  %cond = icmp eq i64 %.elt66, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286918.0 = select i1 %cond, {}* %22, {}* %.elt
  %ptrtoint15 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %18, i64 1, {}* %G286918.0, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest12
  %.elt68 = extractvalue { {}*, i64 } %23, 0
  %.elt70 = extractvalue { {}*, i64 } %23, 1
  %cond62 = icmp eq i64 %.elt70, 0
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286909.0 = select i1 %cond62, {}* %24, {}* %.elt68
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 531), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %normal-dest28
  %ptrtoint31 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %28, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt72 = extractvalue { {}*, i64 } %29, 0
  %.elt74 = extractvalue { {}*, i64 } %29, 1
  %cond63 = icmp eq i64 %.elt74, 0
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286912.0 = select i1 %cond63, {}* %30, {}* %.elt72
  %ptrtoint43 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %26, i64 1, {}* %G286912.0, {}* null, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

normal-dest49:                                    ; preds = %normal-dest37
  %.elt76 = extractvalue { {}*, i64 } %31, 0
  %.elt78 = extractvalue { {}*, i64 } %31, 1
  %cond64 = icmp eq i64 %.elt78, 0
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286910.0 = select i1 %cond64, {}* %32, {}* %.elt76
  %ptrtoint55 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %16, i64 2, {}* %G286909.0, {}* %G286910.0, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest49
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %33
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^348^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !81 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^348^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G286946.0 = phi {}* [ %18, %header-check-br ], [ %G286946.1, %normal-dest17 ], [ %G286946.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 547), align 8
  %ptrtoint43 = ptrtoint {}* %G286946.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G286946.0, i64 2, {}* %"closure->B=ALPHABETISCH>-P", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests28, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 547), align 8
  %"closure->B=ALPHABETISCH>-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 12847, i64 348, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 546), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286946.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %27 = icmp ult i64 %.off123, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %maybe-more-tests28
  %ptrtoint31 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt118 = extractvalue { {}*, i64 } %30, 0
  %.elt120 = extractvalue { {}*, i64 } %30, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286946.2 = select i1 %cond95, {}* %31, {}* %.elt118
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 549), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=ALPHABETISCH>-P", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 550), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=ALPHABETISCH>-P", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 547), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 551), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 1392 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 547), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !82 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc67 unwind label %cleanup-lpad

.noexc67:                                         ; preds = %13
  unreachable

cleanup-lpad:                                     ; preds = %13, %10, %normal-dest35, %normal-dest28, %normal-dest21, %normal-dest12, %normal-dest9, %normal-dest7, %normal-dest5, %normal-dest
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %14

normal-dest:                                      ; preds = %11
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 544), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 531), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 283), align 8
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %20 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %20, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest12 unwind label %cleanup-lpad

normal-dest12:                                    ; preds = %normal-dest9
  %.elt = extractvalue { {}*, i64 } %21, 0
  %.elt51 = extractvalue { {}*, i64 } %21, 1
  %cond = icmp eq i64 %.elt51, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286971.0 = select i1 %cond, {}* %22, {}* %.elt
  %ptrtoint15 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint16 = add i64 %ptrtoint15, 7
  %entry-point-addr17 = inttoptr i64 %entry-point-addr-uint16 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point18 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr17, align 8
  %23 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point18({}* %18, i64 1, {}* %G286971.0, {}* null, {}* null, {}* null)
          to label %normal-dest21 unwind label %cleanup-lpad

normal-dest21:                                    ; preds = %normal-dest12
  %.elt53 = extractvalue { {}*, i64 } %23, 0
  %.elt55 = extractvalue { {}*, i64 } %23, 1
  %cond48 = icmp eq i64 %.elt55, 0
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286965.0 = select i1 %cond48, {}* %24, {}* %.elt53
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 531), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest21
  %ptrtoint29 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %26, i64 1, {}* %farg1, {}* null, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %.elt57 = extractvalue { {}*, i64 } %27, 0
  %.elt59 = extractvalue { {}*, i64 } %27, 1
  %cond49 = icmp eq i64 %.elt59, 0
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286966.0 = select i1 %cond49, {}* %28, {}* %.elt57
  %ptrtoint41 = ptrtoint {}* %16 to i64
  %entry-point-addr-uint42 = add i64 %ptrtoint41, 7
  %entry-point-addr43 = inttoptr i64 %entry-point-addr-uint42 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point44 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr43, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point44({}* %16, i64 2, {}* %G286965.0, {}* %G286966.0, {}* null, {}* null)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %normal-dest35
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %29
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^356^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !83 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^356^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br86
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest80, %normal-dest17, %header-check-br
  %G286999.0 = phi {}* [ %18, %header-check-br ], [ %G286999.1, %normal-dest17 ], [ %G286999.2, %normal-dest80 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 306), align 16
  %ptrtoint20 = ptrtoint {}* %G286999.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G286999.0, i64 2, {}* %"closure->B=LEERSTRING-P", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest73, %maybe-more-tests94, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 306), align 16
  %"closure->B=LEERSTRING-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LEERSTRING-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LEERSTRING-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13221, i64 356, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br86

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 555), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286999.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 556), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->B=LEERSTRING-P", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 557), align 8
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->B=LEERSTRING-P", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 306), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 558), align 16
  %ptrtoint59 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %36, i64 3, {}* %37, {}* %38, {}* %39, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %41, {}* inttoptr (i64 1424 to {}*))
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 306), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

normal-dest73:                                    ; preds = %maybe-more-tests94
  %ptrtoint74 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint75 = add i64 %ptrtoint74, 7
  %entry-point-addr76 = inttoptr i64 %entry-point-addr-uint75 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point77 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr76, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point77({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest80 unwind label %cleanup-lpad

normal-dest80:                                    ; preds = %normal-dest73
  %.elt118 = extractvalue { {}*, i64 } %45, 0
  %.elt120 = extractvalue { {}*, i64 } %45, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G286999.2 = select i1 %cond95, {}* %46, {}* %.elt118
  br label %tag1

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest73 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LEERSTRING-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !84 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LEERSTRING-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LEERSTRING-P^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc24 unwind label %cleanup-lpad

.noexc24:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest8, %normal-dest7, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 553), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %14, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.15", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.15^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13221, i64 356, i64 0, i64 0)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest7
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %"closure->LAMBDA", {}* %farg0, {}* null, {}* null)
          to label %normal-dest11 unwind label %cleanup-lpad

normal-dest11:                                    ; preds = %normal-dest8
  %.elt = extractvalue { {}*, i64 } %15, 0
  %.elt19 = extractvalue { {}*, i64 } %15, 1
  %cond = icmp eq i64 %.elt19, 0
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond, {}* %16, {}* %.elt
  %17 = icmp eq {}* %object.0, %16
  %18 = load i64, i64* bitcast ({}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69) to i64*), align 8
  %.cast = ptrtoint {}* %16 to i64
  %.sink = select i1 %17, i64 %18, i64 %.cast
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %19 = inttoptr i64 %.sink to {}*
  %20 = insertvalue { {}*, i64 } undef, {}* %19, 0
  %21 = insertvalue { {}*, i64 } %20, i64 1, 1
  ret { {}*, i64 } %21
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.15"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !85 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.15^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.15^DESC" to %0*)) #7
          to label %.noexc23 unwind label %cleanup-lpad

.noexc23:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest7, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %farg0, {}* inttoptr (i64 258 to {}*), {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %14, 0
  %.elt18 = extractvalue { {}*, i64 } %14, 1
  %cond = icmp eq i64 %.elt18, 0
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond, {}* %15, {}* %.elt
  %16 = icmp eq {}* %object.0, %15
  %17 = load i64, i64* bitcast ({}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69) to i64*), align 8
  %.cast = ptrtoint {}* %15 to i64
  %.sink = select i1 %16, i64 %17, i64 %.cast
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %18 = inttoptr i64 %.sink to {}*
  %19 = insertvalue { {}*, i64 } undef, {}* %18, 0
  %20 = insertvalue { {}*, i64 } %19, i64 1, 1
  ret { {}*, i64 } %20
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^365^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !86 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^365^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G287060.0 = phi {}* [ %18, %header-check-br ], [ %G287060.1, %normal-dest76 ], [ %G287060.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 453), align 8
  %ptrtoint22 = ptrtoint {}* %G287060.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G287060.0, i64 2, {}* %"closure->B-N-POSITION", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest69, %maybe-more-tests21, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 453), align 8
  %"closure->B-N-POSITION" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B-N-POSITION^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B-N-POSITION^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 13539, i64 365, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 570), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->B-N-POSITION", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 578), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->B-N-POSITION", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 453), align 8
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 579), align 8
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 3, {}* %34, {}* %35, {}* %36, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 1540 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 453), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt118 = extractvalue { {}*, i64 } %42, 0
  %.elt120 = extractvalue { {}*, i64 } %42, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287060.1 = select i1 %cond95, {}* %43, {}* %.elt118
  br label %tag1

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 569), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287060.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B-N-POSITION^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !87 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 3
  br i1 %enough-args, label %error, label %continue

tag8:                                             ; preds = %tag33
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest101 unwind label %cleanup-lpad.loopexit.split-lp

tag10:                                            ; preds = %tag42
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 567), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest123 unwind label %cleanup-lpad.loopexit.split-lp

tag11:                                            ; preds = %normal-dest131, %tag49
  %13 = phi {}* [ %27, %tag49 ], [ %56, %normal-dest131 ]
  %G287112.0 = phi {}* [ %29, %tag49 ], [ %G287112.1, %normal-dest131 ]
  %14 = icmp eq {}* %G287112.0, %13
  br i1 %14, label %tag26, label %tag53

tag20:                                            ; preds = %normal-dest108, %normal-dest90, %tag33
  %G287083.0 = phi {}* [ %26, %tag33 ], [ %G287083.1, %normal-dest90 ], [ %G287083.2, %normal-dest108 ]
  %ptrtoint170 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint171 = add i64 %ptrtoint170, 7
  %entry-point-addr172 = inttoptr i64 %entry-point-addr-uint171 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point173 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr172, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point173({}* %21, i64 5, {}* %vaarg, {}* %vaarg67, {}* %N.0, {}* %65, {}* %G287083.0)
          to label %normal-dest176 unwind label %cleanup-lpad.loopexit.split-lp

tag22:                                            ; preds = %normal-dest203
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest86 unwind label %cleanup-lpad.loopexit.split-lp

tag23:                                            ; preds = %tag55
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest181 unwind label %cleanup-lpad.loopexit.split-lp

tag26:                                            ; preds = %tag28, %tag11
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 453), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest203 unwind label %cleanup-lpad.loopexit.split-lp

tag28:                                            ; preds = %tag42
  %22 = icmp eq {}* %N.0, null
  br i1 %22, label %tag49, label %tag26

tag29:                                            ; preds = %tag50
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest216 unwind label %cleanup-lpad.loopexit.split-lp

tag33:                                            ; preds = %normal-dest203
  %25 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %66, i64 4)
  %result = extractvalue { i64, i1 } %25, 0
  %overflow = extractvalue { i64, i1 } %25, 1
  %26 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag8, label %tag20

tag42:                                            ; preds = %normal-dest223, %normal-dest189, %tag55
  %27 = phi {}* [ %60, %tag55 ], [ %64, %normal-dest189 ], [ %68, %normal-dest223 ]
  %N.0 = phi {}* [ %34, %tag55 ], [ %N.1, %normal-dest189 ], [ %N.2, %normal-dest223 ]
  %28 = ptrtoint {}* %N.0 to i64
  %fixnum-tag-only253312 = and i64 %28, 3
  %fixnump-test254 = icmp eq i64 %fixnum-tag-only253312, 0
  br i1 %fixnump-test254, label %tag28, label %tag10

tag49:                                            ; preds = %tag28
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag11

tag50:                                            ; preds = %normal-dest157
  %30 = ptrtoint {}* %vaarg71 to i64
  %fixnum-tag-only251307 = and i64 %30, 3
  %fixnump-test252 = icmp eq i64 %fixnum-tag-only251307, 0
  br i1 %fixnump-test252, label %tag55, label %tag29

tag53:                                            ; preds = %tag11, %normal-dest157, %normal-dest176
  %return-value.sroa.16.0 = phi i64 [ %.elt325, %normal-dest176 ], [ 1, %normal-dest157 ], [ 1, %tag11 ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt323, %normal-dest176 ], [ %60, %normal-dest157 ], [ %.in, %tag11 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %32 = insertvalue { {}*, i64 } %31, i64 %return-value.sroa.16.0, 1
  ret { {}*, i64 } %32

tag55:                                            ; preds = %tag50
  %33 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %30, i64 4)
  %result284 = extractvalue { i64, i1 } %33, 0
  %overflow285 = extractvalue { i64, i1 } %33, 1
  %34 = inttoptr i64 %result284 to {}*
  br i1 %overflow285, label %tag23, label %tag42

cleanup-lpad.loopexit:                            ; preds = %loop-kw-args
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %error, %loop-cont, %tag22, %normal-dest86, %tag8, %normal-dest101, %tag10, %normal-dest123, %kw-exit-block, %normal-dest150, %tag20, %tag23, %normal-dest181, %tag26, %tag29, %normal-dest216
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @":::global-str-B-N-POSITION^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 3)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs65 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-166 = add i64 %rem-nargs65, -1
  store i64 %rem-nargs-166, i64* %"remaining-nargs*", align 8
  %vaarg67 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs69 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-170 = add i64 %rem-nargs69, -1
  store i64 %rem-nargs-170, i64* %"remaining-nargs*", align 8
  %vaarg71 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %38 = icmp eq i64 %nargs, 3
  br i1 %38, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G287039.0 = phi {}* [ %G287039.2, %advance-arg-idx-block ], [ %36, %loop-kw-args.preheader ]
  %start.1 = phi {}* [ %start.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %44, %advance-arg-idx-block ], [ 3, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs74 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-175 = add i64 %rem-nargs74, -1
  store i64 %rem-nargs-175, i64* %"remaining-nargs*", align 8
  %vaarg76 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs77 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-178 = add i64 %rem-nargs77, -1
  store i64 %rem-nargs-178, i64* %"remaining-nargs*", align 8
  %vaarg79 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg76, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B-N-POSITION^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest80 unwind label %cleanup-lpad.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %39 = phi {}* [ %36, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G287039.1 = phi {}* [ %36, %continue ], [ %G287039.2, %loop-cont.kw-exit-block_crit_edge ]
  %start.2 = phi {}* [ undef, %continue ], [ %start.3, %loop-cont.kw-exit-block_crit_edge ]
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 563), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest150 unwind label %cleanup-lpad.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg76, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B-N-POSITION^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %kw-exit-block

normal-dest80:                                    ; preds = %loop-kw-args
  %42 = icmp eq {}* %37, %vaarg76
  br i1 %42, label %aok-block, label %"kw-:START-test"

aok-block:                                        ; preds = %normal-dest80
  %43 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg79)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G287039.2 = phi {}* [ %G287039.0, %aok-block ], [ %G287039.0, %next-kw-block ], [ %G287039.3, %matched-kw-block ]
  %start.3 = phi {}* [ %start.1, %aok-block ], [ %start.1, %next-kw-block ], [ %start.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %43, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %50, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %44 = add i64 %phi-reg-arg-idx, 2
  %45 = icmp slt i64 %44, %nargs
  br i1 %45, label %loop-kw-args, label %loop-cont

"kw-:START-test":                                 ; preds = %normal-dest80
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 565), align 8
  %47 = call i64 @cc_matchKeywordOnce({}* %46, {}* %vaarg76, {}* %G287039.0)
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:START-test"
  %49 = icmp eq i64 %47, 2
  %G287039.3 = select i1 %49, {}* %G287039.0, {}* %35
  %start.4 = select i1 %49, {}* %start.1, {}* %vaarg79
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:START-test"
  %50 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest86:                                    ; preds = %tag22
  %ptrtoint87 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint = add i64 %ptrtoint87, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %17, i64 2, {}* %.in, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest90 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest90:                                    ; preds = %normal-dest86
  %.elt319 = extractvalue { {}*, i64 } %51, 0
  %.elt321 = extractvalue { {}*, i64 } %51, 1
  %cond299 = icmp eq i64 %.elt321, 0
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287083.1 = select i1 %cond299, {}* %52, {}* %.elt319
  br label %tag20

normal-dest101:                                   ; preds = %tag8
  %ptrtoint102 = ptrtoint {}* %10 to i64
  %entry-point-addr-uint103 = add i64 %ptrtoint102, 7
  %entry-point-addr104 = inttoptr i64 %entry-point-addr-uint103 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point105 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr104, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point105({}* %10, i64 1, {}* %26, {}* null, {}* null, {}* null)
          to label %normal-dest108 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest108:                                   ; preds = %normal-dest101
  %.elt327 = extractvalue { {}*, i64 } %53, 0
  %.elt329 = extractvalue { {}*, i64 } %53, 1
  %cond300 = icmp eq i64 %.elt329, 0
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287083.2 = select i1 %cond300, {}* %54, {}* %.elt327
  br label %tag20

normal-dest123:                                   ; preds = %tag10
  %ptrtoint125 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint126 = add i64 %ptrtoint125, 7
  %entry-point-addr127 = inttoptr i64 %entry-point-addr-uint126 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point128 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr127, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point128({}* %12, i64 2, {}* null, {}* %N.0, {}* null, {}* null)
          to label %normal-dest131 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest131:                                   ; preds = %normal-dest123
  %.elt314 = extractvalue { {}*, i64 } %55, 0
  %.elt316 = extractvalue { {}*, i64 } %55, 1
  %cond298 = icmp eq i64 %.elt316, 0
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287112.1 = select i1 %cond298, {}* %56, {}* %.elt314
  br label %tag11

normal-dest150:                                   ; preds = %kw-exit-block
  %57 = icmp eq {}* %G287039.1, %39
  %start.0 = select i1 %57, {}* null, {}* %start.2
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 565), align 8
  %ptrtoint151 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint152 = add i64 %ptrtoint151, 7
  %entry-point-addr153 = inttoptr i64 %entry-point-addr-uint152 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point154 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr153, align 8
  %59 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point154({}* %41, i64 4, {}* %vaarg, {}* %vaarg67, {}* %58, {}* %start.0)
          to label %normal-dest157 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest157:                                   ; preds = %normal-dest150
  %.elt = extractvalue { {}*, i64 } %59, 0
  %.elt303 = extractvalue { {}*, i64 } %59, 1
  %cond = icmp eq i64 %.elt303, 0
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond, {}* %60, {}* %.elt
  %61 = icmp eq {}* %.in, %60
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287162.0 = select i1 %61, {}* %.val, {}* %60
  %62 = icmp eq {}* %G287162.0, %60
  br i1 %62, label %tag50, label %tag53

normal-dest176:                                   ; preds = %tag20
  %.elt323 = extractvalue { {}*, i64 } %15, 0
  %.elt325 = extractvalue { {}*, i64 } %15, 1
  br label %tag53

normal-dest181:                                   ; preds = %tag23
  %ptrtoint183 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint184 = add i64 %ptrtoint183, 7
  %entry-point-addr185 = inttoptr i64 %entry-point-addr-uint184 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point186 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr185, align 8
  %63 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point186({}* %19, i64 1, {}* %34, {}* null, {}* null, {}* null)
          to label %normal-dest189 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest189:                                   ; preds = %normal-dest181
  %.elt331 = extractvalue { {}*, i64 } %63, 0
  %.elt333 = extractvalue { {}*, i64 } %63, 1
  %cond301 = icmp eq i64 %.elt333, 0
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %N.1 = select i1 %cond301, {}* %64, {}* %.elt331
  br label %tag42

normal-dest203:                                   ; preds = %tag26
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 565), align 8
  %66 = ptrtoint {}* %.in to i64
  %fixnum-tag-only206317 = and i64 %66, 3
  %fixnump-test207 = icmp eq i64 %fixnum-tag-only206317, 0
  br i1 %fixnump-test207, label %tag33, label %tag22

normal-dest216:                                   ; preds = %tag29
  %ptrtoint217 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint218 = add i64 %ptrtoint217, 7
  %entry-point-addr219 = inttoptr i64 %entry-point-addr-uint218 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point220 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr219, align 8
  %67 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point220({}* %24, i64 2, {}* %vaarg71, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest223 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest223:                                   ; preds = %normal-dest216
  %.elt309 = extractvalue { {}*, i64 } %67, 0
  %.elt311 = extractvalue { {}*, i64 } %67, 1
  %cond297 = icmp eq i64 %.elt311, 0
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %N.2 = select i1 %cond297, {}* %68, {}* %.elt309
  br label %tag42
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^395^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !88 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^395^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G287308.0 = phi {}* [ %18, %header-check-br ], [ %G287308.1, %normal-dest76 ], [ %G287308.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 604), align 16
  %ptrtoint22 = ptrtoint {}* %G287308.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G287308.0, i64 2, {}* %"closure->B=MIN", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests21, %normal-dest69, %tag2, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 604), align 16
  %"closure->B=MIN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=MIN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=MIN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14285, i64 395, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 606), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->B=MIN", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 616), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->B=MIN", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 604), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 617), align 8
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 3, {}* %34, {}* %35, {}* %36, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 1580 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 604), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %tag2
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 603), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %42, {}* %43, {}* %18, {}* %44, {}* %45)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt97 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt97, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287308.1 = select i1 %cond, {}* %47, {}* %.elt
  br label %tag1

normal-dest82:                                    ; preds = %maybe-more-tests21
  %ptrtoint83 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287308.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=MIN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !89 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %header-check-br468, %normal-dest324, %normal-dest224
  %G287352.0 = phi {}* [ %G287352.1, %normal-dest224 ], [ %G287352.2, %normal-dest324 ], [ %FUNCTION287186.0, %header-check-br468 ]
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 597), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest101 unwind label %cleanup-lpad.loopexit

tag7:                                             ; preds = %normal-dest313
  %test = icmp eq i64 %tag-only314494, 1
  br i1 %test, label %header-check-br, label %tag66

tag8:                                             ; preds = %tag82
  %11 = add i64 %136, 7
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 8
  %"tag fixnum" = shl nuw i64 %13, 2
  %14 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag52

tag9:                                             ; preds = %tag31
  %15 = load {}*, {}** %22, align 8
  %.val619.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag15

tag10:                                            ; preds = %tag30
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest159 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag11:                                            ; preds = %tag82
  %18 = icmp eq {}* %vaarg, %.val626
  %.val625 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287388.0 = select i1 %18, {}* %.val625, {}* %.val626
  %19 = icmp eq {}* %G287388.0, %.val626
  br i1 %19, label %tag71, label %tag52

tag31.outer:                                      ; preds = %tag31.outer.backedge, %tag31.outer.preheader
  %SEQUENCE.0.ph = phi {}* [ %vaarg, %tag31.outer.preheader ], [ %G2095854.0, %tag31.outer.backedge ]
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag31.outer.preheader ], [ %LENGTH.0.ph.be, %tag31.outer.backedge ]
  %20 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only256495 = and i64 %20, 7
  %consp-test257 = icmp eq i64 %tag-only256495, 3
  %21 = add i64 %20, 5
  %22 = inttoptr i64 %21 to {}**
  br label %tag31

tag15:                                            ; preds = %tag79, %normal-dest273, %tag9
  %.val621 = phi {}* [ %.val619.pre, %tag9 ], [ %127, %normal-dest273 ], [ %66, %tag79 ]
  %G2095854.0 = phi {}* [ %15, %tag9 ], [ %G2095854.1, %normal-dest273 ], [ %66, %tag79 ]
  %23 = ptrtoint {}* %G2095854.0 to i64
  %tag-only163496 = and i64 %23, 7
  %consp-test = icmp eq i64 %tag-only163496, 3
  %.val618 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287429.0 = select i1 %consp-test, {}* %.val618, {}* %.val621
  %24 = icmp eq {}* %G287429.0, %.val621
  br i1 %24, label %tag57, label %tag44

tag18:                                            ; preds = %tag57
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest181 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag21:                                            ; preds = %normal-dest287
  %27 = icmp eq {}* %OUTPUT287187.0, %129
  br i1 %27, label %tag56, label %tag30

tag26:                                            ; preds = %tag44
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest231 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag28:                                            ; preds = %normal-dest393
  %ptrtoint246 = ptrtoint {}* %testfunktion.0 to i64
  %tag-only247 = and i64 %ptrtoint246, 7
  %test248 = icmp eq i64 %tag-only247, 1
  br i1 %test248, label %tag51, label %tag61

tag30:                                            ; preds = %tag21
  %30 = ptrtoint {}* %OUTPUT287187.0 to i64
  %tag-only254552 = and i64 %30, 7
  %consp-test255 = icmp eq i64 %tag-only254552, 3
  br i1 %consp-test255, label %tag56, label %tag10

tag31:                                            ; preds = %normal-dest181, %tag31.outer
  br i1 %consp-test257, label %tag9, label %tag79

tag39:                                            ; preds = %tag44
  %31 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %38, i64 4)
  %result = extractvalue { i64, i1 } %31, 0
  %overflow = extractvalue { i64, i1 } %31, 1
  %32 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag73, label %tag31.outer.backedge

tag31.outer.backedge:                             ; preds = %tag39, %normal-dest453, %normal-dest239
  %LENGTH.0.ph.be = phi {}* [ %32, %tag39 ], [ %LENGTH.2, %normal-dest453 ], [ %LENGTH.1, %normal-dest239 ]
  br label %tag31.outer

tag40:                                            ; preds = %tag79
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest266 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag43:                                            ; preds = %normal-dest145, %normal-dest376
  %.sink614 = phi { {}*, i64 } [ %154, %normal-dest376 ], [ %99, %normal-dest145 ]
  %OUTPUT-ITER287188.0 = phi {}* [ %OUTPUT-ITER287188.2, %normal-dest376 ], [ %OUTPUT-ITER287188.1, %normal-dest145 ]
  %.elt517 = extractvalue { {}*, i64 } %.sink614, 0
  %.elt519 = extractvalue { {}*, i64 } %.sink614, 1
  %cond481 = icmp eq i64 %.elt519, 0
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287193.0 = select i1 %cond481, {}* %35, {}* %.elt517
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 601), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest280 unwind label %cleanup-lpad.loopexit

tag44:                                            ; preds = %tag15
  %38 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only294497 = and i64 %38, 3
  %fixnump-test295 = icmp eq i64 %fixnum-tag-only294497, 0
  br i1 %fixnump-test295, label %tag39, label %tag26

tag45:                                            ; preds = %tag78
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %40 = invoke {}* @cc_safe_fdefinition({}* %39)
          to label %normal-dest297 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag46:                                            ; preds = %normal-dest412, %normal-dest304, %tag51
  %FUNCTION287186.0 = phi {}* [ %testfunktion.0, %tag51 ], [ %FUNCTION287186.1, %normal-dest304 ], [ %FUNCTION287186.2, %normal-dest412 ]
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 586), align 16
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest311 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag48:                                            ; preds = %normal-dest467, %header-check-br164
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest317 unwind label %cleanup-lpad.loopexit

tag51:                                            ; preds = %tag28
  %irc-bit-cast249 = bitcast {}* %testfunktion.0 to i8*
  %gep250 = getelementptr inbounds i8, i8* %irc-bit-cast249, i64 -9
  %irc-bit-cast251 = bitcast i8* %gep250 to i64*
  %45 = load i64, i64* %irc-bit-cast251, align 8
  %.off630 = add i64 %45, -913
  %46 = icmp ult i64 %.off630, 85
  %.val653 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287464.0.pre = select i1 %46, {}* %.val653, {}* %156
  %47 = icmp eq {}* %G287464.0.pre, %156
  br i1 %47, label %tag78, label %tag46

tag52:                                            ; preds = %tag57, %normal-dest439, %tag11, %tag8
  %G287382.0 = phi {}* [ %14, %tag8 ], [ null, %tag11 ], [ %G287382.1, %normal-dest439 ], [ %LENGTH.0.ph, %tag57 ]
  %ptrtoint330 = ptrtoint {}* %135 to i64
  %entry-point-addr-uint331 = add i64 %ptrtoint330, 7
  %entry-point-addr332 = inttoptr i64 %entry-point-addr-uint331 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point333 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr332, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point333({}* %135, i64 1, {}* %G287382.0, {}* null, {}* null, {}* null)
          to label %normal-dest336 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag56:                                            ; preds = %normal-dest393, %tag30, %tag21
  %G287328.0 = phi {}* [ %OUTPUT287187.0, %tag21 ], [ %OUTPUT287187.0, %tag30 ], [ %vaarg, %normal-dest393 ]
  %ptrtoint394 = ptrtoint {}* %63 to i64
  %entry-point-addr-uint395 = add i64 %ptrtoint394, 7
  %entry-point-addr396 = inttoptr i64 %entry-point-addr-uint395 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point397 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr396, align 8
  %49 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point397({}* %63, i64 2, {}* %"closure->LAMBDA", {}* %G287328.0, {}* null, {}* null)
          to label %normal-dest400 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag57:                                            ; preds = %tag15
  %50 = icmp eq {}* %G2095854.0, %.val621
  %G287400.0 = select i1 %50, {}* %.val618, {}* %.val621
  %51 = icmp eq {}* %G287400.0, %.val621
  br i1 %51, label %tag18, label %tag52

tag60:                                            ; preds = %normal-dest100
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 582), align 16
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %tag75 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag61:                                            ; preds = %tag28, %tag78
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest405 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag66:                                            ; preds = %tag7, %normal-dest210, %header-check-br193
  %.pre = phi {}* [ %.val615, %tag7 ], [ %116, %normal-dest210 ], [ %.val615, %header-check-br193 ]
  br label %tag82

tag71:                                            ; preds = %tag11
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest432 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag73:                                            ; preds = %tag39
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest446 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag75:                                            ; preds = %tag60, %normal-dest100
  %vergleichsfunktion.0 = phi {}* [ %vergleichsfunktion.2, %normal-dest100 ], [ %53, %tag60 ]
  call void @cc_writeCell({}* %76, {}* %vergleichsfunktion.0)
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %61 = icmp eq {}* %G287286.1, %60
  %testfunktion.0 = select i1 %61, {}* %60, {}* %testfunktion.2
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 319), align 8
  %63 = invoke {}* @cc_safe_fdefinition({}* %62)
          to label %normal-dest392 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag78:                                            ; preds = %tag51
  %.off629 = add i64 %45, -1001
  %64 = icmp ult i64 %.off629, 5
  %G287461.0.pre = select i1 %64, {}* %.val653, {}* %156
  %65 = icmp eq {}* %G287461.0.pre, %156
  br i1 %65, label %tag61, label %tag45

tag79:                                            ; preds = %tag31
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %67 = icmp eq {}* %SEQUENCE.0.ph, %66
  %.val616 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287441.0 = select i1 %67, {}* %.val616, {}* %66
  %68 = icmp eq {}* %G287441.0, %66
  br i1 %68, label %tag40, label %tag15

tag80:                                            ; preds = %normal-dest287
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 594), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest467 unwind label %cleanup-lpad.loopexit

tag82:                                            ; preds = %header-check-br, %normal-dest210, %tag66
  %.val626 = phi {}* [ %.pre, %tag66 ], [ %116, %normal-dest210 ], [ %.val615, %header-check-br ]
  %G287392.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag66 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest210 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br ]
  %G287392.0 = load {}*, {}** %G287392.0.in, align 8
  %71 = icmp eq {}* %G287392.0, %.val626
  br i1 %71, label %tag11, label %tag8

cleanup-lpad.loopexit:                            ; preds = %tag, %normal-dest101, %normal-dest104, %normal-dest113, %normal-dest125, %normal-dest131, %normal-dest138, %normal-dest145, %maybe-more-tests172, %normal-dest217, %tag43, %normal-dest280, %tag48, %normal-dest317, %tag80
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit: ; preds = %tag18, %normal-dest181, %tag40, %normal-dest266
  %lpad.loopexit634 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp: ; preds = %tag26, %normal-dest231, %tag73, %normal-dest446
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %loop-kw-args
  %lpad.loopexit636 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %error, %loop-cont, %kw-exit-block, %tag10, %maybe-more-tests201, %normal-dest203, %tag45, %normal-dest297, %tag46, %normal-dest311, %tag52, %normal-dest336, %normal-dest348, %normal-dest355, %normal-dest362, %normal-dest369, %tag75, %normal-dest392, %tag56, %tag60, %tag61, %normal-dest405, %normal-dest159, %tag71, %normal-dest432
  %lpad.loopexit.split-lp637 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit634, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp ], [ %lpad.loopexit636, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp637, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @":::global-str-B=MIN^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %72 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %75 = icmp eq i64 %nargs, 1
  br i1 %75, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G287286.0 = phi {}* [ %G287286.2, %advance-arg-idx-block ], [ %73, %loop-kw-args.preheader ]
  %testfunktion.1 = phi {}* [ %testfunktion.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %G287287.0 = phi {}* [ %G287287.2, %advance-arg-idx-block ], [ %73, %loop-kw-args.preheader ]
  %vergleichsfunktion.1 = phi {}* [ %vergleichsfunktion.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %79, %advance-arg-idx-block ], [ 1, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs89 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-190 = add i64 %rem-nargs89, -1
  store i64 %rem-nargs-190, i64* %"remaining-nargs*", align 8
  %vaarg91 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs92 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-193 = add i64 %rem-nargs92, -1
  store i64 %rem-nargs-193, i64* %"remaining-nargs*", align 8
  %vaarg94 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg91, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=MIN^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest95 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %continue, %loop-cont
  %G287286.1 = phi {}* [ %73, %continue ], [ %G287286.2, %loop-cont ]
  %testfunktion.2 = phi {}* [ undef, %continue ], [ %testfunktion.3, %loop-cont ]
  %G287287.1 = phi {}* [ %73, %continue ], [ %G287287.2, %loop-cont ]
  %vergleichsfunktion.2 = phi {}* [ undef, %continue ], [ %vergleichsfunktion.3, %loop-cont ]
  %76 = invoke {}* @cc_makeCell()
          to label %normal-dest100 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg91, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=MIN^COMMON-LISP-USER^FN^^^DESC")
          to label %kw-exit-block unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest95:                                    ; preds = %loop-kw-args
  %77 = icmp eq {}* %74, %vaarg91
  br i1 %77, label %aok-block, label %"kw-:VERGLEICHSFUNKTION-test"

aok-block:                                        ; preds = %normal-dest95
  %78 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg94)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %"kw-:TESTFUNKTION-test", %"kw-:VERGLEICHSFUNKTION-test", %not-seen-before-kw-block, %not-seen-before-kw-block97, %next-kw-block98, %aok-block
  %G287286.2 = phi {}* [ %G287286.0, %aok-block ], [ %G287286.0, %next-kw-block98 ], [ %72, %not-seen-before-kw-block97 ], [ %G287286.0, %not-seen-before-kw-block ], [ %G287286.0, %"kw-:VERGLEICHSFUNKTION-test" ], [ %G287286.0, %"kw-:TESTFUNKTION-test" ]
  %testfunktion.3 = phi {}* [ %testfunktion.1, %aok-block ], [ %testfunktion.1, %next-kw-block98 ], [ %vaarg94, %not-seen-before-kw-block97 ], [ %testfunktion.1, %not-seen-before-kw-block ], [ %testfunktion.1, %"kw-:VERGLEICHSFUNKTION-test" ], [ %testfunktion.1, %"kw-:TESTFUNKTION-test" ]
  %G287287.2 = phi {}* [ %G287287.0, %aok-block ], [ %G287287.0, %next-kw-block98 ], [ %G287287.0, %not-seen-before-kw-block97 ], [ %72, %not-seen-before-kw-block ], [ %G287287.0, %"kw-:VERGLEICHSFUNKTION-test" ], [ %G287287.0, %"kw-:TESTFUNKTION-test" ]
  %vergleichsfunktion.3 = phi {}* [ %vergleichsfunktion.1, %aok-block ], [ %vergleichsfunktion.1, %next-kw-block98 ], [ %vergleichsfunktion.1, %not-seen-before-kw-block97 ], [ %vaarg94, %not-seen-before-kw-block ], [ %vergleichsfunktion.1, %"kw-:VERGLEICHSFUNKTION-test" ], [ %vergleichsfunktion.1, %"kw-:TESTFUNKTION-test" ]
  %phi-this-was-aok = phi i64 [ %78, %aok-block ], [ %phi-saw-aok, %next-kw-block98 ], [ %phi-saw-aok, %not-seen-before-kw-block97 ], [ %phi-saw-aok, %not-seen-before-kw-block ], [ %phi-saw-aok, %"kw-:VERGLEICHSFUNKTION-test" ], [ %phi-saw-aok, %"kw-:TESTFUNKTION-test" ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %85, %next-kw-block98 ], [ %phi-bad-kw-idx, %not-seen-before-kw-block97 ], [ %phi-bad-kw-idx, %not-seen-before-kw-block ], [ %phi-bad-kw-idx, %"kw-:VERGLEICHSFUNKTION-test" ], [ %phi-bad-kw-idx, %"kw-:TESTFUNKTION-test" ]
  %79 = add i64 %phi-reg-arg-idx, 2
  %80 = icmp slt i64 %79, %nargs
  br i1 %80, label %loop-kw-args, label %loop-cont

"kw-:VERGLEICHSFUNKTION-test":                    ; preds = %normal-dest95
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 626), align 16
  %82 = call i64 @cc_matchKeywordOnce({}* %81, {}* %vaarg91, {}* %G287287.0)
  switch i64 %82, label %not-seen-before-kw-block [
    i64 0, label %"kw-:TESTFUNKTION-test"
    i64 2, label %advance-arg-idx-block
  ]

not-seen-before-kw-block:                         ; preds = %"kw-:VERGLEICHSFUNKTION-test"
  br label %advance-arg-idx-block

"kw-:TESTFUNKTION-test":                          ; preds = %"kw-:VERGLEICHSFUNKTION-test"
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 627), align 8
  %84 = call i64 @cc_matchKeywordOnce({}* %83, {}* %vaarg91, {}* %G287286.0)
  switch i64 %84, label %not-seen-before-kw-block97 [
    i64 0, label %next-kw-block98
    i64 2, label %advance-arg-idx-block
  ]

not-seen-before-kw-block97:                       ; preds = %"kw-:TESTFUNKTION-test"
  br label %advance-arg-idx-block

next-kw-block98:                                  ; preds = %"kw-:TESTFUNKTION-test"
  %85 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest100:                                   ; preds = %kw-exit-block
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %87 = icmp eq {}* %G287287.1, %86
  br i1 %87, label %tag60, label %tag75

normal-dest101:                                   ; preds = %tag
  %ptrtoint = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %88 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 2, {}* %vaarg, {}* %G287193.0, {}* null, {}* null)
          to label %normal-dest104 unwind label %cleanup-lpad.loopexit

normal-dest104:                                   ; preds = %normal-dest101
  %.elt529 = extractvalue { {}*, i64 } %88, 0
  %.elt531 = extractvalue { {}*, i64 } %88, 1
  %cond484 = icmp eq i64 %.elt531, 0
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287353.0 = select i1 %cond484, {}* %89, {}* %.elt529
  %ptrtoint107 = ptrtoint {}* %G287352.0 to i64
  %entry-point-addr-uint108 = add i64 %ptrtoint107, 7
  %entry-point-addr109 = inttoptr i64 %entry-point-addr-uint108 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point110 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr109, align 8
  %90 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point110({}* %G287352.0, i64 1, {}* %G287353.0, {}* null, {}* null, {}* null)
          to label %normal-dest113 unwind label %cleanup-lpad.loopexit

normal-dest113:                                   ; preds = %normal-dest104
  %.elt533 = extractvalue { {}*, i64 } %90, 0
  %.elt535 = extractvalue { {}*, i64 } %90, 1
  %cond485 = icmp eq i64 %.elt535, 0
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287351.0 = select i1 %cond485, {}* %91, {}* %.elt533
  %ptrtoint119 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint120 = add i64 %ptrtoint119, 7
  %entry-point-addr121 = inttoptr i64 %entry-point-addr-uint120 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point122 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr121, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point122({}* %70, i64 3, {}* %OUTPUT287187.0, {}* %OUTPUT-ITER287188.0, {}* %G287351.0, {}* null)
          to label %normal-dest125 unwind label %cleanup-lpad.loopexit

normal-dest125:                                   ; preds = %normal-dest113
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 599), align 8
  %94 = invoke {}* @cc_safe_fdefinition({}* %93)
          to label %normal-dest131 unwind label %cleanup-lpad.loopexit

normal-dest131:                                   ; preds = %normal-dest125
  %ptrtoint132 = ptrtoint {}* %94 to i64
  %entry-point-addr-uint133 = add i64 %ptrtoint132, 7
  %entry-point-addr134 = inttoptr i64 %entry-point-addr-uint133 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point135 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr134, align 8
  %95 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point135({}* %94, i64 2, {}* %OUTPUT287187.0, {}* %OUTPUT-ITER287188.0, {}* null, {}* null)
          to label %normal-dest138 unwind label %cleanup-lpad.loopexit

normal-dest138:                                   ; preds = %normal-dest131
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 599), align 8
  %98 = invoke {}* @cc_safe_fdefinition({}* %97)
          to label %normal-dest145 unwind label %cleanup-lpad.loopexit

normal-dest145:                                   ; preds = %normal-dest138
  %.elt543 = extractvalue { {}*, i64 } %95, 1
  %cond486 = icmp eq i64 %.elt543, 0
  %.elt541 = extractvalue { {}*, i64 } %95, 0
  %OUTPUT-ITER287188.1 = select i1 %cond486, {}* %96, {}* %.elt541
  %ptrtoint146 = ptrtoint {}* %98 to i64
  %entry-point-addr-uint147 = add i64 %ptrtoint146, 7
  %entry-point-addr148 = inttoptr i64 %entry-point-addr-uint147 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point149 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr148, align 8
  %99 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point149({}* %98, i64 2, {}* %vaarg, {}* %G287193.0, {}* null, {}* null)
          to label %tag43 unwind label %cleanup-lpad.loopexit

normal-dest159:                                   ; preds = %tag10
  %100 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 618), align 16
  %ptrtoint421 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint422 = add i64 %ptrtoint421, 7
  %entry-point-addr423 = inttoptr i64 %entry-point-addr-uint422 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point424 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr423, align 8
  %104 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point424({}* %17, i64 5, {}* %100, {}* %101, {}* %OUTPUT287187.0, {}* %102, {}* %103)
          to label %normal-dest427 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

header-check-br:                                  ; preds = %tag7
  %irc-bit-cast161 = bitcast {}* %vaarg to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast161, i64 -9
  %irc-bit-cast162 = bitcast i8* %gep to i64*
  %105 = load i64, i64* %irc-bit-cast162, align 8
  %.off627 = add i64 %105, -1081
  %106 = icmp ult i64 %.off627, 69
  br i1 %106, label %tag82, label %header-check-br193

header-check-br164:                               ; preds = %header-check-br468
  %.off624 = add i64 %166, -1001
  %107 = icmp ult i64 %.off624, 5
  br i1 %107, label %maybe-more-tests172, label %tag48

maybe-more-tests172:                              ; preds = %header-check-br164
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %109 = invoke {}* @cc_safe_fdefinition({}* %108)
          to label %normal-dest217 unwind label %cleanup-lpad.loopexit

normal-dest181:                                   ; preds = %tag18
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 591), align 8
  %ptrtoint182 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint183 = add i64 %ptrtoint182, 7
  %entry-point-addr184 = inttoptr i64 %entry-point-addr-uint183 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point185 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr184, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point185({}* %26, i64 2, {}* %G2095854.0, {}* %110, {}* null, {}* null)
          to label %tag31 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

header-check-br193:                               ; preds = %header-check-br
  %.off628 = add i64 %105, -1153
  %112 = icmp ult i64 %.off628, 149
  br i1 %112, label %maybe-more-tests201, label %tag66

maybe-more-tests201:                              ; preds = %header-check-br193
  %113 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %114 = invoke {}* @cc_safe_fdefinition({}* %113)
          to label %normal-dest203 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest203:                                   ; preds = %maybe-more-tests201
  %ptrtoint204 = ptrtoint {}* %114 to i64
  %entry-point-addr-uint205 = add i64 %ptrtoint204, 7
  %entry-point-addr206 = inttoptr i64 %entry-point-addr-uint205 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point207 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr206, align 8
  %115 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point207({}* %114, i64 1, {}* nonnull %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest210 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest210:                                   ; preds = %normal-dest203
  %.elt577 = extractvalue { {}*, i64 } %115, 0
  %.elt579 = extractvalue { {}*, i64 } %115, 1
  %cond491 = icmp eq i64 %.elt579, 0
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287502.0 = select i1 %cond491, {}* %116, {}* %.elt577
  %117 = icmp eq {}* %G287502.0, inttoptr (i64 4 to {}*)
  br i1 %117, label %tag82, label %tag66

normal-dest217:                                   ; preds = %maybe-more-tests172
  %ptrtoint218 = ptrtoint {}* %109 to i64
  %entry-point-addr-uint219 = add i64 %ptrtoint218, 7
  %entry-point-addr220 = inttoptr i64 %entry-point-addr-uint219 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point221 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr220, align 8
  %118 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point221({}* %109, i64 1, {}* nonnull %FUNCTION287186.0, {}* null, {}* null, {}* null)
          to label %normal-dest224 unwind label %cleanup-lpad.loopexit

normal-dest224:                                   ; preds = %normal-dest217
  %.elt549 = extractvalue { {}*, i64 } %118, 0
  %.elt551 = extractvalue { {}*, i64 } %118, 1
  %cond488 = icmp eq i64 %.elt551, 0
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287352.1 = select i1 %cond488, {}* %119, {}* %.elt549
  br label %tag

normal-dest231:                                   ; preds = %tag26
  %ptrtoint233 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint234 = add i64 %ptrtoint233, 7
  %entry-point-addr235 = inttoptr i64 %entry-point-addr-uint234 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point236 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr235, align 8
  %120 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point236({}* %29, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest239 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest239:                                   ; preds = %normal-dest231
  %.elt = extractvalue { {}*, i64 } %120, 0
  %.elt499 = extractvalue { {}*, i64 } %120, 1
  %cond = icmp eq i64 %.elt499, 0
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond, {}* %121, {}* %.elt
  br label %tag31.outer.backedge

normal-dest266:                                   ; preds = %tag40
  %122 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint267 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint268 = add i64 %ptrtoint267, 7
  %entry-point-addr269 = inttoptr i64 %entry-point-addr-uint268 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point270 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr269, align 8
  %126 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point270({}* %34, i64 5, {}* %122, {}* %123, {}* %SEQUENCE.0.ph, {}* %124, {}* %125)
          to label %normal-dest273 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

normal-dest273:                                   ; preds = %normal-dest266
  %.elt569 = extractvalue { {}*, i64 } %126, 0
  %.elt571 = extractvalue { {}*, i64 } %126, 1
  %cond489 = icmp eq i64 %.elt571, 0
  %127 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond489, {}* %127, {}* %.elt569
  br label %tag15

normal-dest280:                                   ; preds = %tag43
  %ptrtoint281 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint282 = add i64 %ptrtoint281, 7
  %entry-point-addr283 = inttoptr i64 %entry-point-addr-uint282 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point284 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr283, align 8
  %128 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point284({}* %37, i64 2, {}* %vaarg, {}* %G287193.0, {}* null, {}* null)
          to label %normal-dest287 unwind label %cleanup-lpad.loopexit

normal-dest287:                                   ; preds = %normal-dest280
  %.elt521 = extractvalue { {}*, i64 } %128, 0
  %.elt523 = extractvalue { {}*, i64 } %128, 1
  %cond482 = icmp eq i64 %.elt523, 0
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond482, {}* %129, {}* %.elt521
  %130 = icmp eq {}* %object.0, %129
  %.val622 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287331.0 = select i1 %130, {}* %.val622, {}* %129
  %131 = icmp eq {}* %G287331.0, %129
  br i1 %131, label %tag21, label %tag80

normal-dest297:                                   ; preds = %tag45
  %ptrtoint298 = ptrtoint {}* %40 to i64
  %entry-point-addr-uint299 = add i64 %ptrtoint298, 7
  %entry-point-addr300 = inttoptr i64 %entry-point-addr-uint299 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point301 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr300, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point301({}* %40, i64 1, {}* nonnull %testfunktion.0, {}* null, {}* null, {}* null)
          to label %normal-dest304 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest304:                                   ; preds = %normal-dest297
  %.elt581 = extractvalue { {}*, i64 } %132, 0
  %.elt583 = extractvalue { {}*, i64 } %132, 1
  %cond492 = icmp eq i64 %.elt583, 0
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %FUNCTION287186.1 = select i1 %cond492, {}* %133, {}* %.elt581
  br label %tag46

normal-dest311:                                   ; preds = %tag46
  %134 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 588), align 16
  %135 = invoke {}* @cc_safe_fdefinition({}* %134)
          to label %normal-dest313 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest313:                                   ; preds = %normal-dest311
  %136 = ptrtoint {}* %vaarg to i64
  %tag-only314494 = and i64 %136, 7
  %consp-test315 = icmp eq i64 %tag-only314494, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val615 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287448.0 = select i1 %consp-test315, {}* %.val, {}* %.val615
  %137 = icmp eq {}* %G287448.0, %.val615
  br i1 %137, label %tag7, label %tag31.outer.preheader

tag31.outer.preheader:                            ; preds = %normal-dest313
  br label %tag31.outer

normal-dest317:                                   ; preds = %tag48
  %138 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %139 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %140 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %141 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 596), align 16
  %ptrtoint318 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint319 = add i64 %ptrtoint318, 7
  %entry-point-addr320 = inttoptr i64 %entry-point-addr-uint319 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point321 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr320, align 8
  %142 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point321({}* %44, i64 5, {}* %138, {}* %139, {}* %FUNCTION287186.0, {}* %140, {}* %141)
          to label %normal-dest324 unwind label %cleanup-lpad.loopexit

normal-dest324:                                   ; preds = %normal-dest317
  %.elt525 = extractvalue { {}*, i64 } %142, 0
  %.elt527 = extractvalue { {}*, i64 } %142, 1
  %cond483 = icmp eq i64 %.elt527, 0
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287352.2 = select i1 %cond483, {}* %143, {}* %.elt525
  br label %tag

normal-dest336:                                   ; preds = %tag52
  %.elt505 = extractvalue { {}*, i64 } %48, 0
  %.elt507 = extractvalue { {}*, i64 } %48, 1
  %cond478 = icmp eq i64 %.elt507, 0
  %144 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287378.0 = select i1 %cond478, {}* %144, {}* %.elt505
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 442), align 16
  %ptrtoint342 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint343 = add i64 %ptrtoint342, 7
  %entry-point-addr344 = inttoptr i64 %entry-point-addr-uint343 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point345 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr344, align 8
  %146 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point345({}* %42, i64 3, {}* %G287378.0, {}* %145, {}* %144, {}* null)
          to label %normal-dest348 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest348:                                   ; preds = %normal-dest336
  %.elt509 = extractvalue { {}*, i64 } %146, 0
  %.elt511 = extractvalue { {}*, i64 } %146, 1
  %cond479 = icmp eq i64 %.elt511, 0
  %147 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUTPUT287187.0 = select i1 %cond479, {}* %147, {}* %.elt509
  %148 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 592), align 16
  %149 = invoke {}* @cc_safe_fdefinition({}* %148)
          to label %normal-dest355 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest355:                                   ; preds = %normal-dest348
  %ptrtoint356 = ptrtoint {}* %149 to i64
  %entry-point-addr-uint357 = add i64 %ptrtoint356, 7
  %entry-point-addr358 = inttoptr i64 %entry-point-addr-uint357 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point359 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr358, align 8
  %150 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point359({}* %149, i64 1, {}* %OUTPUT287187.0, {}* null, {}* null, {}* null)
          to label %normal-dest362 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest362:                                   ; preds = %normal-dest355
  %.elt513 = extractvalue { {}*, i64 } %150, 0
  %.elt515 = extractvalue { {}*, i64 } %150, 1
  %cond480 = icmp eq i64 %.elt515, 0
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %OUTPUT-ITER287188.2 = select i1 %cond480, {}* %151, {}* %.elt513
  %152 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 592), align 16
  %153 = invoke {}* @cc_safe_fdefinition({}* %152)
          to label %normal-dest369 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest369:                                   ; preds = %normal-dest362
  %ptrtoint370 = ptrtoint {}* %153 to i64
  %entry-point-addr-uint371 = add i64 %ptrtoint370, 7
  %entry-point-addr372 = inttoptr i64 %entry-point-addr-uint371 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point373 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr372, align 8
  %154 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point373({}* %153, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest376 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest376:                                   ; preds = %normal-dest369
  %ptrtoint469 = ptrtoint {}* %FUNCTION287186.0 to i64
  %tag-only470 = and i64 %ptrtoint469, 7
  %test471 = icmp eq i64 %tag-only470, 1
  %irc-bit-cast472 = bitcast {}* %FUNCTION287186.0 to i8*
  %gep473 = getelementptr inbounds i8, i8* %irc-bit-cast472, i64 -9
  %irc-bit-cast474 = bitcast i8* %gep473 to i64*
  br label %tag43

normal-dest392:                                   ; preds = %tag75
  %155 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %155, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.16", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.16^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14285, i64 395, i64 0, i64 1, {}* %76)
          to label %normal-dest393 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest393:                                   ; preds = %normal-dest392
  %156 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %157 = icmp eq {}* %testfunktion.0, %156
  br i1 %157, label %tag56, label %tag28

normal-dest400:                                   ; preds = %tag56
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %49

normal-dest405:                                   ; preds = %tag61
  %158 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 585), align 8
  %ptrtoint406 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint407 = add i64 %ptrtoint406, 7
  %entry-point-addr408 = inttoptr i64 %entry-point-addr-uint407 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point409 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr408, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point409({}* %55, i64 2, {}* %testfunktion.0, {}* %158, {}* null, {}* null)
          to label %normal-dest412 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest412:                                   ; preds = %normal-dest405
  %.elt585 = extractvalue { {}*, i64 } %159, 0
  %.elt587 = extractvalue { {}*, i64 } %159, 1
  %cond493 = icmp eq i64 %.elt587, 0
  %160 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %FUNCTION287186.2 = select i1 %cond493, {}* %160, {}* %.elt585
  br label %tag46

normal-dest427:                                   ; preds = %normal-dest159
  call void @unreachableError()
  unreachable

normal-dest432:                                   ; preds = %tag71
  %161 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 590), align 16
  %ptrtoint433 = ptrtoint {}* %57 to i64
  %entry-point-addr-uint434 = add i64 %ptrtoint433, 7
  %entry-point-addr435 = inttoptr i64 %entry-point-addr-uint434 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point436 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr435, align 8
  %162 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point436({}* %57, i64 2, {}* %vaarg, {}* %161, {}* null, {}* null)
          to label %normal-dest439 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest439:                                   ; preds = %normal-dest432
  %.elt573 = extractvalue { {}*, i64 } %162, 0
  %.elt575 = extractvalue { {}*, i64 } %162, 1
  %cond490 = icmp eq i64 %.elt575, 0
  %163 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287382.1 = select i1 %cond490, {}* %163, {}* %.elt573
  br label %tag52

normal-dest446:                                   ; preds = %tag73
  %ptrtoint447 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint448 = add i64 %ptrtoint447, 7
  %entry-point-addr449 = inttoptr i64 %entry-point-addr-uint448 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point450 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr449, align 8
  %164 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point450({}* %59, i64 1, {}* %32, {}* null, {}* null, {}* null)
          to label %normal-dest453 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest453:                                   ; preds = %normal-dest446
  %.elt501 = extractvalue { {}*, i64 } %164, 0
  %.elt503 = extractvalue { {}*, i64 } %164, 1
  %cond477 = icmp eq i64 %.elt503, 0
  %165 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond477, {}* %165, {}* %.elt501
  br label %tag31.outer.backedge

normal-dest467:                                   ; preds = %tag80
  br i1 %test471, label %header-check-br468, label %tag48

header-check-br468:                               ; preds = %normal-dest467
  %166 = load i64, i64* %irc-bit-cast474, align 8
  %.off = add i64 %166, -913
  %167 = icmp ult i64 %.off, 85
  br i1 %167, label %tag, label %header-check-br164
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.16"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !90 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.16^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.16^DESC" to %0*)) #7
          to label %.noexc78 unwind label %cleanup-lpad

.noexc78:                                         ; preds = %13
  unreachable

tag:                                              ; preds = %normal-dest, %header-check-br21
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest14 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest38, %normal-dest18, %header-check-br
  %G287474.0 = phi {}* [ %28, %header-check-br ], [ %G287474.1, %normal-dest18 ], [ %G287474.2, %normal-dest38 ]
  %ptrtoint44 = ptrtoint {}* %G287474.0 to i64
  %entry-point-addr-uint45 = add i64 %ptrtoint44, 7
  %entry-point-addr46 = inttoptr i64 %entry-point-addr-uint45 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point47 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr46, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point47({}* %G287474.0, i64 2, {}* %farg1, {}* %farg0, {}* null, {}* null)
          to label %normal-dest50 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %13, %10, %tag5, %normal-dest31, %maybe-more-tests29, %normal-dest14, %tag
  %17 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %17

normal-dest:                                      ; preds = %11
  %18 = ptrtoint {}* %closure-ptr to i64
  %19 = and i64 %18, -8
  %20 = inttoptr i64 %19 to %1*
  %21 = getelementptr inbounds %1, %1* %20, i64 0, i32 4, i32 1, i64 0, i32 0
  %22 = bitcast %"class.core::T_O"** %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !27
  %24 = add i64 %23, -3
  %25 = inttoptr i64 %24 to %"class.gctools::smart_ptr"*
  %26 = getelementptr inbounds %"class.gctools::smart_ptr", %"class.gctools::smart_ptr"* %25, i64 0, i32 0
  %27 = load %"class.core::T_O"*, %"class.core::T_O"** %26, align 8, !tbaa !27
  %28 = bitcast %"class.core::T_O"* %27 to {}*
  %ptrtoint = ptrtoint %"class.core::T_O"* %27 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest
  %gep = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %27, i64 -9, i32 0
  %irc-bit-cast13 = bitcast i8* %gep to i64*
  %29 = load i64, i64* %irc-bit-cast13, align 8
  %.off = add i64 %29, -913
  %30 = icmp ult i64 %.off, 85
  br i1 %30, label %tag5, label %header-check-br21

normal-dest14:                                    ; preds = %tag
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 584), align 16
  %ptrtoint15 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint15, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 5, {}* %31, {}* %32, {}* %28, {}* %33, {}* %34)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest14
  %.elt = extractvalue { {}*, i64 } %35, 0
  %.elt63 = extractvalue { {}*, i64 } %35, 1
  %cond = icmp eq i64 %.elt63, 0
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287474.1 = select i1 %cond, {}* %36, {}* %.elt
  br label %tag5

header-check-br21:                                ; preds = %header-check-br
  %.off81 = add i64 %29, -1001
  %37 = icmp ult i64 %.off81, 5
  br i1 %37, label %maybe-more-tests29, label %tag

maybe-more-tests29:                               ; preds = %header-check-br21
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest31 unwind label %cleanup-lpad

normal-dest31:                                    ; preds = %maybe-more-tests29
  %ptrtoint32 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint33 = add i64 %ptrtoint32, 7
  %entry-point-addr34 = inttoptr i64 %entry-point-addr-uint33 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point35 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr34, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point35({}* %39, i64 1, {}* nonnull %28, {}* null, {}* null, {}* null)
          to label %normal-dest38 unwind label %cleanup-lpad

normal-dest38:                                    ; preds = %normal-dest31
  %.elt73 = extractvalue { {}*, i64 } %40, 0
  %.elt75 = extractvalue { {}*, i64 } %40, 1
  %cond61 = icmp eq i64 %.elt75, 0
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287474.2 = select i1 %cond61, {}* %41, {}* %.elt73
  br label %tag5

normal-dest50:                                    ; preds = %tag5
  %.elt65 = extractvalue { {}*, i64 } %16, 0
  %.elt67 = extractvalue { {}*, i64 } %16, 1
  %cond60 = icmp eq i64 %.elt67, 0
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287472.0 = select i1 %cond60, {}* %42, {}* %.elt65
  %43 = icmp eq {}* %G287472.0, %42
  %farg0.farg1 = select i1 %43, {}* %farg0, {}* %farg1
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %44 = insertvalue { {}*, i64 } undef, {}* %farg0.farg1, 0
  %45 = insertvalue { {}*, i64 } %44, i64 1, 1
  ret { {}*, i64 } %45
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^413^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !91 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^413^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest30 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest17, %header-check-br
  %G287534.0 = phi {}* [ %18, %header-check-br ], [ %G287534.1, %normal-dest17 ], [ %G287534.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 632), align 16
  %ptrtoint43 = ptrtoint {}* %G287534.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G287534.0, i64 2, {}* %"closure->B=POSITIONEN-IF", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %tag3, %normal-dest13, %maybe-more-tests28, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 632), align 16
  %"closure->B=POSITIONEN-IF" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 14878, i64 413, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br20

normal-dest13:                                    ; preds = %maybe-more-tests28
  %ptrtoint14 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %25, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt101 = extractvalue { {}*, i64 } %21, 0
  %.elt103 = extractvalue { {}*, i64 } %21, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287534.1 = select i1 %cond82, {}* %22, {}* %.elt101
  br label %tag4

header-check-br20:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %23 = icmp ult i64 %.off106, 5
  br i1 %23, label %maybe-more-tests28, label %tag3

maybe-more-tests28:                               ; preds = %header-check-br20
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest13 unwind label %cleanup-lpad

normal-dest30:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 631), align 8
  %ptrtoint31 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %12, i64 5, {}* %26, {}* %27, {}* %18, {}* %28, {}* %29)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt = extractvalue { {}*, i64 } %30, 0
  %.elt84 = extractvalue { {}*, i64 } %30, 1
  %cond = icmp eq i64 %.elt84, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287534.2 = select i1 %cond, {}* %31, {}* %.elt
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 634), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=POSITIONEN-IF", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 635), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=POSITIONEN-IF", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 1720 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 632), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !92 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp ult i64 %nargs, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %10
  unreachable

; <label>:11:                                     ; preds = %entry
  %12 = icmp eq i64 %nargs, 2
  br i1 %12, label %normal-dest, label %13

; <label>:13:                                     ; preds = %11
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 2, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=POSITIONEN-IF^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc383 unwind label %cleanup-lpad.loopexit.split-lp

.noexc383:                                        ; preds = %13
  unreachable

tag1:                                             ; preds = %tag28
  br i1 %consp-test144, label %tag5, label %tag2

tag2:                                             ; preds = %tag1
  %14 = icmp eq {}* %ULISTE.1, %.val404
  %G287649.0 = select i1 %14, {}* %.val399, {}* %.val404
  %15 = icmp eq {}* %G287649.0, %.val404
  br i1 %15, label %tag47, label %tag11

tag4:                                             ; preds = %tag11
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest285 unwind label %cleanup-lpad.loopexit.loopexit

tag5:                                             ; preds = %tag1
  %18 = add i64 %29, 5
  %19 = inttoptr i64 %18 to {}**
  %20 = load {}*, {}** %19, align 8
  br label %tag11

tag9:                                             ; preds = %normal-dest196
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 629), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest84 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag11:                                            ; preds = %tag2, %normal-dest234, %tag5
  %ULISTE.0 = phi {}* [ %20, %tag5 ], [ %ULISTE.2, %normal-dest234 ], [ %.val404, %tag2 ]
  %23 = ptrtoint {}* %POSITION.0 to i64
  %fixnum-tag-only337 = and i64 %23, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only337, 0
  br i1 %fixnump-test, label %tag54, label %tag4

tag12:                                            ; preds = %tag21
  %24 = add i64 %29, 5
  %25 = inttoptr i64 %24 to {}**
  %26 = load {}*, {}** %25, align 8
  br label %tag28

tag13:                                            ; preds = %tag52, %normal-dest153, %tag53
  %G287665.0 = phi {}* [ %56, %tag53 ], [ %G287665.1, %normal-dest153 ], [ %.val396, %tag52 ]
  %ptrtoint108 = ptrtoint {}* %68 to i64
  %entry-point-addr-uint109 = add i64 %ptrtoint108, 7
  %entry-point-addr110 = inttoptr i64 %entry-point-addr-uint109 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point111 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr110, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point111({}* %68, i64 1, {}* %G287665.0, {}* null, {}* null, {}* null)
          to label %normal-dest114 unwind label %cleanup-lpad.loopexit.split-lp

tag21:                                            ; preds = %normal-dest196, %tag21.outer
  %28 = phi {}* [ %89, %normal-dest196 ], [ %32, %tag21.outer ]
  %POSITION.0 = phi {}* [ %POSITION.1, %normal-dest196 ], [ %POSITION.0.ph, %tag21.outer ]
  %ULISTE.1 = phi {}* [ %ULISTE.0, %normal-dest196 ], [ %ULISTE.1.ph, %tag21.outer ]
  %29 = ptrtoint {}* %ULISTE.1 to i64
  %tag-only143335 = and i64 %29, 7
  %consp-test144 = icmp eq i64 %tag-only143335, 3
  br i1 %consp-test144, label %tag12, label %tag58

tag22:                                            ; preds = %tag52
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest146 unwind label %cleanup-lpad.loopexit.split-lp

tag21.outer:                                      ; preds = %tag21.outer.preheader, %normal-dest98
  %32 = phi {}* [ %76, %normal-dest98 ], [ %.ph, %tag21.outer.preheader ]
  %POSITIONEN.0.ph = phi {}* [ %POSITIONEN.2, %normal-dest98 ], [ %POSITIONEN.0.ph.ph, %tag21.outer.preheader ]
  %POSITION.0.ph = phi {}* [ %POSITION.1, %normal-dest98 ], [ inttoptr (i64 4 to {}*), %tag21.outer.preheader ]
  %ULISTE.1.ph = phi {}* [ %ULISTE.0, %normal-dest98 ], [ %farg1, %tag21.outer.preheader ]
  br label %tag21

tag28:                                            ; preds = %tag58, %normal-dest248, %tag12
  %.val404 = phi {}* [ %28, %tag12 ], [ %112, %normal-dest248 ], [ %28, %tag58 ]
  %x82.0 = phi {}* [ %26, %tag12 ], [ %x82.1, %normal-dest248 ], [ %28, %tag58 ]
  %33 = icmp eq {}* %x82.0, %.val404
  %.val399 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object.0 = select i1 %33, {}* %.val399, {}* %.val404
  %34 = icmp eq {}* %object.0, %.val404
  %G287554.0 = select i1 %34, {}* %.val399, {}* %.val404
  %35 = icmp eq {}* %G287554.0, %.val404
  br i1 %35, label %tag57, label %tag1

tag34:                                            ; preds = %normal-dest220
  %36 = add i64 %99, -3
  %37 = inttoptr i64 %36 to {}**
  %38 = load {}*, {}** %37, align 8
  br label %tag39

tag37:                                            ; preds = %normal-dest220
  %39 = icmp eq {}* %ULISTE.0, %.val406
  %G287601.0 = select i1 %39, {}* %.val405, {}* %.val406
  %40 = icmp eq {}* %G287601.0, %.val406
  br i1 %40, label %tag42, label %tag39

tag39:                                            ; preds = %tag37, %normal-dest211, %tag34
  %G287592.0 = phi {}* [ %38, %tag34 ], [ %G287592.1, %normal-dest211 ], [ %.val406, %tag37 ]
  %ptrtoint178 = ptrtoint {}* %98 to i64
  %entry-point-addr-uint179 = add i64 %ptrtoint178, 7
  %entry-point-addr180 = inttoptr i64 %entry-point-addr-uint179 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point181 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr180, align 8
  %41 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point181({}* %98, i64 1, {}* %G287592.0, {}* null, {}* null, {}* null)
          to label %normal-dest184 unwind label %cleanup-lpad.loopexit.loopexit

tag42:                                            ; preds = %tag37
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest204 unwind label %cleanup-lpad.loopexit.loopexit

tag45:                                            ; preds = %normal-dest306, %normal-dest292, %tag54
  %POSITION.1 = phi {}* [ %58, %tag54 ], [ %POSITION.2, %normal-dest292 ], [ %POSITION.3, %normal-dest306 ]
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 342), align 16
  %45 = invoke {}* @cc_safe_fdefinition({}* %44)
          to label %normal-dest218 unwind label %cleanup-lpad.loopexit.loopexit

tag47:                                            ; preds = %tag2
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest227 unwind label %cleanup-lpad.loopexit.loopexit

tag48:                                            ; preds = %tag58
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest241 unwind label %cleanup-lpad.loopexit.loopexit

tag49:                                            ; preds = %normal-dest126
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %51 = invoke {}* @cc_safe_fdefinition({}* %50)
          to label %normal-dest255 unwind label %cleanup-lpad.loopexit.split-lp

tag52:                                            ; preds = %normal-dest70
  %52 = icmp eq {}* %.val396, %farg1
  %G287674.0 = select i1 %52, {}* %.val, {}* %.val396
  %53 = icmp eq {}* %G287674.0, %.val396
  br i1 %53, label %tag22, label %tag13

tag53:                                            ; preds = %normal-dest70
  %54 = add i64 %69, -3
  %55 = inttoptr i64 %54 to {}**
  %56 = load {}*, {}** %55, align 8
  br label %tag13

tag54:                                            ; preds = %tag11
  %57 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %23, i64 4)
  %result = extractvalue { i64, i1 } %57, 0
  %overflow = extractvalue { i64, i1 } %57, 1
  %58 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag61, label %tag45

tag57:                                            ; preds = %tag28
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %59 = insertvalue { {}*, i64 } undef, {}* %POSITIONEN.0.ph, 0
  %60 = insertvalue { {}*, i64 } %59, i64 1, 1
  ret { {}*, i64 } %60

tag58:                                            ; preds = %tag21
  %61 = icmp eq {}* %ULISTE.1, %28
  %.val397 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287572.0 = select i1 %61, {}* %.val397, {}* %28
  %62 = icmp eq {}* %G287572.0, %28
  br i1 %62, label %tag48, label %tag28

tag61:                                            ; preds = %tag54
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %64 = invoke {}* @cc_safe_fdefinition({}* %63)
          to label %normal-dest299 unwind label %cleanup-lpad.loopexit.loopexit

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest299, %tag61, %normal-dest285, %tag4, %normal-dest241, %tag48, %normal-dest227, %tag47, %normal-dest218, %tag45, %normal-dest204, %tag42, %normal-dest184, %tag39
  %lpad.loopexit411 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest89, %normal-dest86, %normal-dest84, %tag9
  %lpad.loopexit.split-lp412 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %normal-dest, %normal-dest68, %tag13, %normal-dest114, %tag22, %normal-dest146, %tag49, %normal-dest255, %10, %13
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ], [ %lpad.loopexit411, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp412, %cleanup-lpad.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %11
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 342), align 16
  %66 = invoke {}* @cc_safe_fdefinition({}* %65)
          to label %normal-dest68 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest68:                                    ; preds = %normal-dest
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %68 = invoke {}* @cc_safe_fdefinition({}* %67)
          to label %normal-dest70 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest70:                                    ; preds = %normal-dest68
  %69 = ptrtoint {}* %farg1 to i64
  %tag-only324 = and i64 %69, 7
  %consp-test = icmp eq i64 %tag-only324, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val396 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287681.0 = select i1 %consp-test, {}* %.val, {}* %.val396
  %70 = icmp eq {}* %G287681.0, %.val396
  br i1 %70, label %tag52, label %tag53

normal-dest84:                                    ; preds = %tag9
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest86 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest86:                                    ; preds = %normal-dest84
  %ptrtoint = ptrtoint {}* %72 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %72, i64 1, {}* %POSITION.1, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest89:                                    ; preds = %normal-dest86
  %.elt352 = extractvalue { {}*, i64 } %73, 0
  %.elt354 = extractvalue { {}*, i64 } %73, 1
  %cond317 = icmp eq i64 %.elt354, 0
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287581.0 = select i1 %cond317, {}* %74, {}* %.elt352
  %ptrtoint92 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint93 = add i64 %ptrtoint92, 7
  %entry-point-addr94 = inttoptr i64 %entry-point-addr-uint93 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point95 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr94, align 8
  %75 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point95({}* %22, i64 2, {}* %POSITIONEN.0.ph, {}* %G287581.0, {}* null, {}* null)
          to label %normal-dest98 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest98:                                    ; preds = %normal-dest89
  %.elt356 = extractvalue { {}*, i64 } %75, 0
  %.elt358 = extractvalue { {}*, i64 } %75, 1
  %cond318 = icmp eq i64 %.elt358, 0
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %POSITIONEN.2 = select i1 %cond318, {}* %76, {}* %.elt356
  br label %tag21.outer

normal-dest114:                                   ; preds = %tag13
  %.elt = extractvalue { {}*, i64 } %27, 0
  %.elt326 = extractvalue { {}*, i64 } %27, 1
  %cond = icmp eq i64 %.elt326, 0
  %77 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287663.0 = select i1 %cond, {}* %77, {}* %.elt
  %ptrtoint120 = ptrtoint {}* %66 to i64
  %entry-point-addr-uint121 = add i64 %ptrtoint120, 7
  %entry-point-addr122 = inttoptr i64 %entry-point-addr-uint121 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point123 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr122, align 8
  %78 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point123({}* %66, i64 2, {}* %farg0, {}* %G287663.0, {}* null, {}* null)
          to label %normal-dest126 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest126:                                   ; preds = %normal-dest114
  %.elt328 = extractvalue { {}*, i64 } %78, 0
  %.elt330 = extractvalue { {}*, i64 } %78, 1
  %cond312 = icmp eq i64 %.elt330, 0
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287659.0 = select i1 %cond312, {}* %79, {}* %.elt328
  %80 = icmp eq {}* %G287659.0, %79
  br i1 %80, label %tag21.outer.preheader, label %tag49

normal-dest146:                                   ; preds = %tag22
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %84 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint147 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint148 = add i64 %ptrtoint147, 7
  %entry-point-addr149 = inttoptr i64 %entry-point-addr-uint148 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point150 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr149, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point150({}* %31, i64 5, {}* %81, {}* %82, {}* %farg1, {}* %83, {}* %84)
          to label %normal-dest153 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest153:                                   ; preds = %normal-dest146
  %.elt379 = extractvalue { {}*, i64 } %85, 0
  %.elt381 = extractvalue { {}*, i64 } %85, 1
  %cond323 = icmp eq i64 %.elt381, 0
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287665.1 = select i1 %cond323, {}* %86, {}* %.elt379
  br label %tag13

normal-dest184:                                   ; preds = %tag39
  %.elt344 = extractvalue { {}*, i64 } %41, 0
  %.elt346 = extractvalue { {}*, i64 } %41, 1
  %cond315 = icmp eq i64 %.elt346, 0
  %87 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287590.0 = select i1 %cond315, {}* %87, {}* %.elt344
  %ptrtoint190 = ptrtoint {}* %45 to i64
  %entry-point-addr-uint191 = add i64 %ptrtoint190, 7
  %entry-point-addr192 = inttoptr i64 %entry-point-addr-uint191 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point193 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr192, align 8
  %88 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point193({}* %45, i64 2, {}* %farg0, {}* %G287590.0, {}* null, {}* null)
          to label %normal-dest196 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest196:                                   ; preds = %normal-dest184
  %.elt348 = extractvalue { {}*, i64 } %88, 0
  %.elt350 = extractvalue { {}*, i64 } %88, 1
  %cond316 = icmp eq i64 %.elt350, 0
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287586.0 = select i1 %cond316, {}* %89, {}* %.elt348
  %90 = icmp eq {}* %G287586.0, %89
  br i1 %90, label %tag21, label %tag9

normal-dest204:                                   ; preds = %tag42
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %94 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint205 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint206 = add i64 %ptrtoint205, 7
  %entry-point-addr207 = inttoptr i64 %entry-point-addr-uint206 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point208 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr207, align 8
  %95 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point208({}* %43, i64 5, {}* %91, {}* %92, {}* %ULISTE.0, {}* %93, {}* %94)
          to label %normal-dest211 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest211:                                   ; preds = %normal-dest204
  %.elt360 = extractvalue { {}*, i64 } %95, 0
  %.elt362 = extractvalue { {}*, i64 } %95, 1
  %cond319 = icmp eq i64 %.elt362, 0
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287592.1 = select i1 %cond319, {}* %96, {}* %.elt360
  br label %tag39

normal-dest218:                                   ; preds = %tag45
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %98 = invoke {}* @cc_safe_fdefinition({}* %97)
          to label %normal-dest220 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest220:                                   ; preds = %normal-dest218
  %99 = ptrtoint {}* %ULISTE.0 to i64
  %tag-only224342 = and i64 %99, 7
  %consp-test225 = icmp eq i64 %tag-only224342, 3
  %.val405 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val406 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287608.0 = select i1 %consp-test225, {}* %.val405, {}* %.val406
  %100 = icmp eq {}* %G287608.0, %.val406
  br i1 %100, label %tag37, label %tag34

normal-dest227:                                   ; preds = %tag47
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint228 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint229 = add i64 %ptrtoint228, 7
  %entry-point-addr230 = inttoptr i64 %entry-point-addr-uint229 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point231 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr230, align 8
  %105 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point231({}* %47, i64 5, {}* %101, {}* %102, {}* %ULISTE.1, {}* %103, {}* %104)
          to label %normal-dest234 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest234:                                   ; preds = %normal-dest227
  %.elt368 = extractvalue { {}*, i64 } %105, 0
  %.elt370 = extractvalue { {}*, i64 } %105, 1
  %cond321 = icmp eq i64 %.elt370, 0
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ULISTE.2 = select i1 %cond321, {}* %106, {}* %.elt368
  br label %tag11

normal-dest241:                                   ; preds = %tag48
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint242 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint243 = add i64 %ptrtoint242, 7
  %entry-point-addr244 = inttoptr i64 %entry-point-addr-uint243 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point245 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr244, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point245({}* %49, i64 5, {}* %107, {}* %108, {}* %ULISTE.1, {}* %109, {}* %110)
          to label %normal-dest248 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest248:                                   ; preds = %normal-dest241
  %.elt375 = extractvalue { {}*, i64 } %111, 0
  %.elt377 = extractvalue { {}*, i64 } %111, 1
  %cond322 = icmp eq i64 %.elt377, 0
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x82.1 = select i1 %cond322, {}* %112, {}* %.elt375
  br label %tag28

normal-dest255:                                   ; preds = %tag49
  %ptrtoint256 = ptrtoint {}* %51 to i64
  %entry-point-addr-uint257 = add i64 %ptrtoint256, 7
  %entry-point-addr258 = inttoptr i64 %entry-point-addr-uint257 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point259 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr258, align 8
  %113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point259({}* %51, i64 1, {}* inttoptr (i64 4 to {}*), {}* null, {}* null, {}* null)
          to label %normal-dest262 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest262:                                   ; preds = %normal-dest255
  %.elt332 = extractvalue { {}*, i64 } %113, 0
  %.elt334 = extractvalue { {}*, i64 } %113, 1
  %cond313 = icmp eq i64 %.elt334, 0
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %POSITIONEN.3 = select i1 %cond313, {}* %114, {}* %.elt332
  br label %tag21.outer.preheader

tag21.outer.preheader:                            ; preds = %normal-dest126, %normal-dest262
  %.ph = phi {}* [ %114, %normal-dest262 ], [ %79, %normal-dest126 ]
  %POSITIONEN.0.ph.ph = phi {}* [ %POSITIONEN.3, %normal-dest262 ], [ %79, %normal-dest126 ]
  br label %tag21.outer

normal-dest285:                                   ; preds = %tag4
  %ptrtoint286 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint287 = add i64 %ptrtoint286, 7
  %entry-point-addr288 = inttoptr i64 %entry-point-addr-uint287 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point289 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr288, align 8
  %115 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point289({}* %17, i64 2, {}* %POSITION.0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest292 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest292:                                   ; preds = %normal-dest285
  %.elt339 = extractvalue { {}*, i64 } %115, 0
  %.elt341 = extractvalue { {}*, i64 } %115, 1
  %cond314 = icmp eq i64 %.elt341, 0
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %POSITION.2 = select i1 %cond314, {}* %116, {}* %.elt339
  br label %tag45

normal-dest299:                                   ; preds = %tag61
  %ptrtoint300 = ptrtoint {}* %64 to i64
  %entry-point-addr-uint301 = add i64 %ptrtoint300, 7
  %entry-point-addr302 = inttoptr i64 %entry-point-addr-uint301 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point303 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr302, align 8
  %117 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point303({}* %64, i64 1, {}* %58, {}* null, {}* null, {}* null)
          to label %normal-dest306 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest306:                                   ; preds = %normal-dest299
  %.elt364 = extractvalue { {}*, i64 } %117, 0
  %.elt366 = extractvalue { {}*, i64 } %117, 1
  %cond320 = icmp eq i64 %.elt366, 0
  %118 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %POSITION.3 = select i1 %cond320, {}* %118, {}* %.elt364
  br label %tag45
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^437^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !93 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^437^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G287727.0 = phi {}* [ %18, %header-check-br ], [ %G287727.1, %normal-dest26 ], [ %G287727.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 774), align 16
  %ptrtoint43 = ptrtoint {}* %G287727.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G287727.0, i64 2, {}* %"closure->B=IN-SEQUENCE-ERSETZEN", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 774), align 16
  %"closure->B=IN-SEQUENCE-ERSETZEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 15684, i64 437, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag2

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 773), align 8
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt97 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt97, 0
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287727.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt118 = extractvalue { {}*, i64 } %30, 0
  %.elt120 = extractvalue { {}*, i64 } %30, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287727.2 = select i1 %cond95, {}* %31, {}* %.elt118
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 776), align 16
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=IN-SEQUENCE-ERSETZEN", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 779), align 8
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=IN-SEQUENCE-ERSETZEN", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 774), align 16
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 780), align 16
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 1788 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 774), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !94 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag2:                                             ; preds = %tag385
  %9 = invoke float @from_object_float({}* %LAUF.0)
          to label %normal-dest757 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag4:                                             ; preds = %tag259
  br i1 %test2718, label %header-check-br, label %tag458

tag5:                                             ; preds = %tag14
  %10 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %11 = invoke {}* @cc_safe_fdefinition({}* %10)
          to label %normal-dest763 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag9:                                             ; preds = %tag137
  %12 = add i64 %178, -3
  %13 = inttoptr i64 %12 to {}**
  %14 = load {}*, {}** %13, align 8
  br label %tag308

tag12:                                            ; preds = %header-check-br2352, %normal-dest2107, %tag425
  %.val3902 = phi {}* [ %.pre, %tag425 ], [ %833, %normal-dest2107 ], [ %.val3809, %header-check-br2352 ]
  %G288779.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag425 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest2107 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2352 ]
  %G288779.0 = load {}*, {}** %G288779.0.in, align 8
  %15 = icmp eq {}* %G288779.0, %.val3902
  br i1 %15, label %tag282, label %tag374

tag14:                                            ; preds = %tag228
  %16 = load i64 (%"class.core::MDArray_O"*)**, i64 (%"class.core::MDArray_O"*)*** %562, align 8, !tbaa !95
  %17 = getelementptr inbounds i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %16, i64 42
  %18 = load i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %17, align 8
  %19 = call i64 %18(%"class.core::MDArray_O"* %560)
  %fixnum = shl nuw i64 %19, 2
  %20 = inttoptr i64 %fixnum to {}*
  br i1 %fixnump-test2230, label %tag655, label %tag5

tag16:                                            ; preds = %normal-dest942, %tag702, %tag666, %tag591, %tag368, %tag258, %tag52
  %G287747.0 = phi {}* [ %191, %tag258 ], [ %546, %tag702 ], [ %288, %tag368 ], [ %516, %tag666 ], [ %66, %tag52 ], [ %462, %tag591 ], [ %G287747.1, %normal-dest942 ]
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %22 = icmp eq {}* %G287747.0, %21
  br i1 %22, label %tag621, label %tag289

tag22:                                            ; preds = %tag129
  %23 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i8] }>*
  %24 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum" = lshr exact i64 %24, 2
  %aref = getelementptr inbounds <{ [15 x i8], [0 x i8] }>, <{ [15 x i8], [0 x i8] }>* %23, i64 0, i32 1, i64 %"untagged fixnum"
  %25 = load i8, i8* %aref, align 1
  %26 = invoke {}* @to_object_uint8(i8 %25)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag23:                                            ; preds = %tag561
  br i1 %test2718, label %header-check-br796, label %tag256

tag24:                                            ; preds = %normal-dest851
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest804 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag26:                                            ; preds = %tag500
  %29 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i8] }>*
  %30 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum826" = lshr exact i64 %30, 2
  %aref827 = getelementptr inbounds <{ [15 x i8], [0 x i8] }>, <{ [15 x i8], [0 x i8] }>* %29, i64 0, i32 1, i64 %"untagged fixnum826"
  %31 = load i8, i8* %aref827, align 1
  %32 = invoke {}* @to_object_claspChar(i8 %31)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag27:                                            ; preds = %header-check-br1571, %tag502
  %G288508.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag502 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1571 ]
  %G288508.0 = load {}*, {}** %G288508.0.in, align 8
  %33 = icmp eq {}* %G288508.0, %G288555.0
  br i1 %33, label %tag157, label %tag201

tag28:                                            ; preds = %tag718
  %.old = and i64 %ptrtoint3119, 3
  %fixnump-test830.old = icmp eq i64 %.old, 0
  br i1 %fixnump-test830.old, label %tag348, label %tag150

tag32:                                            ; preds = %header-check-br1303, %tag722
  %object840.04060 = phi {}* [ %G287913.0.pre, %tag722 ], [ %G288112.0, %header-check-br1303 ]
  %G287913.0 = phi {}* [ %G287913.0.pre, %tag722 ], [ %.val3991, %header-check-br1303 ]
  %34 = icmp eq {}* %G287913.0, %G288112.0
  br i1 %34, label %tag276, label %tag508

tag33:                                            ; preds = %header-check-br2432, %normal-dest1653, %normal-dest2904, %tag705
  %35 = phi {}* [ %object840.04060, %tag705 ], [ %998, %normal-dest2904 ], [ %738, %normal-dest1653 ], [ %object840.04060, %header-check-br2432 ]
  %object840.0 = phi {}* [ %object840.04060, %tag705 ], [ %998, %normal-dest2904 ], [ %object840.0.pre, %normal-dest1653 ], [ %object840.04060, %header-check-br2432 ]
  %36 = icmp eq {}* %object840.0, %35
  %.val3861 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287907.0 = select i1 %36, {}* %.val3861, {}* %35
  %37 = icmp eq {}* %G287907.0, %35
  br i1 %37, label %tag551, label %tag115

tag34:                                            ; preds = %tag711
  %38 = icmp sgt {}* %LAUF.0, inttoptr (i64 -1 to {}*)
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.3786 = select i1 %38, {}* %39, {}* %71
  br label %tag223

tag35:                                            ; preds = %header-check-br1910, %tag260
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest844 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag37:                                            ; preds = %normal-dest921, %tag749
  %42 = invoke i32 @from_object_claspCharacter({}* %.in3353)
          to label %normal-dest859 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag39:                                            ; preds = %tag339
  %43 = icmp eq {}* %G2095854.0, %.val3815
  %G288787.0 = select i1 %43, {}* %.val3812, {}* %.val3815
  %44 = icmp eq {}* %G288787.0, %.val3815
  br i1 %44, label %tag414, label %tag736

tag41:                                            ; preds = %tag41.preheader, %tag517
  %OFFSET.0 = phi {}* [ %G68960.0, %tag517 ], [ null, %tag41.preheader ]
  %UNDERLYING-ARRAY.0 = phi {}* [ %53, %tag517 ], [ %vaarg, %tag41.preheader ]
  %45 = ptrtoint {}* %UNDERLYING-ARRAY.0 to i64
  %46 = add i64 %45, -1
  %47 = inttoptr i64 %46 to %"class.core::MDArray_O"*
  %48 = inttoptr i64 %46 to %"class.core::T_O"* (%"class.core::MDArray_O"*)***
  %49 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)**, %"class.core::T_O"* (%"class.core::MDArray_O"*)*** %48, align 8, !tbaa !95
  %50 = getelementptr inbounds %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %49, i64 69
  %51 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %50, align 8
  %52 = call %"class.core::T_O"* %51(%"class.core::MDArray_O"* %47)
  %53 = bitcast %"class.core::T_O"* %52 to {}*
  %54 = inttoptr i64 %46 to i64 (%"class.core::MDArray_O"*)***
  %55 = load i64 (%"class.core::MDArray_O"*)**, i64 (%"class.core::MDArray_O"*)*** %54, align 8, !tbaa !95
  %56 = getelementptr inbounds i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %55, i64 55
  %57 = load i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %56, align 8
  %58 = call i64 %57(%"class.core::MDArray_O"* %47)
  %fixnum865 = shl nuw i64 %58, 2
  %59 = inttoptr i64 %fixnum865 to {}*
  %60 = ptrtoint {}* %OFFSET.0 to i64
  %fixnum-tag-only8683503 = and i64 %60, 3
  %fixnump-test869 = icmp eq i64 %fixnum-tag-only8683503, 0
  br i1 %fixnump-test869, label %tag569, label %tag602

tag43:                                            ; preds = %tag720
  %61 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %62 = invoke {}* @cc_safe_fdefinition({}* %61)
          to label %normal-dest871 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag44:                                            ; preds = %tag108
  %63 = icmp eq {}* %x.0, %91
  %.val3824 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288351.0 = select i1 %63, {}* %.val3824, {}* %91
  %64 = icmp eq {}* %G288351.0, %91
  br i1 %64, label %tag199, label %tag58

tag45:                                            ; preds = %normal-dest1877, %tag357
  br i1 %fixnump-test2230, label %tag182, label %tag577

tag51:                                            ; preds = %normal-dest2794, %header-check-br1727, %normal-dest1471
  %G288386.0 = phi {}* [ %G288386.1, %normal-dest1471 ], [ %195, %header-check-br1727 ], [ %G288386.2, %normal-dest2794 ]
  %ptrtoint908 = ptrtoint {}* %G288386.0 to i64
  %entry-point-addr-uint909 = add i64 %ptrtoint908, 7
  %entry-point-addr910 = inttoptr i64 %entry-point-addr-uint909 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point911 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr910, align 8
  %65 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point911({}* %G288386.0, i64 2, {}* %ELEMENT.0, {}* %G287701.0, {}* null, {}* null)
          to label %normal-dest914 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag52:                                            ; preds = %normal-dest2232
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag16

tag54:                                            ; preds = %tag749
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %68 = invoke {}* @cc_safe_fdefinition({}* %67)
          to label %normal-dest921 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag55:                                            ; preds = %header-check-br786, %tag296, %header-check-br3072, %tag652, %tag208
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest934 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag56:                                            ; preds = %header-check-br3038, %tag689
  %UNDERLYING-ARRAY.14001 = phi {}* [ %UNDERLYING-ARRAY.1, %tag689 ], [ %UNDERLYING-ARRAY.14002, %header-check-br3038 ]
  %OFFSET.13999 = phi {}* [ %OFFSET.1, %tag689 ], [ %OFFSET.14000, %header-check-br3038 ]
  %G288249.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag689 ], [ %.3722, %header-check-br3038 ]
  %G288249.0 = load {}*, {}** %G288249.0.in, align 8
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %72 = icmp eq {}* %G288249.0, %71
  br i1 %72, label %tag176, label %tag711

tag58:                                            ; preds = %tag44, %normal-dest1346, %tag497
  %.pre39473965 = phi {}* [ %.pre39473970, %tag497 ], [ %678, %normal-dest1346 ], [ %.pre39473970, %tag44 ]
  %.val3882 = phi {}* [ %91, %tag497 ], [ %678, %normal-dest1346 ], [ %91, %tag44 ]
  %x955.0 = phi {}* [ %378, %tag497 ], [ %x955.1, %normal-dest1346 ], [ %91, %tag44 ]
  %73 = ptrtoint {}* %x955.0 to i64
  %tag-only9593294 = and i64 %73, 7
  %consp-test960 = icmp eq i64 %tag-only9593294, 3
  %.val3826 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288338.0 = select i1 %consp-test960, {}* %.val3826, {}* %.val3882
  %74 = icmp eq {}* %G288338.0, %.val3882
  br i1 %74, label %tag671, label %tag274

tag62:                                            ; preds = %tag730
  br i1 %test2821, label %header-check-br961, label %tag482

tag64:                                            ; preds = %header-check-br1910, %normal-dest811, %normal-dest851, %tag260
  %75 = phi {}* [ %object976.04065, %tag260 ], [ %597, %normal-dest851 ], [ %593, %normal-dest811 ], [ %object976.04065, %header-check-br1910 ]
  %object976.0 = phi {}* [ %object976.04065, %tag260 ], [ %597, %normal-dest851 ], [ %object976.0.pre, %normal-dest811 ], [ %object976.04065, %header-check-br1910 ]
  %76 = icmp eq {}* %object976.0, %75
  %.val3869 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287827.0 = select i1 %76, {}* %.val3869, {}* %75
  %77 = icmp eq {}* %G287827.0, %75
  br i1 %77, label %tag466, label %tag382

tag68:                                            ; preds = %header-check-br2439, %tag510
  %G288490.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag510 ], [ %.3700, %header-check-br2439 ]
  %G288490.0 = load {}*, {}** %G288490.0.in, align 8
  %78 = icmp eq {}* %G288490.0, %G288555.0
  br i1 %78, label %tag141, label %tag131

tag72:                                            ; preds = %normal-dest2948
  %79 = add i64 %1005, -3
  %memset2-dest = inttoptr i64 %79 to {}**
  store {}* %.in3353, {}** %memset2-dest, align 8
  br label %tag544

tag73:                                            ; preds = %header-check-br1255, %tag83
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest995 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag75:                                            ; preds = %tag491
  %82 = load {}*, {}** %329, align 8
  %.val3813.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag339

tag78:                                            ; preds = %tag160
  br i1 %test2718, label %header-check-br1009, label %tag653

tag80:                                            ; preds = %normal-dest2745, %normal-dest1493, %tag569
  %G68960.0 = phi {}* [ %444, %tag569 ], [ %G68960.1, %normal-dest1493 ], [ %G68960.2, %normal-dest2745 ]
  %ptrtoint1017 = ptrtoint %"class.core::T_O"* %52 to i64
  %tag-only1018 = and i64 %ptrtoint1017, 7
  %test1019 = icmp eq i64 %tag-only1018, 1
  br i1 %test1019, label %header-check-br1016, label %tag517

tag81:                                            ; preds = %tag373
  br i1 %test2821, label %tag317, label %tag722

tag83:                                            ; preds = %tag170
  %.old3787 = and i64 %ptrtoint1256, 3
  %fixnump-test1033.old = icmp eq i64 %.old3787, 0
  br i1 %fixnump-test1033.old, label %tag73, label %tag717

tag87:                                            ; preds = %normal-dest2569, %tag698
  %83 = invoke i16 @from_object_uint16({}* %.in3353)
          to label %normal-dest1034 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag88:                                            ; preds = %tag600
  br i1 %test2718, label %header-check-br1037, label %tag129

tag92:                                            ; preds = %tag484
  %84 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3878 = add i64 %84, -1081
  %85 = icmp ult i64 %.off3878, 69
  %.val3993 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val3994 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288295.0.pre = select i1 %85, {}* %.val3993, {}* %.val3994
  %86 = icmp eq {}* %G288295.0.pre, %95
  br i1 %86, label %header-check-br772, label %header-check-br3038

tag93:                                            ; preds = %header-check-br2026
  %87 = invoke double @from_object_double({}* nonnull %LAUF.0)
          to label %normal-dest1048 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag95:                                            ; preds = %tag176, %header-check-br2388, %header-check-br1262
  %G288201.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1262 ], [ %.3718, %header-check-br2388 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag176 ]
  %G288201.0 = load {}*, {}** %G288201.0.in, align 8
  %88 = icmp eq {}* %G288201.0, %G288249.0
  br i1 %88, label %tag552, label %tag408

tag96:                                            ; preds = %header-check-br2314, %normal-dest2612, %tag538, %normal-dest1897
  %.pre3950 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.val3853.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag604

tag100:                                           ; preds = %tag598
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %90 = icmp eq {}* %89, %466
  br i1 %90, label %tag688, label %tag319

tag104:                                           ; preds = %tag417
  br i1 %test2821, label %header-check-br1061, label %tag320

tag108:                                           ; preds = %normal-dest914, %tag578, %tag264
  %.pre39473970 = phi {}* [ %196, %tag264 ], [ %603, %normal-dest914 ], [ %.pre39473967, %tag578 ]
  %91 = phi {}* [ %196, %tag264 ], [ %603, %normal-dest914 ], [ %450, %tag578 ]
  %x.0 = phi {}* [ %196, %tag264 ], [ %G287700.0, %normal-dest914 ], [ %450, %tag578 ]
  %92 = ptrtoint {}* %x.0 to i64
  %tag-only10773293 = and i64 %92, 7
  %consp-test1078 = icmp eq i64 %tag-only10773293, 3
  br i1 %consp-test1078, label %tag497, label %tag44

tag109:                                           ; preds = %tag210
  br i1 %test2857, label %header-check-br1079, label %tag522

tag111:                                           ; preds = %normal-dest2589
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %94 = invoke {}* @cc_safe_fdefinition({}* %93)
          to label %normal-dest1089 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag113:                                           ; preds = %header-check-br2664, %normal-dest1402, %tag172
  %95 = phi {}* [ %.pre3947, %tag172 ], [ %687, %normal-dest1402 ], [ %.val3829, %header-check-br2664 ]
  %G288298.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag172 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest1402 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2664 ]
  %G288298.0 = load {}*, {}** %G288298.0.in, align 8
  %96 = icmp eq {}* %G288298.0, %95
  br i1 %96, label %tag716, label %tag484

tag115:                                           ; preds = %tag33
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %98 = invoke {}* @cc_safe_fdefinition({}* %97)
          to label %normal-dest1118 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag116:                                           ; preds = %normal-dest1751.tag116_crit_edge, %tag432
  %.val3859 = phi {}* [ %.val3859.pre, %tag432 ], [ %object1130.0.pre, %normal-dest1751.tag116_crit_edge ]
  %object1130.0 = phi {}* [ %.pre3956, %tag432 ], [ %object1130.0.pre, %normal-dest1751.tag116_crit_edge ]
  %99 = phi {}* [ %.pre3956, %tag432 ], [ %755, %normal-dest1751.tag116_crit_edge ]
  %100 = icmp eq {}* %object1130.0, %99
  %G287927.0 = select i1 %100, {}* %.val3859, {}* %99
  %101 = icmp eq {}* %G287927.0, %99
  br i1 %101, label %tag399, label %tag387

tag119:                                           ; preds = %tag522
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %103 = invoke {}* @cc_safe_fdefinition({}* %102)
          to label %normal-dest1133 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag122:                                           ; preds = %tag367
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %105 = invoke {}* @cc_safe_fdefinition({}* %104)
          to label %normal-dest1146 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag126:                                           ; preds = %tag460
  %106 = icmp sgt {}* %LAUF.0, inttoptr (i64 -1 to {}*)
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.3789 = select i1 %106, {}* %107, {}* %244
  br label %tag640

tag129:                                           ; preds = %header-check-br1037, %tag88
  %G288478.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag88 ], [ %.3675, %header-check-br1037 ]
  %G288478.0 = load {}*, {}** %G288478.0.in, align 8
  %108 = icmp eq {}* %G288478.0, %G288555.0
  br i1 %108, label %tag580, label %tag22

tag131:                                           ; preds = %tag68
  %109 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i32] }>*
  %110 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum1172" = lshr exact i64 %110, 2
  %aref1173 = getelementptr inbounds <{ [15 x i8], [0 x i32] }>, <{ [15 x i8], [0 x i32] }>* %109, i64 0, i32 1, i64 %"untagged fixnum1172"
  %111 = load i32, i32* %aref1173, align 4
  %112 = invoke {}* @to_object_uint32(i32 %111)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag137:                                           ; preds = %tag244
  %G288416.0 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %113 = icmp eq {}* %G288416.0, %333
  br i1 %113, label %tag427, label %tag9

tag138:                                           ; preds = %tag389
  br i1 %test2821, label %header-check-br1190, label %tag730

tag141:                                           ; preds = %tag68
  br i1 %test2718, label %header-check-br1197, label %tag262

tag146:                                           ; preds = %header-check-br796, %tag256
  %G288526.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag256 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br796 ]
  %G288526.0 = load {}*, {}** %G288526.0.in, align 8
  %114 = icmp eq {}* %G288526.0, %G288555.0
  br i1 %114, label %tag570, label %tag222

tag147:                                           ; preds = %normal-dest2805, %tag316
  %115 = invoke i64 @from_object_fixnum({}* %.in3353)
          to label %normal-dest1204 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag149:                                           ; preds = %tag263, %tag228, %tag223, %normal-dest2562, %normal-dest2003, %normal-dest769, %tag519, %tag462
  %116 = phi {}* [ %.pre3949, %tag462 ], [ %393, %tag519 ], [ %587, %normal-dest769 ], [ %805, %normal-dest2003 ], [ %916, %normal-dest2562 ], [ %159, %tag223 ], [ %161, %tag228 ], [ %159, %tag263 ]
  %object.0 = phi {}* [ %353, %tag462 ], [ %393, %tag519 ], [ %object.1, %normal-dest769 ], [ %object.2, %normal-dest2003 ], [ %object.3, %normal-dest2562 ], [ %159, %tag223 ], [ %161, %tag228 ], [ %.3792, %tag263 ]
  %117 = icmp eq {}* %object.0, %116
  %.val3830 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288146.0 = select i1 %117, {}* %.val3830, {}* %116
  %118 = icmp eq {}* %G288146.0, %116
  br i1 %118, label %tag279, label %tag361

tag150:                                           ; preds = %header-check-br3118, %normal-dest2927, %normal-dest1925, %tag28
  %.pre3958 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.val3865.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag698

tag153:                                           ; preds = %tag210
  %119 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)**, %"class.core::T_O"* (%"class.core::MDArray_O"*)*** %561, align 8, !tbaa !95
  %120 = getelementptr inbounds %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %119, i64 69
  %121 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %120, align 8
  %122 = call %"class.core::T_O"* %121(%"class.core::MDArray_O"* %560)
  %123 = bitcast %"class.core::T_O"* %122 to {}*
  br label %tag689

tag154:                                           ; preds = %tag452
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %125 = invoke {}* @cc_safe_fdefinition({}* %124)
          to label %normal-dest2994 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag157:                                           ; preds = %tag27
  br i1 %test2718, label %header-check-br1213, label %tag750

tag158:                                           ; preds = %header-check-br2818, %tag709
  %G288112.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag709 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2818 ]
  %G288112.0 = load {}*, {}** %G288112.0.in, align 8
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %127 = icmp eq {}* %G288112.0, %126
  br i1 %127, label %tag397, label %tag695

tag160:                                           ; preds = %header-check-br, %tag458
  %G288538.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag458 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br ]
  %G288538.0 = load {}*, {}** %G288538.0.in, align 8
  %128 = icmp eq {}* %G288538.0, %G288555.0
  br i1 %128, label %tag78, label %tag505

tag166:                                           ; preds = %tag330
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %130 = invoke {}* @cc_safe_fdefinition({}* %129)
          to label %normal-dest1227 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag167:                                           ; preds = %normal-dest2948
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %132 = invoke {}* @cc_safe_fdefinition({}* %131)
          to label %normal-dest1242 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag170:                                           ; preds = %tag317
  %ptrtoint1256 = ptrtoint {}* %.in3353 to i64
  %tag-only1257 = and i64 %ptrtoint1256, 7
  %test1258 = icmp eq i64 %tag-only1257, 1
  br i1 %test1258, label %header-check-br1255, label %tag83

tag172:                                           ; preds = %tag574, %header-check-br2595, %normal-dest1402
  %.pre3947 = phi {}* [ %.pre39473964, %tag574 ], [ %.pre39473964, %header-check-br2595 ], [ %687, %normal-dest1402 ]
  br label %tag113

tag174:                                           ; preds = %tag628
  %133 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)**, %"class.core::T_O"* (%"class.core::MDArray_O"*)*** %561, align 8, !tbaa !95
  %134 = getelementptr inbounds %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %133, i64 69
  %135 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %134, align 8
  %136 = call %"class.core::T_O"* %135(%"class.core::MDArray_O"* %560)
  %137 = bitcast %"class.core::T_O"* %136 to {}*
  br label %tag632

tag176:                                           ; preds = %tag56
  br i1 %test2857, label %header-check-br1262, label %tag95

tag178:                                           ; preds = %header-check-br1061, %tag320
  %G287873.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag320 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1061 ]
  %G287873.0 = load {}*, {}** %G287873.0.in, align 8
  %138 = icmp eq {}* %G287873.0, %G288112.0
  br i1 %138, label %tag312, label %tag718

tag180:                                           ; preds = %normal-dest1983.tag180_crit_edge, %tag717
  %.val3855 = phi {}* [ %.val3855.pre, %tag717 ], [ %object1254.0.pre, %normal-dest1983.tag180_crit_edge ]
  %object1254.0 = phi {}* [ %.pre3952, %tag717 ], [ %object1254.0.pre, %normal-dest1983.tag180_crit_edge ]
  %139 = phi {}* [ %.pre3952, %tag717 ], [ %802, %normal-dest1983.tag180_crit_edge ]
  %140 = icmp eq {}* %object1254.0, %139
  %G287967.0 = select i1 %140, {}* %.val3855, {}* %139
  %141 = icmp eq {}* %G287967.0, %139
  br i1 %141, label %tag403, label %tag649

tag182:                                           ; preds = %tag45
  %142 = ptrtoint {}* %OFFSET895.14003 to i64
  %fixnum-tag-only12723589 = and i64 %142, 3
  %fixnump-test1273 = icmp eq i64 %fixnum-tag-only12723589, 0
  br i1 %fixnump-test1273, label %tag367, label %tag712

tag187:                                           ; preds = %tag366
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %144 = invoke {}* @cc_safe_fdefinition({}* %143)
          to label %normal-dest1291 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag198:                                           ; preds = %header-check-br2523, %tag536
  %G288514.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag536 ], [ %.3702, %header-check-br2523 ]
  %G288514.0 = load {}*, {}** %G288514.0.in, align 8
  %145 = icmp eq {}* %G288514.0, %G288555.0
  br i1 %145, label %tag266, label %tag454

tag199:                                           ; preds = %tag44
  %146 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %147 = invoke {}* @cc_safe_fdefinition({}* %146)
          to label %normal-dest1339 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag201:                                           ; preds = %tag27
  %148 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i16] }>*
  %149 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum1352" = lshr exact i64 %149, 2
  %aref1353 = getelementptr inbounds <{ [15 x i8], [0 x i16] }>, <{ [15 x i8], [0 x i16] }>* %148, i64 0, i32 1, i64 %"untagged fixnum1352"
  %150 = load i16, i16* %aref1353, align 2
  %151 = invoke {}* @to_object_int16(i16 signext %150)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag205:                                           ; preds = %tag652
  %152 = invoke float @from_object_float({}* %LAUF.0)
          to label %normal-dest1356 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag207:                                           ; preds = %tag500
  br i1 %test2718, label %header-check-br1358, label %tag259

tag208:                                           ; preds = %tag448
  br i1 %fixnump-test1366, label %tag616, label %tag55

tag210:                                           ; preds = %tag484, %header-check-br2956, %header-check-br772
  %G288292.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br772 ], [ %.3721, %header-check-br2956 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag484 ]
  %G288292.0 = load {}*, {}** %G288292.0.in, align 8
  %153 = icmp eq {}* %G288292.0, %95
  br i1 %153, label %tag109, label %tag153

tag212:                                           ; preds = %header-check-br3089, %tag587
  %G288053.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag587 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br3089 ]
  %G288053.0 = load {}*, {}** %G288053.0.in, align 8
  %154 = icmp eq {}* %G288053.0, %G288112.0
  br i1 %154, label %tag396, label %tag680

tag222:                                           ; preds = %tag146
  %155 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i64] }>*
  %156 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum1391" = lshr exact i64 %156, 2
  %aref1392 = getelementptr inbounds <{ [15 x i8], [0 x i64] }>, <{ [15 x i8], [0 x i64] }>* %155, i64 0, i32 1, i64 %"untagged fixnum1391"
  %157 = load i64, i64* %aref1392, align 8
  %158 = invoke {}* @to_object_fixnum(i64 signext %157)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag223:                                           ; preds = %tag34, %normal-dest1507
  %159 = phi {}* [ %714, %normal-dest1507 ], [ %71, %tag34 ]
  %G288226.0 = phi {}* [ %G288226.1, %normal-dest1507 ], [ %.3786, %tag34 ]
  %160 = icmp eq {}* %G288226.0, %159
  br i1 %160, label %tag149, label %tag531

tag228:                                           ; preds = %tag400, %normal-dest3065
  %161 = phi {}* [ %1022, %normal-dest3065 ], [ %G288249.0, %tag400 ]
  %G288178.0 = phi {}* [ %G288178.1, %normal-dest3065 ], [ %.3793, %tag400 ]
  %162 = icmp eq {}* %G288178.0, %161
  br i1 %162, label %tag149, label %tag14

tag229:                                           ; preds = %header-check-br2233
  %163 = invoke double @from_object_double({}* nonnull %LAUF.0)
          to label %normal-dest1415 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag230:                                           ; preds = %tag441, %normal-dest2686
  %164 = phi {}* [ %947, %normal-dest2686 ], [ %G288692.0, %tag441 ]
  %G288621.0 = phi {}* [ %G288621.1, %normal-dest2686 ], [ %.3794, %tag441 ]
  %165 = icmp eq {}* %G288621.0, %164
  br i1 %165, label %tag357, label %tag452

tag235:                                           ; preds = %normal-dest1699
  %166 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %167 = invoke {}* @cc_safe_fdefinition({}* %166)
          to label %normal-dest1428 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag236:                                           ; preds = %tag604
  %168 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %169 = invoke {}* @cc_safe_fdefinition({}* %168)
          to label %normal-dest1442 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag239:                                           ; preds = %normal-dest3015.tag239_crit_edge, %header-check-br2486, %normal-dest2382, %tag676
  %.val3857 = phi {}* [ %.val3857.pre, %normal-dest3015.tag239_crit_edge ], [ %.val3991, %tag676 ], [ %.val3984, %normal-dest2382 ], [ %.val3991, %header-check-br2486 ]
  %170 = phi {}* [ %1014, %normal-dest3015.tag239_crit_edge ], [ %G288112.0, %tag676 ], [ %880, %normal-dest2382 ], [ %G288112.0, %header-check-br2486 ]
  %object1337.0 = phi {}* [ %1014, %normal-dest3015.tag239_crit_edge ], [ %G288112.0, %tag676 ], [ %object1337.0.pre, %normal-dest2382 ], [ %G288112.0, %header-check-br2486 ]
  %171 = icmp eq {}* %object1337.0, %170
  %G287947.0 = select i1 %171, {}* %.val3857, {}* %170
  %172 = icmp eq {}* %G287947.0, %170
  br i1 %172, label %tag576, label %tag453

tag242:                                           ; preds = %tag308, %header-check-br1931
  %173 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %174 = invoke {}* @cc_safe_fdefinition({}* %173)
          to label %normal-dest1464 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag243:                                           ; preds = %tag321
  %175 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x {}*] }>*
  %176 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum1477" = lshr exact i64 %176, 2
  %aref1478 = getelementptr inbounds <{ [15 x i8], [0 x {}*] }>, <{ [15 x i8], [0 x {}*] }>* %175, i64 0, i32 1, i64 %"untagged fixnum1477"
  %177 = load {}*, {}** %aref1478, align 8
  br label %tag264

tag244:                                           ; preds = %tag439
  %178 = ptrtoint {}* %G287700.0 to i64
  %tag-only14793279 = and i64 %178, 7
  %consp-test1480 = icmp eq i64 %tag-only14793279, 3
  br i1 %consp-test1480, label %tag137, label %tag550

tag245:                                           ; preds = %tag496, %header-check-br978, %header-check-br2410
  %G288644.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2410 ], [ %.3712, %header-check-br978 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag496 ]
  %G288644.0 = load {}*, {}** %G288644.0.in, align 8
  %179 = icmp eq {}* %G288644.0, %G288692.0
  br i1 %179, label %tag528, label %tag372

tag246:                                           ; preds = %normal-dest2755, %normal-dest3184
  %180 = invoke i8 @from_object_claspChar({}* %.in3353)
          to label %normal-dest1481 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag247:                                           ; preds = %tag569
  %181 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %182 = invoke {}* @cc_safe_fdefinition({}* %181)
          to label %normal-dest1485 unwind label %cleanup-lpad.loopexit

tag248:                                           ; preds = %tag711
  %183 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %184 = invoke {}* @cc_safe_fdefinition({}* %183)
          to label %normal-dest1500 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag249:                                           ; preds = %tag345
  %185 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %186 = invoke {}* @cc_safe_fdefinition({}* %185)
          to label %normal-dest1514 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

tag251:                                           ; preds = %tag282
  %187 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %188 = invoke {}* @cc_safe_fdefinition({}* %187)
          to label %normal-dest1528 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag255:                                           ; preds = %tag437
  %189 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %190 = invoke {}* @cc_safe_fdefinition({}* %189)
          to label %normal-dest1542 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag256:                                           ; preds = %header-check-br796, %tag23
  br label %tag146

tag258:                                           ; preds = %tag616
  %191 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag16

tag259:                                           ; preds = %header-check-br1358, %tag207
  %G288544.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag207 ], [ %.3680, %header-check-br1358 ]
  %G288544.0 = load {}*, {}** %G288544.0.in, align 8
  %192 = icmp eq {}* %G288544.0, %G288555.0
  br i1 %192, label %tag4, label %tag378

tag260:                                           ; preds = %tag346
  %.old3790 = and i64 %ptrtoint1911, 3
  %fixnump-test1555.old = icmp eq i64 %.old3790, 0
  br i1 %fixnump-test1555.old, label %tag35, label %tag64

tag262:                                           ; preds = %header-check-br1197, %tag141
  br label %tag600

tag263:                                           ; preds = %tag531
  %193 = icmp sgt i64 %"tag fixnum2515", %338
  %194 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.3792 = select i1 %193, {}* %194, {}* %159
  br label %tag149

tag264:                                           ; preds = %tag353, %tag697, %normal-dest3029, %tag563, %tag539, %tag505, %tag454, %normal-dest2142, %tag378, %normal-dest1870, %tag332, %normal-dest1783, %tag307, %tag222, %tag201, %tag131, %tag26, %tag22, %tag567, %tag352, %tag243
  %ELEMENT.0 = phi {}* [ %bit-aref-result, %tag352 ], [ %177, %tag243 ], [ %442, %tag567 ], [ %26, %tag22 ], [ %32, %tag26 ], [ %112, %tag131 ], [ %151, %tag201 ], [ %158, %tag222 ], [ %228, %tag307 ], [ %ELEMENT.1, %normal-dest1783 ], [ %249, %tag332 ], [ %ELEMENT.2, %normal-dest1870 ], [ %303, %tag378 ], [ %ELEMENT.3, %normal-dest2142 ], [ %350, %tag454 ], [ %383, %tag505 ], [ %420, %tag539 ], [ %439, %tag563 ], [ %ELEMENT.4, %normal-dest3029 ], [ %540, %tag697 ], [ %867, %tag353 ]
  %195 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 100), align 16
  %196 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %197 = icmp eq {}* %578, %196
  %.val38203926 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object1313.03927 = select i1 %197, {}* %.val38203926, {}* %196
  %198 = icmp eq {}* %object1313.03927, %196
  %G288359.03928 = select i1 %198, {}* %.val38203926, {}* %196
  %199 = icmp eq {}* %G288359.03928, %196
  br i1 %199, label %tag108, label %tag304.lr.ph

tag304.lr.ph:                                     ; preds = %tag264
  %ptrtoint1728 = ptrtoint {}* %195 to i64
  %tag-only1729 = and i64 %ptrtoint1728, 7
  %test1730 = icmp eq i64 %tag-only1729, 1
  %irc-bit-cast1731 = bitcast {}* %195 to i8*
  %gep1732 = getelementptr inbounds i8, i8* %irc-bit-cast1731, i64 -9
  %irc-bit-cast1733 = bitcast i8* %gep1732 to i64*
  br label %tag304

tag265:                                           ; preds = %tag601
  %200 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %201 = invoke {}* @cc_safe_fdefinition({}* %200)
          to label %normal-dest1559 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag266:                                           ; preds = %tag198
  br i1 %test2718, label %header-check-br1571, label %tag502

tag269:                                           ; preds = %tag598
  br i1 %test2857, label %tag696, label %tag628

tag271:                                           ; preds = %tag544
  %202 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %338, i64 4)
  %result1372 = extractvalue { i64, i1 } %202, 0
  %overflow1373 = extractvalue { i64, i1 } %202, 1
  %203 = inttoptr i64 %result1372 to {}*
  br i1 %overflow1373, label %tag729, label %tag448.backedge

tag448.backedge:                                  ; preds = %tag271, %normal-dest2128, %normal-dest3138
  %LAUF.0.be = phi {}* [ %LAUF.2, %normal-dest3138 ], [ %LAUF.1, %normal-dest2128 ], [ %203, %tag271 ]
  br label %tag448

tag274:                                           ; preds = %tag58
  %204 = add i64 %73, -3
  %205 = inttoptr i64 %204 to {}**
  %206 = load {}*, {}** %205, align 8
  br label %tag364

tag276:                                           ; preds = %tag32
  br i1 %test2821, label %header-check-br1604, label %tag417

tag279:                                           ; preds = %normal-dest1953, %tag149
  br i1 %fixnump-test2230, label %tag583, label %tag581

tag282:                                           ; preds = %tag12
  %207 = icmp eq {}* %vaarg, %.val3902
  %.val3901 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288775.0 = select i1 %207, {}* %.val3901, {}* %.val3902
  %208 = icmp eq {}* %G288775.0, %.val3902
  br i1 %208, label %tag251, label %tag736

tag286:                                           ; preds = %tag627
  %209 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %210 = invoke {}* @cc_safe_fdefinition({}* %209)
          to label %normal-dest1632 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

tag288:                                           ; preds = %normal-dest2904
  %211 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 791), align 8
  %212 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %213 = invoke {}* @cc_safe_fdefinition({}* %212)
          to label %normal-dest1646 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag289:                                           ; preds = %tag16
  %214 = icmp eq {}* %vaarg, %21
  %brmerge = or i1 %consp-test, %214
  %.val3816 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288767.0 = select i1 %brmerge, {}* %.val3816, {}* %21
  %215 = icmp eq {}* %G288767.0, %21
  br i1 %215, label %tag643, label %tag455

tag290:                                           ; preds = %tag628
  br i1 %test2857, label %header-check-br1661, label %tag366

tag292:                                           ; preds = %tag526
  %216 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %217 = invoke {}* @cc_safe_fdefinition({}* %216)
          to label %normal-dest1671 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

tag296:                                           ; preds = %tag448
  %trunc = trunc i64 %338 to i3
  switch i3 %trunc, label %tag55 [
    i3 -2, label %tag652
    i3 1, label %header-check-br786
  ]

tag297:                                           ; preds = %tag304
  %218 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %219 = invoke {}* @cc_safe_fdefinition({}* %218)
          to label %normal-dest1690 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag298:                                           ; preds = %tag456, %header-check-br2217
  %220 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %221 = invoke {}* @cc_safe_fdefinition({}* %220)
          to label %normal-dest1692 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag304:                                           ; preds = %tag304.lr.ph, %tag578
  %.pre39473969 = phi {}* [ %196, %tag304.lr.ph ], [ %.pre39473967, %tag578 ]
  %G288437.0 = phi {}* [ %.val38203926, %tag304.lr.ph ], [ %.val3820, %tag578 ]
  %222 = phi i1 [ %198, %tag304.lr.ph ], [ %455, %tag578 ]
  %223 = phi {}* [ %196, %tag304.lr.ph ], [ %450, %tag578 ]
  %"%SUBLIST287693.03929" = phi {}* [ %578, %tag304.lr.ph ], [ %453, %tag578 ]
  %224 = ptrtoint {}* %"%SUBLIST287693.03929" to i64
  %tag-only17223273 = and i64 %224, 7
  %consp-test1723 = icmp eq i64 %tag-only17223273, 3
  br i1 %consp-test1723, label %tag546, label %tag297

tag307:                                           ; preds = %tag675
  %225 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i64] }>*
  %226 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum1724" = lshr exact i64 %226, 2
  %aref1725 = getelementptr inbounds <{ [15 x i8], [0 x i64] }>, <{ [15 x i8], [0 x i64] }>* %225, i64 0, i32 1, i64 %"untagged fixnum1724"
  %227 = load i64, i64* %aref1725, align 8
  %228 = invoke {}* @to_object_uint64(i64 %227)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag308:                                           ; preds = %normal-dest2205, %tag9
  %G287701.0 = phi {}* [ %14, %tag9 ], [ %G287701.1, %normal-dest2205 ]
  br i1 %test1730, label %header-check-br1727, label %tag242

tag312:                                           ; preds = %tag178
  br i1 %test2821, label %tag370, label %tag733

tag313:                                           ; preds = %normal-dest3170
  %229 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %230 = invoke {}* @cc_safe_fdefinition({}* %229)
          to label %normal-dest1744 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag316:                                           ; preds = %tag730
  %231 = ptrtoint {}* %.in3353 to i64
  %fixnum-tag-only17653358 = and i64 %231, 3
  %fixnump-test1766 = icmp eq i64 %fixnum-tag-only17653358, 0
  %.val3849 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object1903.0 = select i1 %fixnump-test1766, {}* %.val3849, {}* %G288112.0
  %232 = icmp eq {}* %object1903.0, %G288112.0
  %G288007.0 = select i1 %232, {}* %.val3849, {}* %G288112.0
  %233 = icmp eq {}* %G288007.0, %G288112.0
  br i1 %233, label %tag147, label %tag629

tag317:                                           ; preds = %tag81
  %irc-bit-cast1029 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep1030 = getelementptr inbounds i8, i8* %irc-bit-cast1029, i64 -9
  %irc-bit-cast1031 = bitcast i8* %gep1030 to i64*
  %234 = load i64, i64* %irc-bit-cast1031, align 8
  %235 = icmp eq i64 %234, 1101
  %.val3991 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287973.0.pre = select i1 %235, {}* %.val3991, {}* %G288112.0
  %236 = icmp eq {}* %G287973.0.pre, %G288112.0
  br i1 %236, label %tag607, label %tag170

tag319:                                           ; preds = %tag100
  %237 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %238 = invoke {}* @cc_safe_fdefinition({}* %237)
          to label %normal-dest1776 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag320:                                           ; preds = %header-check-br1061, %tag104
  br label %tag178

tag321:                                           ; preds = %header-check-br2715, %tag540
  %G288555.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag540 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2715 ]
  %G288555.0 = load {}*, {}** %G288555.0.in, align 8
  %239 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %240 = icmp eq {}* %G288555.0, %239
  br i1 %240, label %tag644, label %tag243

tag323:                                           ; preds = %tag479
  %241 = invoke float @from_object_float({}* %LAUF.0)
          to label %normal-dest1789 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag324:                                           ; preds = %tag716
  %242 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %243 = invoke {}* @cc_safe_fdefinition({}* %242)
          to label %normal-dest1793 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag326:                                           ; preds = %header-check-br2827, %tag632
  %UNDERLYING-ARRAY892.14005 = phi {}* [ %UNDERLYING-ARRAY892.1, %tag632 ], [ %UNDERLYING-ARRAY892.14006, %header-check-br2827 ]
  %OFFSET895.14003 = phi {}* [ %OFFSET895.1, %tag632 ], [ %OFFSET895.14004, %header-check-br2827 ]
  %G288692.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag632 ], [ %.3720, %header-check-br2827 ]
  %G288692.0 = load {}*, {}** %G288692.0.in, align 8
  %244 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %245 = icmp eq {}* %G288692.0, %244
  br i1 %245, label %tag496, label %tag460

tag327:                                           ; preds = %header-check-br2978, %tag680
  br label %tag437

tag330:                                           ; preds = %tag546
  br i1 %222, label %tag166, label %tag578

tag332:                                           ; preds = %tag600
  %246 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i16] }>*
  %247 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum1812" = lshr exact i64 %247, 2
  %aref1813 = getelementptr inbounds <{ [15 x i8], [0 x i16] }>, <{ [15 x i8], [0 x i16] }>* %246, i64 0, i32 1, i64 %"untagged fixnum1812"
  %248 = load i16, i16* %aref1813, align 2
  %249 = invoke {}* @to_object_uint16(i16 %248)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag339:                                           ; preds = %tag345, %normal-dest1521, %tag75
  %.val3815 = phi {}* [ %.val3813.pre, %tag75 ], [ %720, %normal-dest1521 ], [ %259, %tag345 ]
  %G2095854.0 = phi {}* [ %82, %tag75 ], [ %G2095854.1, %normal-dest1521 ], [ %259, %tag345 ]
  %250 = ptrtoint {}* %G2095854.0 to i64
  %tag-only18333254 = and i64 %250, 7
  %consp-test1834 = icmp eq i64 %tag-only18333254, 3
  %.val3812 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288816.0 = select i1 %consp-test1834, {}* %.val3812, {}* %.val3815
  %251 = icmp eq {}* %G288816.0, %.val3815
  br i1 %251, label %tag39, label %tag627

tag341:                                           ; preds = %tag507
  %252 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 717), align 8
  %253 = invoke {}* @cc_safe_fdefinition({}* %252)
          to label %normal-dest1836 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag342:                                           ; preds = %tag357
  %254 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %255 = invoke {}* @cc_safe_fdefinition({}* %254)
          to label %normal-dest1877 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag343:                                           ; preds = %tag538, %header-check-br2314
  %256 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 783), align 8
  %257 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %258 = invoke {}* @cc_safe_fdefinition({}* %257)
          to label %normal-dest1890 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag345:                                           ; preds = %tag491
  %259 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %260 = icmp eq {}* %SEQUENCE756.0.ph, %259
  %.val3810 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288828.0 = select i1 %260, {}* %.val3810, {}* %259
  %261 = icmp eq {}* %G288828.0, %259
  br i1 %261, label %tag249, label %tag339

tag346:                                           ; preds = %tag601
  %ptrtoint1911 = ptrtoint {}* %.in3353 to i64
  %tag-only1912 = and i64 %ptrtoint1911, 7
  %test1913 = icmp eq i64 %tag-only1912, 1
  br i1 %test1913, label %header-check-br1910, label %tag260

tag348:                                           ; preds = %header-check-br3118, %tag28
  %262 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %263 = invoke {}* @cc_safe_fdefinition({}* %262)
          to label %normal-dest1918 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag352:                                           ; preds = %tag507
  %variable-offset = ptrtoint {}* %index1155.0 to i64
  %untagged-offset = lshr exact i64 %variable-offset, 2
  %264 = add i64 %ptrtoint2716, -1
  %265 = inttoptr i64 %264 to %"class.core::SimpleBitVector_O"*
  %266 = lshr i64 %variable-offset, 7
  %267 = trunc i64 %untagged-offset to i32
  %268 = and i32 %267, 31
  %269 = xor i32 %268, 31
  %270 = shl i32 1, %269
  %271 = getelementptr inbounds %"class.core::SimpleBitVector_O", %"class.core::SimpleBitVector_O"* %265, i64 0, i32 1, i32 1, i64 %266
  %272 = load i32, i32* %271, align 4, !tbaa !97
  %273 = and i32 %272, %270
  %274 = lshr i32 %273, %269
  %tagged-bit = shl nuw i32 %274, 2
  %275 = zext i32 %tagged-bit to i64
  %bit-aref-result = inttoptr i64 %275 to {}*
  br label %tag264

tag353:                                           ; preds = %normal-dest2272
  %276 = icmp eq {}* %x2273.0, %867
  %G288752.0 = select i1 %276, {}* %.val3818, {}* %867
  %277 = icmp eq {}* %G288752.0, %867
  br i1 %277, label %tag411, label %tag264

tag357:                                           ; preds = %tag694, %tag230, %tag640, %normal-dest3001, %normal-dest2507, %normal-dest1284, %tag706, %tag691
  %278 = phi {}* [ %.pre3944, %tag706 ], [ %529, %tag691 ], [ %669, %normal-dest1284 ], [ %904, %normal-dest2507 ], [ %1012, %normal-dest3001 ], [ %497, %tag640 ], [ %164, %tag230 ], [ %497, %tag694 ]
  %object839.0 = phi {}* [ %547, %tag706 ], [ %529, %tag691 ], [ %object839.1, %normal-dest1284 ], [ %object839.2, %normal-dest2507 ], [ %object839.3, %normal-dest3001 ], [ %497, %tag640 ], [ %164, %tag230 ], [ %.3805, %tag694 ]
  %279 = icmp eq {}* %object839.0, %278
  %.val3887 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288589.0 = select i1 %279, {}* %.val3887, {}* %278
  %280 = icmp eq {}* %G288589.0, %278
  br i1 %280, label %tag45, label %tag342

tag361:                                           ; preds = %tag149
  %281 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %282 = invoke {}* @cc_safe_fdefinition({}* %281)
          to label %normal-dest1953 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag364:                                           ; preds = %normal-dest2468, %tag274
  %.pre39473964 = phi {}* [ %.pre39473965, %tag274 ], [ %898, %normal-dest2468 ]
  %.val3829 = phi {}* [ %.val3882, %tag274 ], [ %898, %normal-dest2468 ]
  %.in3353 = phi {}* [ %206, %tag274 ], [ %.in, %normal-dest2468 ]
  %283 = bitcast {}* %.in3353 to i8*
  %284 = icmp eq {}* %.in3353, %.val3829
  br i1 %284, label %tag544, label %tag690

tag365:                                           ; preds = %tag624
  %ptrtoint1967 = ptrtoint {}* %.in3353 to i64
  %tag-only1968 = and i64 %ptrtoint1967, 7
  %test1969 = icmp eq i64 %tag-only1968, 1
  br i1 %test1969, label %header-check-br1966, label %tag636

tag366:                                           ; preds = %tag290, %header-check-br1822, %header-check-br1661
  %G288731.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1661 ], [ %.3715, %header-check-br1822 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag290 ]
  %G288731.0 = load {}*, {}** %G288731.0.in, align 8
  %285 = icmp eq {}* %G288731.0, %466
  br i1 %285, label %tag187, label %tag526.preheader

tag526.preheader:                                 ; preds = %tag366
  br label %tag526

tag367:                                           ; preds = %tag182
  %286 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %338, i64 %142)
  %result1973 = extractvalue { i64, i1 } %286, 0
  %overflow1974 = extractvalue { i64, i1 } %286, 1
  %287 = inttoptr i64 %result1973 to {}*
  br i1 %overflow1974, label %tag122, label %tag589

tag368:                                           ; preds = %normal-dest1357
  %288 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag16

tag369:                                           ; preds = %header-check-br1213, %tag750
  %G288502.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag750 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1213 ]
  %G288502.0 = load {}*, {}** %G288502.0.in, align 8
  %289 = icmp eq {}* %G288502.0, %G288555.0
  br i1 %289, label %tag383, label %tag539

tag370:                                           ; preds = %tag312
  %irc-bit-cast1740 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep1741 = getelementptr inbounds i8, i8* %irc-bit-cast1740, i64 -9
  %irc-bit-cast1742 = bitcast i8* %gep1741 to i64*
  %290 = load i64, i64* %irc-bit-cast1742, align 8
  %291 = icmp eq i64 %290, 1089
  %.val3985 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G287853.0.pre = select i1 %291, {}* %.val3985, {}* %G288112.0
  %292 = icmp eq {}* %G287853.0.pre, %G288112.0
  br i1 %292, label %header-check-br3154, label %tag492

tag371:                                           ; preds = %normal-dest1002
  %293 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %294 = invoke {}* @cc_safe_fdefinition({}* %293)
          to label %normal-dest1976 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag372:                                           ; preds = %tag245
  br i1 %fixnump-test2230, label %tag441, label %tag579

tag373:                                           ; preds = %header-check-br961, %tag482
  %G287993.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag482 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br961 ]
  %G287993.0 = load {}*, {}** %G287993.0.in, align 8
  %295 = icmp eq {}* %G287993.0, %G288112.0
  br i1 %295, label %tag81, label %tag474

tag374:                                           ; preds = %tag12
  %296 = add i64 %579, 7
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297, align 8
  %"tag fixnum" = shl nuw i64 %298, 2
  %299 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag736

tag378:                                           ; preds = %tag259
  %300 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i32] }>*
  %301 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum2009" = lshr exact i64 %301, 2
  %aref2010 = getelementptr inbounds <{ [15 x i8], [0 x i32] }>, <{ [15 x i8], [0 x i32] }>* %300, i64 0, i32 1, i64 %"untagged fixnum2009"
  %302 = load i32, i32* %aref2010, align 4
  %303 = invoke {}* @to_object_claspCharacter(i32 %302)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag381:                                           ; preds = %header-check-br2019
  %ptrtoint2027 = ptrtoint {}* %OFFSET.13999 to i64
  %tag-only2028 = and i64 %ptrtoint2027, 7
  %test2029 = icmp eq i64 %tag-only2028, 1
  br i1 %test2029, label %header-check-br2026, label %tag424

tag382:                                           ; preds = %tag64
  %304 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %305 = invoke {}* @cc_safe_fdefinition({}* %304)
          to label %normal-dest2034 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag383:                                           ; preds = %tag369
  br i1 %test2718, label %header-check-br2046, label %tag675

tag385:                                           ; preds = %tag581
  %306 = ptrtoint {}* %OFFSET.13999 to i64
  %single-float-tag-only2053 = and i64 %306, 7
  %307 = icmp eq i64 %single-float-tag-only2053, 6
  br i1 %307, label %tag2, label %tag424

tag387:                                           ; preds = %tag116
  %308 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %309 = invoke {}* @cc_safe_fdefinition({}* %308)
          to label %normal-dest2055 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag389:                                           ; preds = %header-check-br2079, %tag396
  %G288033.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag396 ], [ %.3692, %header-check-br2079 ]
  %G288033.0 = load {}*, {}** %G288033.0.in, align 8
  %310 = icmp eq {}* %G288033.0, %G288112.0
  br i1 %310, label %tag138, label %tag739

tag393:                                           ; preds = %normal-dest2703, %tag739
  %311 = invoke float @from_object_float({}* %.in3353)
          to label %normal-dest2070 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag396:                                           ; preds = %tag212
  br i1 %test2821, label %header-check-br2079, label %tag389

tag397:                                           ; preds = %tag158
  br i1 %test2821, label %header-check-br2086, label %tag606

tag399:                                           ; preds = %normal-dest2055, %tag116
  %312 = invoke i8 @from_object_int8({}* %.in3353)
          to label %normal-dest2093 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag400:                                           ; preds = %tag408
  %313 = icmp sgt {}* %LAUF.0, inttoptr (i64 -1 to {}*)
  %314 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.3793 = select i1 %313, {}* %314, {}* %G288249.0
  br label %tag228

tag403:                                           ; preds = %normal-dest2879, %tag180
  %315 = invoke i32 @from_object_int32({}* %.in3353)
          to label %normal-dest2096 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag405:                                           ; preds = %tag531
  %316 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %317 = invoke {}* @cc_safe_fdefinition({}* %316)
          to label %normal-dest1996 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag406:                                           ; preds = %header-check-br2400, %normal-dest2589, %tag514, %normal-dest1096
  %.pre3960 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.val3867.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag638

tag408:                                           ; preds = %tag95
  br i1 %fixnump-test2230, label %tag400, label %tag699

tag411:                                           ; preds = %tag353
  %318 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %319 = invoke {}* @cc_safe_fdefinition({}* %318)
          to label %normal-dest2135 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag414:                                           ; preds = %tag39
  %320 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %321 = invoke {}* @cc_safe_fdefinition({}* %320)
          to label %normal-dest2152 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

tag417:                                           ; preds = %header-check-br1604, %tag276
  %G287893.0 = phi {}* [ %object840.04060, %tag276 ], [ %G287893.0.pre, %header-check-br1604 ]
  %322 = icmp eq {}* %G287893.0, %G288112.0
  br i1 %322, label %tag104, label %tag444

tag421:                                           ; preds = %normal-dest1680, %normal-dest879, %tag720
  %G68587.0 = phi {}* [ %553, %tag720 ], [ %G68587.1, %normal-dest879 ], [ %G68587.2, %normal-dest1680 ]
  %ptrtoint2172 = ptrtoint %"class.core::T_O"* %402 to i64
  %tag-only2173 = and i64 %ptrtoint2172, 7
  %test2174 = icmp eq i64 %tag-only2173, 1
  br i1 %test2174, label %header-check-br2171, label %tag656

tag424:                                           ; preds = %tag581, %tag583, %tag385, %header-check-br2026, %tag381, %header-check-br2019
  %323 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %324 = invoke {}* @cc_safe_fdefinition({}* %323)
          to label %normal-dest2183 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag425:                                           ; preds = %tag481, %header-check-br2298, %normal-dest2107
  %.pre = phi {}* [ %.val3809, %tag481 ], [ %.val3809, %header-check-br2298 ], [ %833, %normal-dest2107 ]
  br label %tag12

tag427:                                           ; preds = %tag137
  %325 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %326 = invoke {}* @cc_safe_fdefinition({}* %325)
          to label %normal-dest2198 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

tag432:                                           ; preds = %header-check-br1966, %normal-dest3170, %tag636, %normal-dest1751
  %.pre3956 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.val3859.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag116

tag491.outer:                                     ; preds = %tag491.outer.backedge, %tag491.outer.preheader
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag491.outer.preheader ], [ %LENGTH.0.ph.be, %tag491.outer.backedge ]
  %SEQUENCE756.0.ph = phi {}* [ %vaarg, %tag491.outer.preheader ], [ %G2095854.0, %tag491.outer.backedge ]
  %327 = ptrtoint {}* %SEQUENCE756.0.ph to i64
  %tag-only23983253 = and i64 %327, 7
  %consp-test2399 = icmp eq i64 %tag-only23983253, 3
  %328 = add i64 %327, 5
  %329 = inttoptr i64 %328 to {}**
  br label %tag491

tag436:                                           ; preds = %header-check-br2631, %tag570
  %G288520.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag570 ], [ %.3704, %header-check-br2631 ]
  %G288520.0 = load {}*, {}** %G288520.0.in, align 8
  %330 = icmp eq {}* %G288520.0, %G288555.0
  br i1 %330, label %tag536, label %tag563

tag437:                                           ; preds = %header-check-br2978, %tag327
  %object1686.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag327 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2978 ]
  %object1686.0 = load {}*, {}** %object1686.0.in, align 8
  %331 = icmp eq {}* %object1686.0, %G288112.0
  %.val3843 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288047.0 = select i1 %331, {}* %.val3843, {}* %G288112.0
  %332 = icmp eq {}* %G288047.0, %G288112.0
  br i1 %332, label %tag560, label %tag255

tag439:                                           ; preds = %normal-dest1235, %tag622
  %.pre39473968 = phi {}* [ %.pre39473969, %tag622 ], [ %658, %normal-dest1235 ]
  %333 = phi {}* [ %223, %tag622 ], [ %658, %normal-dest1235 ]
  %G287700.0 = phi {}* [ %487, %tag622 ], [ %G287700.1, %normal-dest1235 ]
  %334 = icmp eq {}* %G287700.0, %333
  br i1 %334, label %tag578, label %tag244

tag440:                                           ; preds = %header-check-br2086, %tag606
  %G288093.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag606 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2086 ]
  %G288093.0 = load {}*, {}** %G288093.0.in, align 8
  %335 = icmp eq {}* %G288093.0, %G288112.0
  br i1 %335, label %tag614, label %tag743

tag441:                                           ; preds = %tag372
  %336 = icmp sgt {}* %LAUF.0, inttoptr (i64 -1 to {}*)
  %337 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.3794 = select i1 %336, {}* %337, {}* %G288692.0
  br label %tag230

tag444:                                           ; preds = %tag417
  %ptrtoint2218 = ptrtoint {}* %.in3353 to i64
  %tag-only2219 = and i64 %ptrtoint2218, 7
  %test2220 = icmp eq i64 %tag-only2219, 1
  br i1 %test2220, label %header-check-br2217, label %tag456

tag448:                                           ; preds = %tag448.backedge, %tag736
  %LAUF.0 = phi {}* [ null, %tag736 ], [ %LAUF.0.be, %tag448.backedge ]
  %338 = ptrtoint {}* %LAUF.0 to i64
  %fixnum-tag-only22293262 = and i64 %338, 3
  %fixnump-test2230 = icmp eq i64 %fixnum-tag-only22293262, 0
  br i1 %fixnump-test2230, label %tag208, label %tag296

tag449:                                           ; preds = %header-check-br3072
  %339 = invoke double @from_object_double({}* nonnull %LAUF.0)
          to label %normal-dest2231 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag450:                                           ; preds = %header-check-br2870
  %ptrtoint2234 = ptrtoint {}* %OFFSET895.14003 to i64
  %tag-only2235 = and i64 %ptrtoint2234, 7
  %test2236 = icmp eq i64 %tag-only2235, 1
  br i1 %test2236, label %header-check-br2233, label %tag712

tag452:                                           ; preds = %tag230
  %340 = load i64 (%"class.core::MDArray_O"*)**, i64 (%"class.core::MDArray_O"*)*** %562, align 8, !tbaa !95
  %341 = getelementptr inbounds i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %340, i64 42
  %342 = load i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %341, align 8
  %343 = call i64 %342(%"class.core::MDArray_O"* %560)
  %fixnum2245 = shl nuw i64 %343, 2
  %344 = inttoptr i64 %fixnum2245 to {}*
  br i1 %fixnump-test2230, label %tag594, label %tag154

tag453:                                           ; preds = %tag239
  %345 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %346 = invoke {}* @cc_safe_fdefinition({}* %345)
          to label %normal-dest2249 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag454:                                           ; preds = %tag198
  %347 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i32] }>*
  %348 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum2261" = lshr exact i64 %348, 2
  %aref2262 = getelementptr inbounds <{ [15 x i8], [0 x i32] }>, <{ [15 x i8], [0 x i32] }>* %347, i64 0, i32 1, i64 %"untagged fixnum2261"
  %349 = load i32, i32* %aref2262, align 4
  %350 = invoke {}* @to_object_int32(i32 signext %349)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag455:                                           ; preds = %tag289
  %351 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 723), align 8
  %352 = invoke {}* @cc_safe_fdefinition({}* %351)
          to label %normal-dest2265 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag456:                                           ; preds = %tag444
  %.old3795 = and i64 %ptrtoint2218, 3
  %fixnump-test2284.old = icmp eq i64 %.old3795, 0
  br i1 %fixnump-test2284.old, label %tag298, label %tag613

tag458:                                           ; preds = %header-check-br, %tag4
  br label %tag160

tag460:                                           ; preds = %tag326
  br i1 %fixnump-test2230, label %tag126, label %tag642

tag462:                                           ; preds = %tag655
  %353 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.pre3949 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag149

tag466:                                           ; preds = %normal-dest2034, %tag64
  %variable-offset2290 = ptrtoint {}* %index.0 to i64
  %untagged-offset2291 = lshr exact i64 %variable-offset2290, 2
  %354 = trunc i64 %ptrtoint1911 to i32
  %untagged-value = lshr exact i32 %354, 2
  %355 = add i64 %ptrtoint2819, -1
  %356 = inttoptr i64 %355 to %"class.core::SimpleBitVector_O"*
  %357 = lshr i64 %variable-offset2290, 7
  %358 = trunc i64 %untagged-offset2291 to i32
  %359 = and i32 %358, 31
  %360 = xor i32 %359, 31
  %361 = shl i32 1, %360
  %362 = xor i32 %361, -1
  %363 = shl i32 %untagged-value, %360
  %364 = getelementptr inbounds %"class.core::SimpleBitVector_O", %"class.core::SimpleBitVector_O"* %356, i64 0, i32 1, i32 1, i64 %357
  %365 = load i32, i32* %364, align 4, !tbaa !97
  %366 = and i32 %365, %362
  %367 = or i32 %366, %363
  store i32 %367, i32* %364, align 4, !tbaa !97
  br label %tag544

tag470:                                           ; preds = %tag627
  %368 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %490, i64 4)
  %result = extractvalue { i64, i1 } %368, 0
  %overflow = extractvalue { i64, i1 } %368, 1
  %369 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag512, label %tag491.outer.backedge

tag491.outer.backedge:                            ; preds = %tag470, %normal-dest2454, %normal-dest1639
  %LENGTH.0.ph.be = phi {}* [ %LENGTH.1, %normal-dest1639 ], [ %LENGTH.2, %normal-dest2454 ], [ %369, %tag470 ]
  br label %tag491.outer

tag474:                                           ; preds = %tag373
  %ptrtoint2315 = ptrtoint {}* %.in3353 to i64
  %tag-only2316 = and i64 %ptrtoint2315, 7
  %test2317 = icmp eq i64 %tag-only2316, 1
  br i1 %test2317, label %header-check-br2314, label %tag538

tag475:                                           ; preds = %tag643, %header-check-br1418, %normal-dest1385
  %.pre3942 = phi {}* [ %21, %tag643 ], [ %21, %header-check-br1418 ], [ %684, %normal-dest1385 ]
  br label %tag598

tag479:                                           ; preds = %tag577
  %370 = ptrtoint {}* %OFFSET895.14003 to i64
  %single-float-tag-only2337 = and i64 %370, 7
  %371 = icmp eq i64 %single-float-tag-only2337, 6
  br i1 %371, label %tag323, label %tag712

tag480:                                           ; preds = %tag619
  %372 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %373 = invoke {}* @cc_safe_fdefinition({}* %372)
          to label %normal-dest2339 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag481:                                           ; preds = %continue
  %test2355 = icmp eq i64 %tag-only3252, 1
  br i1 %test2355, label %header-check-br2352, label %tag425

tag482:                                           ; preds = %header-check-br961, %tag62
  br label %tag373

tag484:                                           ; preds = %tag113
  br i1 %test2857, label %tag92, label %tag210

tag487:                                           ; preds = %header-check-br2692, %tag580
  br label %tag507

tag489:                                           ; preds = %normal-dest3015
  %374 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %375 = invoke {}* @cc_safe_fdefinition({}* %374)
          to label %normal-dest2375 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag491:                                           ; preds = %normal-dest2152, %tag491.outer
  br i1 %consp-test2399, label %tag75, label %tag345

tag492:                                           ; preds = %tag370
  %ptrtoint2401 = ptrtoint {}* %.in3353 to i64
  %tag-only2402 = and i64 %ptrtoint2401, 7
  %test2403 = icmp eq i64 %tag-only2402, 1
  br i1 %test2403, label %header-check-br2400, label %tag514

tag493:                                           ; preds = %header-check-br2863, %tag644
  br label %tag500

tag496:                                           ; preds = %tag326
  br i1 %test2857, label %header-check-br2410, label %tag245

tag497:                                           ; preds = %tag108
  %376 = add i64 %92, 5
  %377 = inttoptr i64 %376 to {}**
  %378 = load {}*, {}** %377, align 8
  br label %tag58

tag500:                                           ; preds = %header-check-br2863, %tag493
  %G288550.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag493 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2863 ]
  %G288550.0 = load {}*, {}** %G288550.0.in, align 8
  %379 = icmp eq {}* %G288550.0, %G288555.0
  br i1 %379, label %tag207, label %tag26

tag502:                                           ; preds = %header-check-br1571, %tag266
  br label %tag27

tag505:                                           ; preds = %tag160
  %380 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x double] }>*
  %381 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum2427" = lshr exact i64 %381, 2
  %aref2428 = getelementptr inbounds <{ [15 x i8], [0 x double] }>, <{ [15 x i8], [0 x double] }>* %380, i64 0, i32 1, i64 %"untagged fixnum2427"
  %382 = load double, double* %aref2428, align 8
  %383 = invoke {}* @to_object_double(double %382)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag507:                                           ; preds = %header-check-br2692, %tag487
  %G288472.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag487 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2692 ]
  %G288472.0 = load {}*, {}** %G288472.0.in, align 8
  %384 = icmp eq {}* %G288472.0, %G288555.0
  br i1 %384, label %tag341, label %tag352

tag508:                                           ; preds = %tag32
  %ptrtoint2433 = ptrtoint {}* %.in3353 to i64
  %tag-only2434 = and i64 %ptrtoint2433, 7
  %test2435 = icmp eq i64 %tag-only2434, 1
  br i1 %test2435, label %header-check-br2432, label %tag705

tag510:                                           ; preds = %tag675
  br i1 %test2718, label %header-check-br2439, label %tag68

tag512:                                           ; preds = %tag470
  %385 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %386 = invoke {}* @cc_safe_fdefinition({}* %385)
          to label %normal-dest2447 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

tag513:                                           ; preds = %tag671
  %387 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %388 = invoke {}* @cc_safe_fdefinition({}* %387)
          to label %normal-dest2461 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag514:                                           ; preds = %tag492
  %.old3797 = and i64 %ptrtoint2401, 3
  %fixnump-test2475.old = icmp eq i64 %.old3797, 0
  br i1 %fixnump-test2475.old, label %tag557, label %tag406

tag517:                                           ; preds = %header-check-br1016, %tag80
  %G288257.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag80 ], [ %.3713, %header-check-br1016 ]
  %G288257.0 = load {}*, {}** %G288257.0.in, align 8
  %389 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %390 = icmp eq {}* %G288257.0, %389
  br i1 %390, label %tag41, label %tag689

tag518:                                           ; preds = %tag682
  %391 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %392 = invoke {}* @cc_safe_fdefinition({}* %391)
          to label %normal-dest1277 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag519:                                           ; preds = %tag655
  %393 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag149

tag522:                                           ; preds = %tag109, %header-check-br817, %header-check-br1079
  %G288288.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1079 ], [ %.3711, %header-check-br817 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag109 ]
  %G288288.0 = load {}*, {}** %G288288.0.in, align 8
  %394 = icmp eq {}* %G288288.0, %95
  br i1 %394, label %tag119, label %tag41.preheader

tag41.preheader:                                  ; preds = %tag522
  br label %tag41

tag523:                                           ; preds = %tag607
  %ptrtoint2487 = ptrtoint {}* %.in3353 to i64
  %tag-only2488 = and i64 %ptrtoint2487, 7
  %test2489 = icmp eq i64 %tag-only2488, 1
  br i1 %test2489, label %header-check-br2486, label %tag676

tag526:                                           ; preds = %tag526.preheader, %tag656
  %OFFSET895.0 = phi {}* [ %G68587.0, %tag656 ], [ null, %tag526.preheader ]
  %UNDERLYING-ARRAY892.0 = phi {}* [ %403, %tag656 ], [ %vaarg, %tag526.preheader ]
  %395 = ptrtoint {}* %UNDERLYING-ARRAY892.0 to i64
  %396 = add i64 %395, -1
  %397 = inttoptr i64 %396 to %"class.core::MDArray_O"*
  %398 = inttoptr i64 %396 to %"class.core::T_O"* (%"class.core::MDArray_O"*)***
  %399 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)**, %"class.core::T_O"* (%"class.core::MDArray_O"*)*** %398, align 8, !tbaa !95
  %400 = getelementptr inbounds %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %399, i64 69
  %401 = load %"class.core::T_O"* (%"class.core::MDArray_O"*)*, %"class.core::T_O"* (%"class.core::MDArray_O"*)** %400, align 8
  %402 = call %"class.core::T_O"* %401(%"class.core::MDArray_O"* %397)
  %403 = bitcast %"class.core::T_O"* %402 to {}*
  %404 = inttoptr i64 %396 to i64 (%"class.core::MDArray_O"*)***
  %405 = load i64 (%"class.core::MDArray_O"*)**, i64 (%"class.core::MDArray_O"*)*** %404, align 8, !tbaa !95
  %406 = getelementptr inbounds i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %405, i64 55
  %407 = load i64 (%"class.core::MDArray_O"*)*, i64 (%"class.core::MDArray_O"*)** %406, align 8
  %408 = call i64 %407(%"class.core::MDArray_O"* %397)
  %fixnum2496 = shl nuw i64 %408, 2
  %409 = inttoptr i64 %fixnum2496 to {}*
  %410 = ptrtoint {}* %OFFSET895.0 to i64
  %fixnum-tag-only24973608 = and i64 %410, 3
  %fixnump-test2498 = icmp eq i64 %fixnum-tag-only24973608, 0
  br i1 %fixnump-test2498, label %tag720, label %tag292

tag528:                                           ; preds = %tag245
  %411 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %412 = invoke {}* @cc_safe_fdefinition({}* %411)
          to label %normal-dest2500 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag531:                                           ; preds = %tag223
  %413 = load i64, i64* %564, align 8
  %"tag fixnum2515" = shl nuw i64 %413, 2
  %414 = inttoptr i64 %"tag fixnum2515" to {}*
  br i1 %fixnump-test2230, label %tag263, label %tag405

tag535:                                           ; preds = %tag544
  %415 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %416 = invoke {}* @cc_safe_fdefinition({}* %415)
          to label %normal-dest2121 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag536:                                           ; preds = %tag436
  br i1 %test2718, label %header-check-br2523, label %tag198

tag538:                                           ; preds = %tag474
  %.old3799 = and i64 %ptrtoint2315, 3
  %fixnump-test2531.old = icmp eq i64 %.old3799, 0
  br i1 %fixnump-test2531.old, label %tag343, label %tag96

tag539:                                           ; preds = %tag369
  %417 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i8] }>*
  %418 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum2532" = lshr exact i64 %418, 2
  %aref2533 = getelementptr inbounds <{ [15 x i8], [0 x i8] }>, <{ [15 x i8], [0 x i8] }>* %417, i64 0, i32 1, i64 %"untagged fixnum2532"
  %419 = load i8, i8* %aref2533, align 1
  %420 = invoke {}* @to_object_int8(i8 signext %419)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag540:                                           ; preds = %header-check-br2715, %tag589
  br label %tag321

tag544:                                           ; preds = %tag671, %normal-dest2652, %normal-dest1793, %normal-dest1559, %normal-dest1242, %normal-dest3127, %tag695, %normal-dest2985, %normal-dest2891, %normal-dest2674, %normal-dest2618, %normal-dest2551, %tag466, %normal-dest2096, %normal-dest2093, %normal-dest2070, %tag364, %normal-dest1481, %normal-dest1204, %normal-dest1034, %tag72, %normal-dest859
  br i1 %fixnump-test2230, label %tag271, label %tag535

tag546:                                           ; preds = %tag304
  %421 = icmp eq {}* %G288437.0, %223
  br i1 %421, label %tag330, label %tag622

tag550:                                           ; preds = %tag244
  %422 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %423 = invoke {}* @cc_safe_fdefinition({}* %422)
          to label %normal-dest2550 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag551:                                           ; preds = %normal-dest1118, %tag33
  %424 = invoke i64 @from_object_uint64({}* %.in3353)
          to label %normal-dest2551 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag552:                                           ; preds = %tag95
  %425 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %426 = invoke {}* @cc_safe_fdefinition({}* %425)
          to label %normal-dest2555 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag555:                                           ; preds = %tag698
  %427 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %428 = invoke {}* @cc_safe_fdefinition({}* %427)
          to label %normal-dest2569 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag557:                                           ; preds = %tag514, %header-check-br2400
  %429 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %430 = invoke {}* @cc_safe_fdefinition({}* %429)
          to label %normal-dest2582 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag559:                                           ; preds = %normal-dest1897
  %431 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 787), align 8
  %432 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %433 = invoke {}* @cc_safe_fdefinition({}* %432)
          to label %normal-dest2605 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag560:                                           ; preds = %normal-dest1542, %tag437
  %434 = invoke double @from_object_double({}* %.in3353)
          to label %normal-dest2618 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag561:                                           ; preds = %header-check-br1009, %tag653
  %G288532.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag653 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1009 ]
  %G288532.0 = load {}*, {}** %G288532.0.in, align 8
  %435 = icmp eq {}* %G288532.0, %G288555.0
  br i1 %435, label %tag23, label %tag697

tag563:                                           ; preds = %tag436
  %436 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x i64] }>*
  %437 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum2621" = lshr exact i64 %437, 2
  %aref2622 = getelementptr inbounds <{ [15 x i8], [0 x i64] }>, <{ [15 x i8], [0 x i64] }>* %436, i64 0, i32 1, i64 %"untagged fixnum2621"
  %438 = load i64, i64* %aref2622, align 8
  %439 = invoke {}* @to_object_int64(i64 signext %438)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag567:                                           ; preds = %normal-dest2272
  %440 = add i64 %868, -3
  %441 = inttoptr i64 %440 to {}**
  %442 = load {}*, {}** %441, align 8
  br label %tag264

tag569:                                           ; preds = %tag41
  %443 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %60, i64 %fixnum865)
  %result2629 = extractvalue { i64, i1 } %443, 0
  %overflow2630 = extractvalue { i64, i1 } %443, 1
  %444 = inttoptr i64 %result2629 to {}*
  br i1 %overflow2630, label %tag247, label %tag80

tag570:                                           ; preds = %tag146
  br i1 %test2718, label %header-check-br2631, label %tag436

tag572:                                           ; preds = %tag648
  %445 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %446 = invoke {}* @cc_safe_fdefinition({}* %445)
          to label %normal-dest2639 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag573:                                           ; preds = %tag716
  %447 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %448 = invoke {}* @cc_safe_fdefinition({}* %447)
          to label %normal-dest2652 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag574:                                           ; preds = %tag690
  br i1 %test2857, label %header-check-br2664, label %tag172

tag576:                                           ; preds = %normal-dest2249, %tag239
  %449 = invoke i16 @from_object_int16({}* %.in3353)
          to label %normal-dest2674 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag577:                                           ; preds = %tag45
  %trunc3889 = trunc i64 %338 to i3
  switch i3 %trunc3889, label %tag712 [
    i3 -2, label %tag479
    i3 1, label %header-check-br2870
  ]

tag578:                                           ; preds = %tag330, %normal-dest914, %tag439
  %.pre39473967 = phi {}* [ %603, %normal-dest914 ], [ %.pre39473968, %tag439 ], [ %.pre39473969, %tag330 ]
  %450 = phi {}* [ %603, %normal-dest914 ], [ %333, %tag439 ], [ %G288437.0, %tag330 ]
  %451 = add i64 %224, 5
  %452 = inttoptr i64 %451 to {}**
  %453 = load {}*, {}** %452, align 8
  %454 = icmp eq {}* %453, %450
  %.val3820 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object1313.0 = select i1 %454, {}* %.val3820, {}* %450
  %455 = icmp eq {}* %object1313.0, %450
  %G288359.0 = select i1 %455, {}* %.val3820, {}* %450
  %456 = icmp eq {}* %G288359.0, %450
  br i1 %456, label %tag108, label %tag304

tag579:                                           ; preds = %tag372
  %457 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %458 = invoke {}* @cc_safe_fdefinition({}* %457)
          to label %normal-dest2679 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag580:                                           ; preds = %tag129
  br i1 %test2718, label %header-check-br2692, label %tag487

tag581:                                           ; preds = %tag279
  %trunc3832 = trunc i64 %338 to i3
  switch i3 %trunc3832, label %tag424 [
    i3 -2, label %tag385
    i3 1, label %header-check-br2019
  ]

tag582:                                           ; preds = %header-check-br2774, %tag614
  br label %tag605

tag583:                                           ; preds = %tag279
  %459 = ptrtoint {}* %OFFSET.13999 to i64
  %fixnum-tag-only27003484 = and i64 %459, 3
  %fixnump-test2701 = icmp eq i64 %fixnum-tag-only27003484, 0
  br i1 %fixnump-test2701, label %tag619, label %tag424

tag585:                                           ; preds = %tag739
  %460 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %461 = invoke {}* @cc_safe_fdefinition({}* %460)
          to label %normal-dest2703 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag587:                                           ; preds = %header-check-br3089, %tag708
  br label %tag212

tag589:                                           ; preds = %normal-dest3106, %normal-dest1790, %normal-dest1416, %normal-dest1154, %tag367
  %index1155.0 = phi {}* [ %287, %tag367 ], [ %index1155.1, %normal-dest1154 ], [ %691, %normal-dest1416 ], [ %765, %normal-dest1790 ], [ %index1155.2, %normal-dest3106 ]
  %ptrtoint2716 = ptrtoint {}* %UNDERLYING-ARRAY892.14005 to i64
  %tag-only2717 = and i64 %ptrtoint2716, 7
  %test2718 = icmp eq i64 %tag-only2717, 1
  br i1 %test2718, label %header-check-br2715, label %tag540

tag591:                                           ; preds = %normal-dest2232
  %462 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag16

tag594:                                           ; preds = %tag452
  %463 = icmp sgt i64 %fixnum2245, %338
  br i1 %463, label %tag706, label %tag691

tag595:                                           ; preds = %tag638
  %464 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %465 = invoke {}* @cc_safe_fdefinition({}* %464)
          to label %normal-dest2725 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag598:                                           ; preds = %header-check-br2854, %normal-dest1385, %tag475
  %466 = phi {}* [ %.pre3942, %tag475 ], [ %684, %normal-dest1385 ], [ %21, %header-check-br2854 ]
  %G288741.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag475 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest1385 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2854 ]
  %G288741.0 = load {}*, {}** %G288741.0.in, align 8
  %467 = icmp eq {}* %G288741.0, %466
  br i1 %467, label %tag100, label %tag269

tag600:                                           ; preds = %header-check-br1197, %tag262
  %G288484.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag262 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br1197 ]
  %G288484.0 = load {}*, {}** %G288484.0.in, align 8
  %468 = icmp eq {}* %G288484.0, %G288555.0
  br i1 %468, label %tag88, label %tag332

tag601:                                           ; preds = %header-check-br3154, %tag733
  %object976.04065 = phi {}* [ %G287833.0.pre, %tag733 ], [ %object840.04060, %header-check-br3154 ]
  %G287833.0 = phi {}* [ %G287833.0.pre, %tag733 ], [ %.val3985, %header-check-br3154 ]
  %469 = icmp eq {}* %G287833.0, %G288112.0
  br i1 %469, label %tag265, label %tag346

tag602:                                           ; preds = %tag41
  %470 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %471 = invoke {}* @cc_safe_fdefinition({}* %470)
          to label %normal-dest2738 unwind label %cleanup-lpad.loopexit

tag604:                                           ; preds = %normal-dest2612.tag604_crit_edge, %tag96
  %.val3853 = phi {}* [ %.val3853.pre, %tag96 ], [ %object780.0.pre, %normal-dest2612.tag604_crit_edge ]
  %object780.0 = phi {}* [ %.pre3950, %tag96 ], [ %object780.0.pre, %normal-dest2612.tag604_crit_edge ]
  %472 = phi {}* [ %.pre3950, %tag96 ], [ %929, %normal-dest2612.tag604_crit_edge ]
  %473 = icmp eq {}* %object780.0, %472
  %G287987.0 = select i1 %473, {}* %.val3853, {}* %472
  %474 = icmp eq {}* %G287987.0, %472
  br i1 %474, label %tag727, label %tag236

tag605:                                           ; preds = %header-check-br2774, %tag582
  %G288073.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag582 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2774 ]
  %G288073.0 = load {}*, {}** %G288073.0.in, align 8
  %475 = icmp eq {}* %G288073.0, %G288112.0
  br i1 %475, label %tag708, label %tag749

tag606:                                           ; preds = %header-check-br2086, %tag397
  br label %tag440

tag607:                                           ; preds = %tag317
  %476 = icmp eq i64 %234, 1093
  %G287953.0.pre = select i1 %476, {}* %.val3991, {}* %G288112.0
  %477 = icmp eq {}* %G287953.0.pre, %G288112.0
  br i1 %477, label %tag624, label %tag523

tag610:                                           ; preds = %normal-dest3184
  %478 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %479 = invoke {}* @cc_safe_fdefinition({}* %478)
          to label %normal-dest2755 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag613:                                           ; preds = %header-check-br2217, %tag456, %normal-dest1699, %normal-dest1435
  %.pre3957 = phi {}* [ %object840.04060, %header-check-br2217 ], [ %object840.04060, %tag456 ], [ %750, %normal-dest1699 ], [ %696, %normal-dest1435 ]
  %.val3863.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag648

tag614:                                           ; preds = %tag440
  br i1 %test2821, label %header-check-br2774, label %tag582

tag616:                                           ; preds = %tag208
  %480 = icmp slt {}* %LAUF.0, %"%DOTIMES-VAR.0"
  br i1 %480, label %tag258, label %tag702

tag619:                                           ; preds = %tag583
  %481 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %338, i64 %459)
  %result2782 = extractvalue { i64, i1 } %481, 0
  %overflow2783 = extractvalue { i64, i1 } %481, 1
  %482 = inttoptr i64 %result2782 to {}*
  br i1 %overflow2783, label %tag480, label %tag630

tag621:                                           ; preds = %tag16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %483 = insertvalue { {}*, i64 } undef, {}* %vaarg, 0
  %484 = insertvalue { {}*, i64 } %483, i64 1, 1
  ret { {}*, i64 } %484

tag622:                                           ; preds = %tag546
  %485 = add i64 %224, -3
  %486 = inttoptr i64 %485 to {}**
  %487 = load {}*, {}** %486, align 8
  br label %tag439

tag624:                                           ; preds = %tag607
  %488 = icmp eq i64 %234, 1085
  %G287933.0.pre = select i1 %488, {}* %.val3991, {}* %G288112.0
  %489 = icmp eq {}* %G287933.0.pre, %G288112.0
  br i1 %489, label %header-check-br1303, label %tag365

tag627:                                           ; preds = %tag339
  %490 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only28023255 = and i64 %490, 3
  %fixnump-test2803 = icmp eq i64 %fixnum-tag-only28023255, 0
  br i1 %fixnump-test2803, label %tag470, label %tag286

tag628:                                           ; preds = %tag269, %header-check-br2476, %header-check-br2910
  %G288735.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br2910 ], [ %.3719, %header-check-br2476 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag269 ]
  %G288735.0 = load {}*, {}** %G288735.0.in, align 8
  %491 = icmp eq {}* %G288735.0, %466
  br i1 %491, label %tag290, label %tag174

tag629:                                           ; preds = %tag316
  %492 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %493 = invoke {}* @cc_safe_fdefinition({}* %492)
          to label %normal-dest2805 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag630:                                           ; preds = %normal-dest2346, %normal-dest2190, %normal-dest1049, %normal-dest758, %tag619
  %index.0 = phi {}* [ %482, %tag619 ], [ %583, %normal-dest758 ], [ %628, %normal-dest1049 ], [ %index.1, %normal-dest2190 ], [ %index.2, %normal-dest2346 ]
  %ptrtoint2819 = ptrtoint {}* %UNDERLYING-ARRAY.14001 to i64
  %tag-only2820 = and i64 %ptrtoint2819, 7
  %test2821 = icmp eq i64 %tag-only2820, 1
  br i1 %test2821, label %header-check-br2818, label %tag709

tag632:                                           ; preds = %tag656, %normal-dest1291, %tag174
  %OFFSET895.1 = phi {}* [ null, %tag174 ], [ null, %normal-dest1291 ], [ %G68587.0, %tag656 ]
  %UNDERLYING-ARRAY892.1 = phi {}* [ %137, %tag174 ], [ %vaarg, %normal-dest1291 ], [ %403, %tag656 ]
  br i1 %test2857, label %tag632.header-check-br2827_crit_edge, label %tag326

tag632.header-check-br2827_crit_edge:             ; preds = %tag632
  %.pre4055 = load i64, i64* %irc-bit-cast2860, align 8
  br label %header-check-br2827

tag636:                                           ; preds = %tag365
  %.old3801 = and i64 %ptrtoint1967, 3
  %fixnump-test2837.old = icmp eq i64 %.old3801, 0
  br i1 %fixnump-test2837.old, label %tag740, label %tag432

tag638:                                           ; preds = %normal-dest1096.tag638_crit_edge, %tag406
  %.val3867 = phi {}* [ %.val3867.pre, %tag406 ], [ %object1212.0.pre, %normal-dest1096.tag638_crit_edge ]
  %object1212.0 = phi {}* [ %.pre3960, %tag406 ], [ %object1212.0.pre, %normal-dest1096.tag638_crit_edge ]
  %494 = phi {}* [ %.pre3960, %tag406 ], [ %634, %normal-dest1096.tag638_crit_edge ]
  %495 = icmp eq {}* %object1212.0, %494
  %G287847.0 = select i1 %495, {}* %.val3867, {}* %494
  %496 = icmp eq {}* %G287847.0, %494
  br i1 %496, label %tag651, label %tag595

tag640:                                           ; preds = %tag126, %normal-dest2848
  %497 = phi {}* [ %983, %normal-dest2848 ], [ %244, %tag126 ]
  %G288669.0 = phi {}* [ %G288669.1, %normal-dest2848 ], [ %.3789, %tag126 ]
  %498 = icmp eq {}* %G288669.0, %497
  br i1 %498, label %tag357, label %tag682

tag642:                                           ; preds = %tag460
  %499 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %500 = invoke {}* @cc_safe_fdefinition({}* %499)
          to label %normal-dest2841 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag643:                                           ; preds = %tag289
  br i1 %test2857, label %header-check-br2854, label %tag475

tag644:                                           ; preds = %tag321
  br i1 %test2718, label %header-check-br2863, label %tag493

tag648:                                           ; preds = %normal-dest1435.tag648_crit_edge, %tag613
  %.val3863 = phi {}* [ %.val3863.pre, %tag613 ], [ %object2624.0.pre, %normal-dest1435.tag648_crit_edge ]
  %object2624.0 = phi {}* [ %.pre3957, %tag613 ], [ %object2624.0.pre, %normal-dest1435.tag648_crit_edge ]
  %501 = phi {}* [ %.pre3957, %tag613 ], [ %696, %normal-dest1435.tag648_crit_edge ]
  %502 = icmp eq {}* %object2624.0, %501
  %G287887.0 = select i1 %502, {}* %.val3863, {}* %501
  %503 = icmp eq {}* %G287887.0, %501
  br i1 %503, label %tag681, label %tag572

tag649:                                           ; preds = %tag180
  %504 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %505 = invoke {}* @cc_safe_fdefinition({}* %504)
          to label %normal-dest2879 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag651:                                           ; preds = %normal-dest2725, %tag638
  %506 = invoke i8 @from_object_uint8({}* %.in3353)
          to label %normal-dest2891 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag652:                                           ; preds = %tag296
  br i1 %565, label %tag205, label %tag55

tag653:                                           ; preds = %header-check-br1009, %tag78
  br label %tag561

tag655:                                           ; preds = %tag14
  %507 = icmp sgt i64 %fixnum, %338
  br i1 %507, label %tag462, label %tag519

tag656:                                           ; preds = %header-check-br2171, %tag421
  %G288700.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag421 ], [ %.3716, %header-check-br2171 ]
  %G288700.0 = load {}*, {}** %G288700.0.in, align 8
  %508 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %509 = icmp eq {}* %G288700.0, %508
  br i1 %509, label %tag526, label %tag632

tag657:                                           ; preds = %tag705, %header-check-br2432
  %510 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %511 = invoke {}* @cc_safe_fdefinition({}* %510)
          to label %normal-dest2897 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag664:                                           ; preds = %normal-dest1925
  %512 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 789), align 8
  %513 = invoke {}* @cc_safe_fdefinition({}* %512)
          to label %normal-dest2920 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag665:                                           ; preds = %tag690
  %514 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 723), align 8
  %515 = invoke {}* @cc_safe_fdefinition({}* %514)
          to label %normal-dest2941 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag666:                                           ; preds = %normal-dest1357
  %516 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag16

tag671:                                           ; preds = %tag58
  %517 = icmp eq {}* %x955.0, %.val3882
  %G288331.0 = select i1 %517, {}* %.val3826, {}* %.val3882
  %518 = icmp eq {}* %G288331.0, %.val3882
  br i1 %518, label %tag513, label %tag544

tag675:                                           ; preds = %header-check-br2046, %tag383
  %G288496.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag383 ], [ %.3691, %header-check-br2046 ]
  %G288496.0 = load {}*, {}** %G288496.0.in, align 8
  %519 = icmp eq {}* %G288496.0, %G288555.0
  br i1 %519, label %tag510, label %tag307

tag676:                                           ; preds = %tag523
  %.old3803 = and i64 %ptrtoint2487, 3
  %fixnump-test2974.old = icmp eq i64 %.old3803, 0
  br i1 %fixnump-test2974.old, label %tag685, label %tag239

tag680:                                           ; preds = %tag212
  %ptrtoint2979 = ptrtoint {}* %.in3353 to i64
  %tag-only2980 = and i64 %ptrtoint2979, 7
  %test2981 = icmp eq i64 %tag-only2980, 1
  br i1 %test2981, label %header-check-br2978, label %tag327

tag681:                                           ; preds = %normal-dest2639, %tag648
  %520 = invoke i32 @from_object_uint32({}* %.in3353)
          to label %normal-dest2985 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag682:                                           ; preds = %tag640
  %521 = load i64, i64* %564, align 8
  %"tag fixnum2990" = shl nuw i64 %521, 2
  %522 = inttoptr i64 %"tag fixnum2990" to {}*
  br i1 %fixnump-test2230, label %tag694, label %tag518

tag685:                                           ; preds = %tag676, %header-check-br2486
  %523 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %524 = invoke {}* @cc_safe_fdefinition({}* %523)
          to label %normal-dest3008 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag688:                                           ; preds = %tag100
  %525 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %526 = invoke {}* @cc_safe_fdefinition({}* %525)
          to label %normal-dest3022 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag689:                                           ; preds = %tag517, %normal-dest1133, %tag153
  %OFFSET.1 = phi {}* [ null, %tag153 ], [ null, %normal-dest1133 ], [ %G68960.0, %tag517 ]
  %UNDERLYING-ARRAY.1 = phi {}* [ %123, %tag153 ], [ %vaarg, %normal-dest1133 ], [ %53, %tag517 ]
  br i1 %test2857, label %tag689.header-check-br3038_crit_edge, label %tag56

tag689.header-check-br3038_crit_edge:             ; preds = %tag689
  %.pre4056 = load i64, i64* %irc-bit-cast2860, align 8
  br label %header-check-br3038

tag690:                                           ; preds = %tag364
  %527 = icmp eq {}* %vaarg, %.val3829
  %brmerge3808 = or i1 %consp-test, %527
  %.val3828 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288317.0 = select i1 %brmerge3808, {}* %.val3828, {}* %.val3829
  %528 = icmp eq {}* %G288317.0, %.val3829
  br i1 %528, label %tag574, label %tag665

tag691:                                           ; preds = %tag594
  %529 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag357

tag694:                                           ; preds = %tag682
  %530 = icmp sgt i64 %"tag fixnum2990", %338
  %531 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.3805 = select i1 %530, {}* %531, {}* %497
  br label %tag357

tag695:                                           ; preds = %tag158
  %532 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x {}*] }>*
  %533 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum3051" = lshr exact i64 %533, 2
  %aref3052 = getelementptr inbounds <{ [15 x i8], [0 x {}*] }>, <{ [15 x i8], [0 x {}*] }>* %532, i64 0, i32 1, i64 %"untagged fixnum3051"
  store {}* %.in3353, {}** %aref3052, align 8
  br label %tag544

tag696:                                           ; preds = %tag269
  %534 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3898 = add i64 %534, -1081
  %535 = icmp ult i64 %.off3898, 69
  %.val3995 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val3996 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288738.0.pre = select i1 %535, {}* %.val3995, {}* %.val3996
  %536 = icmp eq {}* %G288738.0.pre, %466
  br i1 %536, label %header-check-br2910, label %header-check-br2827

tag697:                                           ; preds = %tag561
  %537 = bitcast {}* %UNDERLYING-ARRAY892.14005 to <{ [15 x i8], [0 x float] }>*
  %538 = ptrtoint {}* %index1155.0 to i64
  %"untagged fixnum3053" = lshr exact i64 %538, 2
  %aref3054 = getelementptr inbounds <{ [15 x i8], [0 x float] }>, <{ [15 x i8], [0 x float] }>* %537, i64 0, i32 1, i64 %"untagged fixnum3053"
  %539 = load float, float* %aref3054, align 4
  %540 = invoke {}* @to_object_float(float %539)
          to label %tag264 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag698:                                           ; preds = %normal-dest2927.tag698_crit_edge, %tag150
  %.val3865 = phi {}* [ %.val3865.pre, %tag150 ], [ %object1177.0.pre, %normal-dest2927.tag698_crit_edge ]
  %object1177.0 = phi {}* [ %.pre3958, %tag150 ], [ %object1177.0.pre, %normal-dest2927.tag698_crit_edge ]
  %541 = phi {}* [ %.pre3958, %tag150 ], [ %1001, %normal-dest2927.tag698_crit_edge ]
  %542 = icmp eq {}* %object1177.0, %541
  %G287867.0 = select i1 %542, {}* %.val3865, {}* %541
  %543 = icmp eq {}* %G287867.0, %541
  br i1 %543, label %tag87, label %tag555

tag699:                                           ; preds = %tag408
  %544 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 438), align 16
  %545 = invoke {}* @cc_safe_fdefinition({}* %544)
          to label %normal-dest3058 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag702:                                           ; preds = %tag616
  %546 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag16

tag705:                                           ; preds = %tag508
  %.old3806 = and i64 %ptrtoint2433, 3
  %fixnump-test3087.old = icmp eq i64 %.old3806, 0
  br i1 %fixnump-test3087.old, label %tag657, label %tag33

tag706:                                           ; preds = %tag594
  %547 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.pre3944 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag357

tag708:                                           ; preds = %tag605
  br i1 %test2821, label %header-check-br3089, label %tag587

tag709:                                           ; preds = %header-check-br2818, %tag630
  br label %tag158

tag711:                                           ; preds = %tag56
  br i1 %fixnump-test2230, label %tag34, label %tag248

tag712:                                           ; preds = %tag577, %header-check-br2870, %tag479, %header-check-br2233, %tag450, %tag182
  %548 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %549 = invoke {}* @cc_safe_fdefinition({}* %548)
          to label %normal-dest3099 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag716:                                           ; preds = %tag113
  %550 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %551 = icmp eq {}* %550, %95
  br i1 %551, label %tag573, label %tag324

tag717:                                           ; preds = %header-check-br1255, %normal-dest1983, %tag83, %normal-dest1002
  %.pre3952 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.val3855.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag180

tag718:                                           ; preds = %tag178
  %ptrtoint3119 = ptrtoint {}* %.in3353 to i64
  %tag-only3120 = and i64 %ptrtoint3119, 7
  %test3121 = icmp eq i64 %tag-only3120, 1
  br i1 %test3121, label %header-check-br3118, label %tag28

tag720:                                           ; preds = %tag526
  %552 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %410, i64 %fixnum2496)
  %result3049 = extractvalue { i64, i1 } %552, 0
  %overflow3050 = extractvalue { i64, i1 } %552, 1
  %553 = inttoptr i64 %result3049 to {}*
  br i1 %overflow3050, label %tag43, label %tag421

tag722:                                           ; preds = %tag81, %header-check-br1303
  %G287913.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag32

tag727:                                           ; preds = %normal-dest1442, %tag604
  %554 = invoke i64 @from_object_int64({}* %.in3353)
          to label %normal-dest3127 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag729:                                           ; preds = %tag271
  %555 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %556 = invoke {}* @cc_safe_fdefinition({}* %555)
          to label %normal-dest3131 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag730:                                           ; preds = %header-check-br1190, %tag138
  %G288013.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag138 ], [ %.3678, %header-check-br1190 ]
  %G288013.0 = load {}*, {}** %G288013.0.in, align 8
  %557 = icmp eq {}* %G288013.0, %G288112.0
  br i1 %557, label %tag62, label %tag316

tag733:                                           ; preds = %tag312, %header-check-br3154
  %G287833.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag601

tag736:                                           ; preds = %tag39, %normal-dest1535, %tag282, %tag374
  %"%DOTIMES-VAR.0" = phi {}* [ %299, %tag374 ], [ null, %tag282 ], [ %"%DOTIMES-VAR.1", %normal-dest1535 ], [ %LENGTH.0.ph, %tag39 ]
  %558 = ptrtoint {}* %"%DOTIMES-VAR.0" to i64
  %fixnum-tag-only13653637 = and i64 %558, 3
  %fixnump-test1366 = icmp eq i64 %fixnum-tag-only13653637, 0
  %test2857 = icmp eq i64 %tag-only3252, 1
  %irc-bit-cast2858 = bitcast {}* %vaarg to i8*
  %gep2859 = getelementptr inbounds i8, i8* %irc-bit-cast2858, i64 -9
  %irc-bit-cast2860 = bitcast i8* %gep2859 to i64*
  %559 = add i64 %579, -1
  %560 = inttoptr i64 %559 to %"class.core::MDArray_O"*
  %561 = inttoptr i64 %559 to %"class.core::T_O"* (%"class.core::MDArray_O"*)***
  %562 = inttoptr i64 %559 to i64 (%"class.core::MDArray_O"*)***
  %563 = add i64 %579, 7
  %564 = inttoptr i64 %563 to i64*
  %single-float-tag-only2894 = and i64 %558, 7
  %565 = icmp eq i64 %single-float-tag-only2894, 6
  %test3075 = icmp ne i64 %single-float-tag-only2894, 1
  %irc-bit-cast3076 = bitcast {}* %"%DOTIMES-VAR.0" to i8*
  %gep3077 = getelementptr inbounds i8, i8* %irc-bit-cast3076, i64 -9
  %irc-bit-cast3078 = bitcast i8* %gep3077 to i64*
  br label %tag448

tag739:                                           ; preds = %tag389
  %566 = ptrtoint {}* %.in3353 to i64
  %single-float-tag-only3161 = and i64 %566, 7
  %567 = icmp eq i64 %single-float-tag-only3161, 6
  %.val3845 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object2294.0 = select i1 %567, {}* %.val3845, {}* %G288112.0
  %568 = icmp eq {}* %object2294.0, %G288112.0
  %G288027.0 = select i1 %568, {}* %.val3845, {}* %G288112.0
  %569 = icmp eq {}* %G288027.0, %G288112.0
  br i1 %569, label %tag393, label %tag585

tag740:                                           ; preds = %tag636, %header-check-br1966
  %570 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 785), align 8
  %571 = invoke {}* @cc_safe_fdefinition({}* %570)
          to label %normal-dest3163 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag743:                                           ; preds = %tag440
  %572 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 781), align 8
  %573 = invoke {}* @cc_safe_fdefinition({}* %572)
          to label %normal-dest3177 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

tag749:                                           ; preds = %tag605
  %574 = ptrtoint {}* %.in3353 to i64
  %character-tag-only = and i64 %574, 7
  %575 = icmp eq i64 %character-tag-only, 2
  %.val3839 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object1951.0 = select i1 %575, {}* %.val3839, {}* %G288112.0
  %576 = icmp eq {}* %object1951.0, %G288112.0
  %G288067.0 = select i1 %576, {}* %.val3839, {}* %G288112.0
  %577 = icmp eq {}* %G288067.0, %G288112.0
  br i1 %577, label %tag37, label %tag54

tag750:                                           ; preds = %header-check-br1213, %tag157
  br label %tag369

cleanup-lpad.loopexit:                            ; preds = %tag247, %normal-dest1485, %tag602, %normal-dest2738
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %normal-dest2787, %maybe-more-tests1939, %normal-dest2198, %tag427, %normal-dest1464, %tag242, %normal-dest1227, %tag166, %tag51
  %lpad.loopexit3905 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %tag43, %normal-dest871, %tag292, %normal-dest1671
  %lpad.loopexit3908 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %normal-dest3177, %tag743, %normal-dest3163, %tag740, %normal-dest3131, %tag729, %tag727, %normal-dest3099, %tag712, %normal-dest3058, %tag699, %tag697, %normal-dest3022, %tag688, %normal-dest3008, %tag685, %normal-dest2994, %tag154, %tag681, %normal-dest2941, %tag665, %normal-dest2920, %tag664, %normal-dest2897, %tag657, %tag651, %normal-dest2879, %tag649, %normal-dest2841, %tag642, %normal-dest2805, %tag629, %normal-dest2755, %tag610, %normal-dest2725, %tag595, %normal-dest2703, %tag585, %normal-dest2679, %tag579, %tag576, %normal-dest2652, %tag573, %normal-dest2639, %tag572, %tag563, %tag560, %normal-dest2605, %tag559, %normal-dest2582, %tag557, %normal-dest2569, %tag555, %normal-dest2555, %tag552, %tag551, %tag539, %normal-dest2500, %tag528, %normal-dest2461, %tag513, %tag505, %normal-dest2375, %tag489, %normal-dest2339, %tag480, %normal-dest2265, %tag455, %tag454, %normal-dest2249, %tag453, %normal-dest2231, %tag449, %normal-dest2183, %tag424, %normal-dest2135, %tag411, %normal-dest2121, %tag535, %tag403, %tag399, %tag393, %normal-dest2055, %tag387, %normal-dest2034, %tag382, %tag378, %normal-dest1996, %tag405, %normal-dest1976, %tag371, %normal-dest1953, %tag361, %normal-dest1918, %tag348, %normal-dest1890, %tag343, %normal-dest1877, %tag342, %normal-dest1863, %normal-dest1857, %normal-dest1845, %normal-dest1838, %normal-dest1836, %tag341, %tag332, %normal-dest1793, %tag324, %normal-dest1790, %normal-dest1789, %tag323, %normal-dest1776, %tag319, %normal-dest1744, %tag313, %tag307, %normal-dest1692, %tag298, %normal-dest1646, %tag288, %normal-dest1559, %tag265, %normal-dest1542, %tag255, %normal-dest1500, %tag248, %tag246, %normal-dest1442, %tag236, %normal-dest1428, %tag235, %normal-dest1416, %normal-dest1415, %tag229, %normal-dest1395, %maybe-more-tests2603, %tag222, %normal-dest1378, %maybe-more-tests1426, %normal-dest1356, %tag205, %tag201, %normal-dest1339, %tag199, %normal-dest1291, %tag187, %normal-dest1277, %tag518, %normal-dest1242, %tag167, %tag147, %tag131, %normal-dest1146, %tag122, %normal-dest1133, %tag119, %normal-dest1118, %tag115, %normal-dest1089, %tag111, %normal-dest1049, %normal-dest1048, %tag93, %tag87, %normal-dest995, %tag73, %normal-dest934, %tag55, %normal-dest921, %tag54, %tag37, %normal-dest844, %tag35, %tag26, %normal-dest804, %tag24, %tag22, %normal-dest763, %tag5, %normal-dest758, %normal-dest757, %tag2
  %lpad.loopexit3910 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit: ; preds = %normal-dest2152, %tag414, %normal-dest1514, %tag249
  %lpad.loopexit3915 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp: ; preds = %normal-dest2447, %tag512, %normal-dest1632, %tag286
  %lpad.loopexit.split-lp3916 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %error, %normal-dest1690, %tag251, %normal-dest1528, %tag297, %normal-dest2550, %maybe-more-tests2306, %normal-dest2100, %tag550
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit3905, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit3908, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit3910, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ], [ %lpad.loopexit3915, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit ], [ %lpad.loopexit.split-lp3916, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @":::global-str-B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %578 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  %579 = ptrtoint {}* %vaarg to i64
  %tag-only3252 = and i64 %579, 7
  %consp-test = icmp eq i64 %tag-only3252, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val3809 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288835.0 = select i1 %consp-test, {}* %.val, {}* %.val3809
  %580 = icmp eq {}* %G288835.0, %.val3809
  br i1 %580, label %tag481, label %tag491.outer.preheader

tag491.outer.preheader:                           ; preds = %continue
  br label %tag491.outer

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

normal-dest757:                                   ; preds = %tag2
  %581 = invoke float @from_object_float({}* %OFFSET.13999)
          to label %normal-dest758 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest758:                                   ; preds = %normal-dest757
  %582 = fadd float %9, %581
  %583 = invoke {}* @to_object_float(float %582)
          to label %tag630 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br:                                  ; preds = %tag4
  %irc-bit-cast761 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast761, i64 -9
  %irc-bit-cast762 = bitcast i8* %gep to i64*
  %584 = load i64, i64* %irc-bit-cast762, align 8
  %585 = icmp eq i64 %584, 1129
  br i1 %585, label %tag160, label %tag458

normal-dest763:                                   ; preds = %tag5
  %ptrtoint766 = ptrtoint {}* %11 to i64
  %entry-point-addr-uint = add i64 %ptrtoint766, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %586 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %11, i64 2, {}* %LAUF.0, {}* %20, {}* null, {}* null)
          to label %normal-dest769 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest769:                                   ; preds = %normal-dest763
  %.elt3496 = extractvalue { {}*, i64 } %586, 0
  %.elt3498 = extractvalue { {}*, i64 } %586, 1
  %cond3221 = icmp eq i64 %.elt3498, 0
  %587 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.1 = select i1 %cond3221, {}* %587, {}* %.elt3496
  br label %tag149

header-check-br772:                               ; preds = %tag92
  br i1 %85, label %tag210, label %header-check-br2956

header-check-br786:                               ; preds = %tag296
  %irc-bit-cast790 = bitcast {}* %LAUF.0 to i8*
  %gep791 = getelementptr inbounds i8, i8* %irc-bit-cast790, i64 -9
  %irc-bit-cast792 = bitcast i8* %gep791 to i64*
  %588 = load i64, i64* %irc-bit-cast792, align 8
  %589 = icmp ne i64 %588, 1325
  %brmerge3931 = or i1 %test3075, %589
  br i1 %brmerge3931, label %tag55, label %header-check-br3072

header-check-br796:                               ; preds = %tag23
  %irc-bit-cast800 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep801 = getelementptr inbounds i8, i8* %irc-bit-cast800, i64 -9
  %irc-bit-cast802 = bitcast i8* %gep801 to i64*
  %590 = load i64, i64* %irc-bit-cast802, align 8
  %591 = icmp eq i64 %590, 1117
  br i1 %591, label %tag146, label %tag256

normal-dest804:                                   ; preds = %tag24
  %ptrtoint805 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint806 = add i64 %ptrtoint805, 7
  %entry-point-addr807 = inttoptr i64 %entry-point-addr-uint806 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point808 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr807, align 8
  %592 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point808({}* %28, i64 2, {}* %.in3353, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest811 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest811:                                   ; preds = %normal-dest804
  %.elt3477 = extractvalue { {}*, i64 } %592, 0
  %.elt3479 = extractvalue { {}*, i64 } %592, 1
  %cond3218 = icmp eq i64 %.elt3479, 0
  %593 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288898.0 = select i1 %cond3218, {}* %593, {}* %.elt3477
  %594 = icmp eq {}* %G288898.0, %593
  %.val4069 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object976.0.pre = select i1 %594, {}* %593, {}* %.val4069
  br label %tag64

header-check-br817:                               ; preds = %header-check-br1079
  %.off3875 = add i64 %631, -1153
  %595 = icmp ult i64 %.off3875, 149
  %.3711 = select i1 %595, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag522

normal-dest844:                                   ; preds = %tag35
  %ptrtoint845 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint846 = add i64 %ptrtoint845, 7
  %entry-point-addr847 = inttoptr i64 %entry-point-addr-uint846 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point848 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr847, align 8
  %596 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point848({}* %41, i64 2, {}* %.in3353, {}* null, {}* null, {}* null)
          to label %normal-dest851 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest851:                                   ; preds = %normal-dest844
  %.elt3473 = extractvalue { {}*, i64 } %596, 0
  %.elt3475 = extractvalue { {}*, i64 } %596, 1
  %cond3217 = icmp eq i64 %.elt3475, 0
  %597 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288901.0 = select i1 %cond3217, {}* %597, {}* %.elt3473
  %598 = icmp eq {}* %G288901.0, %597
  br i1 %598, label %tag64, label %tag24

normal-dest859:                                   ; preds = %tag37
  %599 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i32] }>*
  %600 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum860" = lshr exact i64 %600, 2
  %aref861 = getelementptr inbounds <{ [15 x i8], [0 x i32] }>, <{ [15 x i8], [0 x i32] }>* %599, i64 0, i32 1, i64 %"untagged fixnum860"
  store i32 %42, i32* %aref861, align 4
  br label %tag544

normal-dest871:                                   ; preds = %tag43
  %ptrtoint873 = ptrtoint {}* %62 to i64
  %entry-point-addr-uint874 = add i64 %ptrtoint873, 7
  %entry-point-addr875 = inttoptr i64 %entry-point-addr-uint874 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point876 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr875, align 8
  %601 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point876({}* %62, i64 1, {}* %553, {}* null, {}* null, {}* null)
          to label %normal-dest879 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest879:                                   ; preds = %normal-dest871
  %.elt3615 = extractvalue { {}*, i64 } %601, 0
  %.elt3617 = extractvalue { {}*, i64 } %601, 1
  %cond3245 = icmp eq i64 %.elt3617, 0
  %602 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G68587.1 = select i1 %cond3245, {}* %602, {}* %.elt3615
  br label %tag421

normal-dest914:                                   ; preds = %tag51
  %.elt3290 = extractvalue { {}*, i64 } %65, 0
  %.elt3292 = extractvalue { {}*, i64 } %65, 1
  %cond3194 = icmp eq i64 %.elt3292, 0
  %603 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288384.0 = select i1 %cond3194, {}* %603, {}* %.elt3290
  %604 = icmp eq {}* %G288384.0, %603
  br i1 %604, label %tag578, label %tag108

normal-dest921:                                   ; preds = %tag54
  %605 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %606 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %607 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %608 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 265), align 8
  %ptrtoint922 = ptrtoint {}* %68 to i64
  %entry-point-addr-uint923 = add i64 %ptrtoint922, 7
  %entry-point-addr924 = inttoptr i64 %entry-point-addr-uint923 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point925 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr924, align 8
  %609 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point925({}* %68, i64 5, {}* %605, {}* %606, {}* %.in3353, {}* %607, {}* %608)
          to label %tag37 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest934:                                   ; preds = %tag55
  %ptrtoint936 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint937 = add i64 %ptrtoint936, 7
  %entry-point-addr938 = inttoptr i64 %entry-point-addr-uint937 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point939 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr938, align 8
  %610 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point939({}* %70, i64 2, {}* %LAUF.0, {}* %"%DOTIMES-VAR.0", {}* null, {}* null)
          to label %normal-dest942 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest942:                                   ; preds = %normal-dest934
  %.elt3264 = extractvalue { {}*, i64 } %610, 0
  %.elt3266 = extractvalue { {}*, i64 } %610, 1
  %cond3191 = icmp eq i64 %.elt3266, 0
  %611 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287747.1 = select i1 %cond3191, {}* %611, {}* %.elt3264
  br label %tag16

header-check-br961:                               ; preds = %tag62
  %irc-bit-cast965 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep966 = getelementptr inbounds i8, i8* %irc-bit-cast965, i64 -9
  %irc-bit-cast967 = bitcast i8* %gep966 to i64*
  %612 = load i64, i64* %irc-bit-cast967, align 8
  %613 = icmp eq i64 %612, 1109
  br i1 %613, label %tag373, label %tag482

header-check-br978:                               ; preds = %header-check-br2410
  %.off3891 = add i64 %885, -1153
  %614 = icmp ult i64 %.off3891, 149
  %.3712 = select i1 %614, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag245

normal-dest995:                                   ; preds = %tag73
  %ptrtoint996 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint997 = add i64 %ptrtoint996, 7
  %entry-point-addr998 = inttoptr i64 %entry-point-addr-uint997 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point999 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr998, align 8
  %615 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point999({}* %81, i64 2, {}* %.in3353, {}* inttoptr (i64 -8589934592 to {}*), {}* null, {}* null)
          to label %normal-dest1002 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1002:                                  ; preds = %normal-dest995
  %.elt3382 = extractvalue { {}*, i64 } %615, 0
  %.elt3384 = extractvalue { {}*, i64 } %615, 1
  %cond3203 = icmp eq i64 %.elt3384, 0
  %616 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288859.0 = select i1 %cond3203, {}* %616, {}* %.elt3382
  %617 = icmp eq {}* %G288859.0, %616
  br i1 %617, label %tag717, label %tag371

header-check-br1009:                              ; preds = %tag78
  %irc-bit-cast1013 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep1014 = getelementptr inbounds i8, i8* %irc-bit-cast1013, i64 -9
  %irc-bit-cast1015 = bitcast i8* %gep1014 to i64*
  %618 = load i64, i64* %irc-bit-cast1015, align 8
  %619 = icmp eq i64 %618, 1125
  br i1 %619, label %tag561, label %tag653

header-check-br1016:                              ; preds = %tag80
  %gep1021 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %52, i64 -9, i32 0
  %irc-bit-cast1022 = bitcast i8* %gep1021 to i64*
  %620 = load i64, i64* %irc-bit-cast1022, align 8
  %.off3873 = add i64 %620, -1081
  %621 = icmp ult i64 %.off3873, 69
  %.3713 = select i1 %621, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag517

normal-dest1034:                                  ; preds = %tag87
  %622 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i16] }>*
  %623 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum1035" = lshr exact i64 %623, 2
  %aref1036 = getelementptr inbounds <{ [15 x i8], [0 x i16] }>, <{ [15 x i8], [0 x i16] }>* %622, i64 0, i32 1, i64 %"untagged fixnum1035"
  store i16 %83, i16* %aref1036, align 2
  br label %tag544

header-check-br1037:                              ; preds = %tag88
  %irc-bit-cast1041 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep1042 = getelementptr inbounds i8, i8* %irc-bit-cast1041, i64 -9
  %irc-bit-cast1043 = bitcast i8* %gep1042 to i64*
  %624 = load i64, i64* %irc-bit-cast1043, align 8
  %625 = icmp eq i64 %624, 1089
  %.3675 = select i1 %625, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag129

normal-dest1048:                                  ; preds = %tag93
  %626 = invoke double @from_object_double({}* nonnull %OFFSET.13999)
          to label %normal-dest1049 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1049:                                  ; preds = %normal-dest1048
  %627 = fadd double %87, %626
  %628 = invoke {}* @to_object_double(double %627)
          to label %tag630 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1058:                                  ; preds = %normal-dest1690
  call void @unreachableError()
  unreachable

header-check-br1061:                              ; preds = %tag104
  %irc-bit-cast1065 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep1066 = getelementptr inbounds i8, i8* %irc-bit-cast1065, i64 -9
  %irc-bit-cast1067 = bitcast i8* %gep1066 to i64*
  %629 = load i64, i64* %irc-bit-cast1067, align 8
  %630 = icmp eq i64 %629, 1097
  br i1 %630, label %tag178, label %tag320

header-check-br1079:                              ; preds = %tag109
  %631 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3874 = add i64 %631, -1081
  %632 = icmp ult i64 %.off3874, 69
  br i1 %632, label %tag522, label %header-check-br817

normal-dest1089:                                  ; preds = %tag111
  %ptrtoint1090 = ptrtoint {}* %94 to i64
  %entry-point-addr-uint1091 = add i64 %ptrtoint1090, 7
  %entry-point-addr1092 = inttoptr i64 %entry-point-addr-uint1091 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1093 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1092, align 8
  %633 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1093({}* %94, i64 2, {}* %.in3353, {}* inttoptr (i64 1020 to {}*), {}* null, {}* null)
          to label %normal-dest1096 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1096:                                  ; preds = %normal-dest1089
  %.elt3464 = extractvalue { {}*, i64 } %633, 0
  %.elt3466 = extractvalue { {}*, i64 } %633, 1
  %cond3216 = icmp eq i64 %.elt3466, 0
  %634 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288892.0 = select i1 %cond3216, {}* %634, {}* %.elt3464
  %635 = icmp eq {}* %G288892.0, %634
  br i1 %635, label %tag406, label %normal-dest1096.tag638_crit_edge

normal-dest1096.tag638_crit_edge:                 ; preds = %normal-dest1096
  %object1212.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag638

normal-dest1118:                                  ; preds = %tag115
  %636 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %637 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %638 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %639 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 698), align 16
  %ptrtoint1119 = ptrtoint {}* %98 to i64
  %entry-point-addr-uint1120 = add i64 %ptrtoint1119, 7
  %entry-point-addr1121 = inttoptr i64 %entry-point-addr-uint1120 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1122 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1121, align 8
  %640 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1122({}* %98, i64 5, {}* %636, {}* %637, {}* %.in3353, {}* %638, {}* %639)
          to label %tag551 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1133:                                  ; preds = %tag119
  %641 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 731), align 8
  %ptrtoint1134 = ptrtoint {}* %103 to i64
  %entry-point-addr-uint1135 = add i64 %ptrtoint1134, 7
  %entry-point-addr1136 = inttoptr i64 %entry-point-addr-uint1135 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1137 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1136, align 8
  %642 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1137({}* %103, i64 2, {}* %vaarg, {}* %641, {}* null, {}* null)
          to label %tag689 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1146:                                  ; preds = %tag122
  %ptrtoint1148 = ptrtoint {}* %105 to i64
  %entry-point-addr-uint1149 = add i64 %ptrtoint1148, 7
  %entry-point-addr1150 = inttoptr i64 %entry-point-addr-uint1149 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1151 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1150, align 8
  %643 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1151({}* %105, i64 1, {}* %287, {}* null, {}* null, {}* null)
          to label %normal-dest1154 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1154:                                  ; preds = %normal-dest1146
  %.elt3591 = extractvalue { {}*, i64 } %643, 0
  %.elt3593 = extractvalue { {}*, i64 } %643, 1
  %cond3240 = icmp eq i64 %.elt3593, 0
  %644 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %index1155.1 = select i1 %cond3240, {}* %644, {}* %.elt3591
  br label %tag589

header-check-br1190:                              ; preds = %tag138
  %irc-bit-cast1194 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep1195 = getelementptr inbounds i8, i8* %irc-bit-cast1194, i64 -9
  %irc-bit-cast1196 = bitcast i8* %gep1195 to i64*
  %645 = load i64, i64* %irc-bit-cast1196, align 8
  %646 = icmp eq i64 %645, 1117
  %.3678 = select i1 %646, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag730

header-check-br1197:                              ; preds = %tag141
  %irc-bit-cast1201 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep1202 = getelementptr inbounds i8, i8* %irc-bit-cast1201, i64 -9
  %irc-bit-cast1203 = bitcast i8* %gep1202 to i64*
  %647 = load i64, i64* %irc-bit-cast1203, align 8
  %648 = icmp eq i64 %647, 1097
  br i1 %648, label %tag600, label %tag262

normal-dest1204:                                  ; preds = %tag147
  %649 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i64] }>*
  %650 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum1205" = lshr exact i64 %650, 2
  %aref1206 = getelementptr inbounds <{ [15 x i8], [0 x i64] }>, <{ [15 x i8], [0 x i64] }>* %649, i64 0, i32 1, i64 %"untagged fixnum1205"
  store i64 %115, i64* %aref1206, align 8
  br label %tag544

header-check-br1213:                              ; preds = %tag157
  %irc-bit-cast1217 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep1218 = getelementptr inbounds i8, i8* %irc-bit-cast1217, i64 -9
  %irc-bit-cast1219 = bitcast i8* %gep1218 to i64*
  %651 = load i64, i64* %irc-bit-cast1219, align 8
  %652 = icmp eq i64 %651, 1085
  br i1 %652, label %tag369, label %tag750

normal-dest1227:                                  ; preds = %tag166
  %653 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %654 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %655 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %656 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint1229 = ptrtoint {}* %130 to i64
  %entry-point-addr-uint1230 = add i64 %ptrtoint1229, 7
  %entry-point-addr1231 = inttoptr i64 %entry-point-addr-uint1230 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1232 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1231, align 8
  %657 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1232({}* %130, i64 5, {}* %653, {}* %654, {}* %"%SUBLIST287693.03929", {}* %655, {}* %656)
          to label %normal-dest1235 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1235:                                  ; preds = %normal-dest1227
  %.elt3551 = extractvalue { {}*, i64 } %657, 0
  %.elt3553 = extractvalue { {}*, i64 } %657, 1
  %cond3233 = icmp eq i64 %.elt3553, 0
  %658 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287700.1 = select i1 %cond3233, {}* %658, {}* %.elt3551
  br label %tag439

normal-dest1242:                                  ; preds = %tag167
  %659 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %660 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %661 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %662 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %ptrtoint1243 = ptrtoint {}* %132 to i64
  %entry-point-addr-uint1244 = add i64 %ptrtoint1243, 7
  %entry-point-addr1245 = inttoptr i64 %entry-point-addr-uint1244 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1246 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1245, align 8
  %663 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1246({}* %132, i64 5, {}* %659, {}* %660, {}* %p.0, {}* %661, {}* %662)
          to label %tag544 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br1255:                              ; preds = %tag170
  %gep1260 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast1261 = bitcast i8* %gep1260 to i64*
  %664 = load i64, i64* %irc-bit-cast1261, align 8
  %665 = icmp eq i64 %664, 1349
  %fixnum-tag-only10323376 = and i64 %ptrtoint1256, 3
  %fixnump-test1033 = icmp eq i64 %fixnum-tag-only10323376, 0
  %or.cond3788 = or i1 %fixnump-test1033, %665
  br i1 %or.cond3788, label %tag73, label %tag717

header-check-br1262:                              ; preds = %tag176
  %666 = load i64, i64* %irc-bit-cast2860, align 8
  %.off = add i64 %666, -1081
  %667 = icmp ult i64 %.off, 69
  br i1 %667, label %tag95, label %header-check-br2388

normal-dest1277:                                  ; preds = %tag518
  %ptrtoint1278 = ptrtoint {}* %392 to i64
  %entry-point-addr-uint1279 = add i64 %ptrtoint1278, 7
  %entry-point-addr1280 = inttoptr i64 %entry-point-addr-uint1279 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1281 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1280, align 8
  %668 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1281({}* %392, i64 2, {}* %LAUF.0, {}* %522, {}* null, {}* null)
          to label %normal-dest1284 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1284:                                  ; preds = %normal-dest1277
  %.elt3565 = extractvalue { {}*, i64 } %668, 0
  %.elt3567 = extractvalue { {}*, i64 } %668, 1
  %cond3236 = icmp eq i64 %.elt3567, 0
  %669 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object839.1 = select i1 %cond3236, {}* %669, {}* %.elt3565
  br label %tag357

normal-dest1291:                                  ; preds = %tag187
  %670 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 652), align 16
  %ptrtoint1292 = ptrtoint {}* %144 to i64
  %entry-point-addr-uint1293 = add i64 %ptrtoint1292, 7
  %entry-point-addr1294 = inttoptr i64 %entry-point-addr-uint1293 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1295 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1294, align 8
  %671 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1295({}* %144, i64 2, {}* %vaarg, {}* %670, {}* null, {}* null)
          to label %tag632 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br1303:                              ; preds = %tag624
  %672 = icmp eq i64 %234, 1113
  br i1 %672, label %tag32, label %tag722

normal-dest1339:                                  ; preds = %tag199
  %673 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %674 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %675 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %676 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint1340 = ptrtoint {}* %147 to i64
  %entry-point-addr-uint1341 = add i64 %ptrtoint1340, 7
  %entry-point-addr1342 = inttoptr i64 %entry-point-addr-uint1341 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1343 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1342, align 8
  %677 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1343({}* %147, i64 5, {}* %673, {}* %674, {}* %x.0, {}* %675, {}* %676)
          to label %normal-dest1346 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1346:                                  ; preds = %normal-dest1339
  %.elt3534 = extractvalue { {}*, i64 } %677, 0
  %.elt3536 = extractvalue { {}*, i64 } %677, 1
  %cond3229 = icmp eq i64 %.elt3536, 0
  %678 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x955.1 = select i1 %cond3229, {}* %678, {}* %.elt3534
  br label %tag58

normal-dest1356:                                  ; preds = %tag205
  %679 = invoke float @from_object_float({}* %"%DOTIMES-VAR.0")
          to label %normal-dest1357 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1357:                                  ; preds = %normal-dest1356
  %680 = fcmp olt float %152, %679
  br i1 %680, label %tag368, label %tag666

header-check-br1358:                              ; preds = %tag207
  %irc-bit-cast1362 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep1363 = getelementptr inbounds i8, i8* %irc-bit-cast1362, i64 -9
  %irc-bit-cast1364 = bitcast i8* %gep1363 to i64*
  %681 = load i64, i64* %irc-bit-cast1364, align 8
  %682 = icmp eq i64 %681, 1145
  %.3680 = select i1 %682, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag259

normal-dest1378:                                  ; preds = %maybe-more-tests1426
  %ptrtoint1379 = ptrtoint {}* %694 to i64
  %entry-point-addr-uint1380 = add i64 %ptrtoint1379, 7
  %entry-point-addr1381 = inttoptr i64 %entry-point-addr-uint1380 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1382 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1381, align 8
  %683 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1382({}* %694, i64 1, {}* nonnull %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest1385 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1385:                                  ; preds = %normal-dest1378
  %.elt3631 = extractvalue { {}*, i64 } %683, 0
  %.elt3633 = extractvalue { {}*, i64 } %683, 1
  %cond3248 = icmp eq i64 %.elt3633, 0
  %684 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288902.0 = select i1 %cond3248, {}* %684, {}* %.elt3631
  %685 = icmp eq {}* %G288902.0, inttoptr (i64 4 to {}*)
  br i1 %685, label %tag598, label %tag475

normal-dest1395:                                  ; preds = %maybe-more-tests2603
  %ptrtoint1396 = ptrtoint {}* %927 to i64
  %entry-point-addr-uint1397 = add i64 %ptrtoint1396, 7
  %entry-point-addr1398 = inttoptr i64 %entry-point-addr-uint1397 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1399 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1398, align 8
  %686 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1399({}* %927, i64 1, {}* nonnull %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest1402 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1402:                                  ; preds = %normal-dest1395
  %.elt3526 = extractvalue { {}*, i64 } %686, 0
  %.elt3528 = extractvalue { {}*, i64 } %686, 1
  %cond3225 = icmp eq i64 %.elt3528, 0
  %687 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288843.0 = select i1 %cond3225, {}* %687, {}* %.elt3526
  %688 = icmp eq {}* %G288843.0, inttoptr (i64 4 to {}*)
  br i1 %688, label %tag113, label %tag172

normal-dest1415:                                  ; preds = %tag229
  %689 = invoke double @from_object_double({}* nonnull %OFFSET895.14003)
          to label %normal-dest1416 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1416:                                  ; preds = %normal-dest1415
  %690 = fadd double %163, %689
  %691 = invoke {}* @to_object_double(double %690)
          to label %tag589 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br1418:                              ; preds = %header-check-br2854
  %.off3900 = add i64 %984, -1153
  %692 = icmp ult i64 %.off3900, 149
  br i1 %692, label %maybe-more-tests1426, label %tag475

maybe-more-tests1426:                             ; preds = %header-check-br1418
  %693 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %694 = invoke {}* @cc_safe_fdefinition({}* %693)
          to label %normal-dest1378 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1428:                                  ; preds = %tag235
  %ptrtoint1429 = ptrtoint {}* %167 to i64
  %entry-point-addr-uint1430 = add i64 %ptrtoint1429, 7
  %entry-point-addr1431 = inttoptr i64 %entry-point-addr-uint1430 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1432 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1431, align 8
  %695 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1432({}* %167, i64 2, {}* %.in3353, {}* inttoptr (i64 17179869180 to {}*), {}* null, {}* null)
          to label %normal-dest1435 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1435:                                  ; preds = %normal-dest1428
  %.elt3438 = extractvalue { {}*, i64 } %695, 0
  %.elt3440 = extractvalue { {}*, i64 } %695, 1
  %cond3212 = icmp eq i64 %.elt3440, 0
  %696 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288880.0 = select i1 %cond3212, {}* %696, {}* %.elt3438
  %697 = icmp eq {}* %G288880.0, %696
  br i1 %697, label %tag613, label %normal-dest1435.tag648_crit_edge

normal-dest1435.tag648_crit_edge:                 ; preds = %normal-dest1435
  %object2624.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag648

normal-dest1442:                                  ; preds = %tag236
  %698 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %699 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %700 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %701 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 680), align 16
  %ptrtoint1443 = ptrtoint {}* %169 to i64
  %entry-point-addr-uint1444 = add i64 %ptrtoint1443, 7
  %entry-point-addr1445 = inttoptr i64 %entry-point-addr-uint1444 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1446 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1445, align 8
  %702 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1446({}* %169, i64 5, {}* %698, {}* %699, {}* %.in3353, {}* %700, {}* %701)
          to label %tag727 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1464:                                  ; preds = %tag242
  %703 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %704 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %705 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %706 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 725), align 8
  %ptrtoint1465 = ptrtoint {}* %174 to i64
  %entry-point-addr-uint1466 = add i64 %ptrtoint1465, 7
  %entry-point-addr1467 = inttoptr i64 %entry-point-addr-uint1466 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1468 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1467, align 8
  %707 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1468({}* %174, i64 5, {}* %703, {}* %704, {}* %195, {}* %705, {}* %706)
          to label %normal-dest1471 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1471:                                  ; preds = %normal-dest1464
  %.elt3286 = extractvalue { {}*, i64 } %707, 0
  %.elt3288 = extractvalue { {}*, i64 } %707, 1
  %cond3193 = icmp eq i64 %.elt3288, 0
  %708 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288386.1 = select i1 %cond3193, {}* %708, {}* %.elt3286
  br label %tag51

normal-dest1481:                                  ; preds = %tag246
  %709 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i8] }>*
  %710 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum1482" = lshr exact i64 %710, 2
  %aref1483 = getelementptr inbounds <{ [15 x i8], [0 x i8] }>, <{ [15 x i8], [0 x i8] }>* %709, i64 0, i32 1, i64 %"untagged fixnum1482"
  store i8 %180, i8* %aref1483, align 1
  br label %tag544

normal-dest1485:                                  ; preds = %tag247
  %ptrtoint1487 = ptrtoint {}* %182 to i64
  %entry-point-addr-uint1488 = add i64 %ptrtoint1487, 7
  %entry-point-addr1489 = inttoptr i64 %entry-point-addr-uint1488 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1490 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1489, align 8
  %711 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1490({}* %182, i64 1, {}* %444, {}* null, {}* null, {}* null)
          to label %normal-dest1493 unwind label %cleanup-lpad.loopexit

normal-dest1493:                                  ; preds = %normal-dest1485
  %.elt3510 = extractvalue { {}*, i64 } %711, 0
  %.elt3512 = extractvalue { {}*, i64 } %711, 1
  %cond3224 = icmp eq i64 %.elt3512, 0
  %712 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G68960.1 = select i1 %cond3224, {}* %712, {}* %.elt3510
  br label %tag80

normal-dest1500:                                  ; preds = %tag248
  %ptrtoint1501 = ptrtoint {}* %184 to i64
  %entry-point-addr-uint1502 = add i64 %ptrtoint1501, 7
  %entry-point-addr1503 = inttoptr i64 %entry-point-addr-uint1502 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1504 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1503, align 8
  %713 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1504({}* %184, i64 2, {}* null, {}* %LAUF.0, {}* null, {}* null)
          to label %normal-dest1507 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1507:                                  ; preds = %normal-dest1500
  %.elt3316 = extractvalue { {}*, i64 } %713, 0
  %.elt3318 = extractvalue { {}*, i64 } %713, 1
  %cond3197 = icmp eq i64 %.elt3318, 0
  %714 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288226.1 = select i1 %cond3197, {}* %714, {}* %.elt3316
  br label %tag223

normal-dest1514:                                  ; preds = %tag249
  %715 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %716 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %717 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %718 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint1515 = ptrtoint {}* %186 to i64
  %entry-point-addr-uint1516 = add i64 %ptrtoint1515, 7
  %entry-point-addr1517 = inttoptr i64 %entry-point-addr-uint1516 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1518 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1517, align 8
  %719 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1518({}* %186, i64 5, {}* %715, {}* %716, {}* %SEQUENCE756.0.ph, {}* %717, {}* %718)
          to label %normal-dest1521 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

normal-dest1521:                                  ; preds = %normal-dest1514
  %.elt3643 = extractvalue { {}*, i64 } %719, 0
  %.elt3645 = extractvalue { {}*, i64 } %719, 1
  %cond3249 = icmp eq i64 %.elt3645, 0
  %720 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond3249, {}* %720, {}* %.elt3643
  br label %tag339

normal-dest1528:                                  ; preds = %tag251
  %721 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 637), align 8
  %ptrtoint1529 = ptrtoint {}* %188 to i64
  %entry-point-addr-uint1530 = add i64 %ptrtoint1529, 7
  %entry-point-addr1531 = inttoptr i64 %entry-point-addr-uint1530 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1532 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1531, align 8
  %722 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1532({}* %188, i64 2, {}* %vaarg, {}* %721, {}* null, {}* null)
          to label %normal-dest1535 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1535:                                  ; preds = %normal-dest1528
  %.elt3647 = extractvalue { {}*, i64 } %722, 0
  %.elt3649 = extractvalue { {}*, i64 } %722, 1
  %cond3250 = icmp eq i64 %.elt3649, 0
  %723 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %"%DOTIMES-VAR.1" = select i1 %cond3250, {}* %723, {}* %.elt3647
  br label %tag736

normal-dest1542:                                  ; preds = %tag255
  %724 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %725 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %726 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %727 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 375), align 8
  %ptrtoint1543 = ptrtoint {}* %190 to i64
  %entry-point-addr-uint1544 = add i64 %ptrtoint1543, 7
  %entry-point-addr1545 = inttoptr i64 %entry-point-addr-uint1544 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1546 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1545, align 8
  %728 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1546({}* %190, i64 5, {}* %724, {}* %725, {}* %.in3353, {}* %726, {}* %727)
          to label %tag560 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1559:                                  ; preds = %tag265
  %729 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 772), align 16
  %ptrtoint1560 = ptrtoint {}* %201 to i64
  %entry-point-addr-uint1561 = add i64 %ptrtoint1560, 7
  %entry-point-addr1562 = inttoptr i64 %entry-point-addr-uint1561 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1563 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1562, align 8
  %730 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1563({}* %201, i64 2, {}* %729, {}* %UNDERLYING-ARRAY.14001, {}* null, {}* null)
          to label %tag544 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br1571:                              ; preds = %tag266
  %irc-bit-cast1575 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep1576 = getelementptr inbounds i8, i8* %irc-bit-cast1575, i64 -9
  %irc-bit-cast1577 = bitcast i8* %gep1576 to i64*
  %731 = load i64, i64* %irc-bit-cast1577, align 8
  %732 = icmp eq i64 %731, 1093
  br i1 %732, label %tag27, label %tag502

header-check-br1604:                              ; preds = %tag276
  %irc-bit-cast1608 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep1609 = getelementptr inbounds i8, i8* %irc-bit-cast1608, i64 -9
  %irc-bit-cast1610 = bitcast i8* %gep1609 to i64*
  %733 = load i64, i64* %irc-bit-cast1610, align 8
  %734 = icmp eq i64 %733, 1105
  %.val4070 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val4071 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287893.0.pre = select i1 %734, {}* %.val4070, {}* %.val4071
  br label %tag417

normal-dest1632:                                  ; preds = %tag286
  %ptrtoint1633 = ptrtoint {}* %210 to i64
  %entry-point-addr-uint1634 = add i64 %ptrtoint1633, 7
  %entry-point-addr1635 = inttoptr i64 %entry-point-addr-uint1634 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1636 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1635, align 8
  %735 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1636({}* %210, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest1639 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest1639:                                  ; preds = %normal-dest1632
  %.elt = extractvalue { {}*, i64 } %735, 0
  %.elt3257 = extractvalue { {}*, i64 } %735, 1
  %cond = icmp eq i64 %.elt3257, 0
  %736 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond, {}* %736, {}* %.elt
  br label %tag491.outer.backedge

normal-dest1646:                                  ; preds = %tag288
  %ptrtoint1647 = ptrtoint {}* %213 to i64
  %entry-point-addr-uint1648 = add i64 %ptrtoint1647, 7
  %entry-point-addr1649 = inttoptr i64 %entry-point-addr-uint1648 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1650 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1649, align 8
  %737 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1650({}* %213, i64 2, {}* %.in3353, {}* %211, {}* null, {}* null)
          to label %normal-dest1653 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1653:                                  ; preds = %normal-dest1646
  %.elt3425 = extractvalue { {}*, i64 } %737, 0
  %.elt3427 = extractvalue { {}*, i64 } %737, 1
  %cond3210 = icmp eq i64 %.elt3427, 0
  %738 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288874.0 = select i1 %cond3210, {}* %738, {}* %.elt3425
  %739 = icmp eq {}* %G288874.0, %738
  %.val4067 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object840.0.pre = select i1 %739, {}* %738, {}* %.val4067
  br label %tag33

header-check-br1661:                              ; preds = %tag290
  %740 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3894 = add i64 %740, -1081
  %741 = icmp ult i64 %.off3894, 69
  br i1 %741, label %tag366, label %header-check-br1822

normal-dest1671:                                  ; preds = %tag292
  %ptrtoint1674 = ptrtoint {}* %217 to i64
  %entry-point-addr-uint1675 = add i64 %ptrtoint1674, 7
  %entry-point-addr1676 = inttoptr i64 %entry-point-addr-uint1675 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1677 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1676, align 8
  %742 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1677({}* %217, i64 2, {}* %OFFSET895.0, {}* %409, {}* null, {}* null)
          to label %normal-dest1680 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1680:                                  ; preds = %normal-dest1671
  %.elt3610 = extractvalue { {}*, i64 } %742, 0
  %.elt3612 = extractvalue { {}*, i64 } %742, 1
  %cond3244 = icmp eq i64 %.elt3612, 0
  %743 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G68587.2 = select i1 %cond3244, {}* %743, {}* %.elt3610
  br label %tag421

normal-dest1690:                                  ; preds = %tag297
  %744 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %745 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %746 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %747 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %ptrtoint1052 = ptrtoint {}* %219 to i64
  %entry-point-addr-uint1053 = add i64 %ptrtoint1052, 7
  %entry-point-addr1054 = inttoptr i64 %entry-point-addr-uint1053 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1055 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1054, align 8
  %748 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1055({}* %219, i64 5, {}* %744, {}* %745, {}* %"%SUBLIST287693.03929", {}* %746, {}* %747)
          to label %normal-dest1058 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest1692:                                  ; preds = %tag298
  %ptrtoint1693 = ptrtoint {}* %221 to i64
  %entry-point-addr-uint1694 = add i64 %ptrtoint1693, 7
  %entry-point-addr1695 = inttoptr i64 %entry-point-addr-uint1694 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1696 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1695, align 8
  %749 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1696({}* %221, i64 2, {}* %.in3353, {}* null, {}* null, {}* null)
          to label %normal-dest1699 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1699:                                  ; preds = %normal-dest1692
  %.elt3434 = extractvalue { {}*, i64 } %749, 0
  %.elt3436 = extractvalue { {}*, i64 } %749, 1
  %cond3211 = icmp eq i64 %.elt3436, 0
  %750 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288883.0 = select i1 %cond3211, {}* %750, {}* %.elt3434
  %751 = icmp eq {}* %G288883.0, %750
  br i1 %751, label %tag613, label %tag235

header-check-br1727:                              ; preds = %tag308
  %752 = load i64, i64* %irc-bit-cast1733, align 8
  %.off3883 = add i64 %752, -913
  %753 = icmp ult i64 %.off3883, 85
  br i1 %753, label %tag51, label %header-check-br1931

normal-dest1744:                                  ; preds = %tag313
  %ptrtoint1745 = ptrtoint {}* %230 to i64
  %entry-point-addr-uint1746 = add i64 %ptrtoint1745, 7
  %entry-point-addr1747 = inttoptr i64 %entry-point-addr-uint1746 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1748 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1747, align 8
  %754 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1748({}* %230, i64 2, {}* %.in3353, {}* inttoptr (i64 508 to {}*), {}* null, {}* null)
          to label %normal-dest1751 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1751:                                  ; preds = %normal-dest1744
  %.elt3412 = extractvalue { {}*, i64 } %754, 0
  %.elt3414 = extractvalue { {}*, i64 } %754, 1
  %cond3208 = icmp eq i64 %.elt3414, 0
  %755 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288868.0 = select i1 %cond3208, {}* %755, {}* %.elt3412
  %756 = icmp eq {}* %G288868.0, %755
  br i1 %756, label %tag432, label %normal-dest1751.tag116_crit_edge

normal-dest1751.tag116_crit_edge:                 ; preds = %normal-dest1751
  %object1130.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag116

normal-dest1776:                                  ; preds = %tag319
  %757 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %758 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %759 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %760 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 642), align 16
  %ptrtoint1777 = ptrtoint {}* %238 to i64
  %entry-point-addr-uint1778 = add i64 %ptrtoint1777, 7
  %entry-point-addr1779 = inttoptr i64 %entry-point-addr-uint1778 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1780 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1779, align 8
  %761 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1780({}* %238, i64 5, {}* %757, {}* %758, {}* %vaarg, {}* %759, {}* %760)
          to label %normal-dest1783 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1783:                                  ; preds = %normal-dest1776
  %.elt3623 = extractvalue { {}*, i64 } %761, 0
  %.elt3625 = extractvalue { {}*, i64 } %761, 1
  %cond3246 = icmp eq i64 %.elt3625, 0
  %762 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ELEMENT.1 = select i1 %cond3246, {}* %762, {}* %.elt3623
  br label %tag264

normal-dest1789:                                  ; preds = %tag323
  %763 = invoke float @from_object_float({}* %OFFSET895.14003)
          to label %normal-dest1790 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1790:                                  ; preds = %normal-dest1789
  %764 = fadd float %241, %763
  %765 = invoke {}* @to_object_float(float %764)
          to label %tag589 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1793:                                  ; preds = %tag324
  %766 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %767 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %768 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %769 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 642), align 16
  %ptrtoint1795 = ptrtoint {}* %243 to i64
  %entry-point-addr-uint1796 = add i64 %ptrtoint1795, 7
  %entry-point-addr1797 = inttoptr i64 %entry-point-addr-uint1796 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1798 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1797, align 8
  %770 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1798({}* %243, i64 5, {}* %766, {}* %767, {}* %vaarg, {}* %768, {}* %769)
          to label %tag544 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br1822:                              ; preds = %header-check-br1661
  %.off3895 = add i64 %740, -1153
  %771 = icmp ult i64 %.off3895, 149
  %.3715 = select i1 %771, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag366

normal-dest1836:                                  ; preds = %tag341
  %772 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %773 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 719), align 8
  %774 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 720), align 16
  %775 = invoke {}* @cc_safe_fdefinition({}* %774)
          to label %normal-dest1838 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1838:                                  ; preds = %normal-dest1836
  %ptrtoint1839 = ptrtoint {}* %775 to i64
  %entry-point-addr-uint1840 = add i64 %ptrtoint1839, 7
  %entry-point-addr1841 = inttoptr i64 %entry-point-addr-uint1840 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1842 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1841, align 8
  %776 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1842({}* %775, i64 1, {}* %UNDERLYING-ARRAY892.14005, {}* null, {}* null, {}* null)
          to label %normal-dest1845 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1845:                                  ; preds = %normal-dest1838
  %.elt3578 = extractvalue { {}*, i64 } %776, 0
  %.elt3580 = extractvalue { {}*, i64 } %776, 1
  %cond3238 = icmp eq i64 %.elt3580, 0
  %777 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288465.0 = select i1 %cond3238, {}* %777, {}* %.elt3578
  %ptrtoint1851 = ptrtoint {}* %253 to i64
  %entry-point-addr-uint1852 = add i64 %ptrtoint1851, 7
  %entry-point-addr1853 = inttoptr i64 %entry-point-addr-uint1852 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1854 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1853, align 8
  %778 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1854({}* %253, i64 3, {}* %772, {}* %773, {}* %G288465.0, {}* null)
          to label %normal-dest1857 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1857:                                  ; preds = %normal-dest1845
  %779 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %780 = invoke {}* @cc_safe_fdefinition({}* %779)
          to label %normal-dest1863 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1863:                                  ; preds = %normal-dest1857
  %781 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 722), align 16
  %ptrtoint1864 = ptrtoint {}* %780 to i64
  %entry-point-addr-uint1865 = add i64 %ptrtoint1864, 7
  %entry-point-addr1866 = inttoptr i64 %entry-point-addr-uint1865 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1867 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1866, align 8
  %782 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1867({}* %780, i64 2, {}* %781, {}* %UNDERLYING-ARRAY892.14005, {}* null, {}* null)
          to label %normal-dest1870 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1870:                                  ; preds = %normal-dest1863
  %.elt3586 = extractvalue { {}*, i64 } %782, 0
  %.elt3588 = extractvalue { {}*, i64 } %782, 1
  %cond3239 = icmp eq i64 %.elt3588, 0
  %783 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ELEMENT.2 = select i1 %cond3239, {}* %783, {}* %.elt3586
  br label %tag264

normal-dest1877:                                  ; preds = %tag342
  %784 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 664), align 16
  %ptrtoint1878 = ptrtoint {}* %255 to i64
  %entry-point-addr-uint1879 = add i64 %ptrtoint1878, 7
  %entry-point-addr1880 = inttoptr i64 %entry-point-addr-uint1879 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1881 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1880, align 8
  %785 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1881({}* %255, i64 3, {}* %784, {}* %LAUF.0, {}* %vaarg, {}* null)
          to label %tag45 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1890:                                  ; preds = %tag343
  %ptrtoint1891 = ptrtoint {}* %258 to i64
  %entry-point-addr-uint1892 = add i64 %ptrtoint1891, 7
  %entry-point-addr1893 = inttoptr i64 %entry-point-addr-uint1892 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1894 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1893, align 8
  %786 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1894({}* %258, i64 2, {}* %.in3353, {}* %256, {}* null, {}* null)
          to label %normal-dest1897 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1897:                                  ; preds = %normal-dest1890
  %.elt3369 = extractvalue { {}*, i64 } %786, 0
  %.elt3371 = extractvalue { {}*, i64 } %786, 1
  %cond3201 = icmp eq i64 %.elt3371, 0
  %787 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288853.0 = select i1 %cond3201, {}* %787, {}* %.elt3369
  %788 = icmp eq {}* %G288853.0, %787
  br i1 %788, label %tag96, label %tag559

header-check-br1910:                              ; preds = %tag346
  %gep1915 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast1916 = bitcast i8* %gep1915 to i64*
  %789 = load i64, i64* %irc-bit-cast1916, align 8
  %790 = icmp eq i64 %789, 1349
  %fixnum-tag-only15543467 = and i64 %ptrtoint1911, 3
  %fixnump-test1555 = icmp eq i64 %fixnum-tag-only15543467, 0
  %or.cond3791 = or i1 %fixnump-test1555, %790
  br i1 %or.cond3791, label %tag35, label %tag64

normal-dest1918:                                  ; preds = %tag348
  %ptrtoint1919 = ptrtoint {}* %263 to i64
  %entry-point-addr-uint1920 = add i64 %ptrtoint1919, 7
  %entry-point-addr1921 = inttoptr i64 %entry-point-addr-uint1920 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1922 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1921, align 8
  %791 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1922({}* %263, i64 2, {}* %.in3353, {}* null, {}* null, {}* null)
          to label %normal-dest1925 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1925:                                  ; preds = %normal-dest1918
  %.elt3447 = extractvalue { {}*, i64 } %791, 0
  %.elt3449 = extractvalue { {}*, i64 } %791, 1
  %cond3213 = icmp eq i64 %.elt3449, 0
  %792 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288889.0 = select i1 %cond3213, {}* %792, {}* %.elt3447
  %793 = icmp eq {}* %G288889.0, %792
  br i1 %793, label %tag150, label %tag664

header-check-br1931:                              ; preds = %header-check-br1727
  %.off3884 = add i64 %752, -1001
  %794 = icmp ult i64 %.off3884, 5
  br i1 %794, label %maybe-more-tests1939, label %tag242

maybe-more-tests1939:                             ; preds = %header-check-br1931
  %795 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %796 = invoke {}* @cc_safe_fdefinition({}* %795)
          to label %normal-dest2787 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest1953:                                  ; preds = %tag361
  %797 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 741), align 8
  %ptrtoint1955 = ptrtoint {}* %282 to i64
  %entry-point-addr-uint1956 = add i64 %ptrtoint1955, 7
  %entry-point-addr1957 = inttoptr i64 %entry-point-addr-uint1956 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1958 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1957, align 8
  %798 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1958({}* %282, i64 3, {}* %797, {}* %LAUF.0, {}* %vaarg, {}* null)
          to label %tag279 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br1966:                              ; preds = %tag365
  %gep1971 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast1972 = bitcast i8* %gep1971 to i64*
  %799 = load i64, i64* %irc-bit-cast1972, align 8
  %800 = icmp eq i64 %799, 1349
  %fixnum-tag-only28363402 = and i64 %ptrtoint1967, 3
  %fixnump-test2837 = icmp eq i64 %fixnum-tag-only28363402, 0
  %or.cond3802 = or i1 %fixnump-test2837, %800
  br i1 %or.cond3802, label %tag740, label %tag432

normal-dest1976:                                  ; preds = %tag371
  %ptrtoint1977 = ptrtoint {}* %294 to i64
  %entry-point-addr-uint1978 = add i64 %ptrtoint1977, 7
  %entry-point-addr1979 = inttoptr i64 %entry-point-addr-uint1978 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point1980 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1979, align 8
  %801 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point1980({}* %294, i64 2, {}* %.in3353, {}* inttoptr (i64 8589934588 to {}*), {}* null, {}* null)
          to label %normal-dest1983 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest1983:                                  ; preds = %normal-dest1976
  %.elt3386 = extractvalue { {}*, i64 } %801, 0
  %.elt3388 = extractvalue { {}*, i64 } %801, 1
  %cond3204 = icmp eq i64 %.elt3388, 0
  %802 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288856.0 = select i1 %cond3204, {}* %802, {}* %.elt3386
  %803 = icmp eq {}* %G288856.0, %802
  br i1 %803, label %tag717, label %normal-dest1983.tag180_crit_edge

normal-dest1983.tag180_crit_edge:                 ; preds = %normal-dest1983
  %object1254.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag180

normal-dest1996:                                  ; preds = %tag405
  %ptrtoint1997 = ptrtoint {}* %317 to i64
  %entry-point-addr-uint1998 = add i64 %ptrtoint1997, 7
  %entry-point-addr1999 = inttoptr i64 %entry-point-addr-uint1998 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2000 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr1999, align 8
  %804 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2000({}* %317, i64 2, {}* %LAUF.0, {}* %414, {}* null, {}* null)
          to label %normal-dest2003 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2003:                                  ; preds = %normal-dest1996
  %.elt3321 = extractvalue { {}*, i64 } %804, 0
  %.elt3323 = extractvalue { {}*, i64 } %804, 1
  %cond3198 = icmp eq i64 %.elt3323, 0
  %805 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.2 = select i1 %cond3198, {}* %805, {}* %.elt3321
  br label %tag149

normal-dest2018:                                  ; preds = %normal-dest2550
  call void @unreachableError()
  unreachable

header-check-br2019:                              ; preds = %tag581
  %irc-bit-cast2023 = bitcast {}* %LAUF.0 to i8*
  %gep2024 = getelementptr inbounds i8, i8* %irc-bit-cast2023, i64 -9
  %irc-bit-cast2025 = bitcast i8* %gep2024 to i64*
  %806 = load i64, i64* %irc-bit-cast2025, align 8
  %807 = icmp eq i64 %806, 1325
  br i1 %807, label %tag381, label %tag424

header-check-br2026:                              ; preds = %tag381
  %irc-bit-cast2030 = bitcast {}* %OFFSET.13999 to i8*
  %gep2031 = getelementptr inbounds i8, i8* %irc-bit-cast2030, i64 -9
  %irc-bit-cast2032 = bitcast i8* %gep2031 to i64*
  %808 = load i64, i64* %irc-bit-cast2032, align 8
  %809 = icmp eq i64 %808, 1325
  br i1 %809, label %tag93, label %tag424

normal-dest2034:                                  ; preds = %tag382
  %810 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %811 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %812 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %813 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 714), align 16
  %ptrtoint2035 = ptrtoint {}* %305 to i64
  %entry-point-addr-uint2036 = add i64 %ptrtoint2035, 7
  %entry-point-addr2037 = inttoptr i64 %entry-point-addr-uint2036 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2038 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2037, align 8
  %814 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2038({}* %305, i64 5, {}* %810, {}* %811, {}* %.in3353, {}* %812, {}* %813)
          to label %tag466 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br2046:                              ; preds = %tag383
  %irc-bit-cast2050 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2051 = getelementptr inbounds i8, i8* %irc-bit-cast2050, i64 -9
  %irc-bit-cast2052 = bitcast i8* %gep2051 to i64*
  %815 = load i64, i64* %irc-bit-cast2052, align 8
  %816 = icmp eq i64 %815, 1113
  %.3691 = select i1 %816, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag675

normal-dest2055:                                  ; preds = %tag387
  %817 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %818 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %819 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %820 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 694), align 16
  %ptrtoint2056 = ptrtoint {}* %309 to i64
  %entry-point-addr-uint2057 = add i64 %ptrtoint2056, 7
  %entry-point-addr2058 = inttoptr i64 %entry-point-addr-uint2057 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2059 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2058, align 8
  %821 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2059({}* %309, i64 5, {}* %817, {}* %818, {}* %.in3353, {}* %819, {}* %820)
          to label %tag399 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2070:                                  ; preds = %tag393
  %822 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x float] }>*
  %823 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2071" = lshr exact i64 %823, 2
  %aref2072 = getelementptr inbounds <{ [15 x i8], [0 x float] }>, <{ [15 x i8], [0 x float] }>* %822, i64 0, i32 1, i64 %"untagged fixnum2071"
  store float %311, float* %aref2072, align 4
  br label %tag544

header-check-br2079:                              ; preds = %tag396
  %irc-bit-cast2083 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep2084 = getelementptr inbounds i8, i8* %irc-bit-cast2083, i64 -9
  %irc-bit-cast2085 = bitcast i8* %gep2084 to i64*
  %824 = load i64, i64* %irc-bit-cast2085, align 8
  %825 = icmp eq i64 %824, 1125
  %.3692 = select i1 %825, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag389

header-check-br2086:                              ; preds = %tag397
  %irc-bit-cast2090 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep2091 = getelementptr inbounds i8, i8* %irc-bit-cast2090, i64 -9
  %irc-bit-cast2092 = bitcast i8* %gep2091 to i64*
  %826 = load i64, i64* %irc-bit-cast2092, align 8
  %827 = icmp eq i64 %826, 1149
  br i1 %827, label %tag440, label %tag606

normal-dest2093:                                  ; preds = %tag399
  %828 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i8] }>*
  %829 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2094" = lshr exact i64 %829, 2
  %aref2095 = getelementptr inbounds <{ [15 x i8], [0 x i8] }>, <{ [15 x i8], [0 x i8] }>* %828, i64 0, i32 1, i64 %"untagged fixnum2094"
  store i8 %312, i8* %aref2095, align 1
  br label %tag544

normal-dest2096:                                  ; preds = %tag403
  %830 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i32] }>*
  %831 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2097" = lshr exact i64 %831, 2
  %aref2098 = getelementptr inbounds <{ [15 x i8], [0 x i32] }>, <{ [15 x i8], [0 x i32] }>* %830, i64 0, i32 1, i64 %"untagged fixnum2097"
  store i32 %315, i32* %aref2098, align 4
  br label %tag544

normal-dest2100:                                  ; preds = %maybe-more-tests2306
  %ptrtoint2101 = ptrtoint {}* %872 to i64
  %entry-point-addr-uint2102 = add i64 %ptrtoint2101, 7
  %entry-point-addr2103 = inttoptr i64 %entry-point-addr-uint2102 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2104 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2103, align 8
  %832 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2104({}* %872, i64 1, {}* nonnull %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest2107 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2107:                                  ; preds = %normal-dest2100
  %.elt3651 = extractvalue { {}*, i64 } %832, 0
  %.elt3653 = extractvalue { {}*, i64 } %832, 1
  %cond3251 = icmp eq i64 %.elt3653, 0
  %833 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288905.0 = select i1 %cond3251, {}* %833, {}* %.elt3651
  %834 = icmp eq {}* %G288905.0, inttoptr (i64 4 to {}*)
  br i1 %834, label %tag12, label %tag425

normal-dest2121:                                  ; preds = %tag535
  %ptrtoint2122 = ptrtoint {}* %416 to i64
  %entry-point-addr-uint2123 = add i64 %ptrtoint2122, 7
  %entry-point-addr2124 = inttoptr i64 %entry-point-addr-uint2123 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2125 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2124, align 8
  %835 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2125({}* %416, i64 2, {}* %LAUF.0, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest2128 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2128:                                  ; preds = %normal-dest2121
  %.elt3307 = extractvalue { {}*, i64 } %835, 0
  %.elt3309 = extractvalue { {}*, i64 } %835, 1
  %cond3226 = icmp eq i64 %.elt3309, 0
  %836 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LAUF.1 = select i1 %cond3226, {}* %836, {}* %.elt3307
  br label %tag448.backedge

normal-dest2135:                                  ; preds = %tag411
  %837 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %838 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %839 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %840 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint2136 = ptrtoint {}* %319 to i64
  %entry-point-addr-uint2137 = add i64 %ptrtoint2136, 7
  %entry-point-addr2138 = inttoptr i64 %entry-point-addr-uint2137 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2139 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2138, align 8
  %841 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2139({}* %319, i64 5, {}* %837, {}* %838, {}* %x2273.0, {}* %839, {}* %840)
          to label %normal-dest2142 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2142:                                  ; preds = %normal-dest2135
  %.elt3555 = extractvalue { {}*, i64 } %841, 0
  %.elt3557 = extractvalue { {}*, i64 } %841, 1
  %cond3234 = icmp eq i64 %.elt3557, 0
  %842 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ELEMENT.3 = select i1 %cond3234, {}* %842, {}* %.elt3555
  br label %tag264

normal-dest2152:                                  ; preds = %tag414
  %843 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 638), align 16
  %ptrtoint2153 = ptrtoint {}* %321 to i64
  %entry-point-addr-uint2154 = add i64 %ptrtoint2153, 7
  %entry-point-addr2155 = inttoptr i64 %entry-point-addr-uint2154 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2156 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2155, align 8
  %844 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2156({}* %321, i64 2, {}* %G2095854.0, {}* %843, {}* null, {}* null)
          to label %tag491 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit

header-check-br2171:                              ; preds = %tag421
  %gep2176 = getelementptr inbounds %"class.core::T_O", %"class.core::T_O"* %402, i64 -9, i32 0
  %irc-bit-cast2177 = bitcast i8* %gep2176 to i64*
  %845 = load i64, i64* %irc-bit-cast2177, align 8
  %.off3893 = add i64 %845, -1081
  %846 = icmp ult i64 %.off3893, 69
  %.3716 = select i1 %846, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag656

normal-dest2183:                                  ; preds = %tag424
  %ptrtoint2184 = ptrtoint {}* %324 to i64
  %entry-point-addr-uint2185 = add i64 %ptrtoint2184, 7
  %entry-point-addr2186 = inttoptr i64 %entry-point-addr-uint2185 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2187 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2186, align 8
  %847 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2187({}* %324, i64 2, {}* %LAUF.0, {}* %OFFSET.13999, {}* null, {}* null)
          to label %normal-dest2190 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2190:                                  ; preds = %normal-dest2183
  %.elt3330 = extractvalue { {}*, i64 } %847, 0
  %.elt3332 = extractvalue { {}*, i64 } %847, 1
  %cond3199 = icmp eq i64 %.elt3332, 0
  %848 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %index.1 = select i1 %cond3199, {}* %848, {}* %.elt3330
  br label %tag630

normal-dest2198:                                  ; preds = %tag427
  %849 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %850 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %851 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %852 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint2199 = ptrtoint {}* %326 to i64
  %entry-point-addr-uint2200 = add i64 %ptrtoint2199, 7
  %entry-point-addr2201 = inttoptr i64 %entry-point-addr-uint2200 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2202 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2201, align 8
  %853 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2202({}* %326, i64 5, {}* %849, {}* %850, {}* %G287700.0, {}* %851, {}* %852)
          to label %normal-dest2205 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest2205:                                  ; preds = %normal-dest2198
  %.elt3547 = extractvalue { {}*, i64 } %853, 0
  %.elt3549 = extractvalue { {}*, i64 } %853, 1
  %cond3231 = icmp eq i64 %.elt3549, 0
  %854 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G287701.1 = select i1 %cond3231, {}* %854, {}* %.elt3547
  br label %tag308

header-check-br2217:                              ; preds = %tag444
  %gep2222 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast2223 = bitcast i8* %gep2222 to i64*
  %855 = load i64, i64* %irc-bit-cast2223, align 8
  %856 = icmp eq i64 %855, 1349
  %fixnum-tag-only22833428 = and i64 %ptrtoint2218, 3
  %fixnump-test2284 = icmp eq i64 %fixnum-tag-only22833428, 0
  %or.cond3796 = or i1 %fixnump-test2284, %856
  br i1 %or.cond3796, label %tag298, label %tag613

normal-dest2231:                                  ; preds = %tag449
  %857 = invoke double @from_object_double({}* nonnull %"%DOTIMES-VAR.0")
          to label %normal-dest2232 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2232:                                  ; preds = %normal-dest2231
  %858 = fcmp olt double %339, %857
  br i1 %858, label %tag52, label %tag591

header-check-br2233:                              ; preds = %tag450
  %irc-bit-cast2237 = bitcast {}* %OFFSET895.14003 to i8*
  %gep2238 = getelementptr inbounds i8, i8* %irc-bit-cast2237, i64 -9
  %irc-bit-cast2239 = bitcast i8* %gep2238 to i64*
  %859 = load i64, i64* %irc-bit-cast2239, align 8
  %860 = icmp eq i64 %859, 1325
  br i1 %860, label %tag229, label %tag712

normal-dest2249:                                  ; preds = %tag453
  %861 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %862 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %863 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %864 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 690), align 16
  %ptrtoint2250 = ptrtoint {}* %346 to i64
  %entry-point-addr-uint2251 = add i64 %ptrtoint2250, 7
  %entry-point-addr2252 = inttoptr i64 %entry-point-addr-uint2251 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2253 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2252, align 8
  %865 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2253({}* %346, i64 5, {}* %861, {}* %862, {}* %.in3353, {}* %863, {}* %864)
          to label %tag576 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2265:                                  ; preds = %tag455
  %ptrtoint2266 = ptrtoint {}* %352 to i64
  %entry-point-addr-uint2267 = add i64 %ptrtoint2266, 7
  %entry-point-addr2268 = inttoptr i64 %entry-point-addr-uint2267 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2269 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2268, align 8
  %866 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2269({}* %352, i64 2, {}* %LAUF.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest2272 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2272:                                  ; preds = %normal-dest2265
  %.elt3269 = extractvalue { {}*, i64 } %866, 0
  %.elt3271 = extractvalue { {}*, i64 } %866, 1
  %cond3192 = icmp eq i64 %.elt3271, 0
  %867 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x2273.0 = select i1 %cond3192, {}* %867, {}* %.elt3269
  %868 = ptrtoint {}* %x2273.0 to i64
  %tag-only22813272 = and i64 %868, 7
  %consp-test2282 = icmp eq i64 %tag-only22813272, 3
  %.val3818 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G288759.0 = select i1 %consp-test2282, {}* %.val3818, {}* %867
  %869 = icmp eq {}* %G288759.0, %867
  br i1 %869, label %tag353, label %tag567

header-check-br2298:                              ; preds = %header-check-br2352
  %.off3904 = add i64 %877, -1153
  %870 = icmp ult i64 %.off3904, 149
  br i1 %870, label %maybe-more-tests2306, label %tag425

maybe-more-tests2306:                             ; preds = %header-check-br2298
  %871 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %872 = invoke {}* @cc_safe_fdefinition({}* %871)
          to label %normal-dest2100 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

header-check-br2314:                              ; preds = %tag474
  %gep2319 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast2320 = bitcast i8* %gep2319 to i64*
  %873 = load i64, i64* %irc-bit-cast2320, align 8
  %874 = icmp eq i64 %873, 1349
  %fixnum-tag-only25303363 = and i64 %ptrtoint2315, 3
  %fixnump-test2531 = icmp eq i64 %fixnum-tag-only25303363, 0
  %or.cond3800 = or i1 %fixnump-test2531, %874
  br i1 %or.cond3800, label %tag343, label %tag96

normal-dest2339:                                  ; preds = %tag480
  %ptrtoint2340 = ptrtoint {}* %373 to i64
  %entry-point-addr-uint2341 = add i64 %ptrtoint2340, 7
  %entry-point-addr2342 = inttoptr i64 %entry-point-addr-uint2341 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2343 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2342, align 8
  %875 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2343({}* %373, i64 1, {}* %482, {}* null, {}* null, {}* null)
          to label %normal-dest2346 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2346:                                  ; preds = %normal-dest2339
  %.elt3486 = extractvalue { {}*, i64 } %875, 0
  %.elt3488 = extractvalue { {}*, i64 } %875, 1
  %cond3219 = icmp eq i64 %.elt3488, 0
  %876 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %index.2 = select i1 %cond3219, {}* %876, {}* %.elt3486
  br label %tag630

header-check-br2352:                              ; preds = %tag481
  %irc-bit-cast2356 = bitcast {}* %vaarg to i8*
  %gep2357 = getelementptr inbounds i8, i8* %irc-bit-cast2356, i64 -9
  %irc-bit-cast2358 = bitcast i8* %gep2357 to i64*
  %877 = load i64, i64* %irc-bit-cast2358, align 8
  %.off3903 = add i64 %877, -1081
  %878 = icmp ult i64 %.off3903, 69
  br i1 %878, label %tag12, label %header-check-br2298

normal-dest2375:                                  ; preds = %tag489
  %ptrtoint2376 = ptrtoint {}* %375 to i64
  %entry-point-addr-uint2377 = add i64 %ptrtoint2376, 7
  %entry-point-addr2378 = inttoptr i64 %entry-point-addr-uint2377 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2379 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2378, align 8
  %879 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2379({}* %375, i64 2, {}* %.in3353, {}* inttoptr (i64 131068 to {}*), {}* null, {}* null)
          to label %normal-dest2382 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2382:                                  ; preds = %normal-dest2375
  %.elt3399 = extractvalue { {}*, i64 } %879, 0
  %.elt3401 = extractvalue { {}*, i64 } %879, 1
  %cond3206 = icmp eq i64 %.elt3401, 0
  %880 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288862.0 = select i1 %cond3206, {}* %880, {}* %.elt3399
  %881 = icmp eq {}* %G288862.0, %880
  %.val3984 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object1337.0.pre = select i1 %881, {}* %880, {}* %.val3984
  br label %tag239

header-check-br2388:                              ; preds = %header-check-br1262
  %.off3871 = add i64 %666, -1153
  %882 = icmp ult i64 %.off3871, 149
  %.3718 = select i1 %882, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag95

header-check-br2400:                              ; preds = %tag492
  %gep2405 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast2406 = bitcast i8* %gep2405 to i64*
  %883 = load i64, i64* %irc-bit-cast2406, align 8
  %884 = icmp eq i64 %883, 1349
  %fixnum-tag-only24743454 = and i64 %ptrtoint2401, 3
  %fixnump-test2475 = icmp eq i64 %fixnum-tag-only24743454, 0
  %or.cond3798 = or i1 %fixnump-test2475, %884
  br i1 %or.cond3798, label %tag557, label %tag406

header-check-br2410:                              ; preds = %tag496
  %885 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3890 = add i64 %885, -1081
  %886 = icmp ult i64 %.off3890, 69
  br i1 %886, label %tag245, label %header-check-br978

header-check-br2432:                              ; preds = %tag508
  %gep2437 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast2438 = bitcast i8* %gep2437 to i64*
  %887 = load i64, i64* %irc-bit-cast2438, align 8
  %888 = icmp eq i64 %887, 1349
  %fixnum-tag-only30863415 = and i64 %ptrtoint2433, 3
  %fixnump-test3087 = icmp eq i64 %fixnum-tag-only30863415, 0
  %or.cond3807 = or i1 %fixnump-test3087, %888
  br i1 %or.cond3807, label %tag657, label %tag33

header-check-br2439:                              ; preds = %tag510
  %irc-bit-cast2443 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2444 = getelementptr inbounds i8, i8* %irc-bit-cast2443, i64 -9
  %irc-bit-cast2445 = bitcast i8* %gep2444 to i64*
  %889 = load i64, i64* %irc-bit-cast2445, align 8
  %890 = icmp eq i64 %889, 1105
  %.3700 = select i1 %890, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag68

normal-dest2447:                                  ; preds = %tag512
  %ptrtoint2448 = ptrtoint {}* %386 to i64
  %entry-point-addr-uint2449 = add i64 %ptrtoint2448, 7
  %entry-point-addr2450 = inttoptr i64 %entry-point-addr-uint2449 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2451 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2450, align 8
  %891 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2451({}* %386, i64 1, {}* %369, {}* null, {}* null, {}* null)
          to label %normal-dest2454 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest2454:                                  ; preds = %normal-dest2447
  %.elt3259 = extractvalue { {}*, i64 } %891, 0
  %.elt3261 = extractvalue { {}*, i64 } %891, 1
  %cond3190 = icmp eq i64 %.elt3261, 0
  %892 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond3190, {}* %892, {}* %.elt3259
  br label %tag491.outer.backedge

normal-dest2461:                                  ; preds = %tag513
  %893 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %894 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %895 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %896 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint2462 = ptrtoint {}* %388 to i64
  %entry-point-addr-uint2463 = add i64 %ptrtoint2462, 7
  %entry-point-addr2464 = inttoptr i64 %entry-point-addr-uint2463 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2465 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2464, align 8
  %897 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2465({}* %388, i64 5, {}* %893, {}* %894, {}* %x955.0, {}* %895, {}* %896)
          to label %normal-dest2468 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2468:                                  ; preds = %normal-dest2461
  %.elt3530 = extractvalue { {}*, i64 } %897, 0
  %.elt3532 = extractvalue { {}*, i64 } %897, 1
  %cond3228 = icmp eq i64 %.elt3532, 0
  %898 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond3228, {}* %898, {}* %.elt3530
  br label %tag364

header-check-br2476:                              ; preds = %header-check-br2910
  %.off3897 = add i64 %534, -1237
  %899 = icmp ult i64 %.off3897, 65
  %.3719 = select i1 %899, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag628

header-check-br2486:                              ; preds = %tag523
  %gep2491 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast2492 = bitcast i8* %gep2491 to i64*
  %900 = load i64, i64* %irc-bit-cast2492, align 8
  %901 = icmp eq i64 %900, 1349
  %fixnum-tag-only29733389 = and i64 %ptrtoint2487, 3
  %fixnump-test2974 = icmp eq i64 %fixnum-tag-only29733389, 0
  %or.cond3804 = or i1 %fixnump-test2974, %901
  br i1 %or.cond3804, label %tag685, label %tag239

normal-dest2500:                                  ; preds = %tag528
  %902 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 659), align 8
  %ptrtoint2501 = ptrtoint {}* %412 to i64
  %entry-point-addr-uint2502 = add i64 %ptrtoint2501, 7
  %entry-point-addr2503 = inttoptr i64 %entry-point-addr-uint2502 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2504 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2503, align 8
  %903 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2504({}* %412, i64 2, {}* %vaarg, {}* %902, {}* null, {}* null)
          to label %normal-dest2507 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2507:                                  ; preds = %normal-dest2500
  %.elt3605 = extractvalue { {}*, i64 } %903, 0
  %.elt3607 = extractvalue { {}*, i64 } %903, 1
  %cond3243 = icmp eq i64 %.elt3607, 0
  %904 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object839.2 = select i1 %cond3243, {}* %904, {}* %.elt3605
  br label %tag357

header-check-br2523:                              ; preds = %tag536
  %irc-bit-cast2527 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2528 = getelementptr inbounds i8, i8* %irc-bit-cast2527, i64 -9
  %irc-bit-cast2529 = bitcast i8* %gep2528 to i64*
  %905 = load i64, i64* %irc-bit-cast2529, align 8
  %906 = icmp eq i64 %905, 1101
  %.3702 = select i1 %906, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag198

normal-dest2550:                                  ; preds = %tag550
  %907 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %908 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %909 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %910 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %ptrtoint2012 = ptrtoint {}* %423 to i64
  %entry-point-addr-uint2013 = add i64 %ptrtoint2012, 7
  %entry-point-addr2014 = inttoptr i64 %entry-point-addr-uint2013 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2015 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2014, align 8
  %911 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2015({}* %423, i64 5, {}* %907, {}* %908, {}* %G287700.0, {}* %909, {}* %910)
          to label %normal-dest2018 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest2551:                                  ; preds = %tag551
  %912 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i64] }>*
  %913 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2552" = lshr exact i64 %913, 2
  %aref2553 = getelementptr inbounds <{ [15 x i8], [0 x i64] }>, <{ [15 x i8], [0 x i64] }>* %912, i64 0, i32 1, i64 %"untagged fixnum2552"
  store i64 %424, i64* %aref2553, align 8
  br label %tag544

normal-dest2555:                                  ; preds = %tag552
  %914 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 738), align 16
  %ptrtoint2556 = ptrtoint {}* %426 to i64
  %entry-point-addr-uint2557 = add i64 %ptrtoint2556, 7
  %entry-point-addr2558 = inttoptr i64 %entry-point-addr-uint2557 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2559 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2558, align 8
  %915 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2559({}* %426, i64 2, {}* %vaarg, {}* %914, {}* null, {}* null)
          to label %normal-dest2562 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2562:                                  ; preds = %normal-dest2555
  %.elt3500 = extractvalue { {}*, i64 } %915, 0
  %.elt3502 = extractvalue { {}*, i64 } %915, 1
  %cond3222 = icmp eq i64 %.elt3502, 0
  %916 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.3 = select i1 %cond3222, {}* %916, {}* %.elt3500
  br label %tag149

normal-dest2569:                                  ; preds = %tag555
  %917 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %918 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %919 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %920 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 706), align 16
  %ptrtoint2570 = ptrtoint {}* %428 to i64
  %entry-point-addr-uint2571 = add i64 %ptrtoint2570, 7
  %entry-point-addr2572 = inttoptr i64 %entry-point-addr-uint2571 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2573 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2572, align 8
  %921 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2573({}* %428, i64 5, {}* %917, {}* %918, {}* %.in3353, {}* %919, {}* %920)
          to label %tag87 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2582:                                  ; preds = %tag557
  %ptrtoint2583 = ptrtoint {}* %430 to i64
  %entry-point-addr-uint2584 = add i64 %ptrtoint2583, 7
  %entry-point-addr2585 = inttoptr i64 %entry-point-addr-uint2584 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2586 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2585, align 8
  %922 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2586({}* %430, i64 2, {}* %.in3353, {}* null, {}* null, {}* null)
          to label %normal-dest2589 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2589:                                  ; preds = %normal-dest2582
  %.elt3460 = extractvalue { {}*, i64 } %922, 0
  %.elt3462 = extractvalue { {}*, i64 } %922, 1
  %cond3215 = icmp eq i64 %.elt3462, 0
  %923 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288895.0 = select i1 %cond3215, {}* %923, {}* %.elt3460
  %924 = icmp eq {}* %G288895.0, %923
  br i1 %924, label %tag406, label %tag111

header-check-br2595:                              ; preds = %header-check-br2664
  %.off3880 = add i64 %942, -1153
  %925 = icmp ult i64 %.off3880, 149
  br i1 %925, label %maybe-more-tests2603, label %tag172

maybe-more-tests2603:                             ; preds = %header-check-br2595
  %926 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %927 = invoke {}* @cc_safe_fdefinition({}* %926)
          to label %normal-dest1395 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2605:                                  ; preds = %tag559
  %ptrtoint2606 = ptrtoint {}* %433 to i64
  %entry-point-addr-uint2607 = add i64 %ptrtoint2606, 7
  %entry-point-addr2608 = inttoptr i64 %entry-point-addr-uint2607 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2609 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2608, align 8
  %928 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2609({}* %433, i64 2, {}* %.in3353, {}* %431, {}* null, {}* null)
          to label %normal-dest2612 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2612:                                  ; preds = %normal-dest2605
  %.elt3373 = extractvalue { {}*, i64 } %928, 0
  %.elt3375 = extractvalue { {}*, i64 } %928, 1
  %cond3202 = icmp eq i64 %.elt3375, 0
  %929 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288850.0 = select i1 %cond3202, {}* %929, {}* %.elt3373
  %930 = icmp eq {}* %G288850.0, %929
  br i1 %930, label %tag96, label %normal-dest2612.tag604_crit_edge

normal-dest2612.tag604_crit_edge:                 ; preds = %normal-dest2612
  %object780.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag604

normal-dest2618:                                  ; preds = %tag560
  %931 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x double] }>*
  %932 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2619" = lshr exact i64 %932, 2
  %aref2620 = getelementptr inbounds <{ [15 x i8], [0 x double] }>, <{ [15 x i8], [0 x double] }>* %931, i64 0, i32 1, i64 %"untagged fixnum2619"
  store double %434, double* %aref2620, align 8
  br label %tag544

header-check-br2631:                              ; preds = %tag570
  %irc-bit-cast2635 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2636 = getelementptr inbounds i8, i8* %irc-bit-cast2635, i64 -9
  %irc-bit-cast2637 = bitcast i8* %gep2636 to i64*
  %933 = load i64, i64* %irc-bit-cast2637, align 8
  %934 = icmp eq i64 %933, 1109
  %.3704 = select i1 %934, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag436

normal-dest2639:                                  ; preds = %tag572
  %935 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %936 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %937 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %938 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 702), align 16
  %ptrtoint2640 = ptrtoint {}* %446 to i64
  %entry-point-addr-uint2641 = add i64 %ptrtoint2640, 7
  %entry-point-addr2642 = inttoptr i64 %entry-point-addr-uint2641 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2643 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2642, align 8
  %939 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2643({}* %446, i64 5, {}* %935, {}* %936, {}* %.in3353, {}* %937, {}* %938)
          to label %tag681 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2652:                                  ; preds = %tag573
  %940 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 727), align 8
  %ptrtoint2653 = ptrtoint {}* %448 to i64
  %entry-point-addr-uint2654 = add i64 %ptrtoint2653, 7
  %entry-point-addr2655 = inttoptr i64 %entry-point-addr-uint2654 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2656 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2655, align 8
  %941 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2656({}* %448, i64 2, {}* %vaarg, {}* %940, {}* null, {}* null)
          to label %tag544 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br2664:                              ; preds = %tag574
  %942 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3879 = add i64 %942, -1081
  %943 = icmp ult i64 %.off3879, 69
  br i1 %943, label %tag113, label %header-check-br2595

normal-dest2674:                                  ; preds = %tag576
  %944 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i16] }>*
  %945 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2675" = lshr exact i64 %945, 2
  %aref2676 = getelementptr inbounds <{ [15 x i8], [0 x i16] }>, <{ [15 x i8], [0 x i16] }>* %944, i64 0, i32 1, i64 %"untagged fixnum2675"
  store i16 %449, i16* %aref2676, align 2
  br label %tag544

normal-dest2679:                                  ; preds = %tag579
  %ptrtoint2680 = ptrtoint {}* %458 to i64
  %entry-point-addr-uint2681 = add i64 %ptrtoint2680, 7
  %entry-point-addr2682 = inttoptr i64 %entry-point-addr-uint2681 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2683 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2682, align 8
  %946 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2683({}* %458, i64 2, {}* null, {}* %LAUF.0, {}* null, {}* null)
          to label %normal-dest2686 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2686:                                  ; preds = %normal-dest2679
  %.elt3596 = extractvalue { {}*, i64 } %946, 0
  %.elt3598 = extractvalue { {}*, i64 } %946, 1
  %cond3241 = icmp eq i64 %.elt3598, 0
  %947 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288621.1 = select i1 %cond3241, {}* %947, {}* %.elt3596
  br label %tag230

header-check-br2692:                              ; preds = %tag580
  %irc-bit-cast2696 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2697 = getelementptr inbounds i8, i8* %irc-bit-cast2696, i64 -9
  %irc-bit-cast2698 = bitcast i8* %gep2697 to i64*
  %948 = load i64, i64* %irc-bit-cast2698, align 8
  %949 = icmp eq i64 %948, 1133
  br i1 %949, label %tag507, label %tag487

normal-dest2703:                                  ; preds = %tag585
  %950 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %951 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %952 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %953 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 373), align 8
  %ptrtoint2704 = ptrtoint {}* %461 to i64
  %entry-point-addr-uint2705 = add i64 %ptrtoint2704, 7
  %entry-point-addr2706 = inttoptr i64 %entry-point-addr-uint2705 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2707 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2706, align 8
  %954 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2707({}* %461, i64 5, {}* %950, {}* %951, {}* %.in3353, {}* %952, {}* %953)
          to label %tag393 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br2715:                              ; preds = %tag589
  %irc-bit-cast2719 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2720 = getelementptr inbounds i8, i8* %irc-bit-cast2719, i64 -9
  %irc-bit-cast2721 = bitcast i8* %gep2720 to i64*
  %955 = load i64, i64* %irc-bit-cast2721, align 8
  %956 = icmp eq i64 %955, 1137
  br i1 %956, label %tag321, label %tag540

normal-dest2725:                                  ; preds = %tag595
  %957 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %958 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %959 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %960 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 710), align 16
  %ptrtoint2726 = ptrtoint {}* %465 to i64
  %entry-point-addr-uint2727 = add i64 %ptrtoint2726, 7
  %entry-point-addr2728 = inttoptr i64 %entry-point-addr-uint2727 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2729 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2728, align 8
  %961 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2729({}* %465, i64 5, {}* %957, {}* %958, {}* %.in3353, {}* %959, {}* %960)
          to label %tag651 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2738:                                  ; preds = %tag602
  %ptrtoint2739 = ptrtoint {}* %471 to i64
  %entry-point-addr-uint2740 = add i64 %ptrtoint2739, 7
  %entry-point-addr2741 = inttoptr i64 %entry-point-addr-uint2740 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2742 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2741, align 8
  %962 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2742({}* %471, i64 2, {}* %OFFSET.0, {}* %59, {}* null, {}* null)
          to label %normal-dest2745 unwind label %cleanup-lpad.loopexit

normal-dest2745:                                  ; preds = %normal-dest2738
  %.elt3505 = extractvalue { {}*, i64 } %962, 0
  %.elt3507 = extractvalue { {}*, i64 } %962, 1
  %cond3223 = icmp eq i64 %.elt3507, 0
  %963 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G68960.2 = select i1 %cond3223, {}* %963, {}* %.elt3505
  br label %tag80

normal-dest2755:                                  ; preds = %tag610
  %964 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %965 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %966 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %967 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 668), align 16
  %ptrtoint2756 = ptrtoint {}* %479 to i64
  %entry-point-addr-uint2757 = add i64 %ptrtoint2756, 7
  %entry-point-addr2758 = inttoptr i64 %entry-point-addr-uint2757 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2759 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2758, align 8
  %968 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2759({}* %479, i64 5, {}* %964, {}* %965, {}* %.in3353, {}* %966, {}* %967)
          to label %tag246 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br2774:                              ; preds = %tag614
  %irc-bit-cast2778 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep2779 = getelementptr inbounds i8, i8* %irc-bit-cast2778, i64 -9
  %irc-bit-cast2780 = bitcast i8* %gep2779 to i64*
  %969 = load i64, i64* %irc-bit-cast2780, align 8
  %970 = icmp eq i64 %969, 1145
  br i1 %970, label %tag605, label %tag582

normal-dest2787:                                  ; preds = %maybe-more-tests1939
  %ptrtoint2788 = ptrtoint {}* %796 to i64
  %entry-point-addr-uint2789 = add i64 %ptrtoint2788, 7
  %entry-point-addr2790 = inttoptr i64 %entry-point-addr-uint2789 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2791 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2790, align 8
  %971 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2791({}* %796, i64 1, {}* nonnull %195, {}* null, {}* null, {}* null)
          to label %normal-dest2794 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

normal-dest2794:                                  ; preds = %normal-dest2787
  %.elt3543 = extractvalue { {}*, i64 } %971, 0
  %.elt3545 = extractvalue { {}*, i64 } %971, 1
  %cond3230 = icmp eq i64 %.elt3545, 0
  %972 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288386.2 = select i1 %cond3230, {}* %972, {}* %.elt3543
  br label %tag51

normal-dest2805:                                  ; preds = %tag629
  %973 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %974 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %975 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %976 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 371), align 8
  %ptrtoint2806 = ptrtoint {}* %493 to i64
  %entry-point-addr-uint2807 = add i64 %ptrtoint2806, 7
  %entry-point-addr2808 = inttoptr i64 %entry-point-addr-uint2807 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2809 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2808, align 8
  %977 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2809({}* %493, i64 5, {}* %973, {}* %974, {}* %.in3353, {}* %975, {}* %976)
          to label %tag147 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

header-check-br2818:                              ; preds = %tag630
  %irc-bit-cast2822 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep2823 = getelementptr inbounds i8, i8* %irc-bit-cast2822, i64 -9
  %irc-bit-cast2824 = bitcast i8* %gep2823 to i64*
  %978 = load i64, i64* %irc-bit-cast2824, align 8
  %979 = icmp eq i64 %978, 1137
  br i1 %979, label %tag158, label %tag709

header-check-br2827:                              ; preds = %tag632.header-check-br2827_crit_edge, %tag696
  %980 = phi i64 [ %.pre4055, %tag632.header-check-br2827_crit_edge ], [ %534, %tag696 ]
  %UNDERLYING-ARRAY892.14006 = phi {}* [ %UNDERLYING-ARRAY892.1, %tag632.header-check-br2827_crit_edge ], [ %vaarg, %tag696 ]
  %OFFSET895.14004 = phi {}* [ %OFFSET895.1, %tag632.header-check-br2827_crit_edge ], [ null, %tag696 ]
  %.off3892 = add i64 %980, -1081
  %981 = icmp ult i64 %.off3892, 69
  %.3720 = select i1 %981, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag326

normal-dest2841:                                  ; preds = %tag642
  %ptrtoint2842 = ptrtoint {}* %500 to i64
  %entry-point-addr-uint2843 = add i64 %ptrtoint2842, 7
  %entry-point-addr2844 = inttoptr i64 %entry-point-addr-uint2843 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2845 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2844, align 8
  %982 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2845({}* %500, i64 2, {}* null, {}* %LAUF.0, {}* null, {}* null)
          to label %normal-dest2848 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2848:                                  ; preds = %normal-dest2841
  %.elt3560 = extractvalue { {}*, i64 } %982, 0
  %.elt3562 = extractvalue { {}*, i64 } %982, 1
  %cond3235 = icmp eq i64 %.elt3562, 0
  %983 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288669.1 = select i1 %cond3235, {}* %983, {}* %.elt3560
  br label %tag640

header-check-br2854:                              ; preds = %tag643
  %984 = load i64, i64* %irc-bit-cast2860, align 8
  %.off3899 = add i64 %984, -1081
  %985 = icmp ult i64 %.off3899, 69
  br i1 %985, label %tag598, label %header-check-br1418

header-check-br2863:                              ; preds = %tag644
  %irc-bit-cast2867 = bitcast {}* %UNDERLYING-ARRAY892.14005 to i8*
  %gep2868 = getelementptr inbounds i8, i8* %irc-bit-cast2867, i64 -9
  %irc-bit-cast2869 = bitcast i8* %gep2868 to i64*
  %986 = load i64, i64* %irc-bit-cast2869, align 8
  %987 = icmp eq i64 %986, 1149
  br i1 %987, label %tag500, label %tag493

header-check-br2870:                              ; preds = %tag577
  %irc-bit-cast2874 = bitcast {}* %LAUF.0 to i8*
  %gep2875 = getelementptr inbounds i8, i8* %irc-bit-cast2874, i64 -9
  %irc-bit-cast2876 = bitcast i8* %gep2875 to i64*
  %988 = load i64, i64* %irc-bit-cast2876, align 8
  %989 = icmp eq i64 %988, 1325
  br i1 %989, label %tag450, label %tag712

normal-dest2879:                                  ; preds = %tag649
  %990 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %991 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %992 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %993 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 686), align 16
  %ptrtoint2880 = ptrtoint {}* %505 to i64
  %entry-point-addr-uint2881 = add i64 %ptrtoint2880, 7
  %entry-point-addr2882 = inttoptr i64 %entry-point-addr-uint2881 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2883 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2882, align 8
  %994 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2883({}* %505, i64 5, {}* %990, {}* %991, {}* %.in3353, {}* %992, {}* %993)
          to label %tag403 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2891:                                  ; preds = %tag651
  %995 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i8] }>*
  %996 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2892" = lshr exact i64 %996, 2
  %aref2893 = getelementptr inbounds <{ [15 x i8], [0 x i8] }>, <{ [15 x i8], [0 x i8] }>* %995, i64 0, i32 1, i64 %"untagged fixnum2892"
  store i8 %506, i8* %aref2893, align 1
  br label %tag544

normal-dest2897:                                  ; preds = %tag657
  %ptrtoint2898 = ptrtoint {}* %511 to i64
  %entry-point-addr-uint2899 = add i64 %ptrtoint2898, 7
  %entry-point-addr2900 = inttoptr i64 %entry-point-addr-uint2899 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2901 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2900, align 8
  %997 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2901({}* %511, i64 2, {}* %.in3353, {}* null, {}* null, {}* null)
          to label %normal-dest2904 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2904:                                  ; preds = %normal-dest2897
  %.elt3421 = extractvalue { {}*, i64 } %997, 0
  %.elt3423 = extractvalue { {}*, i64 } %997, 1
  %cond3209 = icmp eq i64 %.elt3423, 0
  %998 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288877.0 = select i1 %cond3209, {}* %998, {}* %.elt3421
  %999 = icmp eq {}* %G288877.0, %998
  br i1 %999, label %tag33, label %tag288

header-check-br2910:                              ; preds = %tag696
  br i1 %535, label %tag628, label %header-check-br2476

normal-dest2920:                                  ; preds = %tag664
  %ptrtoint2921 = ptrtoint {}* %513 to i64
  %entry-point-addr-uint2922 = add i64 %ptrtoint2921, 7
  %entry-point-addr2923 = inttoptr i64 %entry-point-addr-uint2922 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2924 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2923, align 8
  %1000 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2924({}* %513, i64 2, {}* %.in3353, {}* inttoptr (i64 262140 to {}*), {}* null, {}* null)
          to label %normal-dest2927 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2927:                                  ; preds = %normal-dest2920
  %.elt3451 = extractvalue { {}*, i64 } %1000, 0
  %.elt3453 = extractvalue { {}*, i64 } %1000, 1
  %cond3214 = icmp eq i64 %.elt3453, 0
  %1001 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288886.0 = select i1 %cond3214, {}* %1001, {}* %.elt3451
  %1002 = icmp eq {}* %G288886.0, %1001
  br i1 %1002, label %tag150, label %normal-dest2927.tag698_crit_edge

normal-dest2927.tag698_crit_edge:                 ; preds = %normal-dest2927
  %object1177.0.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag698

normal-dest2941:                                  ; preds = %tag665
  %ptrtoint2942 = ptrtoint {}* %515 to i64
  %entry-point-addr-uint2943 = add i64 %ptrtoint2942, 7
  %entry-point-addr2944 = inttoptr i64 %entry-point-addr-uint2943 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2945 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2944, align 8
  %1003 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2945({}* %515, i64 2, {}* %LAUF.0, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest2948 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest2948:                                  ; preds = %normal-dest2941
  %.elt3297 = extractvalue { {}*, i64 } %1003, 0
  %.elt3299 = extractvalue { {}*, i64 } %1003, 1
  %cond3196 = icmp eq i64 %.elt3299, 0
  %1004 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %p.0 = select i1 %cond3196, {}* %1004, {}* %.elt3297
  %1005 = ptrtoint {}* %p.0 to i64
  %tag-only29543300 = and i64 %1005, 7
  %consp-test2955 = icmp eq i64 %tag-only29543300, 3
  br i1 %consp-test2955, label %tag72, label %tag167

header-check-br2956:                              ; preds = %header-check-br772
  %.off3877 = add i64 %84, -1237
  %1006 = icmp ult i64 %.off3877, 65
  %.3721 = select i1 %1006, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag210

header-check-br2978:                              ; preds = %tag680
  %gep2983 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast2984 = bitcast i8* %gep2983 to i64*
  %1007 = load i64, i64* %irc-bit-cast2984, align 8
  %1008 = icmp eq i64 %1007, 1325
  br i1 %1008, label %tag437, label %tag327

normal-dest2985:                                  ; preds = %tag681
  %1009 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i32] }>*
  %1010 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum2986" = lshr exact i64 %1010, 2
  %aref2987 = getelementptr inbounds <{ [15 x i8], [0 x i32] }>, <{ [15 x i8], [0 x i32] }>* %1009, i64 0, i32 1, i64 %"untagged fixnum2986"
  store i32 %520, i32* %aref2987, align 4
  br label %tag544

normal-dest2994:                                  ; preds = %tag154
  %ptrtoint2995 = ptrtoint {}* %125 to i64
  %entry-point-addr-uint2996 = add i64 %ptrtoint2995, 7
  %entry-point-addr2997 = inttoptr i64 %entry-point-addr-uint2996 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point2998 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr2997, align 8
  %1011 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point2998({}* %125, i64 2, {}* %LAUF.0, {}* %344, {}* null, {}* null)
          to label %normal-dest3001 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3001:                                  ; preds = %normal-dest2994
  %.elt3601 = extractvalue { {}*, i64 } %1011, 0
  %.elt3603 = extractvalue { {}*, i64 } %1011, 1
  %cond3242 = icmp eq i64 %.elt3603, 0
  %1012 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object839.3 = select i1 %cond3242, {}* %1012, {}* %.elt3601
  br label %tag357

normal-dest3008:                                  ; preds = %tag685
  %ptrtoint3009 = ptrtoint {}* %524 to i64
  %entry-point-addr-uint3010 = add i64 %ptrtoint3009, 7
  %entry-point-addr3011 = inttoptr i64 %entry-point-addr-uint3010 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3012 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3011, align 8
  %1013 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3012({}* %524, i64 2, {}* %.in3353, {}* inttoptr (i64 -131072 to {}*), {}* null, {}* null)
          to label %normal-dest3015 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3015:                                  ; preds = %normal-dest3008
  %.elt3395 = extractvalue { {}*, i64 } %1013, 0
  %.elt3397 = extractvalue { {}*, i64 } %1013, 1
  %cond3205 = icmp eq i64 %.elt3397, 0
  %1014 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288865.0 = select i1 %cond3205, {}* %1014, {}* %.elt3395
  %1015 = icmp eq {}* %G288865.0, %1014
  br i1 %1015, label %normal-dest3015.tag239_crit_edge, label %tag489

normal-dest3015.tag239_crit_edge:                 ; preds = %normal-dest3015
  %.val3857.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag239

normal-dest3022:                                  ; preds = %tag688
  %1016 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 640), align 16
  %ptrtoint3023 = ptrtoint {}* %526 to i64
  %entry-point-addr-uint3024 = add i64 %ptrtoint3023, 7
  %entry-point-addr3025 = inttoptr i64 %entry-point-addr-uint3024 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3026 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3025, align 8
  %1017 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3026({}* %526, i64 2, {}* %vaarg, {}* %1016, {}* null, {}* null)
          to label %normal-dest3029 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3029:                                  ; preds = %normal-dest3022
  %.elt3627 = extractvalue { {}*, i64 } %1017, 0
  %.elt3629 = extractvalue { {}*, i64 } %1017, 1
  %cond3247 = icmp eq i64 %.elt3629, 0
  %1018 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ELEMENT.4 = select i1 %cond3247, {}* %1018, {}* %.elt3627
  br label %tag264

header-check-br3038:                              ; preds = %tag689.header-check-br3038_crit_edge, %tag92
  %1019 = phi i64 [ %.pre4056, %tag689.header-check-br3038_crit_edge ], [ %84, %tag92 ]
  %UNDERLYING-ARRAY.14002 = phi {}* [ %UNDERLYING-ARRAY.1, %tag689.header-check-br3038_crit_edge ], [ %vaarg, %tag92 ]
  %OFFSET.14000 = phi {}* [ %OFFSET.1, %tag689.header-check-br3038_crit_edge ], [ null, %tag92 ]
  %.off3872 = add i64 %1019, -1081
  %1020 = icmp ult i64 %.off3872, 69
  %.3722 = select i1 %1020, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  br label %tag56

normal-dest3058:                                  ; preds = %tag699
  %ptrtoint3059 = ptrtoint {}* %545 to i64
  %entry-point-addr-uint3060 = add i64 %ptrtoint3059, 7
  %entry-point-addr3061 = inttoptr i64 %entry-point-addr-uint3060 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3062 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3061, align 8
  %1021 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3062({}* %545, i64 2, {}* null, {}* %LAUF.0, {}* null, {}* null)
          to label %normal-dest3065 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3065:                                  ; preds = %normal-dest3058
  %.elt3491 = extractvalue { {}*, i64 } %1021, 0
  %.elt3493 = extractvalue { {}*, i64 } %1021, 1
  %cond3220 = icmp eq i64 %.elt3493, 0
  %1022 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288178.1 = select i1 %cond3220, {}* %1022, {}* %.elt3491
  br label %tag228

header-check-br3072:                              ; preds = %header-check-br786
  %1023 = load i64, i64* %irc-bit-cast3078, align 8
  %1024 = icmp eq i64 %1023, 1325
  br i1 %1024, label %tag449, label %tag55

header-check-br3089:                              ; preds = %tag708
  %irc-bit-cast3093 = bitcast {}* %UNDERLYING-ARRAY.14001 to i8*
  %gep3094 = getelementptr inbounds i8, i8* %irc-bit-cast3093, i64 -9
  %irc-bit-cast3095 = bitcast i8* %gep3094 to i64*
  %1025 = load i64, i64* %irc-bit-cast3095, align 8
  %1026 = icmp eq i64 %1025, 1129
  br i1 %1026, label %tag212, label %tag587

normal-dest3099:                                  ; preds = %tag712
  %ptrtoint3100 = ptrtoint {}* %549 to i64
  %entry-point-addr-uint3101 = add i64 %ptrtoint3100, 7
  %entry-point-addr3102 = inttoptr i64 %entry-point-addr-uint3101 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3103 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3102, align 8
  %1027 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3103({}* %549, i64 2, {}* %LAUF.0, {}* %OFFSET895.14003, {}* null, {}* null)
          to label %normal-dest3106 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3106:                                  ; preds = %normal-dest3099
  %.elt3574 = extractvalue { {}*, i64 } %1027, 0
  %.elt3576 = extractvalue { {}*, i64 } %1027, 1
  %cond3237 = icmp eq i64 %.elt3576, 0
  %1028 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %index1155.2 = select i1 %cond3237, {}* %1028, {}* %.elt3574
  br label %tag589

header-check-br3118:                              ; preds = %tag718
  %gep3123 = getelementptr inbounds i8, i8* %283, i64 -9
  %irc-bit-cast3124 = bitcast i8* %gep3123 to i64*
  %1029 = load i64, i64* %irc-bit-cast3124, align 8
  %1030 = icmp eq i64 %1029, 1349
  %fixnum-tag-only8293441 = and i64 %ptrtoint3119, 3
  %fixnump-test830 = icmp eq i64 %fixnum-tag-only8293441, 0
  %or.cond3785 = or i1 %fixnump-test830, %1030
  br i1 %or.cond3785, label %tag348, label %tag150

normal-dest3127:                                  ; preds = %tag727
  %1031 = bitcast {}* %UNDERLYING-ARRAY.14001 to <{ [15 x i8], [0 x i64] }>*
  %1032 = ptrtoint {}* %index.0 to i64
  %"untagged fixnum3128" = lshr exact i64 %1032, 2
  %aref3129 = getelementptr inbounds <{ [15 x i8], [0 x i64] }>, <{ [15 x i8], [0 x i64] }>* %1031, i64 0, i32 1, i64 %"untagged fixnum3128"
  store i64 %554, i64* %aref3129, align 8
  br label %tag544

normal-dest3131:                                  ; preds = %tag729
  %ptrtoint3132 = ptrtoint {}* %556 to i64
  %entry-point-addr-uint3133 = add i64 %ptrtoint3132, 7
  %entry-point-addr3134 = inttoptr i64 %entry-point-addr-uint3133 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3135 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3134, align 8
  %1033 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3135({}* %556, i64 1, {}* %203, {}* null, {}* null, {}* null)
          to label %normal-dest3138 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3138:                                  ; preds = %normal-dest3131
  %.elt3311 = extractvalue { {}*, i64 } %1033, 0
  %.elt3313 = extractvalue { {}*, i64 } %1033, 1
  %cond3227 = icmp eq i64 %.elt3313, 0
  %1034 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LAUF.2 = select i1 %cond3227, {}* %1034, {}* %.elt3311
  br label %tag448.backedge

header-check-br3154:                              ; preds = %tag370
  %1035 = icmp eq i64 %290, 1133
  br i1 %1035, label %tag601, label %tag733

normal-dest3163:                                  ; preds = %tag740
  %ptrtoint3164 = ptrtoint {}* %571 to i64
  %entry-point-addr-uint3165 = add i64 %ptrtoint3164, 7
  %entry-point-addr3166 = inttoptr i64 %entry-point-addr-uint3165 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3167 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3166, align 8
  %1036 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3167({}* %571, i64 2, {}* %.in3353, {}* inttoptr (i64 -512 to {}*), {}* null, {}* null)
          to label %normal-dest3170 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3170:                                  ; preds = %normal-dest3163
  %.elt3408 = extractvalue { {}*, i64 } %1036, 0
  %.elt3410 = extractvalue { {}*, i64 } %1036, 1
  %cond3207 = icmp eq i64 %.elt3410, 0
  %1037 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288871.0 = select i1 %cond3207, {}* %1037, {}* %.elt3408
  %1038 = icmp eq {}* %G288871.0, %1037
  br i1 %1038, label %tag432, label %tag313

normal-dest3177:                                  ; preds = %tag743
  %ptrtoint3178 = ptrtoint {}* %573 to i64
  %entry-point-addr-uint3179 = add i64 %ptrtoint3178, 7
  %entry-point-addr3180 = inttoptr i64 %entry-point-addr-uint3179 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point3181 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr3180, align 8
  %1039 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point3181({}* %573, i64 1, {}* %.in3353, {}* null, {}* null, {}* null)
          to label %normal-dest3184 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp.loopexit

normal-dest3184:                                  ; preds = %normal-dest3177
  %.elt3338 = extractvalue { {}*, i64 } %1039, 0
  %.elt3340 = extractvalue { {}*, i64 } %1039, 1
  %cond3200 = icmp eq i64 %.elt3340, 0
  %1040 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288847.0 = select i1 %cond3200, {}* %1040, {}* %.elt3338
  %1041 = icmp eq {}* %G288847.0, %1040
  %.val3836 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object1601.0 = select i1 %1041, {}* %1040, {}* %.val3836
  %1042 = icmp eq {}* %object1601.0, %1040
  %G288087.0 = select i1 %1042, {}* %.val3836, {}* %1040
  %1043 = icmp eq {}* %G288087.0, %1040
  br i1 %1043, label %tag246, label %tag610
}

declare {}* @to_object_uint8(i8) local_unnamed_addr #3

declare {}* @to_object_claspChar(i8) local_unnamed_addr #3

declare i32 @from_object_claspCharacter({}*) local_unnamed_addr #3

declare i16 @from_object_uint16({}*) local_unnamed_addr #3

declare {}* @to_object_uint32(i32) local_unnamed_addr #3

declare signext i64 @from_object_fixnum({}*) local_unnamed_addr #3

declare {}* @to_object_int16(i16 signext) local_unnamed_addr #3

declare {}* @to_object_fixnum(i64 signext) local_unnamed_addr #3

declare i8 @from_object_claspChar({}*) local_unnamed_addr #3

declare {}* @to_object_uint64(i64) local_unnamed_addr #3

declare {}* @to_object_uint16(i16) local_unnamed_addr #3

declare {}* @to_object_claspCharacter(i32) local_unnamed_addr #3

declare signext i8 @from_object_int8({}*) local_unnamed_addr #3

declare signext i32 @from_object_int32({}*) local_unnamed_addr #3

declare {}* @to_object_int32(i32 signext) local_unnamed_addr #3

declare {}* @to_object_int8(i8 signext) local_unnamed_addr #3

declare i64 @from_object_uint64({}*) local_unnamed_addr #3

declare {}* @to_object_int64(i64 signext) local_unnamed_addr #3

declare signext i16 @from_object_int16({}*) local_unnamed_addr #3

declare i8 @from_object_uint8({}*) local_unnamed_addr #3

declare i32 @from_object_uint32({}*) local_unnamed_addr #3

declare signext i64 @from_object_int64({}*) local_unnamed_addr #3

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^460^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !98 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^460^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest76, %normal-dest54, %header-check-br
  %G288984.0 = phi {}* [ %18, %header-check-br ], [ %G288984.1, %normal-dest54 ], [ %G288984.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 798), align 16
  %ptrtoint13 = ptrtoint {}* %G288984.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G288984.0, i64 2, {}* %"closure->B=PSEUDO-PROPERTIES-LOESCHEN", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %tag3, %normal-dest47, %maybe-more-tests67, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 798), align 16
  %"closure->B=PSEUDO-PROPERTIES-LOESCHEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 16353, i64 460, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 801), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=PSEUDO-PROPERTIES-LOESCHEN", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 802), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=PSEUDO-PROPERTIES-LOESCHEN", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 1896 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 798), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

normal-dest47:                                    ; preds = %maybe-more-tests67
  %ptrtoint48 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %37, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  %.elt101 = extractvalue { {}*, i64 } %33, 0
  %.elt103 = extractvalue { {}*, i64 } %33, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288984.1 = select i1 %cond82, {}* %34, {}* %.elt101
  br label %tag

header-check-br59:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %35 = icmp ult i64 %.off106, 5
  br i1 %35, label %maybe-more-tests67, label %tag3

maybe-more-tests67:                               ; preds = %header-check-br59
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag3
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 800), align 16
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %38, {}* %39, {}* %18, {}* %40, {}* %41)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %42, 0
  %.elt84 = extractvalue { {}*, i64 } %42, 1
  %cond = icmp eq i64 %.elt84, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G288984.2 = select i1 %cond, {}* %43, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !99 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc458 unwind label %cleanup-lpad

.noexc458:                                        ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest373
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %12 = icmp eq {}* %11, %farg0
  %.val481 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289072.0 = select i1 %12, {}* %.val481, {}* %11
  %13 = icmp eq {}* %G289072.0, %11
  br i1 %13, label %tag58, label %tag73

tag2:                                             ; preds = %tag47, %normal-dest260, %tag67
  %G289039.0 = phi {}* [ %75, %tag67 ], [ %G289039.1, %normal-dest260 ], [ %.val476, %tag47 ]
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest102 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest158
  %16 = add i64 %106, 5
  %17 = inttoptr i64 %16 to {}**
  %18 = load {}*, {}** %17, align 8
  br label %tag9

tag7:                                             ; preds = %normal-dest
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 794), align 16
  %20 = invoke {}* @cc_safe_fdefinition({}* %19)
          to label %normal-dest110 unwind label %cleanup-lpad

tag9:                                             ; preds = %tag81, %normal-dest314, %tag3
  %x108.0 = phi {}* [ %18, %tag3 ], [ %x108.1, %normal-dest314 ], [ %91, %tag81 ]
  %21 = ptrtoint {}* %x108.0 to i64
  %tag-only118435 = and i64 %21, 7
  %consp-test119 = icmp eq i64 %tag-only118435, 3
  br i1 %consp-test119, label %tag55, label %tag43

tag16:                                            ; preds = %tag21
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest122 unwind label %cleanup-lpad

tag17:                                            ; preds = %tag34
  %24 = icmp eq {}* %x120.0, %.val486
  %G289089.0 = select i1 %24, {}* %.val479, {}* %.val486
  %25 = icmp eq {}* %G289089.0, %.val486
  br i1 %25, label %tag30, label %tag84

tag19:                                            ; preds = %normal-dest198
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest137 unwind label %cleanup-lpad

tag21:                                            ; preds = %tag24
  %28 = icmp eq {}* %x152.0, %.val494
  %G289152.0 = select i1 %28, {}* %.val473, {}* %.val494
  %29 = icmp eq {}* %G289152.0, %.val494
  br i1 %29, label %tag16, label %tag31

tag22:                                            ; preds = %normal-dest, %normal-dest371, %normal-dest364
  %return-value.sroa.28.0 = phi i64 [ %.elt439, %normal-dest371 ], [ %.elt413, %normal-dest364 ], [ 1, %normal-dest ]
  %return-value.sroa.0.0.in = phi {}* [ %.elt437, %normal-dest371 ], [ %.elt411, %normal-dest364 ], [ %102, %normal-dest ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %30 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0.in, 0
  %31 = insertvalue { {}*, i64 } %30, i64 %return-value.sroa.28.0, 1
  ret { {}*, i64 } %31

tag24:                                            ; preds = %tag71, %normal-dest172, %tag59
  %.val494 = phi {}* [ %.val474.pre, %tag59 ], [ %119, %normal-dest172 ], [ %79, %tag71 ]
  %x152.0 = phi {}* [ %72, %tag59 ], [ %x152.1, %normal-dest172 ], [ %79, %tag71 ]
  %32 = ptrtoint {}* %x152.0 to i64
  %tag-only155393 = and i64 %32, 7
  %consp-test156 = icmp eq i64 %tag-only155393, 3
  %.val473 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289159.0 = select i1 %consp-test156, {}* %.val473, {}* %.val494
  %33 = icmp eq {}* %G289159.0, %.val494
  br i1 %33, label %tag21, label %tag87

tag26:                                            ; preds = %normal-dest198
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 798), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest158 unwind label %cleanup-lpad

tag27:                                            ; preds = %tag71
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest165 unwind label %cleanup-lpad

tag30:                                            ; preds = %tag17
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest179 unwind label %cleanup-lpad

tag31:                                            ; preds = %tag21, %normal-dest126, %tag87
  %G289142.0 = phi {}* [ %100, %tag87 ], [ %G289142.1, %normal-dest126 ], [ %.val494, %tag21 ]
  %ptrtoint192 = ptrtoint {}* %20 to i64
  %entry-point-addr-uint193 = add i64 %ptrtoint192, 7
  %entry-point-addr194 = inttoptr i64 %entry-point-addr-uint193 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point195 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr194, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point195({}* %20, i64 2, {}* %105, {}* %G289142.0, {}* null, {}* null)
          to label %normal-dest198 unwind label %cleanup-lpad

tag34:                                            ; preds = %tag53, %normal-dest239, %tag44
  %.val486 = phi {}* [ %.val480.pre, %tag44 ], [ %139, %normal-dest239 ], [ %62, %tag53 ]
  %x120.0 = phi {}* [ %50, %tag44 ], [ %x120.1, %normal-dest239 ], [ %62, %tag53 ]
  %41 = ptrtoint {}* %x120.0 to i64
  %tag-only206399 = and i64 %41, 7
  %consp-test207 = icmp eq i64 %tag-only206399, 3
  %.val479 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289096.0 = select i1 %consp-test207, {}* %.val479, {}* %.val486
  %42 = icmp eq {}* %G289096.0, %.val486
  br i1 %42, label %tag17, label %tag78

tag38:                                            ; preds = %tag74
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest209 unwind label %cleanup-lpad

tag43:                                            ; preds = %tag9
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %46 = icmp eq {}* %x108.0, %45
  %.val491 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289014.0 = select i1 %46, {}* %.val491, {}* %45
  %47 = icmp eq {}* %G289014.0, %45
  br i1 %47, label %tag51, label %tag83

tag44:                                            ; preds = %normal-dest102
  %48 = add i64 %106, 5
  %49 = inttoptr i64 %48 to {}**
  %50 = load {}*, {}** %49, align 8
  %.val480.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag34

tag46:                                            ; preds = %tag53
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest232 unwind label %cleanup-lpad

tag47:                                            ; preds = %normal-dest137
  %53 = icmp eq {}* %.val476, %farg0
  %G289126.0 = select i1 %53, {}* %.val475, {}* %.val476
  %54 = icmp eq {}* %G289126.0, %.val476
  br i1 %54, label %tag50, label %tag2

tag49:                                            ; preds = %normal-dest373
  %55 = add i64 %106, 5
  %56 = inttoptr i64 %55 to {}**
  %57 = load {}*, {}** %56, align 8
  br label %tag73

tag50:                                            ; preds = %tag47
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest253 unwind label %cleanup-lpad

tag51:                                            ; preds = %tag43
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %61 = invoke {}* @cc_safe_fdefinition({}* %60)
          to label %normal-dest267 unwind label %cleanup-lpad

tag53:                                            ; preds = %normal-dest102
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %63 = icmp eq {}* %62, %farg0
  %.val477 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289109.0 = select i1 %63, {}* %.val477, {}* %62
  %64 = icmp eq {}* %G289109.0, %62
  br i1 %64, label %tag46, label %tag34

tag55:                                            ; preds = %tag9
  %65 = add i64 %21, 5
  %66 = inttoptr i64 %65 to {}**
  %67 = load {}*, {}** %66, align 8
  br label %tag83

tag58:                                            ; preds = %tag
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %69 = invoke {}* @cc_safe_fdefinition({}* %68)
          to label %normal-dest287 unwind label %cleanup-lpad

tag59:                                            ; preds = %normal-dest110
  %70 = add i64 %106, 5
  %71 = inttoptr i64 %70 to {}**
  %72 = load {}*, {}** %71, align 8
  %.val474.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag24

tag67:                                            ; preds = %normal-dest137
  %73 = add i64 %106, -3
  %74 = inttoptr i64 %73 to {}**
  %75 = load {}*, {}** %74, align 8
  br label %tag2

tag69:                                            ; preds = %tag73
  %76 = add i64 %84, 5
  %77 = inttoptr i64 %76 to {}**
  %78 = load {}*, {}** %77, align 8
  br label %tag82

tag71:                                            ; preds = %normal-dest110
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %80 = icmp eq {}* %79, %farg0
  %.val471 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289172.0 = select i1 %80, {}* %.val471, {}* %79
  %81 = icmp eq {}* %G289172.0, %79
  br i1 %81, label %tag27, label %tag24

tag72:                                            ; preds = %tag81
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %83 = invoke {}* @cc_safe_fdefinition({}* %82)
          to label %normal-dest307 unwind label %cleanup-lpad

tag73:                                            ; preds = %tag, %normal-dest294, %tag49
  %x251.0 = phi {}* [ %57, %tag49 ], [ %x251.1, %normal-dest294 ], [ %11, %tag ]
  %84 = ptrtoint {}* %x251.0 to i64
  %tag-only320401 = and i64 %84, 7
  %consp-test321 = icmp eq i64 %tag-only320401, 3
  br i1 %consp-test321, label %tag69, label %tag74

tag74:                                            ; preds = %tag73
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %86 = icmp eq {}* %x251.0, %85
  %.val483 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289056.0 = select i1 %86, {}* %.val483, {}* %85
  %87 = icmp eq {}* %G289056.0, %85
  br i1 %87, label %tag38, label %tag82

tag78:                                            ; preds = %tag34
  %88 = add i64 %41, -3
  %89 = inttoptr i64 %88 to {}**
  %90 = load {}*, {}** %89, align 8
  br label %tag84

tag81:                                            ; preds = %normal-dest158
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %92 = icmp eq {}* %91, %farg0
  %.val489 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289030.0 = select i1 %92, {}* %.val489, {}* %91
  %93 = icmp eq {}* %G289030.0, %91
  br i1 %93, label %tag72, label %tag9

tag82:                                            ; preds = %tag74, %normal-dest217, %tag69
  %G289045.0 = phi {}* [ %78, %tag69 ], [ %G289045.1, %normal-dest217 ], [ %85, %tag74 ]
  %ptrtoint334 = ptrtoint {}* %97 to i64
  %entry-point-addr-uint335 = add i64 %ptrtoint334, 7
  %entry-point-addr336 = inttoptr i64 %entry-point-addr-uint335 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point337 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr336, align 8
  %94 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point337({}* %97, i64 1, {}* %G289045.0, {}* null, {}* null, {}* null)
          to label %normal-dest340 unwind label %cleanup-lpad

tag83:                                            ; preds = %tag43, %normal-dest274, %tag55
  %G289003.0 = phi {}* [ %67, %tag55 ], [ %G289003.1, %normal-dest274 ], [ %45, %tag43 ]
  %ptrtoint365 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint366 = add i64 %ptrtoint365, 7
  %entry-point-addr367 = inttoptr i64 %entry-point-addr-uint366 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point368 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr367, align 8
  %95 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point368({}* %35, i64 1, {}* %G289003.0, {}* null, {}* null, {}* null)
          to label %normal-dest371 unwind label %cleanup-lpad

tag84:                                            ; preds = %tag17, %normal-dest186, %tag78
  %G289042.0 = phi {}* [ %90, %tag78 ], [ %G289042.1, %normal-dest186 ], [ %.val486, %tag17 ]
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 798), align 16
  %97 = invoke {}* @cc_safe_fdefinition({}* %96)
          to label %normal-dest373 unwind label %cleanup-lpad

tag87:                                            ; preds = %tag24
  %98 = add i64 %32, -3
  %99 = inttoptr i64 %98 to {}**
  %100 = load {}*, {}** %99, align 8
  br label %tag31

cleanup-lpad:                                     ; preds = %10, %9, %tag84, %tag83, %normal-dest352, %normal-dest340, %tag82, %normal-dest307, %tag72, %normal-dest287, %tag58, %normal-dest267, %tag51, %normal-dest253, %tag50, %normal-dest232, %tag46, %normal-dest209, %tag38, %tag31, %normal-dest179, %tag30, %normal-dest165, %tag27, %tag26, %tag19, %normal-dest122, %tag16, %tag7, %tag2
  %101 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %101

normal-dest:                                      ; preds = %entry
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %103 = icmp eq {}* %102, %farg0
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289181.0 = select i1 %103, {}* %.val, {}* %102
  %104 = icmp eq {}* %G289181.0, %102
  br i1 %104, label %tag7, label %tag22

normal-dest102:                                   ; preds = %tag2
  br i1 %consp-test116, label %tag44, label %tag53

normal-dest110:                                   ; preds = %tag7
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 796), align 16
  %106 = ptrtoint {}* %farg0 to i64
  %tag-only115392 = and i64 %106, 7
  %consp-test116 = icmp eq i64 %tag-only115392, 3
  br i1 %consp-test116, label %tag59, label %tag71

normal-dest122:                                   ; preds = %tag16
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %111 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 5, {}* %107, {}* %108, {}* %x152.0, {}* %109, {}* %110)
          to label %normal-dest126 unwind label %cleanup-lpad

normal-dest126:                                   ; preds = %normal-dest122
  %.elt449 = extractvalue { {}*, i64 } %111, 0
  %.elt451 = extractvalue { {}*, i64 } %111, 1
  %cond388 = icmp eq i64 %.elt451, 0
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289142.1 = select i1 %cond388, {}* %112, {}* %.elt449
  br label %tag31

normal-dest137:                                   ; preds = %tag19
  %.val475 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val476 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289133.0 = select i1 %consp-test116, {}* %.val475, {}* %.val476
  %113 = icmp eq {}* %G289133.0, %.val476
  br i1 %113, label %tag47, label %tag67

normal-dest158:                                   ; preds = %tag26
  br i1 %consp-test116, label %tag3, label %tag81

normal-dest165:                                   ; preds = %tag27
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint166 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint167 = add i64 %ptrtoint166, 7
  %entry-point-addr168 = inttoptr i64 %entry-point-addr-uint167 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point169 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr168, align 8
  %118 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point169({}* %37, i64 5, {}* %114, {}* %115, {}* %farg0, {}* %116, {}* %117)
          to label %normal-dest172 unwind label %cleanup-lpad

normal-dest172:                                   ; preds = %normal-dest165
  %.elt453 = extractvalue { {}*, i64 } %118, 0
  %.elt455 = extractvalue { {}*, i64 } %118, 1
  %cond389 = icmp eq i64 %.elt455, 0
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x152.1 = select i1 %cond389, {}* %119, {}* %.elt453
  br label %tag24

normal-dest179:                                   ; preds = %tag30
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %122 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint180 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint181 = add i64 %ptrtoint180, 7
  %entry-point-addr182 = inttoptr i64 %entry-point-addr-uint181 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point183 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr182, align 8
  %124 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point183({}* %39, i64 5, {}* %120, {}* %121, {}* %x120.0, {}* %122, {}* %123)
          to label %normal-dest186 unwind label %cleanup-lpad

normal-dest186:                                   ; preds = %normal-dest179
  %.elt423 = extractvalue { {}*, i64 } %124, 0
  %.elt425 = extractvalue { {}*, i64 } %124, 1
  %cond383 = icmp eq i64 %.elt425, 0
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289042.1 = select i1 %cond383, {}* %125, {}* %.elt423
  br label %tag84

normal-dest198:                                   ; preds = %tag31
  %.elt394 = extractvalue { {}*, i64 } %40, 0
  %.elt396 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt396, 0
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289138.0 = select i1 %cond, {}* %126, {}* %.elt394
  %127 = icmp eq {}* %G289138.0, %126
  br i1 %127, label %tag26, label %tag19

normal-dest209:                                   ; preds = %tag38
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint211 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint212 = add i64 %ptrtoint211, 7
  %entry-point-addr213 = inttoptr i64 %entry-point-addr-uint212 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point214 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr213, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point214({}* %44, i64 5, {}* %128, {}* %129, {}* %x251.0, {}* %130, {}* %131)
          to label %normal-dest217 unwind label %cleanup-lpad

normal-dest217:                                   ; preds = %normal-dest209
  %.elt415 = extractvalue { {}*, i64 } %132, 0
  %.elt417 = extractvalue { {}*, i64 } %132, 1
  %cond381 = icmp eq i64 %.elt417, 0
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289045.1 = select i1 %cond381, {}* %133, {}* %.elt415
  br label %tag82

normal-dest232:                                   ; preds = %tag46
  %134 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %135 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %136 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %137 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint233 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint234 = add i64 %ptrtoint233, 7
  %entry-point-addr235 = inttoptr i64 %entry-point-addr-uint234 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point236 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr235, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point236({}* %52, i64 5, {}* %134, {}* %135, {}* %farg0, {}* %136, {}* %137)
          to label %normal-dest239 unwind label %cleanup-lpad

normal-dest239:                                   ; preds = %normal-dest232
  %.elt427 = extractvalue { {}*, i64 } %138, 0
  %.elt429 = extractvalue { {}*, i64 } %138, 1
  %cond384 = icmp eq i64 %.elt429, 0
  %139 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x120.1 = select i1 %cond384, {}* %139, {}* %.elt427
  br label %tag34

normal-dest253:                                   ; preds = %tag50
  %140 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %141 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %142 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint254 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint255 = add i64 %ptrtoint254, 7
  %entry-point-addr256 = inttoptr i64 %entry-point-addr-uint255 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point257 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr256, align 8
  %144 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point257({}* %59, i64 5, {}* %140, {}* %141, {}* %farg0, {}* %142, {}* %143)
          to label %normal-dest260 unwind label %cleanup-lpad

normal-dest260:                                   ; preds = %normal-dest253
  %.elt431 = extractvalue { {}*, i64 } %144, 0
  %.elt433 = extractvalue { {}*, i64 } %144, 1
  %cond385 = icmp eq i64 %.elt433, 0
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289039.1 = select i1 %cond385, {}* %145, {}* %.elt431
  br label %tag2

normal-dest267:                                   ; preds = %tag51
  %146 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %147 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %148 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %149 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint268 = ptrtoint {}* %61 to i64
  %entry-point-addr-uint269 = add i64 %ptrtoint268, 7
  %entry-point-addr270 = inttoptr i64 %entry-point-addr-uint269 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point271 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr270, align 8
  %150 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point271({}* %61, i64 5, {}* %146, {}* %147, {}* %x108.0, {}* %148, {}* %149)
          to label %normal-dest274 unwind label %cleanup-lpad

normal-dest274:                                   ; preds = %normal-dest267
  %.elt441 = extractvalue { {}*, i64 } %150, 0
  %.elt443 = extractvalue { {}*, i64 } %150, 1
  %cond386 = icmp eq i64 %.elt443, 0
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289003.1 = select i1 %cond386, {}* %151, {}* %.elt441
  br label %tag83

normal-dest287:                                   ; preds = %tag58
  %152 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %153 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %154 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %155 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint288 = ptrtoint {}* %69 to i64
  %entry-point-addr-uint289 = add i64 %ptrtoint288, 7
  %entry-point-addr290 = inttoptr i64 %entry-point-addr-uint289 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point291 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr290, align 8
  %156 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point291({}* %69, i64 5, {}* %152, {}* %153, {}* %farg0, {}* %154, {}* %155)
          to label %normal-dest294 unwind label %cleanup-lpad

normal-dest294:                                   ; preds = %normal-dest287
  %.elt419 = extractvalue { {}*, i64 } %156, 0
  %.elt421 = extractvalue { {}*, i64 } %156, 1
  %cond382 = icmp eq i64 %.elt421, 0
  %157 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x251.1 = select i1 %cond382, {}* %157, {}* %.elt419
  br label %tag73

normal-dest307:                                   ; preds = %tag72
  %158 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %159 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %160 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %161 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint308 = ptrtoint {}* %83 to i64
  %entry-point-addr-uint309 = add i64 %ptrtoint308, 7
  %entry-point-addr310 = inttoptr i64 %entry-point-addr-uint309 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point311 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr310, align 8
  %162 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point311({}* %83, i64 5, {}* %158, {}* %159, {}* %farg0, {}* %160, {}* %161)
          to label %normal-dest314 unwind label %cleanup-lpad

normal-dest314:                                   ; preds = %normal-dest307
  %.elt445 = extractvalue { {}*, i64 } %162, 0
  %.elt447 = extractvalue { {}*, i64 } %162, 1
  %cond387 = icmp eq i64 %.elt447, 0
  %163 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x108.1 = select i1 %cond387, {}* %163, {}* %.elt445
  br label %tag9

normal-dest340:                                   ; preds = %tag82
  %.elt403 = extractvalue { {}*, i64 } %94, 0
  %.elt405 = extractvalue { {}*, i64 } %94, 1
  %cond379 = icmp eq i64 %.elt405, 0
  %164 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289043.0 = select i1 %cond379, {}* %164, {}* %.elt403
  %ptrtoint346 = ptrtoint {}* %15 to i64
  %entry-point-addr-uint347 = add i64 %ptrtoint346, 7
  %entry-point-addr348 = inttoptr i64 %entry-point-addr-uint347 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point349 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr348, align 8
  %165 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point349({}* %15, i64 2, {}* %G289042.0, {}* %G289043.0, {}* null, {}* null)
          to label %normal-dest352 unwind label %cleanup-lpad

normal-dest352:                                   ; preds = %normal-dest340
  %.elt407 = extractvalue { {}*, i64 } %165, 0
  %.elt409 = extractvalue { {}*, i64 } %165, 1
  %cond380 = icmp eq i64 %.elt409, 0
  %166 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289040.0 = select i1 %cond380, {}* %166, {}* %.elt407
  %ptrtoint358 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint359 = add i64 %ptrtoint358, 7
  %entry-point-addr360 = inttoptr i64 %entry-point-addr-uint359 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point361 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr360, align 8
  %167 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point361({}* %27, i64 2, {}* %G289039.0, {}* %G289040.0, {}* null, {}* null)
          to label %normal-dest364 unwind label %cleanup-lpad

normal-dest364:                                   ; preds = %normal-dest352
  %.elt411 = extractvalue { {}*, i64 } %167, 0
  %.elt413 = extractvalue { {}*, i64 } %167, 1
  br label %tag22

normal-dest371:                                   ; preds = %tag83
  %.elt437 = extractvalue { {}*, i64 } %95, 0
  %.elt439 = extractvalue { {}*, i64 } %95, 1
  br label %tag22

normal-dest373:                                   ; preds = %tag84
  br i1 %consp-test116, label %tag49, label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^483^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !100 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^483^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br86
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest80, %normal-dest17, %header-check-br
  %G289221.0 = phi {}* [ %18, %header-check-br ], [ %G289221.1, %normal-dest17 ], [ %G289221.2, %normal-dest80 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 808), align 16
  %ptrtoint20 = ptrtoint {}* %G289221.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G289221.0, i64 2, {}* %"closure->B=IN-SORTIERTE-LISTE-EINFUEGEN", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest73, %maybe-more-tests94, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 808), align 16
  %"closure->B=IN-SORTIERTE-LISTE-EINFUEGEN" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 16869, i64 483, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br86

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 807), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289221.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 810), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->B=IN-SORTIERTE-LISTE-EINFUEGEN", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 818), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->B=IN-SORTIERTE-LISTE-EINFUEGEN", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 808), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 819), align 8
  %ptrtoint59 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %36, i64 3, {}* %37, {}* %38, {}* %39, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %41, {}* inttoptr (i64 1932 to {}*))
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 808), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

normal-dest73:                                    ; preds = %maybe-more-tests94
  %ptrtoint74 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint75 = add i64 %ptrtoint74, 7
  %entry-point-addr76 = inttoptr i64 %entry-point-addr-uint75 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point77 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr76, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point77({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest80 unwind label %cleanup-lpad

normal-dest80:                                    ; preds = %normal-dest73
  %.elt118 = extractvalue { {}*, i64 } %45, 0
  %.elt120 = extractvalue { {}*, i64 } %45, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289221.2 = select i1 %cond95, {}* %46, {}* %.elt118
  br label %tag2

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest73 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !101 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 3
  br i1 %enough-args, label %error, label %continue

tag2:                                             ; preds = %normal-dest126
  %9 = icmp eq {}* %TEILLISTE.0599, %.val571
  %G289287.0 = select i1 %9, {}* %.val570, {}* %.val571
  %10 = icmp eq {}* %G289287.0, %.val571
  br i1 %10, label %tag67, label %tag72

tag4:                                             ; preds = %tag66
  br i1 %test, label %header-check-br, label %tag13

tag5:                                             ; preds = %tag33
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest109 unwind label %cleanup-lpad.loopexit

tag6:                                             ; preds = %normal-dest372
  %13 = invoke {}* @cc_safe_fdefinition({}* %154)
          to label %normal-dest124 unwind label %cleanup-lpad.loopexit

tag12:                                            ; preds = %normal-dest163, %normal-dest149, %header-check-br
  %.val577 = phi {}* [ %.val582, %header-check-br ], [ %100, %normal-dest149 ], [ %102, %normal-dest163 ]
  %G289333.0 = phi {}* [ %key.0, %header-check-br ], [ %G289333.1, %normal-dest149 ], [ %G289333.2, %normal-dest163 ]
  %14 = ptrtoint {}* %TEILLISTE.0599 to i64
  %tag-only139471 = and i64 %14, 7
  %consp-test140 = icmp eq i64 %tag-only139471, 3
  %.val568 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289351.0 = select i1 %consp-test140, {}* %.val568, {}* %.val577
  %15 = icmp eq {}* %G289351.0, %.val577
  br i1 %15, label %tag62, label %tag28

tag13:                                            ; preds = %tag4, %header-check-br228
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest142 unwind label %cleanup-lpad.loopexit

tag14:                                            ; preds = %normal-dest247, %normal-dest276
  %.sink546 = phi { {}*, i64 } [ %132, %normal-dest276 ], [ %127, %normal-dest247 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %.sink546

tag15:                                            ; preds = %normal-dest126
  %18 = add i64 %93, -3
  %19 = inttoptr i64 %18 to {}**
  %20 = load {}*, {}** %19, align 8
  br label %tag72

tag21:                                            ; preds = %tag58
  %21 = icmp eq {}* %TEILLISTE.0599, %key.0
  %G289322.0 = select i1 %21, {}* %.val579, {}* %key.0
  %22 = icmp eq {}* %G289322.0, %key.0
  br i1 %22, label %tag32, label %tag61

tag23:                                            ; preds = %tag48, %header-check-br176
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest186 unwind label %cleanup-lpad.loopexit

tag25:                                            ; preds = %tag58
  %25 = add i64 %53, -3
  %26 = inttoptr i64 %25 to {}**
  %27 = load {}*, {}** %26, align 8
  br label %tag61

tag28:                                            ; preds = %tag12
  %28 = add i64 %14, -3
  %29 = inttoptr i64 %28 to {}**
  %30 = load {}*, {}** %29, align 8
  br label %tag59

tag32:                                            ; preds = %tag21
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest200 unwind label %cleanup-lpad.loopexit

tag33:                                            ; preds = %normal-dest430
  %33 = icmp eq {}* %TEILLISTE.0599, %165
  %.val572 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289266.0 = select i1 %33, {}* %.val572, {}* %165
  %34 = icmp eq {}* %G289266.0, %165
  br i1 %34, label %tag5, label %tag42

tag34:                                            ; preds = %normal-dest406, %normal-dest306, %header-check-br219
  %35 = phi {}* [ %37, %header-check-br219 ], [ %140, %normal-dest306 ], [ %162, %normal-dest406 ]
  %G289310.0 = phi {}* [ %vaarg85, %header-check-br219 ], [ %G289310.1, %normal-dest306 ], [ %G289310.2, %normal-dest406 ]
  %36 = icmp eq {}* %key.0, %35
  br i1 %36, label %tag66, label %tag48

tag35:                                            ; preds = %tag35.lr.ph, %tag42
  %37 = phi {}* [ %67, %tag35.lr.ph ], [ %39, %tag42 ]
  %TEILLISTE.0599 = phi {}* [ %vaarg81, %tag35.lr.ph ], [ %G289199.0, %tag42 ]
  %ANFANGSLISTE.0598 = phi {}* [ %67, %tag35.lr.ph ], [ %ANFANGSLISTE.1, %tag42 ]
  br i1 %test222, label %header-check-br219, label %tag50

tag41:                                            ; preds = %normal-dest372
  %38 = invoke {}* @cc_safe_fdefinition({}* %154)
          to label %normal-dest238 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag42:                                            ; preds = %tag33, %normal-dest117, %tag49
  %39 = phi {}* [ %165, %tag49 ], [ %90, %normal-dest117 ], [ %165, %tag33 ]
  %G289199.0 = phi {}* [ %47, %tag49 ], [ %G289199.1, %normal-dest117 ], [ %165, %tag33 ]
  %40 = icmp eq {}* %G289199.0, %39
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object.0 = select i1 %40, {}* %.val, {}* %39
  %41 = icmp eq {}* %object.0, %39
  %G289247.0 = select i1 %41, {}* %.val, {}* %39
  %42 = icmp eq {}* %G289247.0, %39
  br i1 %42, label %tag44, label %tag35

tag44:                                            ; preds = %tag42, %kw-exit-block
  %ANFANGSLISTE.0.lcssa = phi {}* [ %67, %kw-exit-block ], [ %ANFANGSLISTE.1, %tag42 ]
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 629), align 8
  %44 = invoke {}* @cc_safe_fdefinition({}* %43)
          to label %normal-dest267 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag48:                                            ; preds = %tag34
  br i1 %test, label %header-check-br289, label %tag23

tag49:                                            ; preds = %normal-dest430
  %45 = add i64 %93, 5
  %46 = inttoptr i64 %45 to {}**
  %47 = load {}*, {}** %46, align 8
  br label %tag42

tag50:                                            ; preds = %tag35, %header-check-br338
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest299 unwind label %cleanup-lpad.loopexit

tag53:                                            ; preds = %header-check-br289, %normal-dest193, %normal-dest102
  %G289369.0 = phi {}* [ %G289369.1, %normal-dest102 ], [ %G289369.2, %normal-dest193 ], [ %key.0, %header-check-br289 ]
  %ptrtoint312 = ptrtoint {}* %G289369.0 to i64
  %entry-point-addr-uint313 = add i64 %ptrtoint312, 7
  %entry-point-addr314 = inttoptr i64 %entry-point-addr-uint313 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point315 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr314, align 8
  %50 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point315({}* %G289369.0, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest318 unwind label %cleanup-lpad.loopexit

tag55:                                            ; preds = %tag62
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest325 unwind label %cleanup-lpad.loopexit

tag58:                                            ; preds = %tag66
  %53 = ptrtoint {}* %TEILLISTE.0599 to i64
  %tag-only352517 = and i64 %53, 7
  %consp-test353 = icmp eq i64 %tag-only352517, 3
  %.val579 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289329.0 = select i1 %consp-test353, {}* %.val579, {}* %key.0
  %54 = icmp eq {}* %G289329.0, %key.0
  br i1 %54, label %tag21, label %tag25

tag59:                                            ; preds = %tag62, %normal-dest332, %tag28
  %G289334.0 = phi {}* [ %30, %tag28 ], [ %G289334.1, %normal-dest332 ], [ %.val577, %tag62 ]
  %ptrtoint354 = ptrtoint {}* %G289333.0 to i64
  %entry-point-addr-uint355 = add i64 %ptrtoint354, 7
  %entry-point-addr356 = inttoptr i64 %entry-point-addr-uint355 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point357 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr356, align 8
  %55 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point357({}* %G289333.0, i64 1, {}* %G289334.0, {}* null, {}* null, {}* null)
          to label %normal-dest360 unwind label %cleanup-lpad.loopexit

tag61:                                            ; preds = %tag21, %normal-dest360, %normal-dest207, %tag25
  %G289312.0 = phi {}* [ %27, %tag25 ], [ %G289312.1, %normal-dest207 ], [ %G289312.2, %normal-dest360 ], [ %key.0, %tag21 ]
  %ptrtoint366 = ptrtoint {}* %G289310.0 to i64
  %entry-point-addr-uint367 = add i64 %ptrtoint366, 7
  %entry-point-addr368 = inttoptr i64 %entry-point-addr-uint367 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point369 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr368, align 8
  %56 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point369({}* %G289310.0, i64 2, {}* %G289311.0, {}* %G289312.0, {}* null, {}* null)
          to label %normal-dest372 unwind label %cleanup-lpad.loopexit

tag62:                                            ; preds = %tag12
  %57 = icmp eq {}* %TEILLISTE.0599, %.val577
  %G289344.0 = select i1 %57, {}* %.val568, {}* %.val577
  %58 = icmp eq {}* %G289344.0, %.val577
  br i1 %58, label %tag55, label %tag59

tag66:                                            ; preds = %normal-dest318, %tag34
  %.val582 = phi {}* [ %key.0, %tag34 ], [ %141, %normal-dest318 ]
  %G289311.0 = phi {}* [ %vaarg, %tag34 ], [ %G289311.1, %normal-dest318 ]
  %59 = icmp eq {}* %key.0, %.val582
  br i1 %59, label %tag58, label %tag4

tag67:                                            ; preds = %tag2
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %61 = invoke {}* @cc_safe_fdefinition({}* %60)
          to label %normal-dest385 unwind label %cleanup-lpad.loopexit

tag72:                                            ; preds = %tag2, %normal-dest392, %tag15
  %G289277.0 = phi {}* [ %20, %tag15 ], [ %G289277.1, %normal-dest392 ], [ %.val571, %tag2 ]
  %ptrtoint412 = ptrtoint {}* %92 to i64
  %entry-point-addr-uint413 = add i64 %ptrtoint412, 7
  %entry-point-addr414 = inttoptr i64 %entry-point-addr-uint413 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point415 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr414, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point415({}* %92, i64 1, {}* %G289277.0, {}* null, {}* null, {}* null)
          to label %normal-dest418 unwind label %cleanup-lpad.loopexit

cleanup-lpad.loopexit:                            ; preds = %maybe-more-tests184, %normal-dest99, %tag5, %normal-dest109, %tag6, %normal-dest124, %tag13, %normal-dest142, %maybe-more-tests236, %normal-dest156, %tag23, %normal-dest186, %tag32, %normal-dest200, %tag50, %normal-dest299, %tag53, %tag55, %normal-dest325, %tag59, %tag61, %tag67, %normal-dest385, %maybe-more-tests346, %normal-dest399, %tag72, %normal-dest418
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %loop-kw-args
  %lpad.loopexit587 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %normal-dest276, %normal-dest269, %normal-dest267, %tag44, %normal-dest247, %normal-dest240, %normal-dest238, %tag41, %loop-cont, %error
  %lpad.loopexit.split-lp588 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit587, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp588, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @":::global-str-B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 3)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs79 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-180 = add i64 %rem-nargs79, -1
  store i64 %rem-nargs-180, i64* %"remaining-nargs*", align 8
  %vaarg81 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs83 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-184 = add i64 %rem-nargs83, -1
  store i64 %rem-nargs-184, i64* %"remaining-nargs*", align 8
  %vaarg85 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %66 = icmp eq i64 %nargs, 3
  br i1 %66, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G289200.0 = phi {}* [ %G289200.2, %advance-arg-idx-block ], [ %64, %loop-kw-args.preheader ]
  %key.1 = phi {}* [ %key.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %74, %advance-arg-idx-block ], [ 3, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs88 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-189 = add i64 %rem-nargs88, -1
  store i64 %rem-nargs-189, i64* %"remaining-nargs*", align 8
  %vaarg90 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs91 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-192 = add i64 %rem-nargs91, -1
  store i64 %rem-nargs-192, i64* %"remaining-nargs*", align 8
  %vaarg93 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg90, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest94 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %.val595 = phi {}* [ %63, %continue ], [ %.val595.pre, %loop-cont.kw-exit-block_crit_edge ]
  %67 = phi {}* [ %64, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G289200.1 = phi {}* [ %64, %continue ], [ %G289200.2, %loop-cont.kw-exit-block_crit_edge ]
  %key.2 = phi {}* [ undef, %continue ], [ %key.3, %loop-cont.kw-exit-block_crit_edge ]
  %68 = icmp eq {}* %G289200.1, %67
  %key.0 = select i1 %68, {}* %67, {}* %key.2
  %69 = icmp eq {}* %vaarg81, %67
  %object.0596 = select i1 %69, {}* %.val595, {}* %67
  %70 = icmp eq {}* %object.0596, %67
  %G289247.0597 = select i1 %70, {}* %.val595, {}* %67
  %71 = icmp eq {}* %G289247.0597, %67
  br i1 %71, label %tag44, label %tag35.lr.ph

tag35.lr.ph:                                      ; preds = %kw-exit-block
  %ptrtoint220 = ptrtoint {}* %vaarg85 to i64
  %tag-only221 = and i64 %ptrtoint220, 7
  %test222 = icmp eq i64 %tag-only221, 1
  %irc-bit-cast223 = bitcast {}* %vaarg85 to i8*
  %gep224 = getelementptr inbounds i8, i8* %irc-bit-cast223, i64 -9
  %irc-bit-cast225 = bitcast i8* %gep224 to i64*
  %ptrtoint105 = ptrtoint {}* %key.0 to i64
  %tag-only = and i64 %ptrtoint105, 7
  %test = icmp eq i64 %tag-only, 1
  %irc-bit-cast106 = bitcast {}* %key.0 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast106, i64 -9
  %irc-bit-cast107 = bitcast i8* %gep to i64*
  br label %tag35

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg90, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.val595.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %kw-exit-block

normal-dest94:                                    ; preds = %loop-kw-args
  %72 = icmp eq {}* %65, %vaarg90
  br i1 %72, label %aok-block, label %"kw-:KEY-test"

aok-block:                                        ; preds = %normal-dest94
  %73 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg93)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G289200.2 = phi {}* [ %G289200.0, %aok-block ], [ %G289200.0, %next-kw-block ], [ %G289200.3, %matched-kw-block ]
  %key.3 = phi {}* [ %key.1, %aok-block ], [ %key.1, %next-kw-block ], [ %key.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %73, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %80, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %74 = add i64 %phi-reg-arg-idx, 2
  %75 = icmp slt i64 %74, %nargs
  br i1 %75, label %loop-kw-args, label %loop-cont

"kw-:KEY-test":                                   ; preds = %normal-dest94
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 822), align 16
  %77 = call i64 @cc_matchKeywordOnce({}* %76, {}* %vaarg90, {}* %G289200.0)
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:KEY-test"
  %79 = icmp eq i64 %77, 2
  %G289200.3 = select i1 %79, {}* %G289200.0, {}* %63
  %key.4 = select i1 %79, {}* %key.1, {}* %vaarg93
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:KEY-test"
  %80 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest99:                                    ; preds = %maybe-more-tests184
  %ptrtoint = ptrtoint {}* %105 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %81 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %105, i64 1, {}* nonnull %key.0, {}* null, {}* null, {}* null)
          to label %normal-dest102 unwind label %cleanup-lpad.loopexit

normal-dest102:                                   ; preds = %normal-dest99
  %.elt523 = extractvalue { {}*, i64 } %81, 0
  %.elt525 = extractvalue { {}*, i64 } %81, 1
  %cond454 = icmp eq i64 %.elt525, 0
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289369.1 = select i1 %cond454, {}* %82, {}* %.elt523
  br label %tag53

header-check-br:                                  ; preds = %tag4
  %83 = load i64, i64* %irc-bit-cast107, align 8
  %.off = add i64 %83, -913
  %84 = icmp ult i64 %.off, 85
  br i1 %84, label %tag12, label %header-check-br228

normal-dest109:                                   ; preds = %tag5
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %87 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint111 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint112 = add i64 %ptrtoint111, 7
  %entry-point-addr113 = inttoptr i64 %entry-point-addr-uint112 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point114 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr113, align 8
  %89 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point114({}* %12, i64 5, {}* %85, {}* %86, {}* %TEILLISTE.0599, {}* %87, {}* %88)
          to label %normal-dest117 unwind label %cleanup-lpad.loopexit

normal-dest117:                                   ; preds = %normal-dest109
  %.elt502 = extractvalue { {}*, i64 } %89, 0
  %.elt504 = extractvalue { {}*, i64 } %89, 1
  %cond449 = icmp eq i64 %.elt504, 0
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289199.1 = select i1 %cond449, {}* %90, {}* %.elt502
  br label %tag42

normal-dest124:                                   ; preds = %tag6
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %92 = invoke {}* @cc_safe_fdefinition({}* %91)
          to label %normal-dest126 unwind label %cleanup-lpad.loopexit

normal-dest126:                                   ; preds = %normal-dest124
  %93 = ptrtoint {}* %TEILLISTE.0599 to i64
  %tag-only132491 = and i64 %93, 7
  %consp-test = icmp eq i64 %tag-only132491, 3
  %.val570 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val571 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289294.0 = select i1 %consp-test, {}* %.val570, {}* %.val571
  %94 = icmp eq {}* %G289294.0, %.val571
  br i1 %94, label %tag2, label %tag15

normal-dest142:                                   ; preds = %tag13
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %98 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 806), align 16
  %ptrtoint143 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint144 = add i64 %ptrtoint143, 7
  %entry-point-addr145 = inttoptr i64 %entry-point-addr-uint144 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point146 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr145, align 8
  %99 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point146({}* %17, i64 5, {}* %95, {}* %96, {}* %key.0, {}* %97, {}* %98)
          to label %normal-dest149 unwind label %cleanup-lpad.loopexit

normal-dest149:                                   ; preds = %normal-dest142
  %.elt468 = extractvalue { {}*, i64 } %99, 0
  %.elt470 = extractvalue { {}*, i64 } %99, 1
  %cond443 = icmp eq i64 %.elt470, 0
  %100 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289333.1 = select i1 %cond443, {}* %100, {}* %.elt468
  br label %tag12

normal-dest156:                                   ; preds = %maybe-more-tests236
  %ptrtoint157 = ptrtoint {}* %122 to i64
  %entry-point-addr-uint158 = add i64 %ptrtoint157, 7
  %entry-point-addr159 = inttoptr i64 %entry-point-addr-uint158 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point160 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr159, align 8
  %101 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point160({}* %122, i64 1, {}* nonnull %key.0, {}* null, {}* null, {}* null)
          to label %normal-dest163 unwind label %cleanup-lpad.loopexit

normal-dest163:                                   ; preds = %normal-dest156
  %.elt514 = extractvalue { {}*, i64 } %101, 0
  %.elt516 = extractvalue { {}*, i64 } %101, 1
  %cond452 = icmp eq i64 %.elt516, 0
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289333.2 = select i1 %cond452, {}* %102, {}* %.elt514
  br label %tag12

header-check-br176:                               ; preds = %header-check-br289
  %.off584 = add i64 %133, -1001
  %103 = icmp ult i64 %.off584, 5
  br i1 %103, label %maybe-more-tests184, label %tag23

maybe-more-tests184:                              ; preds = %header-check-br176
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %105 = invoke {}* @cc_safe_fdefinition({}* %104)
          to label %normal-dest99 unwind label %cleanup-lpad.loopexit

normal-dest186:                                   ; preds = %tag23
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 805), align 8
  %ptrtoint187 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint188 = add i64 %ptrtoint187, 7
  %entry-point-addr189 = inttoptr i64 %entry-point-addr-uint188 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point190 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr189, align 8
  %110 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point190({}* %24, i64 5, {}* %106, {}* %107, {}* %key.0, {}* %108, {}* %109)
          to label %normal-dest193 unwind label %cleanup-lpad.loopexit

normal-dest193:                                   ; preds = %normal-dest186
  %.elt460 = extractvalue { {}*, i64 } %110, 0
  %.elt462 = extractvalue { {}*, i64 } %110, 1
  %cond441 = icmp eq i64 %.elt462, 0
  %111 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289369.2 = select i1 %cond441, {}* %111, {}* %.elt460
  br label %tag53

normal-dest200:                                   ; preds = %tag32
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %113 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint201 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint202 = add i64 %ptrtoint201, 7
  %entry-point-addr203 = inttoptr i64 %entry-point-addr-uint202 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point204 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr203, align 8
  %116 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point204({}* %32, i64 5, {}* %112, {}* %113, {}* %TEILLISTE.0599, {}* %114, {}* %115)
          to label %normal-dest207 unwind label %cleanup-lpad.loopexit

normal-dest207:                                   ; preds = %normal-dest200
  %.elt519 = extractvalue { {}*, i64 } %116, 0
  %.elt521 = extractvalue { {}*, i64 } %116, 1
  %cond453 = icmp eq i64 %.elt521, 0
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289312.1 = select i1 %cond453, {}* %117, {}* %.elt519
  br label %tag61

header-check-br219:                               ; preds = %tag35
  %118 = load i64, i64* %irc-bit-cast225, align 8
  %.off585 = add i64 %118, -913
  %119 = icmp ult i64 %.off585, 85
  br i1 %119, label %tag34, label %header-check-br338

header-check-br228:                               ; preds = %header-check-br
  %.off578 = add i64 %83, -1001
  %120 = icmp ult i64 %.off578, 5
  br i1 %120, label %maybe-more-tests236, label %tag13

maybe-more-tests236:                              ; preds = %header-check-br228
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %122 = invoke {}* @cc_safe_fdefinition({}* %121)
          to label %normal-dest156 unwind label %cleanup-lpad.loopexit

normal-dest238:                                   ; preds = %tag41
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %124 = invoke {}* @cc_safe_fdefinition({}* %123)
          to label %normal-dest240 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest240:                                   ; preds = %normal-dest238
  %ptrtoint241 = ptrtoint {}* %124 to i64
  %entry-point-addr-uint242 = add i64 %ptrtoint241, 7
  %entry-point-addr243 = inttoptr i64 %entry-point-addr-uint242 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point244 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr243, align 8
  %125 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point244({}* %124, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest247 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest247:                                   ; preds = %normal-dest240
  %.elt481 = extractvalue { {}*, i64 } %125, 0
  %.elt483 = extractvalue { {}*, i64 } %125, 1
  %cond446 = icmp eq i64 %.elt483, 0
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289302.0 = select i1 %cond446, {}* %126, {}* %.elt481
  %ptrtoint253 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint254 = add i64 %ptrtoint253, 7
  %entry-point-addr255 = inttoptr i64 %entry-point-addr-uint254 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point256 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr255, align 8
  %127 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point256({}* %38, i64 3, {}* %ANFANGSLISTE.0598, {}* %G289302.0, {}* %TEILLISTE.0599, {}* null)
          to label %tag14 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest267:                                   ; preds = %tag44
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %129 = invoke {}* @cc_safe_fdefinition({}* %128)
          to label %normal-dest269 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest269:                                   ; preds = %normal-dest267
  %ptrtoint270 = ptrtoint {}* %129 to i64
  %entry-point-addr-uint271 = add i64 %ptrtoint270, 7
  %entry-point-addr272 = inttoptr i64 %entry-point-addr-uint271 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point273 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr272, align 8
  %130 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point273({}* %129, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest276 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest276:                                   ; preds = %normal-dest269
  %.elt531 = extractvalue { {}*, i64 } %130, 0
  %.elt533 = extractvalue { {}*, i64 } %130, 1
  %cond456 = icmp eq i64 %.elt533, 0
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289242.0 = select i1 %cond456, {}* %131, {}* %.elt531
  %ptrtoint282 = ptrtoint {}* %44 to i64
  %entry-point-addr-uint283 = add i64 %ptrtoint282, 7
  %entry-point-addr284 = inttoptr i64 %entry-point-addr-uint283 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point285 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr284, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point285({}* %44, i64 2, {}* %ANFANGSLISTE.0.lcssa, {}* %G289242.0, {}* null, {}* null)
          to label %tag14 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

header-check-br289:                               ; preds = %tag48
  %133 = load i64, i64* %irc-bit-cast107, align 8
  %.off583 = add i64 %133, -913
  %134 = icmp ult i64 %.off583, 85
  br i1 %134, label %tag53, label %header-check-br176

normal-dest299:                                   ; preds = %tag50
  %135 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %136 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %137 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %138 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 804), align 16
  %ptrtoint300 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint301 = add i64 %ptrtoint300, 7
  %entry-point-addr302 = inttoptr i64 %entry-point-addr-uint301 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point303 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr302, align 8
  %139 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point303({}* %49, i64 5, {}* %135, {}* %136, {}* %vaarg85, {}* %137, {}* %138)
          to label %normal-dest306 unwind label %cleanup-lpad.loopexit

normal-dest306:                                   ; preds = %normal-dest299
  %.elt = extractvalue { {}*, i64 } %139, 0
  %.elt458 = extractvalue { {}*, i64 } %139, 1
  %cond = icmp eq i64 %.elt458, 0
  %140 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289310.1 = select i1 %cond, {}* %140, {}* %.elt
  br label %tag34

normal-dest318:                                   ; preds = %tag53
  %.elt464 = extractvalue { {}*, i64 } %50, 0
  %.elt466 = extractvalue { {}*, i64 } %50, 1
  %cond442 = icmp eq i64 %.elt466, 0
  %141 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289311.1 = select i1 %cond442, {}* %141, {}* %.elt464
  br label %tag66

normal-dest325:                                   ; preds = %tag55
  %142 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %144 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint326 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint327 = add i64 %ptrtoint326, 7
  %entry-point-addr328 = inttoptr i64 %entry-point-addr-uint327 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point329 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr328, align 8
  %146 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point329({}* %52, i64 5, {}* %142, {}* %143, {}* %TEILLISTE.0599, {}* %144, {}* %145)
          to label %normal-dest332 unwind label %cleanup-lpad.loopexit

normal-dest332:                                   ; preds = %normal-dest325
  %.elt510 = extractvalue { {}*, i64 } %146, 0
  %.elt512 = extractvalue { {}*, i64 } %146, 1
  %cond451 = icmp eq i64 %.elt512, 0
  %147 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289334.1 = select i1 %cond451, {}* %147, {}* %.elt510
  br label %tag59

header-check-br338:                               ; preds = %header-check-br219
  %.off586 = add i64 %118, -1001
  %148 = icmp ult i64 %.off586, 5
  br i1 %148, label %maybe-more-tests346, label %tag50

maybe-more-tests346:                              ; preds = %header-check-br338
  %149 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %150 = invoke {}* @cc_safe_fdefinition({}* %149)
          to label %normal-dest399 unwind label %cleanup-lpad.loopexit

normal-dest360:                                   ; preds = %tag59
  %.elt473 = extractvalue { {}*, i64 } %55, 0
  %.elt475 = extractvalue { {}*, i64 } %55, 1
  %cond444 = icmp eq i64 %.elt475, 0
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289312.2 = select i1 %cond444, {}* %151, {}* %.elt473
  br label %tag61

normal-dest372:                                   ; preds = %tag61
  %.elt477 = extractvalue { {}*, i64 } %56, 0
  %.elt479 = extractvalue { {}*, i64 } %56, 1
  %cond445 = icmp eq i64 %.elt479, 0
  %152 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289308.0 = select i1 %cond445, {}* %152, {}* %.elt477
  %153 = icmp eq {}* %G289308.0, %152
  %154 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 629), align 8
  br i1 %153, label %tag6, label %tag41

normal-dest385:                                   ; preds = %tag67
  %155 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %156 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %157 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %158 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint386 = ptrtoint {}* %61 to i64
  %entry-point-addr-uint387 = add i64 %ptrtoint386, 7
  %entry-point-addr388 = inttoptr i64 %entry-point-addr-uint387 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point389 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr388, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point389({}* %61, i64 5, {}* %155, {}* %156, {}* %TEILLISTE.0599, {}* %157, {}* %158)
          to label %normal-dest392 unwind label %cleanup-lpad.loopexit

normal-dest392:                                   ; preds = %normal-dest385
  %.elt506 = extractvalue { {}*, i64 } %159, 0
  %.elt508 = extractvalue { {}*, i64 } %159, 1
  %cond450 = icmp eq i64 %.elt508, 0
  %160 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289277.1 = select i1 %cond450, {}* %160, {}* %.elt506
  br label %tag72

normal-dest399:                                   ; preds = %maybe-more-tests346
  %ptrtoint400 = ptrtoint {}* %150 to i64
  %entry-point-addr-uint401 = add i64 %ptrtoint400, 7
  %entry-point-addr402 = inttoptr i64 %entry-point-addr-uint401 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point403 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr402, align 8
  %161 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point403({}* %150, i64 1, {}* nonnull %vaarg85, {}* null, {}* null, {}* null)
          to label %normal-dest406 unwind label %cleanup-lpad.loopexit

normal-dest406:                                   ; preds = %normal-dest399
  %.elt527 = extractvalue { {}*, i64 } %161, 0
  %.elt529 = extractvalue { {}*, i64 } %161, 1
  %cond455 = icmp eq i64 %.elt529, 0
  %162 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289310.2 = select i1 %cond455, {}* %162, {}* %.elt527
  br label %tag34

normal-dest418:                                   ; preds = %tag72
  %.elt493 = extractvalue { {}*, i64 } %62, 0
  %.elt495 = extractvalue { {}*, i64 } %62, 1
  %cond447 = icmp eq i64 %.elt495, 0
  %163 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289275.0 = select i1 %cond447, {}* %163, {}* %.elt493
  %ptrtoint424 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint425 = add i64 %ptrtoint424, 7
  %entry-point-addr426 = inttoptr i64 %entry-point-addr-uint425 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point427 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr426, align 8
  %164 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point427({}* %13, i64 2, {}* %ANFANGSLISTE.0598, {}* %G289275.0, {}* null, {}* null)
          to label %normal-dest430 unwind label %cleanup-lpad.loopexit

normal-dest430:                                   ; preds = %normal-dest418
  %.elt497 = extractvalue { {}*, i64 } %164, 0
  %.elt499 = extractvalue { {}*, i64 } %164, 1
  %cond448 = icmp eq i64 %.elt499, 0
  %165 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ANFANGSLISTE.1 = select i1 %cond448, {}* %165, {}* %.elt497
  br i1 %consp-test, label %tag49, label %tag33
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^501^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !102 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^501^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest80, %normal-dest17, %header-check-br
  %G289426.0 = phi {}* [ %18, %header-check-br ], [ %G289426.1, %normal-dest17 ], [ %G289426.2, %normal-dest80 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 827), align 8
  %ptrtoint20 = ptrtoint {}* %G289426.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G289426.0, i64 2, {}* %"closure->B=SCHLUESSELWOERTER", {}* %11, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest10, %header-check-br86
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest73 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest73, %tag2, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %maybe-more-tests94, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 827), align 8
  %"closure->B=SCHLUESSELWOERTER" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 17686, i64 501, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag2

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br86

normal-dest13:                                    ; preds = %maybe-more-tests94
  %ptrtoint14 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %49, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt118 = extractvalue { {}*, i64 } %21, 0
  %.elt120 = extractvalue { {}*, i64 } %21, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289426.1 = select i1 %cond95, {}* %22, {}* %.elt118
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 829), align 8
  %ptrtoint33 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %26 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %24, i64 2, {}* %"closure->B=SCHLUESSELWOERTER", {}* %25, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 830), align 16
  %ptrtoint46 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %28, i64 2, {}* %"closure->B=SCHLUESSELWOERTER", {}* %29, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 827), align 8
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 831), align 8
  %ptrtoint59 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %36 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %32, i64 3, {}* %33, {}* %34, {}* %35, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %37, {}* inttoptr (i64 2028 to {}*))
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 827), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %39 = insertvalue { {}*, i64 } undef, {}* %38, 0
  %40 = insertvalue { {}*, i64 } %39, i64 1, 1
  ret { {}*, i64 } %40

normal-dest73:                                    ; preds = %tag2
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 826), align 16
  %ptrtoint74 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint75 = add i64 %ptrtoint74, 7
  %entry-point-addr76 = inttoptr i64 %entry-point-addr-uint75 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point77 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr76, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point77({}* %14, i64 5, {}* %41, {}* %42, {}* %18, {}* %43, {}* %44)
          to label %normal-dest80 unwind label %cleanup-lpad

normal-dest80:                                    ; preds = %normal-dest73
  %.elt = extractvalue { {}*, i64 } %45, 0
  %.elt97 = extractvalue { {}*, i64 } %45, 1
  %cond = icmp eq i64 %.elt97, 0
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289426.2 = select i1 %cond, {}* %46, {}* %.elt
  br label %tag1

header-check-br86:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %47 = icmp ult i64 %.off123, 5
  br i1 %47, label %maybe-more-tests94, label %tag2

maybe-more-tests94:                               ; preds = %header-check-br86
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest13 unwind label %cleanup-lpad
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !103 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad.loopexit.split-lp

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc162 unwind label %cleanup-lpad.loopexit.split-lp

.noexc162:                                        ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest65
  %11 = add i64 %53, -3
  %12 = inttoptr i64 %11 to {}**
  %13 = load {}*, {}** %12, align 8
  br label %tag20

tag3:                                             ; preds = %normal-dest79
  %14 = icmp eq {}* %RESTLISTE.0182, %55
  %.val171 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289483.0 = select i1 %14, {}* %.val171, {}* %55
  %15 = icmp eq {}* %G289483.0, %55
  br i1 %15, label %tag22, label %tag8

tag4:                                             ; preds = %normal-dest65
  %16 = icmp eq {}* %RESTLISTE.0182, %.val170
  %G289502.0 = select i1 %16, {}* %.val169, {}* %.val170
  %17 = icmp eq {}* %G289502.0, %.val170
  br i1 %17, label %tag28, label %tag20

tag6:                                             ; preds = %tag8
  %18 = add i64 %24, 5
  %19 = inttoptr i64 %18 to {}**
  %20 = load {}*, {}** %19, align 8
  br label %tag30

tag7:                                             ; preds = %tag11
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest51 unwind label %cleanup-lpad.loopexit

tag8:                                             ; preds = %tag3, %normal-dest98, %tag15
  %23 = phi {}* [ %55, %tag15 ], [ %61, %normal-dest98 ], [ %55, %tag3 ]
  %x57.0 = phi {}* [ %31, %tag15 ], [ %x57.1, %normal-dest98 ], [ %55, %tag3 ]
  %24 = ptrtoint {}* %x57.0 to i64
  %tag-only140 = and i64 %24, 7
  %consp-test = icmp eq i64 %tag-only140, 3
  br i1 %consp-test, label %tag6, label %tag11

tag11:                                            ; preds = %tag8
  %25 = icmp eq {}* %x57.0, %23
  %.val173 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289467.0 = select i1 %25, {}* %.val173, {}* %23
  %26 = icmp eq {}* %G289467.0, %23
  br i1 %26, label %tag7, label %tag30

tag12:                                            ; preds = %tag12.preheader, %tag30
  %RESTLISTE.0182 = phi {}* [ %G289405.0, %tag30 ], [ %farg0, %tag12.preheader ]
  %SCHLUESSELWOERTER.0181 = phi {}* [ %SCHLUESSELWOERTER.1, %tag30 ], [ %43, %tag12.preheader ]
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest65 unwind label %cleanup-lpad.loopexit

tag15:                                            ; preds = %normal-dest79
  %29 = add i64 %53, 5
  %30 = inttoptr i64 %29 to {}**
  %31 = load {}*, {}** %30, align 8
  br label %tag8

tag20:                                            ; preds = %tag4, %normal-dest112, %tag1
  %G289491.0 = phi {}* [ %13, %tag1 ], [ %G289491.1, %normal-dest112 ], [ %.val170, %tag4 ]
  %ptrtoint73 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint74 = add i64 %ptrtoint73, 7
  %entry-point-addr75 = inttoptr i64 %entry-point-addr-uint74 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point76 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr75, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point76({}* %28, i64 2, {}* %G289491.0, {}* %SCHLUESSELWOERTER.0181, {}* null, {}* null)
          to label %normal-dest79 unwind label %cleanup-lpad.loopexit

tag22:                                            ; preds = %tag3
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest91 unwind label %cleanup-lpad.loopexit

tag28:                                            ; preds = %tag4
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest105 unwind label %cleanup-lpad.loopexit

tag29:                                            ; preds = %tag30, %normal-dest
  %SCHLUESSELWOERTER.0.lcssa = phi {}* [ %43, %normal-dest ], [ %SCHLUESSELWOERTER.1, %tag30 ]
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 824), align 16
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest119 unwind label %cleanup-lpad.loopexit.split-lp

tag30:                                            ; preds = %tag11, %normal-dest54, %tag6
  %39 = phi {}* [ %23, %tag6 ], [ %52, %normal-dest54 ], [ %23, %tag11 ]
  %G289405.0 = phi {}* [ %20, %tag6 ], [ %G289405.1, %normal-dest54 ], [ %23, %tag11 ]
  %40 = icmp eq {}* %G289405.0, %39
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object.0 = select i1 %40, {}* %.val, {}* %39
  %41 = icmp eq {}* %object.0, %39
  %G289448.0 = select i1 %41, {}* %.val, {}* %39
  %42 = icmp eq {}* %G289448.0, %39
  br i1 %42, label %tag29, label %tag12

cleanup-lpad.loopexit:                            ; preds = %tag7, %normal-dest51, %tag12, %tag20, %tag22, %normal-dest91, %tag28, %normal-dest105
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %tag29, %normal-dest119, %9, %10
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

normal-dest:                                      ; preds = %entry
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %44 = icmp eq {}* %43, %farg0
  %.val178 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %object.0179 = select i1 %44, {}* %.val178, {}* %43
  %45 = icmp eq {}* %object.0179, %43
  %G289448.0180 = select i1 %45, {}* %.val178, {}* %43
  %46 = icmp eq {}* %G289448.0180, %43
  br i1 %46, label %tag29, label %tag12.preheader

tag12.preheader:                                  ; preds = %normal-dest
  br label %tag12

normal-dest51:                                    ; preds = %tag7
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint = ptrtoint {}* %22 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %51 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %22, i64 5, {}* %47, {}* %48, {}* %x57.0, {}* %49, {}* %50)
          to label %normal-dest54 unwind label %cleanup-lpad.loopexit

normal-dest54:                                    ; preds = %normal-dest51
  %.elt142 = extractvalue { {}*, i64 } %51, 0
  %.elt144 = extractvalue { {}*, i64 } %51, 1
  %cond133 = icmp eq i64 %.elt144, 0
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289405.1 = select i1 %cond133, {}* %52, {}* %.elt142
  br label %tag30

normal-dest65:                                    ; preds = %tag12
  %53 = ptrtoint {}* %RESTLISTE.0182 to i64
  %tag-only71136 = and i64 %53, 7
  %consp-test72 = icmp eq i64 %tag-only71136, 3
  %.val169 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.val170 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289509.0 = select i1 %consp-test72, {}* %.val169, {}* %.val170
  %54 = icmp eq {}* %G289509.0, %.val170
  br i1 %54, label %tag4, label %tag1

normal-dest79:                                    ; preds = %tag20
  %.elt = extractvalue { {}*, i64 } %32, 0
  %.elt138 = extractvalue { {}*, i64 } %32, 1
  %cond = icmp eq i64 %.elt138, 0
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %SCHLUESSELWOERTER.1 = select i1 %cond, {}* %55, {}* %.elt
  br i1 %consp-test72, label %tag15, label %tag3

normal-dest91:                                    ; preds = %tag22
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %59 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint92 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint93 = add i64 %ptrtoint92, 7
  %entry-point-addr94 = inttoptr i64 %entry-point-addr-uint93 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point95 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr94, align 8
  %60 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point95({}* %34, i64 5, {}* %56, {}* %57, {}* %RESTLISTE.0182, {}* %58, {}* %59)
          to label %normal-dest98 unwind label %cleanup-lpad.loopexit

normal-dest98:                                    ; preds = %normal-dest91
  %.elt146 = extractvalue { {}*, i64 } %60, 0
  %.elt148 = extractvalue { {}*, i64 } %60, 1
  %cond134 = icmp eq i64 %.elt148, 0
  %61 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x57.1 = select i1 %cond134, {}* %61, {}* %.elt146
  br label %tag8

normal-dest105:                                   ; preds = %tag28
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %65 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint106 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint107 = add i64 %ptrtoint106, 7
  %entry-point-addr108 = inttoptr i64 %entry-point-addr-uint107 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point109 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr108, align 8
  %66 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point109({}* %36, i64 5, {}* %62, {}* %63, {}* %RESTLISTE.0182, {}* %64, {}* %65)
          to label %normal-dest112 unwind label %cleanup-lpad.loopexit

normal-dest112:                                   ; preds = %normal-dest105
  %.elt150 = extractvalue { {}*, i64 } %66, 0
  %.elt152 = extractvalue { {}*, i64 } %66, 1
  %cond135 = icmp eq i64 %.elt152, 0
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289491.1 = select i1 %cond135, {}* %67, {}* %.elt150
  br label %tag20

normal-dest119:                                   ; preds = %tag29
  %ptrtoint120 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint121 = add i64 %ptrtoint120, 7
  %entry-point-addr122 = inttoptr i64 %entry-point-addr-uint121 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point123 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr122, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point123({}* %38, i64 1, {}* %SCHLUESSELWOERTER.0.lcssa, {}* null, {}* null, {}* null)
          to label %normal-dest126 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest126:                                   ; preds = %normal-dest119
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %68
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^517^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !104 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^517^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G289536.0 = phi {}* [ %18, %header-check-br ], [ %G289536.1, %normal-dest76 ], [ %G289536.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 838), align 16
  %ptrtoint13 = ptrtoint {}* %G289536.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G289536.0, i64 2, {}* %"closure->B=SORTIERE-ALPHABETISCH", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest69, %maybe-more-tests67, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 838), align 16
  %"closure->B=SORTIERE-ALPHABETISCH" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18342, i64 517, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 840), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=SORTIERE-ALPHABETISCH", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 841), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=SORTIERE-ALPHABETISCH", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 838), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 842), align 16
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2068 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 838), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %39 = icmp ult i64 %.off123, 5
  br i1 %39, label %maybe-more-tests67, label %tag4

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %maybe-more-tests67
  %ptrtoint70 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt118 = extractvalue { {}*, i64 } %42, 0
  %.elt120 = extractvalue { {}*, i64 } %42, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289536.1 = select i1 %cond95, {}* %43, {}* %.elt118
  br label %tag

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 837), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289536.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !105 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 833), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 835), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %16, 0
  %.elt21 = extractvalue { {}*, i64 } %16, 1
  %cond = icmp eq i64 %.elt21, 0
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289555.0 = select i1 %cond, {}* %17, {}* %.elt
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 534), align 16
  %ptrtoint13 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %13, i64 2, {}* %G289555.0, {}* %18, {}* null, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %19
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^523^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !106 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^523^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest89, %normal-dest26, %header-check-br
  %G289583.0 = phi {}* [ %18, %header-check-br ], [ %G289583.1, %normal-dest26 ], [ %G289583.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 847), align 8
  %ptrtoint29 = ptrtoint {}* %G289583.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G289583.0, i64 2, {}* %"closure->B=LETZTES-LISTENELEMENT", {}* %11, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest67, %normal-dest61, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 847), align 8
  %"closure->B=LETZTES-LISTENELEMENT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18517, i64 523, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt118 = extractvalue { {}*, i64 } %24, 0
  %.elt120 = extractvalue { {}*, i64 } %24, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289583.1 = select i1 %cond95, {}* %25, {}* %.elt118
  br label %tag3

normal-dest35:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 849), align 8
  %ptrtoint42 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %27, i64 2, {}* %"closure->B=LETZTES-LISTENELEMENT", {}* %28, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 850), align 16
  %ptrtoint55 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %31, i64 2, {}* %"closure->B=LETZTES-LISTENELEMENT", {}* %32, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest61
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 847), align 8
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 851), align 8
  %ptrtoint68 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %35, i64 3, {}* %36, {}* %37, {}* %38, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad

normal-dest74:                                    ; preds = %normal-dest67
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2092 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 847), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 846), align 16
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289583.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !107 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc52 unwind label %cleanup-lpad

.noexc52:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest18
  %11 = ptrtoint {}* %26 to i64
  %12 = icmp eq {}* %x.0, %26
  %G289611.0 = select i1 %12, {}* %.val, {}* %26
  %13 = icmp eq {}* %G289611.0, %26
  br i1 %13, label %tag5, label %tag3

tag3:                                             ; preds = %tag1, %tag10, %normal-dest37
  %return-value.sroa.6.0 = phi i64 [ %.elt51, %normal-dest37 ], [ 1, %tag10 ], [ 1, %tag1 ]
  %return-value.sroa.0.0 = phi i64 [ %34, %normal-dest37 ], [ %21, %tag10 ], [ %11, %tag1 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %14 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %15 = insertvalue { {}*, i64 } undef, {}* %14, 0
  %16 = insertvalue { {}*, i64 } %15, i64 %return-value.sroa.6.0, 1
  ret { {}*, i64 } %16

tag5:                                             ; preds = %tag1
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %18 = invoke {}* @cc_safe_fdefinition({}* %17)
          to label %normal-dest30 unwind label %cleanup-lpad

tag10:                                            ; preds = %normal-dest18
  %19 = add i64 %27, -3
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* %20, align 8
  br label %tag3

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest30, %tag5, %normal-dest15, %normal-dest
  %22 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %22

normal-dest:                                      ; preds = %entry
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 844), align 16
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest15 unwind label %cleanup-lpad

normal-dest15:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %24 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %24, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest18 unwind label %cleanup-lpad

normal-dest18:                                    ; preds = %normal-dest15
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt43 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt43, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x.0 = select i1 %cond, {}* %26, {}* %.elt
  %27 = ptrtoint {}* %x.0 to i64
  %tag-only44 = and i64 %27, 7
  %consp-test = icmp eq i64 %tag-only44, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289619.0 = select i1 %consp-test, {}* %.val, {}* %26
  %28 = icmp eq {}* %G289619.0, %26
  br i1 %28, label %tag1, label %tag10

normal-dest30:                                    ; preds = %tag5
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint31 = ptrtoint {}* %18 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %18, i64 5, {}* %29, {}* %30, {}* %x.0, {}* %31, {}* %32)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt49 = extractvalue { {}*, i64 } %33, 0
  %34 = ptrtoint {}* %.elt49 to i64
  %.elt51 = extractvalue { {}*, i64 } %33, 1
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^529^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !108 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^529^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest89, %normal-dest67, %header-check-br
  %G289653.0 = phi {}* [ %18, %header-check-br ], [ %G289653.1, %normal-dest67 ], [ %G289653.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 860), align 16
  %ptrtoint13 = ptrtoint {}* %G289653.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G289653.0, i64 2, {}* %"closure->B=LOESCHE-NTES-ELEMENT", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br72
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest60, %maybe-more-tests80, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 860), align 16
  %"closure->B=LOESCHE-NTES-ELEMENT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 18665, i64 529, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br72

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 862), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=LOESCHE-NTES-ELEMENT", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 866), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=LOESCHE-NTES-ELEMENT", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 860), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 867), align 8
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2116 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 860), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %maybe-more-tests80
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt118 = extractvalue { {}*, i64 } %39, 0
  %.elt120 = extractvalue { {}*, i64 } %39, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289653.1 = select i1 %cond95, {}* %40, {}* %.elt118
  br label %tag

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %41 = icmp ult i64 %.off123, 5
  br i1 %41, label %maybe-more-tests80, label %tag4

maybe-more-tests80:                               ; preds = %header-check-br72
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 859), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289653.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !109 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 2
  br i1 %enough-args, label %error, label %continue

tag1:                                             ; preds = %tag171
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %10 = icmp eq {}* %SEQUENCE.0.ph, %9
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289969.0 = select i1 %10, {}* %.val, {}* %9
  %11 = icmp eq {}* %G289969.0, %9
  br i1 %11, label %tag190, label %tag41

tag2:                                             ; preds = %tag66
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %13 = icmp eq {}* %SEQUENCE394.0.ph, %12
  %.val1046 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289815.0 = select i1 %13, {}* %.val1046, {}* %12
  %14 = icmp eq {}* %G289815.0, %12
  br i1 %14, label %tag187, label %tag31

tag4:                                             ; preds = %normal-dest386
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag12

tag7:                                             ; preds = %normal-dest384
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag158

tag8:                                             ; preds = %tag154
  %17 = add i64 %144, 7
  %18 = inttoptr i64 %17 to i64*
  %19 = load i64, i64* %18, align 8
  %"tag fixnum" = shl nuw i64 %19, 2
  %20 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag106

tag9:                                             ; preds = %tag15
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest237 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag12:                                            ; preds = %tag104, %normal-dest461, %tag172, %tag81, %tag35, %tag4
  %G289629.0 = phi {}* [ %35, %tag35 ], [ %55, %tag81 ], [ %15, %tag4 ], [ %120, %tag172 ], [ %G289629.1, %normal-dest461 ], [ %.1096, %tag104 ]
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %24 = icmp eq {}* %G289629.0, %23
  br i1 %24, label %tag178, label %tag20

tag15:                                            ; preds = %tag154
  %25 = icmp eq {}* %vaarg203, %.val1044
  %.val1043 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289916.0 = select i1 %25, {}* %.val1043, {}* %.val1044
  %26 = icmp eq {}* %G289916.0, %.val1044
  br i1 %26, label %tag9, label %tag106

tag16:                                            ; preds = %tag31
  %27 = icmp eq {}* %G2095854305.0, %.val1051
  %G289774.0 = select i1 %27, {}* %.val1048, {}* %.val1051
  %28 = icmp eq {}* %G289774.0, %.val1051
  br i1 %28, label %tag108, label %tag123

tag18:                                            ; preds = %kw-exit-block
  br i1 %145, label %tag78, label %tag171.outer.preheader

tag171.outer.preheader:                           ; preds = %tag18
  br label %tag171.outer

tag20:                                            ; preds = %tag195, %normal-dest262, %tag12
  %29 = phi {}* [ %23, %tag12 ], [ %159, %normal-dest262 ], [ %G289629.0, %tag195 ]
  %G289865.0 = phi {}* [ %G289629.0, %tag12 ], [ %G289865.1, %normal-dest262 ], [ %.1036, %tag195 ]
  %30 = icmp eq {}* %G289865.0, %29
  br i1 %30, label %tag131, label %tag77

tag26:                                            ; preds = %tag61
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 629), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest286 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag28:                                            ; preds = %header-check-br278
  %ptrtoint299 = ptrtoint {}* %y236.0 to i64
  %tag-only300 = and i64 %ptrtoint299, 7
  %test301 = icmp eq i64 %tag-only300, 1
  br i1 %test301, label %header-check-br298, label %tag82

tag29:                                            ; preds = %tag78, %normal-dest781, %header-check-br574
  %.pre1082 = phi {}* [ %.val1037, %tag78 ], [ %227, %normal-dest781 ], [ %.val1037, %header-check-br574 ]
  br label %tag154

tag31:                                            ; preds = %tag2, %normal-dest832, %tag174
  %.val1051 = phi {}* [ %.val1049.pre, %tag174 ], [ %240, %normal-dest832 ], [ %12, %tag2 ]
  %G2095854305.0 = phi {}* [ %121, %tag174 ], [ %G2095854305.1, %normal-dest832 ], [ %12, %tag2 ]
  %33 = ptrtoint {}* %G2095854305.0 to i64
  %tag-only306948 = and i64 %33, 7
  %consp-test307 = icmp eq i64 %tag-only306948, 3
  %.val1048 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289803.0 = select i1 %consp-test307, {}* %.val1048, {}* %.val1051
  %34 = icmp eq {}* %G289803.0, %.val1051
  br i1 %34, label %tag16, label %tag148

tag34:                                            ; preds = %header-check-br854
  %ptrtoint313 = ptrtoint {}* %y524.0 to i64
  %tag-only314 = and i64 %ptrtoint313, 7
  %test315 = icmp eq i64 %tag-only314, 1
  br i1 %test315, label %header-check-br312, label %tag87

tag35:                                            ; preds = %normal-dest616
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag12

tag36:                                            ; preds = %tag123
  %36 = ptrtoint {}* %y524.0 to i64
  %fixnum-tag-only319989 = and i64 %36, 3
  %fixnump-test320 = icmp eq i64 %fixnum-tag-only319989, 0
  br i1 %fixnump-test320, label %tag80, label %tag87

tag38:                                            ; preds = %tag41
  %37 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only324888 = and i64 %37, 3
  %fixnump-test325 = icmp eq i64 %fixnum-tag-only324888, 0
  br i1 %fixnump-test325, label %tag141, label %tag109

tag41:                                            ; preds = %tag1, %normal-dest848, %tag138
  %.val1042 = phi {}* [ %.val1040.pre, %tag138 ], [ %246, %normal-dest848 ], [ %9, %tag1 ]
  %G2095854.0 = phi {}* [ %98, %tag138 ], [ %G2095854.1, %normal-dest848 ], [ %9, %tag1 ]
  %38 = ptrtoint {}* %G2095854.0 to i64
  %tag-only328887 = and i64 %38, 7
  %consp-test329 = icmp eq i64 %tag-only328887, 3
  %.val1039 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289957.0 = select i1 %consp-test329, {}* %.val1039, {}* %.val1042
  %39 = icmp eq {}* %G289957.0, %.val1042
  br i1 %39, label %tag92, label %tag38

tag44:                                            ; preds = %normal-dest710, %normal-dest568, %tag83
  %G289830.0 = phi {}* [ %59, %tag83 ], [ %G289830.1, %normal-dest568 ], [ %G289830.2, %normal-dest710 ]
  %ptrtoint330 = ptrtoint {}* %215 to i64
  %entry-point-addr-uint331 = add i64 %ptrtoint330, 7
  %entry-point-addr332 = inttoptr i64 %entry-point-addr-uint331 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point333 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr332, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point333({}* %215, i64 2, {}* %vaarg203, {}* %G289830.0, {}* null, {}* null)
          to label %normal-dest336 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag48:                                            ; preds = %header-check-br312
  %41 = invoke double @from_object_double({}* nonnull %vaarg)
          to label %normal-dest351 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag52:                                            ; preds = %tag129, %normal-dest737, %header-check-br720
  %.pre1084 = phi {}* [ %.val1037, %tag129 ], [ %222, %normal-dest737 ], [ %.val1037, %header-check-br720 ]
  br label %tag63

tag56:                                            ; preds = %tag92
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest371 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag59:                                            ; preds = %tag196
  %44 = invoke float @from_object_float({}* %vaarg)
          to label %normal-dest383 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag60:                                            ; preds = %header-check-br298
  %45 = invoke double @from_object_double({}* nonnull %vaarg)
          to label %normal-dest385 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag61:                                            ; preds = %tag170, %normal-dest591, %tag158
  %46 = phi {}* [ %114, %tag158 ], [ %201, %normal-dest591 ], [ %G289631.0, %tag170 ]
  %G289711.0 = phi {}* [ %G289631.0, %tag158 ], [ %G289711.1, %normal-dest591 ], [ %.1035, %tag170 ]
  %47 = icmp eq {}* %G289711.0, %46
  br i1 %47, label %tag26, label %tag77

tag63:                                            ; preds = %header-check-br636, %normal-dest737, %tag52
  %.val1054 = phi {}* [ %.pre1084, %tag52 ], [ %222, %normal-dest737 ], [ %.val1037, %header-check-br636 ]
  %G289766.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag52 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest737 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br636 ]
  %G289766.0 = load {}*, {}** %G289766.0.in, align 8
  %48 = icmp eq {}* %G289766.0, %.val1054
  br i1 %48, label %tag139, label %tag120

tag66:                                            ; preds = %normal-dest534, %tag66.outer
  br i1 %consp-test397, label %tag174, label %tag2

tag71:                                            ; preds = %tag115
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest412 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag77:                                            ; preds = %tag20, %tag61, %normal-dest820, %normal-dest348
  %return-value.sroa.51.0 = phi i64 [ %.elt979, %normal-dest820 ], [ %.elt919, %normal-dest348 ], [ 1, %tag61 ], [ 1, %tag20 ]
  %return-value.sroa.0.0 = phi {}* [ %.elt977, %normal-dest820 ], [ %.elt917, %normal-dest348 ], [ %vaarg203, %tag61 ], [ %vaarg203, %tag20 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %51 = insertvalue { {}*, i64 } undef, {}* %return-value.sroa.0.0, 0
  %52 = insertvalue { {}*, i64 } %51, i64 %return-value.sroa.51.0, 1
  ret { {}*, i64 } %52

tag78:                                            ; preds = %tag18
  %test449 = icmp eq i64 %tag-only672946, 1
  br i1 %test449, label %header-check-br446, label %tag29

tag80:                                            ; preds = %tag36
  %53 = icmp slt {}* %y524.0, %vaarg
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %. = select i1 %53, {}* %54, {}* %90
  br label %tag158

tag81:                                            ; preds = %normal-dest616
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag12

tag82:                                            ; preds = %tag117, %tag193, %tag189, %header-check-br298, %tag28, %header-check-br278
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 857), align 8
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest454 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag83:                                            ; preds = %normal-dest665
  %58 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %75, i64 4)
  %result = extractvalue { i64, i1 } %58, 0
  %overflow = extractvalue { i64, i1 } %58, 1
  %59 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag150, label %tag44

tag87:                                            ; preds = %tag98, %tag196, %header-check-br854, %tag36, %header-check-br312, %tag34
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 400), align 16
  %61 = invoke {}* @cc_safe_fdefinition({}* %60)
          to label %normal-dest473 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag91:                                            ; preds = %tag178
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %63 = invoke {}* @cc_safe_fdefinition({}* %62)
          to label %normal-dest253 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag92:                                            ; preds = %tag41
  %64 = icmp eq {}* %G2095854.0, %.val1042
  %G289928.0 = select i1 %64, {}* %.val1039, {}* %.val1042
  %65 = icmp eq {}* %G289928.0, %.val1042
  br i1 %65, label %tag56, label %tag106

tag97:                                            ; preds = %normal-dest384
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag158

tag98:                                            ; preds = %tag123
  %trunc1052 = trunc i64 %91 to i3
  switch i3 %trunc1052, label %tag87 [
    i3 -2, label %tag196
    i3 1, label %header-check-br854
  ]

tag171.outer:                                     ; preds = %tag171.outer.backedge, %tag171.outer.preheader
  %SEQUENCE.0.ph = phi {}* [ %vaarg203, %tag171.outer.preheader ], [ %G2095854.0, %tag171.outer.backedge ]
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag171.outer.preheader ], [ %LENGTH.0.ph.be, %tag171.outer.backedge ]
  %67 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only761886 = and i64 %67, 7
  %consp-test762 = icmp eq i64 %tag-only761886, 3
  %68 = add i64 %67, 5
  %69 = inttoptr i64 %68 to {}**
  br label %tag171

tag104:                                           ; preds = %tag193
  %70 = icmp sgt {}* %y236.0, %vaarg
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.1096 = select i1 %70, {}* %74, {}* %71
  br label %tag12

tag105:                                           ; preds = %tag139
  %72 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %73 = invoke {}* @cc_safe_fdefinition({}* %72)
          to label %normal-dest515 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag106:                                           ; preds = %tag92, %normal-dest241, %tag15, %tag8
  %74 = phi {}* [ %.val1044, %tag8 ], [ %.val1044, %tag15 ], [ %157, %normal-dest241 ], [ %.val1042, %tag92 ]
  %y236.0 = phi {}* [ %20, %tag8 ], [ null, %tag15 ], [ %y236.1, %normal-dest241 ], [ %LENGTH.0.ph, %tag92 ]
  %75 = ptrtoint {}* %vaarg to i64
  %fixnum-tag-only530895 = and i64 %75, 3
  %fixnump-test531 = icmp eq i64 %fixnum-tag-only530895, 0
  br i1 %fixnump-test531, label %tag193, label %tag117

tag108:                                           ; preds = %tag16
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %77 = invoke {}* @cc_safe_fdefinition({}* %76)
          to label %normal-dest534 unwind label %cleanup-lpad.loopexit.loopexit

tag109:                                           ; preds = %tag38
  %78 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %79 = invoke {}* @cc_safe_fdefinition({}* %78)
          to label %normal-dest547 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag114:                                           ; preds = %tag148
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %81 = invoke {}* @cc_safe_fdefinition({}* %80)
          to label %normal-dest598 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag115:                                           ; preds = %tag148
  %82 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %105, i64 4)
  %result402 = extractvalue { i64, i1 } %82, 0
  %overflow403 = extractvalue { i64, i1 } %82, 1
  %83 = inttoptr i64 %result402 to {}*
  br i1 %overflow403, label %tag71, label %tag66.outer.backedge

tag66.outer.backedge:                             ; preds = %tag115, %normal-dest419, %normal-dest605
  %LENGTH420.0.ph.be = phi {}* [ %83, %tag115 ], [ %LENGTH420.1, %normal-dest419 ], [ %LENGTH420.2, %normal-dest605 ]
  br label %tag66.outer

tag116:                                           ; preds = %normal-dest352
  %84 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag158

tag117:                                           ; preds = %tag106
  %trunc = trunc i64 %75 to i3
  switch i3 %trunc, label %tag82 [
    i3 -2, label %tag189
    i3 1, label %header-check-br278
  ]

tag120:                                           ; preds = %tag63
  %85 = add i64 %144, 7
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86, align 8
  %"tag fixnum614" = shl nuw i64 %87, 2
  %88 = inttoptr i64 %"tag fixnum614" to {}*
  br label %tag123

tag121:                                           ; preds = %tag189
  %89 = invoke float @from_object_float({}* %vaarg)
          to label %normal-dest615 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag123:                                           ; preds = %tag16, %normal-dest523, %tag139, %tag120
  %90 = phi {}* [ %.val1054, %tag120 ], [ %.val1054, %tag139 ], [ %190, %normal-dest523 ], [ %.val1051, %tag16 ]
  %y524.0 = phi {}* [ %88, %tag120 ], [ null, %tag139 ], [ %y524.1, %normal-dest523 ], [ %LENGTH420.0.ph, %tag16 ]
  %91 = ptrtoint {}* %vaarg to i64
  %fixnum-tag-only618958 = and i64 %91, 3
  %fixnump-test619 = icmp eq i64 %fixnum-tag-only618958, 0
  br i1 %fixnump-test619, label %tag36, label %tag98

tag124:                                           ; preds = %tag146
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %93 = invoke {}* @cc_safe_fdefinition({}* %92)
          to label %normal-dest621 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag125:                                           ; preds = %normal-dest288
  %94 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 381), align 8
  %95 = invoke {}* @cc_safe_fdefinition({}* %94)
          to label %normal-dest433 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag129:                                           ; preds = %tag134
  %test639 = icmp eq i64 %tag-only672946, 1
  br i1 %test639, label %header-check-br636, label %tag52

tag131:                                           ; preds = %tag20
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 629), align 8
  %97 = invoke {}* @cc_safe_fdefinition({}* %96)
          to label %normal-dest649 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag134:                                           ; preds = %kw-exit-block
  br i1 %145, label %tag129, label %tag66.outer.preheader

tag66.outer.preheader:                            ; preds = %tag134
  br label %tag66.outer

tag138:                                           ; preds = %tag171
  %98 = load {}*, {}** %69, align 8
  %.val1040.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag41

tag139:                                           ; preds = %tag63
  %99 = icmp eq {}* %vaarg203, %.val1054
  %.val1053 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G289762.0 = select i1 %99, {}* %.val1053, {}* %.val1054
  %100 = icmp eq {}* %G289762.0, %.val1054
  br i1 %100, label %tag105, label %tag123

tag141:                                           ; preds = %tag38
  %101 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %37, i64 4)
  %result683 = extractvalue { i64, i1 } %101, 0
  %overflow684 = extractvalue { i64, i1 } %101, 1
  %102 = inttoptr i64 %result683 to {}*
  br i1 %overflow684, label %tag166, label %tag171.outer.backedge

tag171.outer.backedge:                            ; preds = %tag141, %normal-dest751, %normal-dest554
  %LENGTH.0.ph.be = phi {}* [ %102, %tag141 ], [ %LENGTH.2, %normal-dest751 ], [ %LENGTH.1, %normal-dest554 ]
  br label %tag171.outer

tag143:                                           ; preds = %tag158
  br i1 %fixnump-test619, label %tag170, label %tag188

tag146:                                           ; preds = %normal-dest288
  %103 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %91, i64 4)
  %result681 = extractvalue { i64, i1 } %103, 0
  %overflow682 = extractvalue { i64, i1 } %103, 1
  %104 = inttoptr i64 %result681 to {}*
  br i1 %overflow682, label %tag124, label %tag183

tag148:                                           ; preds = %tag31
  %105 = ptrtoint {}* %LENGTH420.0.ph to i64
  %fixnum-tag-only700949 = and i64 %105, 3
  %fixnump-test701 = icmp eq i64 %fixnum-tag-only700949, 0
  br i1 %fixnump-test701, label %tag115, label %tag114

tag150:                                           ; preds = %tag83
  %106 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %107 = invoke {}* @cc_safe_fdefinition({}* %106)
          to label %normal-dest703 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag66.outer:                                      ; preds = %tag66.outer.backedge, %tag66.outer.preheader
  %SEQUENCE394.0.ph = phi {}* [ %vaarg203, %tag66.outer.preheader ], [ %G2095854305.0, %tag66.outer.backedge ]
  %LENGTH420.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag66.outer.preheader ], [ %LENGTH420.0.ph.be, %tag66.outer.backedge ]
  %108 = ptrtoint {}* %SEQUENCE394.0.ph to i64
  %tag-only396947 = and i64 %108, 7
  %consp-test397 = icmp eq i64 %tag-only396947, 3
  %109 = add i64 %108, 5
  %110 = inttoptr i64 %109 to {}**
  br label %tag66

tag153:                                           ; preds = %normal-dest665
  %111 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %112 = invoke {}* @cc_safe_fdefinition({}* %111)
          to label %normal-dest561 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag154:                                           ; preds = %header-check-br446, %normal-dest781, %tag29
  %.val1044 = phi {}* [ %.pre1082, %tag29 ], [ %227, %normal-dest781 ], [ %.val1037, %header-check-br446 ]
  %G289920.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag29 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest781 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br446 ]
  %G289920.0 = load {}*, {}** %G289920.0.in, align 8
  %113 = icmp eq {}* %G289920.0, %.val1044
  br i1 %113, label %tag15, label %tag8

tag158:                                           ; preds = %tag80, %normal-dest480, %tag194, %tag116, %tag97, %tag7
  %G289631.0 = phi {}* [ %16, %tag7 ], [ %66, %tag97 ], [ %132, %tag194 ], [ %84, %tag116 ], [ %G289631.1, %normal-dest480 ], [ %., %tag80 ]
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %115 = icmp eq {}* %G289631.0, %114
  br i1 %115, label %tag143, label %tag61

tag166:                                           ; preds = %tag141
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %117 = invoke {}* @cc_safe_fdefinition({}* %116)
          to label %normal-dest744 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

tag170:                                           ; preds = %tag143
  %118 = icmp slt {}* %vaarg, inttoptr (i64 4 to {}*)
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.1035 = select i1 %118, {}* %119, {}* %G289631.0
  br label %tag61

tag171:                                           ; preds = %normal-dest371, %tag171.outer
  br i1 %consp-test762, label %tag138, label %tag1

tag172:                                           ; preds = %normal-dest386
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag12

tag174:                                           ; preds = %tag66
  %121 = load {}*, {}** %110, align 8
  %.val1049.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag31

tag178:                                           ; preds = %tag12
  br i1 %fixnump-test531, label %tag195, label %tag91

tag183:                                           ; preds = %normal-dest628, %normal-dest440, %tag146
  %G289681.0 = phi {}* [ %104, %tag146 ], [ %G289681.1, %normal-dest440 ], [ %G289681.2, %normal-dest628 ]
  %ptrtoint788 = ptrtoint {}* %163 to i64
  %entry-point-addr-uint789 = add i64 %ptrtoint788, 7
  %entry-point-addr790 = inttoptr i64 %entry-point-addr-uint789 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point791 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr790, align 8
  %122 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point791({}* %163, i64 3, {}* %vaarg203, {}* null, {}* %G289681.0, {}* null)
          to label %normal-dest794 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag187:                                           ; preds = %tag2
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %124 = invoke {}* @cc_safe_fdefinition({}* %123)
          to label %normal-dest825 unwind label %cleanup-lpad.loopexit.loopexit

tag188:                                           ; preds = %tag143
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %126 = invoke {}* @cc_safe_fdefinition({}* %125)
          to label %normal-dest584 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

tag189:                                           ; preds = %tag117
  %127 = ptrtoint {}* %y236.0 to i64
  %single-float-tag-only839 = and i64 %127, 7
  %128 = icmp eq i64 %single-float-tag-only839, 6
  br i1 %128, label %tag121, label %tag82

tag190:                                           ; preds = %tag1
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %130 = invoke {}* @cc_safe_fdefinition({}* %129)
          to label %normal-dest841 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

tag193:                                           ; preds = %tag106
  %131 = ptrtoint {}* %y236.0 to i64
  %fixnum-tag-only861929 = and i64 %131, 3
  %fixnump-test862 = icmp eq i64 %fixnum-tag-only861929, 0
  br i1 %fixnump-test862, label %tag104, label %tag82

tag194:                                           ; preds = %normal-dest352
  %132 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag158

tag195:                                           ; preds = %tag178
  %133 = icmp slt {}* %vaarg, null
  %134 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.1036 = select i1 %133, {}* %134, {}* %G289629.0
  br label %tag20

tag196:                                           ; preds = %tag98
  %135 = ptrtoint {}* %y524.0 to i64
  %single-float-tag-only863 = and i64 %135, 7
  %136 = icmp eq i64 %single-float-tag-only863, 6
  br i1 %136, label %tag59, label %tag87

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest825, %tag187, %normal-dest534, %tag108
  %lpad.loopexit1057 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest598, %tag114, %normal-dest412, %tag71
  %lpad.loopexit.split-lp1058 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit: ; preds = %tag56, %normal-dest371, %tag190, %normal-dest841
  %lpad.loopexit1062 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp: ; preds = %tag109, %normal-dest547, %tag166, %normal-dest744
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit: ; preds = %loop-kw-args
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp: ; preds = %error, %loop-cont, %tag9, %normal-dest237, %tag91, %normal-dest253, %tag26, %normal-dest286, %tag44, %normal-dest336, %tag48, %normal-dest351, %tag59, %normal-dest383, %tag60, %normal-dest385, %tag125, %normal-dest433, %tag82, %normal-dest454, %tag87, %normal-dest473, %tag105, %normal-dest515, %tag153, %normal-dest561, %tag188, %normal-dest584, %tag121, %normal-dest615, %tag124, %normal-dest621, %tag131, %normal-dest649, %normal-dest651, %normal-dest658, %tag150, %normal-dest703, %maybe-more-tests728, %normal-dest730, %maybe-more-tests582, %normal-dest774, %tag183, %normal-dest794, %normal-dest801, %normal-dest808
  %lpad.loopexit.split-lp1064 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit1057, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp1058, %cleanup-lpad.loopexit.loopexit.split-lp ], [ %lpad.loopexit1062, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp ], [ %lpad.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp1064, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @":::global-str-B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 2)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs201 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1202 = add i64 %rem-nargs201, -1
  store i64 %rem-nargs-1202, i64* %"remaining-nargs*", align 8
  %vaarg203 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %137 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %138 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %139 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %140 = icmp eq i64 %nargs, 2
  br i1 %140, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G289632.0 = phi {}* [ %G289632.2, %advance-arg-idx-block ], [ %138, %loop-kw-args.preheader ]
  %beginn-bei-0.1 = phi {}* [ %beginn-bei-0.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %148, %advance-arg-idx-block ], [ 2, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs206 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1207 = add i64 %rem-nargs206, -1
  store i64 %rem-nargs-1207, i64* %"remaining-nargs*", align 8
  %vaarg208 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs209 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1210 = add i64 %rem-nargs209, -1
  store i64 %rem-nargs-1210, i64* %"remaining-nargs*", align 8
  %vaarg211 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg208, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest212 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %141 = phi {}* [ %137, %continue ], [ %.pre1080, %loop-cont.kw-exit-block_crit_edge ]
  %.val1037 = phi {}* [ %138, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G289632.1 = phi {}* [ %138, %continue ], [ %G289632.2, %loop-cont.kw-exit-block_crit_edge ]
  %beginn-bei-0.2 = phi {}* [ undef, %continue ], [ %beginn-bei-0.3, %loop-cont.kw-exit-block_crit_edge ]
  %142 = icmp eq {}* %G289632.1, %.val1037
  %beginn-bei-0.0 = select i1 %142, {}* %141, {}* %beginn-bei-0.2
  %143 = icmp eq {}* %beginn-bei-0.0, %.val1037
  %144 = ptrtoint {}* %vaarg203 to i64
  %tag-only672946 = and i64 %144, 7
  %consp-test673 = icmp eq i64 %tag-only672946, 3
  %G289822.0 = select i1 %consp-test673, {}* %141, {}* %.val1037
  %145 = icmp eq {}* %G289822.0, %.val1037
  br i1 %143, label %tag134, label %tag18

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg208, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.pre1080 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %kw-exit-block

normal-dest212:                                   ; preds = %loop-kw-args
  %146 = icmp eq {}* %139, %vaarg208
  br i1 %146, label %aok-block, label %"kw-:BEGINN-BEI-0-test"

aok-block:                                        ; preds = %normal-dest212
  %147 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg211)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G289632.2 = phi {}* [ %G289632.0, %aok-block ], [ %G289632.0, %next-kw-block ], [ %G289632.3, %matched-kw-block ]
  %beginn-bei-0.3 = phi {}* [ %beginn-bei-0.1, %aok-block ], [ %beginn-bei-0.1, %next-kw-block ], [ %beginn-bei-0.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %147, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %154, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %148 = add i64 %phi-reg-arg-idx, 2
  %149 = icmp slt i64 %148, %nargs
  br i1 %149, label %loop-kw-args, label %loop-cont

"kw-:BEGINN-BEI-0-test":                          ; preds = %normal-dest212
  %150 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 870), align 16
  %151 = call i64 @cc_matchKeywordOnce({}* %150, {}* %vaarg208, {}* %G289632.0)
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:BEGINN-BEI-0-test"
  %153 = icmp eq i64 %151, 2
  %G289632.3 = select i1 %153, {}* %G289632.0, {}* %137
  %beginn-bei-0.4 = select i1 %153, {}* %beginn-bei-0.1, {}* %vaarg211
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:BEGINN-BEI-0-test"
  %154 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest237:                                   ; preds = %tag9
  %155 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 855), align 8
  %ptrtoint238 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint = add i64 %ptrtoint238, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %156 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %22, i64 2, {}* %vaarg203, {}* %155, {}* null, {}* null)
          to label %normal-dest241 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest241:                                   ; preds = %normal-dest237
  %.elt939 = extractvalue { {}*, i64 } %156, 0
  %.elt941 = extractvalue { {}*, i64 } %156, 1
  %cond872 = icmp eq i64 %.elt941, 0
  %157 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %y236.1 = select i1 %cond872, {}* %157, {}* %.elt939
  br label %tag106

normal-dest253:                                   ; preds = %tag91
  %ptrtoint256 = ptrtoint {}* %63 to i64
  %entry-point-addr-uint257 = add i64 %ptrtoint256, 7
  %entry-point-addr258 = inttoptr i64 %entry-point-addr-uint257 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point259 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr258, align 8
  %158 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point259({}* %63, i64 2, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest262 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest262:                                   ; preds = %normal-dest253
  %.elt926 = extractvalue { {}*, i64 } %158, 0
  %.elt928 = extractvalue { {}*, i64 } %158, 1
  %cond870 = icmp eq i64 %.elt928, 0
  %159 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289865.1 = select i1 %cond870, {}* %159, {}* %.elt926
  br label %tag20

header-check-br278:                               ; preds = %tag117
  %irc-bit-cast282 = bitcast {}* %vaarg to i8*
  %gep283 = getelementptr inbounds i8, i8* %irc-bit-cast282, i64 -9
  %irc-bit-cast284 = bitcast i8* %gep283 to i64*
  %160 = load i64, i64* %irc-bit-cast284, align 8
  %161 = icmp eq i64 %160, 1325
  br i1 %161, label %tag28, label %tag82

normal-dest286:                                   ; preds = %tag26
  %162 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %163 = invoke {}* @cc_safe_fdefinition({}* %162)
          to label %normal-dest288 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest288:                                   ; preds = %normal-dest286
  br i1 %fixnump-test619, label %tag146, label %tag125

header-check-br298:                               ; preds = %tag28
  %irc-bit-cast302 = bitcast {}* %y236.0 to i8*
  %gep303 = getelementptr inbounds i8, i8* %irc-bit-cast302, i64 -9
  %irc-bit-cast304 = bitcast i8* %gep303 to i64*
  %164 = load i64, i64* %irc-bit-cast304, align 8
  %165 = icmp eq i64 %164, 1325
  br i1 %165, label %tag60, label %tag82

header-check-br312:                               ; preds = %tag34
  %irc-bit-cast316 = bitcast {}* %y524.0 to i8*
  %gep317 = getelementptr inbounds i8, i8* %irc-bit-cast316, i64 -9
  %irc-bit-cast318 = bitcast i8* %gep317 to i64*
  %166 = load i64, i64* %irc-bit-cast318, align 8
  %167 = icmp eq i64 %166, 1325
  br i1 %167, label %tag48, label %tag87

normal-dest336:                                   ; preds = %tag44
  %.elt913 = extractvalue { {}*, i64 } %40, 0
  %.elt915 = extractvalue { {}*, i64 } %40, 1
  %cond868 = icmp eq i64 %.elt915, 0
  %168 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289827.0 = select i1 %cond868, {}* %168, {}* %.elt913
  %ptrtoint342 = ptrtoint {}* %97 to i64
  %entry-point-addr-uint343 = add i64 %ptrtoint342, 7
  %entry-point-addr344 = inttoptr i64 %entry-point-addr-uint343 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point345 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr344, align 8
  %169 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point345({}* %97, i64 2, {}* %G289826.0, {}* %G289827.0, {}* null, {}* null)
          to label %normal-dest348 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest348:                                   ; preds = %normal-dest336
  %.elt917 = extractvalue { {}*, i64 } %169, 0
  %.elt919 = extractvalue { {}*, i64 } %169, 1
  br label %tag77

normal-dest351:                                   ; preds = %tag48
  %170 = invoke double @from_object_double({}* nonnull %y524.0)
          to label %normal-dest352 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest352:                                   ; preds = %normal-dest351
  %171 = fcmp olt double %170, %41
  br i1 %171, label %tag194, label %tag116

normal-dest371:                                   ; preds = %tag56
  %172 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 856), align 16
  %ptrtoint372 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint373 = add i64 %ptrtoint372, 7
  %entry-point-addr374 = inttoptr i64 %entry-point-addr-uint373 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point375 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr374, align 8
  %173 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point375({}* %43, i64 2, {}* %G2095854.0, {}* %172, {}* null, {}* null)
          to label %tag171 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

normal-dest383:                                   ; preds = %tag59
  %174 = invoke float @from_object_float({}* %y524.0)
          to label %normal-dest384 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest384:                                   ; preds = %normal-dest383
  %175 = fcmp olt float %174, %44
  br i1 %175, label %tag7, label %tag97

normal-dest385:                                   ; preds = %tag60
  %176 = invoke double @from_object_double({}* nonnull %y236.0)
          to label %normal-dest386 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest386:                                   ; preds = %normal-dest385
  %177 = fcmp ugt double %176, %45
  br i1 %177, label %tag172, label %tag4

normal-dest412:                                   ; preds = %tag71
  %ptrtoint413 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint414 = add i64 %ptrtoint413, 7
  %entry-point-addr415 = inttoptr i64 %entry-point-addr-uint414 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point416 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr415, align 8
  %178 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point416({}* %50, i64 1, {}* %83, {}* null, {}* null, {}* null)
          to label %normal-dest419 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest419:                                   ; preds = %normal-dest412
  %.elt955 = extractvalue { {}*, i64 } %178, 0
  %.elt957 = extractvalue { {}*, i64 } %178, 1
  %cond875 = icmp eq i64 %.elt957, 0
  %179 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH420.1 = select i1 %cond875, {}* %179, {}* %.elt955
  br label %tag66.outer.backedge

normal-dest433:                                   ; preds = %tag125
  %ptrtoint434 = ptrtoint {}* %95 to i64
  %entry-point-addr-uint435 = add i64 %ptrtoint434, 7
  %entry-point-addr436 = inttoptr i64 %entry-point-addr-uint435 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point437 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr436, align 8
  %180 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point437({}* %95, i64 2, {}* %vaarg, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest440 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest440:                                   ; preds = %normal-dest433
  %.elt965 = extractvalue { {}*, i64 } %180, 0
  %.elt967 = extractvalue { {}*, i64 } %180, 1
  %cond877 = icmp eq i64 %.elt967, 0
  %181 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289681.1 = select i1 %cond877, {}* %181, {}* %.elt965
  br label %tag183

header-check-br446:                               ; preds = %tag78
  %irc-bit-cast450 = bitcast {}* %vaarg203 to i8*
  %gep451 = getelementptr inbounds i8, i8* %irc-bit-cast450, i64 -9
  %irc-bit-cast452 = bitcast i8* %gep451 to i64*
  %182 = load i64, i64* %irc-bit-cast452, align 8
  %.off = add i64 %182, -1081
  %183 = icmp ult i64 %.off, 69
  br i1 %183, label %tag154, label %header-check-br574

normal-dest454:                                   ; preds = %tag82
  %ptrtoint455 = ptrtoint {}* %57 to i64
  %entry-point-addr-uint456 = add i64 %ptrtoint455, 7
  %entry-point-addr457 = inttoptr i64 %entry-point-addr-uint456 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point458 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr457, align 8
  %184 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point458({}* %57, i64 2, {}* %vaarg, {}* %y236.0, {}* null, {}* null)
          to label %normal-dest461 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest461:                                   ; preds = %normal-dest454
  %.elt897 = extractvalue { {}*, i64 } %184, 0
  %.elt899 = extractvalue { {}*, i64 } %184, 1
  %cond865 = icmp eq i64 %.elt899, 0
  %185 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289629.1 = select i1 %cond865, {}* %185, {}* %.elt897
  br label %tag12

normal-dest473:                                   ; preds = %tag87
  %ptrtoint474 = ptrtoint {}* %61 to i64
  %entry-point-addr-uint475 = add i64 %ptrtoint474, 7
  %entry-point-addr476 = inttoptr i64 %entry-point-addr-uint475 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point477 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr476, align 8
  %186 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point477({}* %61, i64 2, {}* %vaarg, {}* %y524.0, {}* null, {}* null)
          to label %normal-dest480 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest480:                                   ; preds = %normal-dest473
  %.elt960 = extractvalue { {}*, i64 } %186, 0
  %.elt962 = extractvalue { {}*, i64 } %186, 1
  %cond876 = icmp eq i64 %.elt962, 0
  %187 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289631.1 = select i1 %cond876, {}* %187, {}* %.elt960
  br label %tag158

normal-dest515:                                   ; preds = %tag105
  %188 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 853), align 8
  %ptrtoint517 = ptrtoint {}* %73 to i64
  %entry-point-addr-uint518 = add i64 %ptrtoint517, 7
  %entry-point-addr519 = inttoptr i64 %entry-point-addr-uint518 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point520 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr519, align 8
  %189 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point520({}* %73, i64 2, {}* %vaarg203, {}* %188, {}* null, {}* null)
          to label %normal-dest523 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest523:                                   ; preds = %normal-dest515
  %.elt999 = extractvalue { {}*, i64 } %189, 0
  %.elt1001 = extractvalue { {}*, i64 } %189, 1
  %cond883 = icmp eq i64 %.elt1001, 0
  %190 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %y524.1 = select i1 %cond883, {}* %190, {}* %.elt999
  br label %tag123

normal-dest534:                                   ; preds = %tag108
  %191 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 854), align 16
  %ptrtoint535 = ptrtoint {}* %77 to i64
  %entry-point-addr-uint536 = add i64 %ptrtoint535, 7
  %entry-point-addr537 = inttoptr i64 %entry-point-addr-uint536 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point538 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr537, align 8
  %192 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point538({}* %77, i64 2, {}* %G2095854305.0, {}* %191, {}* null, {}* null)
          to label %tag66 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest547:                                   ; preds = %tag109
  %ptrtoint548 = ptrtoint {}* %79 to i64
  %entry-point-addr-uint549 = add i64 %ptrtoint548, 7
  %entry-point-addr550 = inttoptr i64 %entry-point-addr-uint549 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point551 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr550, align 8
  %193 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point551({}* %79, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest554 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest554:                                   ; preds = %normal-dest547
  %.elt = extractvalue { {}*, i64 } %193, 0
  %.elt890 = extractvalue { {}*, i64 } %193, 1
  %cond = icmp eq i64 %.elt890, 0
  %194 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond, {}* %194, {}* %.elt
  br label %tag171.outer.backedge

normal-dest561:                                   ; preds = %tag153
  %ptrtoint562 = ptrtoint {}* %112 to i64
  %entry-point-addr-uint563 = add i64 %ptrtoint562, 7
  %entry-point-addr564 = inttoptr i64 %entry-point-addr-uint563 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point565 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr564, align 8
  %195 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point565({}* %112, i64 2, {}* %vaarg, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest568 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest568:                                   ; preds = %normal-dest561
  %.elt909 = extractvalue { {}*, i64 } %195, 0
  %.elt911 = extractvalue { {}*, i64 } %195, 1
  %cond867 = icmp eq i64 %.elt911, 0
  %196 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289830.1 = select i1 %cond867, {}* %196, {}* %.elt909
  br label %tag44

header-check-br574:                               ; preds = %header-check-br446
  %.off1045 = add i64 %182, -1153
  %197 = icmp ult i64 %.off1045, 149
  br i1 %197, label %maybe-more-tests582, label %tag29

maybe-more-tests582:                              ; preds = %header-check-br574
  %198 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %199 = invoke {}* @cc_safe_fdefinition({}* %198)
          to label %normal-dest774 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest584:                                   ; preds = %tag188
  %ptrtoint585 = ptrtoint {}* %126 to i64
  %entry-point-addr-uint586 = add i64 %ptrtoint585, 7
  %entry-point-addr587 = inttoptr i64 %entry-point-addr-uint586 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point588 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr587, align 8
  %200 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point588({}* %126, i64 2, {}* %vaarg, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest591 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest591:                                   ; preds = %normal-dest584
  %.elt986 = extractvalue { {}*, i64 } %200, 0
  %.elt988 = extractvalue { {}*, i64 } %200, 1
  %cond881 = icmp eq i64 %.elt988, 0
  %201 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289711.1 = select i1 %cond881, {}* %201, {}* %.elt986
  br label %tag61

normal-dest598:                                   ; preds = %tag114
  %ptrtoint599 = ptrtoint {}* %81 to i64
  %entry-point-addr-uint600 = add i64 %ptrtoint599, 7
  %entry-point-addr601 = inttoptr i64 %entry-point-addr-uint600 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point602 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr601, align 8
  %202 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point602({}* %81, i64 2, {}* %LENGTH420.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest605 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest605:                                   ; preds = %normal-dest598
  %.elt951 = extractvalue { {}*, i64 } %202, 0
  %.elt953 = extractvalue { {}*, i64 } %202, 1
  %cond874 = icmp eq i64 %.elt953, 0
  %203 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH420.2 = select i1 %cond874, {}* %203, {}* %.elt951
  br label %tag66.outer.backedge

normal-dest615:                                   ; preds = %tag121
  %204 = invoke float @from_object_float({}* %y236.0)
          to label %normal-dest616 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest616:                                   ; preds = %normal-dest615
  %205 = fcmp ugt float %204, %89
  br i1 %205, label %tag81, label %tag35

normal-dest621:                                   ; preds = %tag124
  %ptrtoint622 = ptrtoint {}* %93 to i64
  %entry-point-addr-uint623 = add i64 %ptrtoint622, 7
  %entry-point-addr624 = inttoptr i64 %entry-point-addr-uint623 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point625 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr624, align 8
  %206 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point625({}* %93, i64 1, {}* %104, {}* null, {}* null, {}* null)
          to label %normal-dest628 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest628:                                   ; preds = %normal-dest621
  %.elt981 = extractvalue { {}*, i64 } %206, 0
  %.elt983 = extractvalue { {}*, i64 } %206, 1
  %cond880 = icmp eq i64 %.elt983, 0
  %207 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289681.2 = select i1 %cond880, {}* %207, {}* %.elt981
  br label %tag183

header-check-br636:                               ; preds = %tag129
  %irc-bit-cast640 = bitcast {}* %vaarg203 to i8*
  %gep641 = getelementptr inbounds i8, i8* %irc-bit-cast640, i64 -9
  %irc-bit-cast642 = bitcast i8* %gep641 to i64*
  %208 = load i64, i64* %irc-bit-cast642, align 8
  %.off1055 = add i64 %208, -1081
  %209 = icmp ult i64 %.off1055, 69
  br i1 %209, label %tag63, label %header-check-br720

normal-dest649:                                   ; preds = %tag131
  %210 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %211 = invoke {}* @cc_safe_fdefinition({}* %210)
          to label %normal-dest651 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest651:                                   ; preds = %normal-dest649
  %ptrtoint652 = ptrtoint {}* %211 to i64
  %entry-point-addr-uint653 = add i64 %ptrtoint652, 7
  %entry-point-addr654 = inttoptr i64 %entry-point-addr-uint653 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point655 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr654, align 8
  %212 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point655({}* %211, i64 3, {}* %vaarg203, {}* null, {}* %vaarg, {}* null)
          to label %normal-dest658 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest658:                                   ; preds = %normal-dest651
  %.elt904 = extractvalue { {}*, i64 } %212, 0
  %.elt906 = extractvalue { {}*, i64 } %212, 1
  %cond866 = icmp eq i64 %.elt906, 0
  %213 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289826.0 = select i1 %cond866, {}* %213, {}* %.elt904
  %214 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %215 = invoke {}* @cc_safe_fdefinition({}* %214)
          to label %normal-dest665 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest665:                                   ; preds = %normal-dest658
  br i1 %fixnump-test531, label %tag83, label %tag153

normal-dest703:                                   ; preds = %tag150
  %ptrtoint704 = ptrtoint {}* %107 to i64
  %entry-point-addr-uint705 = add i64 %ptrtoint704, 7
  %entry-point-addr706 = inttoptr i64 %entry-point-addr-uint705 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point707 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr706, align 8
  %216 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point707({}* %107, i64 1, {}* %59, {}* null, {}* null, {}* null)
          to label %normal-dest710 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest710:                                   ; preds = %normal-dest703
  %.elt921 = extractvalue { {}*, i64 } %216, 0
  %.elt923 = extractvalue { {}*, i64 } %216, 1
  %cond869 = icmp eq i64 %.elt923, 0
  %217 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289830.2 = select i1 %cond869, {}* %217, {}* %.elt921
  br label %tag44

header-check-br720:                               ; preds = %header-check-br636
  %.off1056 = add i64 %208, -1153
  %218 = icmp ult i64 %.off1056, 149
  br i1 %218, label %maybe-more-tests728, label %tag52

maybe-more-tests728:                              ; preds = %header-check-br720
  %219 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %220 = invoke {}* @cc_safe_fdefinition({}* %219)
          to label %normal-dest730 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest730:                                   ; preds = %maybe-more-tests728
  %ptrtoint731 = ptrtoint {}* %220 to i64
  %entry-point-addr-uint732 = add i64 %ptrtoint731, 7
  %entry-point-addr733 = inttoptr i64 %entry-point-addr-uint732 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point734 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr733, align 8
  %221 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point734({}* %220, i64 1, {}* nonnull %vaarg203, {}* null, {}* null, {}* null)
          to label %normal-dest737 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest737:                                   ; preds = %normal-dest730
  %.elt1003 = extractvalue { {}*, i64 } %221, 0
  %.elt1005 = extractvalue { {}*, i64 } %221, 1
  %cond884 = icmp eq i64 %.elt1005, 0
  %222 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289989.0 = select i1 %cond884, {}* %222, {}* %.elt1003
  %223 = icmp eq {}* %G289989.0, inttoptr (i64 4 to {}*)
  br i1 %223, label %tag63, label %tag52

normal-dest744:                                   ; preds = %tag166
  %ptrtoint745 = ptrtoint {}* %117 to i64
  %entry-point-addr-uint746 = add i64 %ptrtoint745, 7
  %entry-point-addr747 = inttoptr i64 %entry-point-addr-uint746 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point748 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr747, align 8
  %224 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point748({}* %117, i64 1, {}* %102, {}* null, {}* null, {}* null)
          to label %normal-dest751 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit.split-lp

normal-dest751:                                   ; preds = %normal-dest744
  %.elt892 = extractvalue { {}*, i64 } %224, 0
  %.elt894 = extractvalue { {}*, i64 } %224, 1
  %cond864 = icmp eq i64 %.elt894, 0
  %225 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond864, {}* %225, {}* %.elt892
  br label %tag171.outer.backedge

normal-dest774:                                   ; preds = %maybe-more-tests582
  %ptrtoint775 = ptrtoint {}* %199 to i64
  %entry-point-addr-uint776 = add i64 %ptrtoint775, 7
  %entry-point-addr777 = inttoptr i64 %entry-point-addr-uint776 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point778 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr777, align 8
  %226 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point778({}* %199, i64 1, {}* nonnull %vaarg203, {}* null, {}* null, {}* null)
          to label %normal-dest781 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest781:                                   ; preds = %normal-dest774
  %.elt943 = extractvalue { {}*, i64 } %226, 0
  %.elt945 = extractvalue { {}*, i64 } %226, 1
  %cond873 = icmp eq i64 %.elt945, 0
  %227 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289984.0 = select i1 %cond873, {}* %227, {}* %.elt943
  %228 = icmp eq {}* %G289984.0, inttoptr (i64 4 to {}*)
  br i1 %228, label %tag154, label %tag29

normal-dest794:                                   ; preds = %tag183
  %.elt969 = extractvalue { {}*, i64 } %122, 0
  %.elt971 = extractvalue { {}*, i64 } %122, 1
  %cond878 = icmp eq i64 %.elt971, 0
  %229 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289672.0 = select i1 %cond878, {}* %229, {}* %.elt969
  %230 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %231 = invoke {}* @cc_safe_fdefinition({}* %230)
          to label %normal-dest801 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest801:                                   ; preds = %normal-dest794
  %ptrtoint802 = ptrtoint {}* %231 to i64
  %entry-point-addr-uint803 = add i64 %ptrtoint802, 7
  %entry-point-addr804 = inttoptr i64 %entry-point-addr-uint803 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point805 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr804, align 8
  %232 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point805({}* %231, i64 2, {}* %vaarg203, {}* %vaarg, {}* null, {}* null)
          to label %normal-dest808 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest808:                                   ; preds = %normal-dest801
  %.elt973 = extractvalue { {}*, i64 } %232, 0
  %.elt975 = extractvalue { {}*, i64 } %232, 1
  %cond879 = icmp eq i64 %.elt975, 0
  %233 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G289673.0 = select i1 %cond879, {}* %233, {}* %.elt973
  %ptrtoint814 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint815 = add i64 %ptrtoint814, 7
  %entry-point-addr816 = inttoptr i64 %entry-point-addr-uint815 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point817 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr816, align 8
  %234 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point817({}* %32, i64 2, {}* %G289672.0, {}* %G289673.0, {}* null, {}* null)
          to label %normal-dest820 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp.loopexit.split-lp

normal-dest820:                                   ; preds = %normal-dest808
  %.elt977 = extractvalue { {}*, i64 } %234, 0
  %.elt979 = extractvalue { {}*, i64 } %234, 1
  br label %tag77

normal-dest825:                                   ; preds = %tag187
  %235 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %236 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %237 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %238 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint826 = ptrtoint {}* %124 to i64
  %entry-point-addr-uint827 = add i64 %ptrtoint826, 7
  %entry-point-addr828 = inttoptr i64 %entry-point-addr-uint827 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point829 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr828, align 8
  %239 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point829({}* %124, i64 5, {}* %235, {}* %236, {}* %SEQUENCE394.0.ph, {}* %237, {}* %238)
          to label %normal-dest832 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest832:                                   ; preds = %normal-dest825
  %.elt995 = extractvalue { {}*, i64 } %239, 0
  %.elt997 = extractvalue { {}*, i64 } %239, 1
  %cond882 = icmp eq i64 %.elt997, 0
  %240 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854305.1 = select i1 %cond882, {}* %240, {}* %.elt995
  br label %tag31

normal-dest841:                                   ; preds = %tag190
  %241 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %242 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %243 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %244 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint842 = ptrtoint {}* %130 to i64
  %entry-point-addr-uint843 = add i64 %ptrtoint842, 7
  %entry-point-addr844 = inttoptr i64 %entry-point-addr-uint843 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point845 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr844, align 8
  %245 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point845({}* %130, i64 5, {}* %241, {}* %242, {}* %SEQUENCE.0.ph, {}* %243, {}* %244)
          to label %normal-dest848 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.loopexit

normal-dest848:                                   ; preds = %normal-dest841
  %.elt935 = extractvalue { {}*, i64 } %245, 0
  %.elt937 = extractvalue { {}*, i64 } %245, 1
  %cond871 = icmp eq i64 %.elt937, 0
  %246 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond871, {}* %246, {}* %.elt935
  br label %tag41

header-check-br854:                               ; preds = %tag98
  %irc-bit-cast858 = bitcast {}* %vaarg to i8*
  %gep859 = getelementptr inbounds i8, i8* %irc-bit-cast858, i64 -9
  %irc-bit-cast860 = bitcast i8* %gep859 to i64*
  %247 = load i64, i64* %irc-bit-cast860, align 8
  %248 = icmp eq i64 %247, 1325
  br i1 %248, label %tag34, label %tag87
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^549^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !110 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^549^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G290021.0 = phi {}* [ %18, %header-check-br ], [ %G290021.1, %normal-dest76 ], [ %G290021.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 874), align 16
  %ptrtoint13 = ptrtoint {}* %G290021.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G290021.0, i64 2, {}* %"closure->B=INTERSECTION", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br59
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests67, %normal-dest69, %tag3, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 874), align 16
  %"closure->B=INTERSECTION" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=INTERSECTION^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=INTERSECTION^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 19579, i64 549, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br59

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 876), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=INTERSECTION", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 877), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=INTERSECTION", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 874), align 16
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 878), align 16
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2264 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 874), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

header-check-br59:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %39 = icmp ult i64 %.off123, 5
  br i1 %39, label %maybe-more-tests67, label %tag3

maybe-more-tests67:                               ; preds = %header-check-br59
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest69:                                    ; preds = %tag3
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 873), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %42, {}* %43, {}* %18, {}* %44, {}* %45)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt97 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt97, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290021.1 = select i1 %cond, {}* %47, {}* %.elt
  br label %tag

normal-dest82:                                    ; preds = %maybe-more-tests67
  %ptrtoint83 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %41, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290021.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=INTERSECTION^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !111 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 0
  br i1 %enough-args, label %error, label %process-rest-argument

cleanup-lpad:                                     ; preds = %normal-dest5, %process-rest-argument, %error
  %9 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %9

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @":::global-str-B=INTERSECTION^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 0)
          to label %normal-dest unwind label %cleanup-lpad

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

process-rest-argument:                            ; preds = %entry
  %10 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 319), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %process-rest-argument
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 871), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 2, {}* %13, {}* %10, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %14
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^572^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !112 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^572^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br20
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G290065.0 = phi {}* [ %18, %header-check-br ], [ %G290065.1, %normal-dest17 ], [ %G290065.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 885), align 8
  %ptrtoint29 = ptrtoint {}* %G290065.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G290065.0, i64 2, {}* %"closure->B=UNION", {}* %13, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests28, %normal-dest67, %normal-dest61, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 885), align 8
  %"closure->B=UNION" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=UNION^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=UNION^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20101, i64 572, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br20

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 884), align 16
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290065.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag3

header-check-br20:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %27 = icmp ult i64 %.off123, 5
  br i1 %27, label %maybe-more-tests28, label %tag

maybe-more-tests28:                               ; preds = %header-check-br20
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %tag3
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 887), align 8
  %ptrtoint42 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %31, i64 2, {}* %"closure->B=UNION", {}* %32, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 890), align 16
  %ptrtoint55 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %35, i64 2, {}* %"closure->B=UNION", {}* %36, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest61
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 885), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 891), align 8
  %ptrtoint68 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %39, i64 3, {}* %40, {}* %41, {}* %42, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad

normal-dest74:                                    ; preds = %normal-dest67
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %44, {}* inttoptr (i64 2288 to {}*))
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 885), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %46 = insertvalue { {}*, i64 } undef, {}* %45, 0
  %47 = insertvalue { {}*, i64 } %46, i64 1, 1
  ret { {}*, i64 } %47

normal-dest82:                                    ; preds = %maybe-more-tests28
  %ptrtoint83 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %29, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290065.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=UNION^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !113 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 0
  br i1 %enough-args, label %error, label %process-rest-argument

tag1:                                             ; preds = %tag46, %tag32, %normal-dest132, %normal-dest114
  %return-value.sroa.18.0 = phi i64 [ %.elt313, %normal-dest132 ], [ 1, %tag32 ], [ %.elt305, %normal-dest114 ], [ 1, %tag46 ]
  %return-value.sroa.0.0 = phi i64 [ %81, %normal-dest132 ], [ %37, %tag32 ], [ %75, %normal-dest114 ], [ %26, %tag46 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %9 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %10 = insertvalue { {}*, i64 } undef, {}* %9, 0
  %11 = insertvalue { {}*, i64 } %10, i64 %return-value.sroa.18.0, 1
  ret { {}*, i64 } %11

tag2:                                             ; preds = %tag22
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag74

tag4:                                             ; preds = %tag30
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest81 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag49.outer:                                      ; preds = %tag49.outer.backedge, %tag49.outer.preheader
  %LENGTH.0.ph = phi {}* [ inttoptr (i64 4 to {}*), %tag49.outer.preheader ], [ %LENGTH.0.ph.be, %tag49.outer.backedge ]
  %SEQUENCE.0.ph = phi {}* [ %65, %tag49.outer.preheader ], [ %G2095854.0, %tag49.outer.backedge ]
  %15 = ptrtoint {}* %SEQUENCE.0.ph to i64
  %tag-only197288 = and i64 %15, 7
  %consp-test198 = icmp eq i64 %tag-only197288, 3
  %16 = add i64 %15, 5
  %17 = inttoptr i64 %16 to {}**
  br label %tag49

tag8:                                             ; preds = %tag49
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %19 = icmp eq {}* %SEQUENCE.0.ph, %18
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290190.0 = select i1 %19, {}* %.val, {}* %18
  %20 = icmp eq {}* %G290190.0, %18
  br i1 %20, label %tag55, label %tag71

tag10:                                            ; preds = %header-check-br, %normal-dest141, %tag39
  %.in358 = phi {}* [ %.pre, %tag39 ], [ %83, %normal-dest141 ], [ %G290197.0, %header-check-br ]
  %G290141.0.in = phi {}** [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), %tag39 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %normal-dest141 ], [ getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), %header-check-br ]
  %21 = ptrtoint {}* %.in358 to i64
  %G290141.0 = load {}*, {}** %G290141.0.in, align 8
  %22 = icmp eq {}* %G290141.0, %.in358
  br i1 %22, label %tag37, label %tag60

tag11:                                            ; preds = %tag71
  %23 = ptrtoint {}* %LENGTH.0.ph to i64
  %fixnum-tag-only290 = and i64 %23, 3
  %fixnump-test = icmp eq i64 %fixnum-tag-only290, 0
  br i1 %fixnump-test, label %tag30, label %tag31

tag17:                                            ; preds = %process-rest-argument
  %test = icmp eq i64 %tag-only287, 1
  br i1 %test, label %header-check-br, label %tag39

tag19:                                            ; preds = %tag74
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 319), align 8
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest107 unwind label %cleanup-lpad.loopexit.split-lp

tag21:                                            ; preds = %tag22, %tag74
  %.val343359 = phi {}* [ %.val343, %tag74 ], [ %47, %tag22 ]
  %26 = phi i64 [ %61, %tag74 ], [ %46, %tag22 ]
  %G290101.0 = load {}*, {}** %G290197.0.in, align 8
  %27 = icmp eq {}* %G290101.0, %.val343359
  br i1 %27, label %tag46, label %tag32

tag22:                                            ; preds = %tag50
  %28 = icmp sgt {}* %x200.0, inttoptr (i64 7 to {}*)
  br i1 %28, label %tag2, label %tag21

tag24:                                            ; preds = %tag46
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest125 unwind label %cleanup-lpad.loopexit.split-lp

tag30:                                            ; preds = %tag11
  %31 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %23, i64 4)
  %result = extractvalue { i64, i1 } %31, 0
  %overflow = extractvalue { i64, i1 } %31, 1
  %32 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag4, label %tag49.outer.backedge

tag49.outer.backedge:                             ; preds = %tag30, %normal-dest84, %normal-dest241
  %LENGTH.0.ph.be = phi {}* [ %LENGTH.2, %normal-dest241 ], [ %LENGTH.1, %normal-dest84 ], [ %32, %tag30 ]
  br label %tag49.outer

tag31:                                            ; preds = %tag11
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest234 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

tag32:                                            ; preds = %tag21
  %35 = add i64 %66, -3
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  br label %tag1

tag33:                                            ; preds = %tag71
  %38 = icmp eq {}* %G2095854.0, %.in
  %G290149.0 = select i1 %38, {}* %.val338, {}* %.in
  %39 = icmp eq {}* %G290149.0, %.in
  br i1 %39, label %tag75, label %tag50.loopexit

tag37:                                            ; preds = %tag10
  %40 = icmp eq {}* %65, %.in358
  %.val344 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290137.0 = select i1 %40, {}* %.val344, {}* %.in358
  %41 = icmp eq {}* %G290137.0, %.in358
  br i1 %41, label %tag53, label %tag50

tag39:                                            ; preds = %tag17, %header-check-br178, %normal-dest141
  %.pre = phi {}* [ %G290197.0, %tag17 ], [ %G290197.0, %header-check-br178 ], [ %83, %normal-dest141 ]
  br label %tag10

tag46:                                            ; preds = %tag21
  %42 = icmp eq {}* %65, %.val343359
  %.val342 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290093.0 = select i1 %42, {}* %.val342, {}* %.val343359
  %43 = icmp eq {}* %G290093.0, %.val343359
  br i1 %43, label %tag24, label %tag1

tag48:                                            ; preds = %tag49
  %44 = load {}*, {}** %17, align 8
  %.val339.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag71

tag49:                                            ; preds = %normal-dest268, %tag49.outer
  br i1 %consp-test198, label %tag48, label %tag8

tag50.loopexit:                                   ; preds = %tag33
  %45 = ptrtoint {}* %.in to i64
  br label %tag50

tag50:                                            ; preds = %tag50.loopexit, %normal-dest213, %tag37, %tag60
  %46 = phi i64 [ %21, %tag60 ], [ %21, %tag37 ], [ %94, %normal-dest213 ], [ %45, %tag50.loopexit ]
  %47 = phi {}* [ %.in358, %tag60 ], [ %.in358, %tag37 ], [ %93, %normal-dest213 ], [ %.in, %tag50.loopexit ]
  %x200.0 = phi {}* [ %56, %tag60 ], [ null, %tag37 ], [ %x200.1, %normal-dest213 ], [ %LENGTH.0.ph, %tag50.loopexit ]
  %48 = ptrtoint {}* %x200.0 to i64
  %fixnum-tag-only201297 = and i64 %48, 3
  %fixnump-test202 = icmp eq i64 %fixnum-tag-only201297, 0
  br i1 %fixnump-test202, label %tag22, label %tag69

tag53:                                            ; preds = %tag37
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %50 = invoke {}* @cc_safe_fdefinition({}* %49)
          to label %normal-dest206 unwind label %cleanup-lpad.loopexit.split-lp

tag55:                                            ; preds = %tag8
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest220 unwind label %cleanup-lpad.loopexit.loopexit

tag60:                                            ; preds = %tag10
  %53 = add i64 %66, 7
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54, align 8
  %"tag fixnum" = shl nuw i64 %55, 2
  %56 = inttoptr i64 %"tag fixnum" to {}*
  br label %tag50

tag69:                                            ; preds = %tag50
  %57 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 857), align 8
  %58 = invoke {}* @cc_safe_fdefinition({}* %57)
          to label %normal-dest165 unwind label %cleanup-lpad.loopexit.split-lp

tag71:                                            ; preds = %tag8, %normal-dest227, %tag48
  %.in = phi {}* [ %.val339.pre, %tag48 ], [ %100, %normal-dest227 ], [ %18, %tag8 ]
  %G2095854.0 = phi {}* [ %44, %tag48 ], [ %G2095854.1, %normal-dest227 ], [ %18, %tag8 ]
  %59 = ptrtoint {}* %G2095854.0 to i64
  %tag-only265289 = and i64 %59, 7
  %consp-test266 = icmp eq i64 %tag-only265289, 3
  %.val338 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290178.0 = select i1 %consp-test266, {}* %.val338, {}* %.in
  %60 = icmp eq {}* %G290178.0, %.in
  br i1 %60, label %tag33, label %tag11

tag74:                                            ; preds = %normal-dest172, %tag2
  %61 = phi i64 [ %46, %tag2 ], [ %87, %normal-dest172 ]
  %.val343 = phi {}* [ %47, %tag2 ], [ %86, %normal-dest172 ]
  %G290109.0 = phi {}* [ %12, %tag2 ], [ %G290109.1, %normal-dest172 ]
  %62 = icmp eq {}* %G290109.0, %.val343
  br i1 %62, label %tag21, label %tag19

tag75:                                            ; preds = %tag33
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 367), align 8
  %64 = invoke {}* @cc_safe_fdefinition({}* %63)
          to label %normal-dest268 unwind label %cleanup-lpad.loopexit.loopexit

cleanup-lpad.loopexit.loopexit:                   ; preds = %normal-dest268, %tag75, %normal-dest220, %tag55
  %lpad.loopexit347 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.loopexit.split-lp:          ; preds = %normal-dest234, %tag31, %normal-dest81, %tag4
  %lpad.loopexit.split-lp348 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %error, %tag19, %normal-dest107, %tag24, %normal-dest125, %maybe-more-tests186, %normal-dest134, %tag69, %normal-dest165, %tag53, %normal-dest206
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.loopexit, %cleanup-lpad.loopexit.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ], [ %lpad.loopexit347, %cleanup-lpad.loopexit.loopexit ], [ %lpad.loopexit.split-lp348, %cleanup-lpad.loopexit.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @":::global-str-B=UNION^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 0)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

process-rest-argument:                            ; preds = %entry
  %65 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  %66 = ptrtoint {}* %65 to i64
  %tag-only287 = and i64 %66, 7
  %consp-test = icmp eq i64 %tag-only287, 3
  %G290197.0.in = select i1 %consp-test, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  %G290197.0 = load {}*, {}** %G290197.0.in, align 8
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %68 = icmp eq {}* %G290197.0, %67
  br i1 %68, label %tag17, label %tag49.outer.preheader

tag49.outer.preheader:                            ; preds = %process-rest-argument
  br label %tag49.outer

normal-dest81:                                    ; preds = %tag4
  %ptrtoint = ptrtoint {}* %14 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %69 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %14, i64 1, {}* %32, {}* null, {}* null, {}* null)
          to label %normal-dest84 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest84:                                    ; preds = %normal-dest81
  %.elt294 = extractvalue { {}*, i64 } %69, 0
  %.elt296 = extractvalue { {}*, i64 } %69, 1
  %cond282 = icmp eq i64 %.elt296, 0
  %70 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.1 = select i1 %cond282, {}* %70, {}* %.elt294
  br label %tag49.outer.backedge

header-check-br:                                  ; preds = %tag17
  %irc-bit-cast104 = bitcast {}* %65 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast104, i64 -9
  %irc-bit-cast105 = bitcast i8* %gep to i64*
  %71 = load i64, i64* %irc-bit-cast105, align 8
  %.off = add i64 %71, -1081
  %72 = icmp ult i64 %.off, 69
  br i1 %72, label %tag10, label %header-check-br178

normal-dest107:                                   ; preds = %tag19
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 882), align 16
  %ptrtoint108 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint109 = add i64 %ptrtoint108, 7
  %entry-point-addr110 = inttoptr i64 %entry-point-addr-uint109 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point111 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr110, align 8
  %74 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point111({}* %25, i64 2, {}* %73, {}* %65, {}* null, {}* null)
          to label %normal-dest114 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest114:                                   ; preds = %normal-dest107
  %.elt303 = extractvalue { {}*, i64 } %74, 0
  %75 = ptrtoint {}* %.elt303 to i64
  %.elt305 = extractvalue { {}*, i64 } %74, 1
  br label %tag1

normal-dest125:                                   ; preds = %tag24
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %77 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %78 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint126 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint127 = add i64 %ptrtoint126, 7
  %entry-point-addr128 = inttoptr i64 %entry-point-addr-uint127 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point129 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr128, align 8
  %80 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point129({}* %30, i64 5, {}* %76, {}* %77, {}* %65, {}* %78, {}* %79)
          to label %normal-dest132 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest132:                                   ; preds = %normal-dest125
  %.elt311 = extractvalue { {}*, i64 } %80, 0
  %81 = ptrtoint {}* %.elt311 to i64
  %.elt313 = extractvalue { {}*, i64 } %80, 1
  br label %tag1

normal-dest134:                                   ; preds = %maybe-more-tests186
  %ptrtoint135 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint136 = add i64 %ptrtoint135, 7
  %entry-point-addr137 = inttoptr i64 %entry-point-addr-uint136 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point138 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr137, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point138({}* %90, i64 1, {}* nonnull %65, {}* null, {}* null, {}* null)
          to label %normal-dest141 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest141:                                   ; preds = %normal-dest134
  %.elt327 = extractvalue { {}*, i64 } %82, 0
  %.elt329 = extractvalue { {}*, i64 } %82, 1
  %cond286 = icmp eq i64 %.elt329, 0
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290201.0 = select i1 %cond286, {}* %83, {}* %.elt327
  %84 = icmp eq {}* %G290201.0, inttoptr (i64 4 to {}*)
  br i1 %84, label %tag10, label %tag39

normal-dest165:                                   ; preds = %tag69
  %ptrtoint166 = ptrtoint {}* %58 to i64
  %entry-point-addr-uint167 = add i64 %ptrtoint166, 7
  %entry-point-addr168 = inttoptr i64 %entry-point-addr-uint167 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point169 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr168, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point169({}* %58, i64 2, {}* %x200.0, {}* inttoptr (i64 8 to {}*), {}* null, {}* null)
          to label %normal-dest172 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest172:                                   ; preds = %normal-dest165
  %.elt299 = extractvalue { {}*, i64 } %85, 0
  %.elt301 = extractvalue { {}*, i64 } %85, 1
  %cond283 = icmp eq i64 %.elt301, 0
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290109.1 = select i1 %cond283, {}* %86, {}* %.elt299
  %87 = ptrtoint {}* %86 to i64
  br label %tag74

header-check-br178:                               ; preds = %header-check-br
  %.off346 = add i64 %71, -1153
  %88 = icmp ult i64 %.off346, 149
  br i1 %88, label %maybe-more-tests186, label %tag39

maybe-more-tests186:                              ; preds = %header-check-br178
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 393), align 8
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest134 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest206:                                   ; preds = %tag53
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 880), align 16
  %ptrtoint207 = ptrtoint {}* %50 to i64
  %entry-point-addr-uint208 = add i64 %ptrtoint207, 7
  %entry-point-addr209 = inttoptr i64 %entry-point-addr-uint208 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point210 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr209, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point210({}* %50, i64 2, {}* %65, {}* %91, {}* null, {}* null)
          to label %normal-dest213 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest213:                                   ; preds = %normal-dest206
  %.elt323 = extractvalue { {}*, i64 } %92, 0
  %.elt325 = extractvalue { {}*, i64 } %92, 1
  %cond285 = icmp eq i64 %.elt325, 0
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x200.1 = select i1 %cond285, {}* %93, {}* %.elt323
  %94 = ptrtoint {}* %93 to i64
  br label %tag50

normal-dest220:                                   ; preds = %tag55
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %98 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint221 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint222 = add i64 %ptrtoint221, 7
  %entry-point-addr223 = inttoptr i64 %entry-point-addr-uint222 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point224 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr223, align 8
  %99 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point224({}* %52, i64 5, {}* %95, {}* %96, {}* %SEQUENCE.0.ph, {}* %97, {}* %98)
          to label %normal-dest227 unwind label %cleanup-lpad.loopexit.loopexit

normal-dest227:                                   ; preds = %normal-dest220
  %.elt319 = extractvalue { {}*, i64 } %99, 0
  %.elt321 = extractvalue { {}*, i64 } %99, 1
  %cond284 = icmp eq i64 %.elt321, 0
  %100 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G2095854.1 = select i1 %cond284, {}* %100, {}* %.elt319
  br label %tag71

normal-dest234:                                   ; preds = %tag31
  %ptrtoint235 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint236 = add i64 %ptrtoint235, 7
  %entry-point-addr237 = inttoptr i64 %entry-point-addr-uint236 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point238 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr237, align 8
  %101 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point238({}* %34, i64 2, {}* %LENGTH.0.ph, {}* inttoptr (i64 4 to {}*), {}* null, {}* null)
          to label %normal-dest241 unwind label %cleanup-lpad.loopexit.loopexit.split-lp

normal-dest241:                                   ; preds = %normal-dest234
  %.elt = extractvalue { {}*, i64 } %101, 0
  %.elt292 = extractvalue { {}*, i64 } %101, 1
  %cond = icmp eq i64 %.elt292, 0
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %LENGTH.2 = select i1 %cond, {}* %102, {}* %.elt
  br label %tag49.outer.backedge

normal-dest268:                                   ; preds = %tag75
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 881), align 8
  %ptrtoint269 = ptrtoint {}* %64 to i64
  %entry-point-addr-uint270 = add i64 %ptrtoint269, 7
  %entry-point-addr271 = inttoptr i64 %entry-point-addr-uint270 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point272 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr271, align 8
  %104 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point272({}* %64, i64 2, {}* %G2095854.0, {}* %103, {}* null, {}* null)
          to label %tag49 unwind label %cleanup-lpad.loopexit.loopexit
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^580^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !114 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^580^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag2:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G290231.0 = phi {}* [ %18, %header-check-br ], [ %G290231.1, %normal-dest76 ], [ %G290231.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 898), align 16
  %ptrtoint22 = ptrtoint {}* %G290231.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G290231.0, i64 2, {}* %"closure->B=MENGEN-GLEICH-P", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest69 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests21, %normal-dest69, %tag3, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag2, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 898), align 16
  %"closure->B=MENGEN-GLEICH-P" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20295, i64 580, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag3

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag2
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 900), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->B=MENGEN-GLEICH-P", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 909), align 8
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->B=MENGEN-GLEICH-P", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 898), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 910), align 16
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 3, {}* %34, {}* %35, {}* %36, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 2356 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 898), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %tag3
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 897), align 8
  %ptrtoint70 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %46 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %14, i64 5, {}* %42, {}* %43, {}* %18, {}* %44, {}* %45)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt = extractvalue { {}*, i64 } %46, 0
  %.elt97 = extractvalue { {}*, i64 } %46, 1
  %cond = icmp eq i64 %.elt97, 0
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290231.1 = select i1 %cond, {}* %47, {}* %.elt
  br label %tag2

normal-dest82:                                    ; preds = %maybe-more-tests21
  %ptrtoint83 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290231.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !115 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 2
  br i1 %enough-args, label %error, label %continue

tag:                                              ; preds = %continue, %kw-exit-block
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 893), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %tag1 unwind label %cleanup-lpad.loopexit.split-lp

tag1:                                             ; preds = %tag, %kw-exit-block
  %test.0 = phi {}* [ %test.3, %kw-exit-block ], [ %10, %tag ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 895), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest29 unwind label %cleanup-lpad.loopexit.split-lp

tag5:                                             ; preds = %normal-dest32
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 895), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest42 unwind label %cleanup-lpad.loopexit.split-lp

tag6:                                             ; preds = %normal-dest49, %normal-dest32
  %.sink76 = phi {}* [ %33, %normal-dest32 ], [ %.sink76.pre, %normal-dest49 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %15 = insertvalue { {}*, i64 } undef, {}* %.sink76, 0
  %16 = insertvalue { {}*, i64 } %15, i64 1, 1
  ret { {}*, i64 } %16

cleanup-lpad.loopexit:                            ; preds = %loop-kw-args
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %error, %loop-cont, %tag, %tag1, %normal-dest29, %tag5, %normal-dest42
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @":::global-str-B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 2)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs14 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-115 = add i64 %rem-nargs14, -1
  store i64 %rem-nargs-115, i64* %"remaining-nargs*", align 8
  %vaarg16 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %19 = icmp eq i64 %nargs, 2
  br i1 %19, label %tag, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G290210.0 = phi {}* [ %G290210.2, %advance-arg-idx-block ], [ %20, %loop-kw-args.preheader ]
  %test.1 = phi {}* [ %test.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %24, %advance-arg-idx-block ], [ 2, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs19 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-120 = add i64 %rem-nargs19, -1
  store i64 %rem-nargs-120, i64* %"remaining-nargs*", align 8
  %vaarg21 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs22 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-123 = add i64 %rem-nargs22, -1
  store i64 %rem-nargs-123, i64* %"remaining-nargs*", align 8
  %vaarg24 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg21, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest25 unwind label %cleanup-lpad.loopexit

kw-exit-block:                                    ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %21 = icmp eq {}* %G290210.2, %.pre
  br i1 %21, label %tag, label %tag1

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg21, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^^DESC")
          to label %kw-exit-block unwind label %cleanup-lpad.loopexit.split-lp

normal-dest25:                                    ; preds = %loop-kw-args
  %22 = icmp eq {}* %18, %vaarg21
  br i1 %22, label %aok-block, label %"kw-:TEST-test"

aok-block:                                        ; preds = %normal-dest25
  %23 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg24)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G290210.2 = phi {}* [ %G290210.0, %aok-block ], [ %G290210.0, %next-kw-block ], [ %G290210.3, %matched-kw-block ]
  %test.3 = phi {}* [ %test.1, %aok-block ], [ %test.1, %next-kw-block ], [ %test.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %23, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %30, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %24 = add i64 %phi-reg-arg-idx, 2
  %25 = icmp slt i64 %24, %nargs
  br i1 %25, label %loop-kw-args, label %loop-cont

"kw-:TEST-test":                                  ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %27 = call i64 @cc_matchKeywordOnce({}* %26, {}* %vaarg21, {}* %G290210.0)
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:TEST-test"
  %29 = icmp eq i64 %27, 2
  %G290210.3 = select i1 %29, {}* %G290210.0, {}* %17
  %test.4 = select i1 %29, {}* %test.1, {}* %vaarg24
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:TEST-test"
  %30 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest29:                                    ; preds = %tag1
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %ptrtoint = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %32 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 4, {}* %vaarg, {}* %vaarg16, {}* %31, {}* %test.0)
          to label %normal-dest32 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest32:                                    ; preds = %normal-dest29
  %.elt = extractvalue { {}*, i64 } %32, 0
  %.elt65 = extractvalue { {}*, i64 } %32, 1
  %cond = icmp eq i64 %.elt65, 0
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x.0 = select i1 %cond, {}* %33, {}* %.elt
  %34 = icmp eq {}* %x.0, %33
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290262.0 = select i1 %34, {}* %.val, {}* %33
  %35 = icmp eq {}* %G290262.0, %33
  br i1 %35, label %tag6, label %tag5

normal-dest42:                                    ; preds = %tag5
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %ptrtoint43 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %14, i64 4, {}* %vaarg16, {}* %vaarg, {}* %36, {}* %test.0)
          to label %normal-dest49 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest49:                                    ; preds = %normal-dest42
  %.elt67 = extractvalue { {}*, i64 } %37, 0
  %.elt69 = extractvalue { {}*, i64 } %37, 1
  %cond63 = icmp eq i64 %.elt69, 0
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x50.0 = select i1 %cond63, {}* %38, {}* %.elt67
  %39 = icmp eq {}* %x50.0, %38
  %.val80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %.sink76.pre = select i1 %39, {}* %.val80, {}* %38
  br label %tag6
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^595^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !116 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^595^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest89, %normal-dest67, %header-check-br
  %G290299.0 = phi {}* [ %18, %header-check-br ], [ %G290299.1, %normal-dest67 ], [ %G290299.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 921), align 8
  %ptrtoint13 = ptrtoint {}* %G290299.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G290299.0, i64 2, {}* %"closure->B=S", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br72
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest60, %maybe-more-tests80, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 921), align 8
  %"closure->B=S" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=S^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=S^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 20726, i64 595, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag, label %header-check-br72

normal-dest16:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 923), align 8
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=S", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 924), align 16
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=S", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %30 = invoke {}* @cc_safe_fdefinition({}* %29)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 921), align 8
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 925), align 8
  %ptrtoint46 = ptrtoint {}* %30 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %30, i64 3, {}* %31, {}* %32, {}* %33, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %35, {}* inttoptr (i64 2452 to {}*))
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 921), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %37 = insertvalue { {}*, i64 } undef, {}* %36, 0
  %38 = insertvalue { {}*, i64 } %37, i64 1, 1
  ret { {}*, i64 } %38

normal-dest60:                                    ; preds = %maybe-more-tests80
  %ptrtoint61 = ptrtoint {}* %43 to i64
  %entry-point-addr-uint62 = add i64 %ptrtoint61, 7
  %entry-point-addr63 = inttoptr i64 %entry-point-addr-uint62 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point64 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr63, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point64({}* %43, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest60
  %.elt118 = extractvalue { {}*, i64 } %39, 0
  %.elt120 = extractvalue { {}*, i64 } %39, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290299.1 = select i1 %cond95, {}* %40, {}* %.elt118
  br label %tag

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %41 = icmp ult i64 %.off123, 5
  br i1 %41, label %maybe-more-tests80, label %tag4

maybe-more-tests80:                               ; preds = %header-check-br72
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %43 = invoke {}* @cc_safe_fdefinition({}* %42)
          to label %normal-dest60 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 920), align 16
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290299.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=S^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !117 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=S^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=S^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc29 unwind label %cleanup-lpad

.noexc29:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest10, %normal-dest7, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 914), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 916), align 16
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 914), align 16
  %16 = invoke {}* @cc_safe_fdefinition({}* %15)
          to label %normal-dest7 unwind label %cleanup-lpad

normal-dest7:                                     ; preds = %normal-dest5
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 916), align 16
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 918), align 16
  %ptrtoint = ptrtoint {}* %16 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %19 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %16, i64 2, {}* %17, {}* %18, {}* null, {}* null)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest7
  %.elt = extractvalue { {}*, i64 } %19, 0
  %.elt21 = extractvalue { {}*, i64 } %19, 1
  %cond = icmp eq i64 %.elt21, 0
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290320.0 = select i1 %cond, {}* %20, {}* %.elt
  %ptrtoint13 = ptrtoint {}* %13 to i64
  %entry-point-addr-uint14 = add i64 %ptrtoint13, 7
  %entry-point-addr15 = inttoptr i64 %entry-point-addr-uint14 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point16 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr15, align 8
  %21 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point16({}* %13, i64 3, {}* %14, {}* %farg0, {}* %G290320.0, {}* null)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest10
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %21
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^623^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !118 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^623^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest76, %normal-dest63, %header-check-br
  %G290343.0 = phi {}* [ %18, %header-check-br ], [ %G290343.1, %normal-dest63 ], [ %G290343.2, %normal-dest76 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 928), align 16
  %ptrtoint13 = ptrtoint {}* %G290343.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint13, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G290343.0, i64 2, {}* %"closure->B=S1", {}* %11, {}* null, {}* null)
          to label %normal-dest16 unwind label %cleanup-lpad

tag3:                                             ; preds = %normal-dest10, %header-check-br46
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest56 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest69, %maybe-more-tests54, %normal-dest56, %tag3, %normal-dest32, %normal-dest26, %normal-dest19, %normal-dest16, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 928), align 16
  %"closure->B=S1" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=S1^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=S1^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21571, i64 623, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag3

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br46

normal-dest16:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest19 unwind label %cleanup-lpad

normal-dest19:                                    ; preds = %normal-dest16
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 930), align 16
  %ptrtoint20 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %22, i64 2, {}* %"closure->B=S1", {}* %23, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest19
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %26 = invoke {}* @cc_safe_fdefinition({}* %25)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 931), align 8
  %ptrtoint33 = ptrtoint {}* %26 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %26, i64 2, {}* %"closure->B=S1", {}* %27, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %29, {}* inttoptr (i64 2492 to {}*))
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 928), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %31 = insertvalue { {}*, i64 } undef, {}* %30, 0
  %32 = insertvalue { {}*, i64 } %31, i64 1, 1
  ret { {}*, i64 } %32

header-check-br46:                                ; preds = %header-check-br
  %.off106 = add i64 %19, -1001
  %33 = icmp ult i64 %.off106, 5
  br i1 %33, label %maybe-more-tests54, label %tag3

maybe-more-tests54:                               ; preds = %header-check-br46
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest56:                                    ; preds = %tag3
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 927), align 8
  %ptrtoint57 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint58 = add i64 %ptrtoint57, 7
  %entry-point-addr59 = inttoptr i64 %entry-point-addr-uint58 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point60 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr59, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point60({}* %14, i64 5, {}* %36, {}* %37, {}* %18, {}* %38, {}* %39)
          to label %normal-dest63 unwind label %cleanup-lpad

normal-dest63:                                    ; preds = %normal-dest56
  %.elt = extractvalue { {}*, i64 } %40, 0
  %.elt84 = extractvalue { {}*, i64 } %40, 1
  %cond = icmp eq i64 %.elt84, 0
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290343.1 = select i1 %cond, {}* %41, {}* %.elt
  br label %tag1

normal-dest69:                                    ; preds = %maybe-more-tests54
  %ptrtoint70 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %35, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt101 = extractvalue { {}*, i64 } %42, 0
  %.elt103 = extractvalue { {}*, i64 } %42, 1
  %cond82 = icmp eq i64 %.elt103, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290343.2 = select i1 %cond82, {}* %43, {}* %.elt101
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=S1^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !119 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=S1^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=S1^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc14 unwind label %cleanup-lpad

.noexc14:                                         ; preds = %10
  unreachable

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest5, %normal-dest
  %11 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %11

normal-dest:                                      ; preds = %entry
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 914), align 16
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 916), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %15 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 2, {}* %14, {}* %farg0, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %15
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^627^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !120 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^627^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br13
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest22 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest37, %normal-dest26, %header-check-br
  %G290398.0 = phi {}* [ %18, %header-check-br ], [ %G290398.1, %normal-dest26 ], [ %G290398.2, %normal-dest37 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 937), align 8
  %ptrtoint43 = ptrtoint {}* %G290398.0 to i64
  %entry-point-addr-uint44 = add i64 %ptrtoint43, 7
  %entry-point-addr45 = inttoptr i64 %entry-point-addr-uint44 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point46 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr45, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point46({}* %G290398.0, i64 2, {}* %"closure->B=NEUE-SPRACHTEXTE", {}* %13, {}* null, {}* null)
          to label %normal-dest49 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest81, %normal-dest75, %normal-dest68, %normal-dest62, %normal-dest55, %normal-dest49, %tag4, %normal-dest30, %maybe-more-tests21, %normal-dest22, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 937), align 8
  %"closure->B=NEUE-SPRACHTEXTE" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 21676, i64 627, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag4, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag1

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest30 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 936), align 16
  %ptrtoint23 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %28 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %24, {}* %25, {}* %18, {}* %26, {}* %27)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt = extractvalue { {}*, i64 } %28, 0
  %.elt97 = extractvalue { {}*, i64 } %28, 1
  %cond = icmp eq i64 %.elt97, 0
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290398.1 = select i1 %cond, {}* %29, {}* %.elt
  br label %tag4

normal-dest30:                                    ; preds = %maybe-more-tests21
  %ptrtoint31 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint32 = add i64 %ptrtoint31, 7
  %entry-point-addr33 = inttoptr i64 %entry-point-addr-uint32 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point34 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr33, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point34({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest37 unwind label %cleanup-lpad

normal-dest37:                                    ; preds = %normal-dest30
  %.elt118 = extractvalue { {}*, i64 } %30, 0
  %.elt120 = extractvalue { {}*, i64 } %30, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290398.2 = select i1 %cond95, {}* %31, {}* %.elt118
  br label %tag4

normal-dest49:                                    ; preds = %tag4
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest55 unwind label %cleanup-lpad

normal-dest55:                                    ; preds = %normal-dest49
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 939), align 8
  %ptrtoint56 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint57 = add i64 %ptrtoint56, 7
  %entry-point-addr58 = inttoptr i64 %entry-point-addr-uint57 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point59 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr58, align 8
  %35 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point59({}* %33, i64 2, {}* %"closure->B=NEUE-SPRACHTEXTE", {}* %34, {}* null, {}* null)
          to label %normal-dest62 unwind label %cleanup-lpad

normal-dest62:                                    ; preds = %normal-dest55
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest68 unwind label %cleanup-lpad

normal-dest68:                                    ; preds = %normal-dest62
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 942), align 16
  %ptrtoint69 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint70 = add i64 %ptrtoint69, 7
  %entry-point-addr71 = inttoptr i64 %entry-point-addr-uint70 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point72 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr71, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point72({}* %37, i64 2, {}* %"closure->B=NEUE-SPRACHTEXTE", {}* %38, {}* null, {}* null)
          to label %normal-dest75 unwind label %cleanup-lpad

normal-dest75:                                    ; preds = %normal-dest68
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %41 = invoke {}* @cc_safe_fdefinition({}* %40)
          to label %normal-dest81 unwind label %cleanup-lpad

normal-dest81:                                    ; preds = %normal-dest75
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 937), align 8
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 943), align 8
  %ptrtoint82 = ptrtoint {}* %41 to i64
  %entry-point-addr-uint83 = add i64 %ptrtoint82, 7
  %entry-point-addr84 = inttoptr i64 %entry-point-addr-uint83 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point85 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr84, align 8
  %45 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point85({}* %41, i64 3, {}* %42, {}* %43, {}* %44, {}* null)
          to label %normal-dest88 unwind label %cleanup-lpad

normal-dest88:                                    ; preds = %normal-dest81
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %46, {}* inttoptr (i64 2536 to {}*))
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 937), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %48 = insertvalue { {}*, i64 } undef, {}* %47, 0
  %49 = insertvalue { {}*, i64 } %48, i64 1, 1
  ret { {}*, i64 } %49
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !121 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 0
  br i1 %enough-args, label %error, label %process-rest-argument

tag:                                              ; preds = %tag55
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %10 = icmp eq {}* %x157.0, %9
  %.val402 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290448.0 = select i1 %10, {}* %.val402, {}* %9
  %11 = icmp eq {}* %G290448.0, %9
  br i1 %11, label %tag42, label %tag58.backedge

tag58.backedge:                                   ; preds = %tag, %normal-dest209, %tag20
  %LISTE.0.be = phi {}* [ %27, %tag20 ], [ %G290377.1, %normal-dest209 ], [ %9, %tag ]
  br label %tag58

tag1:                                             ; preds = %tag60
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %13 = invoke {}* @cc_safe_fdefinition({}* %12)
          to label %normal-dest83 unwind label %cleanup-lpad.loopexit

tag7:                                             ; preds = %tag61
  %14 = add i64 %63, 5
  %15 = inttoptr i64 %14 to {}**
  %16 = load {}*, {}** %15, align 8
  br label %tag30

tag12:                                            ; preds = %normal-dest269
  %.elt356 = extractvalue { {}*, i64 } %127, 0
  %.elt358 = extractvalue { {}*, i64 } %127, 1
  %cond = icmp eq i64 %.elt358, 0
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.391 = select i1 %cond, {}* %17, {}* %.elt356
  br label %tag12.thread

tag12.thread:                                     ; preds = %tag59, %tag24, %tag12
  %18 = phi {}* [ %.391, %tag12 ], [ %return-value.sroa.0.0.ph399.pre, %tag59 ], [ %.val406, %tag24 ]
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 914), align 16
  %20 = invoke {}* @cc_safe_setfdefinition({}* %19)
          to label %normal-dest110 unwind label %cleanup-lpad.loopexit

tag16:                                            ; preds = %tag49
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 933), align 8
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest115 unwind label %cleanup-lpad.loopexit

tag17:                                            ; preds = %tag49
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %23 = insertvalue { {}*, i64 } undef, {}* %52, 0
  %24 = insertvalue { {}*, i64 } %23, i64 1, 1
  ret { {}*, i64 } %24

tag20:                                            ; preds = %tag55
  %25 = add i64 %60, 5
  %26 = inttoptr i64 %25 to {}**
  %27 = load {}*, {}** %26, align 8
  br label %tag58.backedge

tag24:                                            ; preds = %tag30
  %28 = icmp eq {}* %x90.0, %.val406
  %G290498.0 = select i1 %28, {}* %.val397, {}* %.val406
  %29 = icmp eq {}* %G290498.0, %.val406
  br i1 %29, label %tag62, label %tag12.thread

tag25:                                            ; preds = %tag54
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest133 unwind label %cleanup-lpad.loopexit

tag26:                                            ; preds = %tag50
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest148 unwind label %cleanup-lpad.loopexit

tag29:                                            ; preds = %tag45
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest164 unwind label %cleanup-lpad.loopexit

tag30:                                            ; preds = %tag45, %normal-dest171, %tag7
  %.val406 = phi {}* [ %68, %tag7 ], [ %107, %normal-dest171 ], [ %68, %tag45 ]
  %x90.0 = phi {}* [ %16, %tag7 ], [ %x90.1, %normal-dest171 ], [ %68, %tag45 ]
  %36 = ptrtoint {}* %x90.0 to i64
  %tag-only179332 = and i64 %36, 7
  %consp-test180 = icmp eq i64 %tag-only179332, 3
  %.val397 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290506.0 = select i1 %consp-test180, {}* %.val397, {}* %.val406
  %37 = icmp eq {}* %G290506.0, %.val406
  br i1 %37, label %tag24, label %tag59

tag33:                                            ; preds = %normal-dest115
  %38 = icmp eq {}* %LISTE.0, %G290565.0
  %.val409 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290558.0 = select i1 %38, {}* %.val409, {}* %G290565.0
  %39 = icmp eq {}* %G290558.0, %G290565.0
  br i1 %39, label %tag68, label %tag56

tag34:                                            ; preds = %normal-dest241
  %40 = add i64 %63, -3
  %41 = inttoptr i64 %40 to {}**
  %42 = load {}*, {}** %41, align 8
  br label %tag61

tag37:                                            ; preds = %normal-dest297
  %43 = add i64 %63, 5
  %44 = inttoptr i64 %43 to {}**
  %45 = load {}*, {}** %44, align 8
  br label %tag55

tag40:                                            ; preds = %normal-dest110, %header-check-br307
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest188 unwind label %cleanup-lpad.loopexit

tag42:                                            ; preds = %tag
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest202 unwind label %cleanup-lpad.loopexit

tag45:                                            ; preds = %tag61
  %50 = icmp eq {}* %LISTE.0, %68
  %.val395 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290519.0 = select i1 %50, {}* %.val395, {}* %68
  %51 = icmp eq {}* %G290519.0, %68
  br i1 %51, label %tag29, label %tag30

tag49:                                            ; preds = %tag60, %tag58, %normal-dest86
  %52 = phi {}* [ %83, %normal-dest86 ], [ %64, %tag58 ], [ %64, %tag60 ]
  %object.0 = phi {}* [ %object.1, %normal-dest86 ], [ %64, %tag58 ], [ %.val, %tag60 ]
  %53 = icmp eq {}* %object.0, %52
  %.val393 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290418.0 = select i1 %53, {}* %.val393, {}* %52
  %54 = icmp eq {}* %G290418.0, %52
  br i1 %54, label %tag17, label %tag16

tag50:                                            ; preds = %normal-dest297
  %55 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %56 = icmp eq {}* %LISTE.0, %55
  %.val400 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290464.0 = select i1 %56, {}* %.val400, {}* %55
  %57 = icmp eq {}* %G290464.0, %55
  br i1 %57, label %tag26, label %tag55

tag54:                                            ; preds = %normal-dest241
  %58 = icmp eq {}* %LISTE.0, %G290542.0
  %.val407 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290535.0 = select i1 %58, {}* %.val407, {}* %G290542.0
  %59 = icmp eq {}* %G290535.0, %G290542.0
  br i1 %59, label %tag25, label %tag61

tag55:                                            ; preds = %tag50, %normal-dest156, %tag37
  %x157.0 = phi {}* [ %45, %tag37 ], [ %x157.1, %normal-dest156 ], [ %55, %tag50 ]
  %60 = ptrtoint {}* %x157.0 to i64
  %tag-only233342 = and i64 %60, 7
  %consp-test234 = icmp eq i64 %tag-only233342, 3
  br i1 %consp-test234, label %tag20, label %tag

tag56:                                            ; preds = %tag33, %normal-dest285, %tag75
  %G290547.0 = phi {}* [ %76, %tag75 ], [ %G290547.1, %normal-dest285 ], [ %G290565.0, %tag33 ]
  %61 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 916), align 16
  %ptrtoint235 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint236 = add i64 %ptrtoint235, 7
  %entry-point-addr237 = inttoptr i64 %entry-point-addr-uint236 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point238 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr237, align 8
  %62 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point238({}* %22, i64 2, {}* %G290547.0, {}* %61, {}* null, {}* null)
          to label %normal-dest241 unwind label %cleanup-lpad.loopexit

tag58:                                            ; preds = %tag58.backedge, %process-rest-argument
  %LISTE.0 = phi {}* [ %77, %process-rest-argument ], [ %LISTE.0.be, %tag58.backedge ]
  %63 = ptrtoint {}* %LISTE.0 to i64
  %tag-only253326 = and i64 %63, 7
  %consp-test254 = icmp eq i64 %tag-only253326, 3
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br i1 %consp-test254, label %tag49, label %tag60

tag59:                                            ; preds = %tag30
  %65 = add i64 %36, -3
  %.phi.trans.insert = inttoptr i64 %65 to {}**
  %return-value.sroa.0.0.ph399.pre = load {}*, {}** %.phi.trans.insert, align 8
  br label %tag12.thread

tag60:                                            ; preds = %tag58
  %66 = icmp eq {}* %LISTE.0, %64
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290431.0 = select i1 %66, {}* %.val, {}* %64
  %67 = icmp eq {}* %G290431.0, %64
  br i1 %67, label %tag1, label %tag49

tag61:                                            ; preds = %tag54, %normal-dest141, %tag34
  %68 = phi {}* [ %121, %tag34 ], [ %95, %normal-dest141 ], [ %G290542.0, %tag54 ]
  %G290371.0 = phi {}* [ %42, %tag34 ], [ %G290371.1, %normal-dest141 ], [ %G290542.0, %tag54 ]
  br i1 %consp-test254, label %tag7, label %tag45

tag62:                                            ; preds = %tag24
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %70 = invoke {}* @cc_safe_fdefinition({}* %69)
          to label %normal-dest269 unwind label %cleanup-lpad.loopexit

tag68:                                            ; preds = %tag33
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest278 unwind label %cleanup-lpad.loopexit

tag71:                                            ; preds = %normal-dest195, %header-check-br, %normal-dest99
  %G290471.0 = phi {}* [ %G290471.1, %normal-dest99 ], [ %20, %header-check-br ], [ %G290471.2, %normal-dest195 ]
  %ptrtoint291 = ptrtoint {}* %G290471.0 to i64
  %entry-point-addr-uint292 = add i64 %ptrtoint291, 7
  %entry-point-addr293 = inttoptr i64 %entry-point-addr-uint292 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point294 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr293, align 8
  %73 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point294({}* %G290471.0, i64 3, {}* %18, {}* %120, {}* %G290371.0, {}* null)
          to label %normal-dest297 unwind label %cleanup-lpad.loopexit

tag75:                                            ; preds = %normal-dest115
  %74 = add i64 %63, -3
  %75 = inttoptr i64 %74 to {}**
  %76 = load {}*, {}** %75, align 8
  br label %tag56

cleanup-lpad.loopexit:                            ; preds = %tag1, %normal-dest83, %maybe-more-tests315, %normal-dest92, %tag12.thread, %tag16, %tag25, %normal-dest133, %tag26, %normal-dest148, %tag29, %normal-dest164, %tag40, %normal-dest188, %tag42, %normal-dest202, %tag56, %tag62, %normal-dest269, %tag68, %normal-dest278, %tag71
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %error
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @":::global-str-B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 0)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

process-rest-argument:                            ; preds = %entry
  %77 = call {}* @cc_gatherRestArguments({ i32, i32, i8*, i8* }* nonnull %"va-list*", i64* %"remaining-nargs*")
  br label %tag58

normal-dest83:                                    ; preds = %tag1
  %78 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %80 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint = ptrtoint {}* %13 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %82 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %13, i64 5, {}* %78, {}* %79, {}* %LISTE.0, {}* %80, {}* %81)
          to label %normal-dest86 unwind label %cleanup-lpad.loopexit

normal-dest86:                                    ; preds = %normal-dest83
  %.elt375 = extractvalue { {}*, i64 } %82, 0
  %.elt377 = extractvalue { {}*, i64 } %82, 1
  %cond325 = icmp eq i64 %.elt377, 0
  %83 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.1 = select i1 %cond325, {}* %83, {}* %.elt375
  br label %tag49

normal-dest92:                                    ; preds = %maybe-more-tests315
  %ptrtoint93 = ptrtoint {}* %136 to i64
  %entry-point-addr-uint94 = add i64 %ptrtoint93, 7
  %entry-point-addr95 = inttoptr i64 %entry-point-addr-uint94 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point96 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr95, align 8
  %84 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point96({}* %136, i64 1, {}* nonnull %20, {}* null, {}* null, {}* null)
          to label %normal-dest99 unwind label %cleanup-lpad.loopexit

normal-dest99:                                    ; preds = %normal-dest92
  %.elt352 = extractvalue { {}*, i64 } %84, 0
  %.elt354 = extractvalue { {}*, i64 } %84, 1
  %cond321 = icmp eq i64 %.elt354, 0
  %85 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290471.1 = select i1 %cond321, {}* %85, {}* %.elt352
  br label %tag71

normal-dest110:                                   ; preds = %tag12.thread
  %ptrtoint111 = ptrtoint {}* %20 to i64
  %tag-only = and i64 %ptrtoint111, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag40

header-check-br:                                  ; preds = %normal-dest110
  %irc-bit-cast112 = bitcast {}* %20 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast112, i64 -9
  %irc-bit-cast113 = bitcast i8* %gep to i64*
  %86 = load i64, i64* %irc-bit-cast113, align 8
  %.off = add i64 %86, -913
  %87 = icmp ult i64 %.off, 85
  br i1 %87, label %tag71, label %header-check-br307

normal-dest115:                                   ; preds = %tag16
  %G290565.0.in = select i1 %consp-test254, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0)
  %G290565.0 = load {}*, {}** %G290565.0.in, align 8
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %89 = icmp eq {}* %G290565.0, %88
  br i1 %89, label %tag33, label %tag75

normal-dest133:                                   ; preds = %tag25
  %90 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint135 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint136 = add i64 %ptrtoint135, 7
  %entry-point-addr137 = inttoptr i64 %entry-point-addr-uint136 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point138 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr137, align 8
  %94 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point138({}* %31, i64 5, {}* %90, {}* %91, {}* %LISTE.0, {}* %92, {}* %93)
          to label %normal-dest141 unwind label %cleanup-lpad.loopexit

normal-dest141:                                   ; preds = %normal-dest133
  %.elt364 = extractvalue { {}*, i64 } %94, 0
  %.elt366 = extractvalue { {}*, i64 } %94, 1
  %cond323 = icmp eq i64 %.elt366, 0
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290371.1 = select i1 %cond323, {}* %95, {}* %.elt364
  br label %tag61

normal-dest148:                                   ; preds = %tag26
  %96 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %98 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %99 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint150 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint151 = add i64 %ptrtoint150, 7
  %entry-point-addr152 = inttoptr i64 %entry-point-addr-uint151 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point153 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr152, align 8
  %100 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point153({}* %33, i64 5, {}* %96, {}* %97, {}* %LISTE.0, {}* %98, {}* %99)
          to label %normal-dest156 unwind label %cleanup-lpad.loopexit

normal-dest156:                                   ; preds = %normal-dest148
  %.elt348 = extractvalue { {}*, i64 } %100, 0
  %.elt350 = extractvalue { {}*, i64 } %100, 1
  %cond320 = icmp eq i64 %.elt350, 0
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x157.1 = select i1 %cond320, {}* %101, {}* %.elt348
  br label %tag55

normal-dest164:                                   ; preds = %tag29
  %102 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %105 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint165 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint166 = add i64 %ptrtoint165, 7
  %entry-point-addr167 = inttoptr i64 %entry-point-addr-uint166 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point168 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr167, align 8
  %106 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point168({}* %35, i64 5, {}* %102, {}* %103, {}* %LISTE.0, {}* %104, {}* %105)
          to label %normal-dest171 unwind label %cleanup-lpad.loopexit

normal-dest171:                                   ; preds = %normal-dest164
  %.elt360 = extractvalue { {}*, i64 } %106, 0
  %.elt362 = extractvalue { {}*, i64 } %106, 1
  %cond322 = icmp eq i64 %.elt362, 0
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x90.1 = select i1 %cond322, {}* %107, {}* %.elt360
  br label %tag30

normal-dest188:                                   ; preds = %tag40
  %108 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %110 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %111 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 935), align 8
  %ptrtoint189 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint190 = add i64 %ptrtoint189, 7
  %entry-point-addr191 = inttoptr i64 %entry-point-addr-uint190 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point192 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr191, align 8
  %112 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point192({}* %47, i64 5, {}* %108, {}* %109, {}* %20, {}* %110, {}* %111)
          to label %normal-dest195 unwind label %cleanup-lpad.loopexit

normal-dest195:                                   ; preds = %normal-dest188
  %.elt334 = extractvalue { {}*, i64 } %112, 0
  %.elt336 = extractvalue { {}*, i64 } %112, 1
  %cond318 = icmp eq i64 %.elt336, 0
  %113 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290471.2 = select i1 %cond318, {}* %113, {}* %.elt334
  br label %tag71

normal-dest202:                                   ; preds = %tag42
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint203 = ptrtoint {}* %49 to i64
  %entry-point-addr-uint204 = add i64 %ptrtoint203, 7
  %entry-point-addr205 = inttoptr i64 %entry-point-addr-uint204 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point206 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr205, align 8
  %118 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point206({}* %49, i64 5, {}* %114, {}* %115, {}* %x157.0, {}* %116, {}* %117)
          to label %normal-dest209 unwind label %cleanup-lpad.loopexit

normal-dest209:                                   ; preds = %normal-dest202
  %.elt344 = extractvalue { {}*, i64 } %118, 0
  %.elt346 = extractvalue { {}*, i64 } %118, 1
  %cond319 = icmp eq i64 %.elt346, 0
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290377.1 = select i1 %cond319, {}* %119, {}* %.elt344
  br label %tag58.backedge

normal-dest241:                                   ; preds = %tag56
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 916), align 16
  %G290542.0 = load {}*, {}** %G290565.0.in, align 8
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %122 = icmp eq {}* %G290542.0, %121
  br i1 %122, label %tag54, label %tag34

normal-dest269:                                   ; preds = %tag62
  %123 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %124 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %126 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint270 = ptrtoint {}* %70 to i64
  %entry-point-addr-uint271 = add i64 %ptrtoint270, 7
  %entry-point-addr272 = inttoptr i64 %entry-point-addr-uint271 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point273 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr272, align 8
  %127 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point273({}* %70, i64 5, {}* %123, {}* %124, {}* %x90.0, {}* %125, {}* %126)
          to label %tag12 unwind label %cleanup-lpad.loopexit

normal-dest278:                                   ; preds = %tag68
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %129 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint279 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint280 = add i64 %ptrtoint279, 7
  %entry-point-addr281 = inttoptr i64 %entry-point-addr-uint280 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point282 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr281, align 8
  %132 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point282({}* %72, i64 5, {}* %128, {}* %129, {}* %LISTE.0, {}* %130, {}* %131)
          to label %normal-dest285 unwind label %cleanup-lpad.loopexit

normal-dest285:                                   ; preds = %normal-dest278
  %.elt368 = extractvalue { {}*, i64 } %132, 0
  %.elt370 = extractvalue { {}*, i64 } %132, 1
  %cond324 = icmp eq i64 %.elt370, 0
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290547.1 = select i1 %cond324, {}* %133, {}* %.elt368
  br label %tag56

normal-dest297:                                   ; preds = %tag71
  br i1 %consp-test254, label %tag37, label %tag50

header-check-br307:                               ; preds = %header-check-br
  %.off404 = add i64 %86, -1001
  %134 = icmp ult i64 %.off404, 5
  br i1 %134, label %maybe-more-tests315, label %tag40

maybe-more-tests315:                              ; preds = %header-check-br307
  %135 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %136 = invoke {}* @cc_safe_fdefinition({}* %135)
          to label %normal-dest92 unwind label %cleanup-lpad.loopexit
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^642^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !122 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^642^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest89, %normal-dest76, %header-check-br
  %G290610.0 = phi {}* [ %18, %header-check-br ], [ %G290610.1, %normal-dest76 ], [ %G290610.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 950), align 16
  %ptrtoint22 = ptrtoint {}* %G290610.0 to i64
  %entry-point-addr-uint = add i64 %ptrtoint22, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %G290610.0, i64 2, {}* %"closure->B=DATUM", {}* %11, {}* null, {}* null)
          to label %normal-dest25 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest69, %maybe-more-tests21, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %normal-dest28, %normal-dest25, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 950), align 16
  %"closure->B=DATUM" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=DATUM^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=DATUM^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22051, i64 642, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest69 unwind label %cleanup-lpad

normal-dest25:                                    ; preds = %tag1
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %25 = invoke {}* @cc_safe_fdefinition({}* %24)
          to label %normal-dest28 unwind label %cleanup-lpad

normal-dest28:                                    ; preds = %normal-dest25
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ptrtoint29 = ptrtoint {}* %25 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %27 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %25, i64 2, {}* %"closure->B=DATUM", {}* %26, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

normal-dest35:                                    ; preds = %normal-dest28
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %29 = invoke {}* @cc_safe_fdefinition({}* %28)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 952), align 16
  %ptrtoint42 = ptrtoint {}* %29 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %31 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %29, i64 2, {}* %"closure->B=DATUM", {}* %30, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %33 = invoke {}* @cc_safe_fdefinition({}* %32)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 950), align 16
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 953), align 8
  %ptrtoint55 = ptrtoint {}* %33 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %37 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %33, i64 3, {}* %34, {}* %35, {}* %36, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %38, {}* inttoptr (i64 2692 to {}*))
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 950), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %40 = insertvalue { {}*, i64 } undef, {}* %39, 0
  %41 = insertvalue { {}*, i64 } %40, i64 1, 1
  ret { {}*, i64 } %41

normal-dest69:                                    ; preds = %maybe-more-tests21
  %ptrtoint70 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint71 = add i64 %ptrtoint70, 7
  %entry-point-addr72 = inttoptr i64 %entry-point-addr-uint71 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point73 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr72, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point73({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest69
  %.elt118 = extractvalue { {}*, i64 } %42, 0
  %.elt120 = extractvalue { {}*, i64 } %42, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %43 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290610.1 = select i1 %cond95, {}* %43, {}* %.elt118
  br label %tag1

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 949), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290610.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=DATUM^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !123 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %9 = call [0 x {}*]* @cc_multipleValuesArrayAddress()
  %10 = load i64, i64* %"remaining-nargs*", align 8
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %10)
  %11 = icmp eq i64 %nargs, 0
  br i1 %11, label %normal-dest, label %12

; <label>:12:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=DATUM^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %12
  unreachable

cleanup-lpad:                                     ; preds = %12, %normal-dest47, %mvn-final, %normal-dest5, %normal-dest
  %13 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %13

normal-dest:                                      ; preds = %entry
  %14 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 945), align 8
  %15 = invoke {}* @cc_safe_fdefinition({}* %14)
          to label %normal-dest5 unwind label %cleanup-lpad

normal-dest5:                                     ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %15 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %16 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %15, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest8 unwind label %cleanup-lpad

normal-dest8:                                     ; preds = %normal-dest5
  %.elt56 = extractvalue { {}*, i64 } %16, 1
  switch i64 %.elt56, label %mvn9- [
    i64 0, label %mvn0-
    i64 1, label %mvn1-
    i64 2, label %mvn2-
    i64 3, label %mvn3-
    i64 4, label %mvn4-
    i64 5, label %mvn5-
    i64 6, label %mvn6-
    i64 7, label %mvn7-
    i64 8, label %mvn8-
  ]

mvn0-:                                            ; preds = %normal-dest8
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn1-:                                            ; preds = %normal-dest8
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn2-:                                            ; preds = %normal-dest8
  %19 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn3-:                                            ; preds = %normal-dest8
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn4-:                                            ; preds = %normal-dest8
  %gep15 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 3
  %21 = load {}*, {}** %gep15, align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn5-:                                            ; preds = %normal-dest8
  %gep18 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 3
  %23 = load {}*, {}** %gep18, align 8
  %gep19 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 4
  %24 = load {}*, {}** %gep19, align 8
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn6-:                                            ; preds = %normal-dest8
  %gep22 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 3
  %26 = load {}*, {}** %gep22, align 8
  %gep23 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 4
  %27 = load {}*, {}** %gep23, align 8
  %gep24 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 5
  %28 = load {}*, {}** %gep24, align 8
  br label %mvn-final

mvn7-:                                            ; preds = %normal-dest8
  %gep27 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 3
  %29 = load {}*, {}** %gep27, align 8
  %gep28 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 4
  %30 = load {}*, {}** %gep28, align 8
  %gep29 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 5
  %31 = load {}*, {}** %gep29, align 8
  br label %mvn-final

mvn8-:                                            ; preds = %normal-dest8
  %gep33 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 3
  %32 = load {}*, {}** %gep33, align 8
  %gep34 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 4
  %33 = load {}*, {}** %gep34, align 8
  %gep35 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 5
  %34 = load {}*, {}** %gep35, align 8
  br label %mvn-final

mvn9-:                                            ; preds = %normal-dest8
  %gep40 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 3
  %35 = load {}*, {}** %gep40, align 8
  %gep41 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 4
  %36 = load {}*, {}** %gep41, align 8
  %gep42 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 5
  %37 = load {}*, {}** %gep42, align 8
  br label %mvn-final

mvn-final:                                        ; preds = %mvn9-, %mvn8-, %mvn7-, %mvn6-, %mvn5-, %mvn4-, %mvn3-, %mvn2-, %mvn1-, %mvn0-
  %TAG290575.0 = phi {}* [ %35, %mvn9- ], [ %32, %mvn8- ], [ %29, %mvn7- ], [ %26, %mvn6- ], [ %23, %mvn5- ], [ %21, %mvn4- ], [ %20, %mvn3- ], [ %19, %mvn2- ], [ %18, %mvn1- ], [ %17, %mvn0- ]
  %MONAT290576.0 = phi {}* [ %36, %mvn9- ], [ %33, %mvn8- ], [ %30, %mvn7- ], [ %27, %mvn6- ], [ %24, %mvn5- ], [ %22, %mvn4- ], [ %20, %mvn3- ], [ %19, %mvn2- ], [ %18, %mvn1- ], [ %17, %mvn0- ]
  %JAHR290577.0 = phi {}* [ %37, %mvn9- ], [ %34, %mvn8- ], [ %31, %mvn7- ], [ %28, %mvn6- ], [ %25, %mvn5- ], [ %22, %mvn4- ], [ %20, %mvn3- ], [ %19, %mvn2- ], [ %18, %mvn1- ], [ %17, %mvn0- ]
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %39 = invoke {}* @cc_safe_fdefinition({}* %38)
          to label %normal-dest47 unwind label %cleanup-lpad

normal-dest47:                                    ; preds = %mvn-final
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 947), align 8
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 948), align 16
  %ptrtoint48 = ptrtoint {}* %39 to i64
  %entry-point-addr-uint49 = add i64 %ptrtoint48, 7
  %entry-point-addr50 = inttoptr i64 %entry-point-addr-uint49 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point51 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr50, align 8
  %42 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point51({}* %39, i64 5, {}* %TAG290575.0, {}* %40, {}* %MONAT290576.0, {}* %41, {}* %JAHR290577.0)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest47
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %42
}

; Function Attrs: nounwind
declare [0 x {}*]* @cc_multipleValuesArrayAddress() local_unnamed_addr #1

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^681^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !124 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^681^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag1:                                             ; preds = %normal-dest10, %header-check-br72
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag2:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G290678.0 = phi {}* [ %18, %header-check-br ], [ %G290678.1, %normal-dest17 ], [ %G290678.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 958), align 16
  %ptrtoint20 = ptrtoint {}* %G290678.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G290678.0, i64 2, {}* %"closure->B=UHRZEIT", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests80, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag2, %normal-dest13, %tag1, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 958), align 16
  %"closure->B=UHRZEIT" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=UHRZEIT^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=UHRZEIT^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 22757, i64 681, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag1

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag2, label %header-check-br72

normal-dest13:                                    ; preds = %tag1
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 957), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290678.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag2

normal-dest26:                                    ; preds = %tag2
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 960), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->B=UHRZEIT", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 964), align 16
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->B=UHRZEIT", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 958), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 965), align 8
  %ptrtoint59 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %36, i64 3, {}* %37, {}* %38, {}* %39, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %41, {}* inttoptr (i64 2724 to {}*))
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 958), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %45 = icmp ult i64 %.off123, 5
  br i1 %45, label %maybe-more-tests80, label %tag1

maybe-more-tests80:                               ; preds = %header-check-br72
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %maybe-more-tests80
  %ptrtoint83 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %47, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290678.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag2
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=UHRZEIT^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !125 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %9 = call [0 x {}*]* @cc_multipleValuesArrayAddress()
  %10 = load i64, i64* %"remaining-nargs*", align 8
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %10)
  %enough-args = icmp slt i64 %nargs, 0
  br i1 %enough-args, label %error, label %continue

cleanup-lpad.loopexit:                            ; preds = %loop-kw-args
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp:                   ; preds = %error, %loop-cont, %normal-dest63, %kw-exit-block, %normal-dest17, %mvn-final
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit.split-lp, %cleanup-lpad.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @":::global-str-B=UHRZEIT^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 0)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp

continue:                                         ; preds = %entry
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %12 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %14 = icmp eq i64 %nargs, 0
  br i1 %14, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G290657.0 = phi {}* [ %G290657.2, %advance-arg-idx-block ], [ %12, %loop-kw-args.preheader ]
  %uhrtext-p.1 = phi {}* [ %uhrtext-p.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %22, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs9 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-110 = add i64 %rem-nargs9, -1
  store i64 %rem-nargs-110, i64* %"remaining-nargs*", align 8
  %vaarg11 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=UHRZEIT^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest12 unwind label %cleanup-lpad.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %15 = phi {}* [ %11, %continue ], [ %.pre76, %loop-cont.kw-exit-block_crit_edge ]
  %16 = phi {}* [ %12, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G290657.1 = phi {}* [ %12, %continue ], [ %G290657.2, %loop-cont.kw-exit-block_crit_edge ]
  %uhrtext-p.2 = phi {}* [ undef, %continue ], [ %uhrtext-p.3, %loop-cont.kw-exit-block_crit_edge ]
  %17 = icmp eq {}* %G290657.1, %16
  %uhrtext-p.0 = select i1 %17, {}* %15, {}* %uhrtext-p.2
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 945), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest17 unwind label %cleanup-lpad.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=UHRZEIT^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.pre76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %kw-exit-block

normal-dest12:                                    ; preds = %loop-kw-args
  %20 = icmp eq {}* %13, %vaarg
  br i1 %20, label %aok-block, label %"kw-:UHRTEXT-P-test"

aok-block:                                        ; preds = %normal-dest12
  %21 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg11)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G290657.2 = phi {}* [ %G290657.0, %aok-block ], [ %G290657.0, %next-kw-block ], [ %G290657.3, %matched-kw-block ]
  %uhrtext-p.3 = phi {}* [ %uhrtext-p.1, %aok-block ], [ %uhrtext-p.1, %next-kw-block ], [ %uhrtext-p.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %21, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %28, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %22 = add i64 %phi-reg-arg-idx, 2
  %23 = icmp slt i64 %22, %nargs
  br i1 %23, label %loop-kw-args, label %loop-cont

"kw-:UHRTEXT-P-test":                             ; preds = %normal-dest12
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 968), align 16
  %25 = call i64 @cc_matchKeywordOnce({}* %24, {}* %vaarg, {}* %G290657.0)
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:UHRTEXT-P-test"
  %27 = icmp eq i64 %25, 2
  %G290657.3 = select i1 %27, {}* %G290657.0, {}* %11
  %uhrtext-p.4 = select i1 %27, {}* %uhrtext-p.1, {}* %vaarg11
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:UHRTEXT-P-test"
  %28 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

normal-dest16:                                    ; preds = %normal-dest63
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  ret { {}*, i64 } %53

normal-dest17:                                    ; preds = %kw-exit-block
  %ptrtoint18 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint19 = add i64 %ptrtoint18, 7
  %entry-point-addr20 = inttoptr i64 %entry-point-addr-uint19 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point21 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr20, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point21({}* %19, i64 0, {}* null, {}* null, {}* null, {}* null)
          to label %normal-dest24 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest24:                                    ; preds = %normal-dest17
  %.elt65 = extractvalue { {}*, i64 } %29, 1
  switch i64 %.elt65, label %mvn9- [
    i64 0, label %mvn0-
    i64 1, label %mvn1-
    i64 2, label %mvn2-
    i64 3, label %mvn3-
    i64 4, label %mvn4-
    i64 5, label %mvn5-
    i64 6, label %mvn6-
    i64 7, label %mvn7-
    i64 8, label %mvn8-
  ]

mvn0-:                                            ; preds = %normal-dest24
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn1-:                                            ; preds = %normal-dest24
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn2-:                                            ; preds = %normal-dest24
  %gep = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %32 = load {}*, {}** %gep, align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %mvn-final

mvn3-:                                            ; preds = %normal-dest24
  %gep27 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %34 = load {}*, {}** %gep27, align 8
  %gep28 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %35 = load {}*, {}** %gep28, align 8
  br label %mvn-final

mvn4-:                                            ; preds = %normal-dest24
  %gep29 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %36 = load {}*, {}** %gep29, align 8
  %gep30 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %37 = load {}*, {}** %gep30, align 8
  br label %mvn-final

mvn5-:                                            ; preds = %normal-dest24
  %gep32 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %38 = load {}*, {}** %gep32, align 8
  %gep33 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %39 = load {}*, {}** %gep33, align 8
  br label %mvn-final

mvn6-:                                            ; preds = %normal-dest24
  %gep36 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %40 = load {}*, {}** %gep36, align 8
  %gep37 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %41 = load {}*, {}** %gep37, align 8
  br label %mvn-final

mvn7-:                                            ; preds = %normal-dest24
  %gep41 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %42 = load {}*, {}** %gep41, align 8
  %gep42 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %43 = load {}*, {}** %gep42, align 8
  br label %mvn-final

mvn8-:                                            ; preds = %normal-dest24
  %gep47 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %44 = load {}*, {}** %gep47, align 8
  %gep48 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %45 = load {}*, {}** %gep48, align 8
  br label %mvn-final

mvn9-:                                            ; preds = %normal-dest24
  %gep54 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  %46 = load {}*, {}** %gep54, align 8
  %gep55 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  %47 = load {}*, {}** %gep55, align 8
  br label %mvn-final

mvn-final:                                        ; preds = %mvn9-, %mvn8-, %mvn7-, %mvn6-, %mvn5-, %mvn4-, %mvn3-, %mvn2-, %mvn1-, %mvn0-
  %MINUTE290640.0 = phi {}* [ %46, %mvn9- ], [ %44, %mvn8- ], [ %42, %mvn7- ], [ %40, %mvn6- ], [ %38, %mvn5- ], [ %36, %mvn4- ], [ %34, %mvn3- ], [ %32, %mvn2- ], [ %31, %mvn1- ], [ %30, %mvn0- ]
  %STUNDE290641.0 = phi {}* [ %47, %mvn9- ], [ %45, %mvn8- ], [ %43, %mvn7- ], [ %41, %mvn6- ], [ %39, %mvn5- ], [ %37, %mvn4- ], [ %35, %mvn3- ], [ %33, %mvn2- ], [ %31, %mvn1- ], [ %30, %mvn0- ]
  %48 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 326), align 16
  %49 = invoke {}* @cc_safe_fdefinition({}* %48)
          to label %normal-dest63 unwind label %cleanup-lpad.loopexit.split-lp

normal-dest63:                                    ; preds = %mvn-final
  %50 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 954), align 16
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %52 = icmp eq {}* %uhrtext-p.0, %51
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 955), align 8
  %.val73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 956), align 16
  %G290700.0 = select i1 %52, {}* %.val, {}* %.val73
  %ptrtoint = ptrtoint {}* %49 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %53 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %49, i64 4, {}* %STUNDE290641.0, {}* %50, {}* %MINUTE290640.0, {}* %G290700.0)
          to label %normal-dest16 unwind label %cleanup-lpad.loopexit.split-lp
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^689^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !126 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^689^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag3:                                             ; preds = %normal-dest89, %normal-dest26, %header-check-br
  %G290742.0 = phi {}* [ %18, %header-check-br ], [ %G290742.1, %normal-dest26 ], [ %G290742.2, %normal-dest89 ]
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 209), align 8
  %ptrtoint29 = ptrtoint {}* %G290742.0 to i64
  %entry-point-addr-uint30 = add i64 %ptrtoint29, 7
  %entry-point-addr31 = inttoptr i64 %entry-point-addr-uint30 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point32 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr31, align 8
  %12 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point32({}* %G290742.0, i64 2, {}* %"closure->B=FUNKTIONSDEFINITION", {}* %11, {}* null, {}* null)
          to label %normal-dest35 unwind label %cleanup-lpad

tag4:                                             ; preds = %normal-dest10, %header-check-br13
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest82 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %tag4, %normal-dest67, %normal-dest61, %normal-dest54, %normal-dest48, %normal-dest41, %normal-dest35, %tag3, %normal-dest22, %maybe-more-tests21, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 209), align 8
  %"closure->B=FUNKTIONSDEFINITION" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23091, i64 689, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag4

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag3, label %header-check-br13

header-check-br13:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %21 = icmp ult i64 %.off123, 5
  br i1 %21, label %maybe-more-tests21, label %tag4

maybe-more-tests21:                               ; preds = %header-check-br13
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %23 = invoke {}* @cc_safe_fdefinition({}* %22)
          to label %normal-dest22 unwind label %cleanup-lpad

normal-dest22:                                    ; preds = %maybe-more-tests21
  %ptrtoint23 = ptrtoint {}* %23 to i64
  %entry-point-addr-uint = add i64 %ptrtoint23, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %24 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %23, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

normal-dest26:                                    ; preds = %normal-dest22
  %.elt118 = extractvalue { {}*, i64 } %24, 0
  %.elt120 = extractvalue { {}*, i64 } %24, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290742.1 = select i1 %cond95, {}* %25, {}* %.elt118
  br label %tag3

normal-dest35:                                    ; preds = %tag3
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %27 = invoke {}* @cc_safe_fdefinition({}* %26)
          to label %normal-dest41 unwind label %cleanup-lpad

normal-dest41:                                    ; preds = %normal-dest35
  %28 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 980), align 16
  %ptrtoint42 = ptrtoint {}* %27 to i64
  %entry-point-addr-uint43 = add i64 %ptrtoint42, 7
  %entry-point-addr44 = inttoptr i64 %entry-point-addr-uint43 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point45 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr44, align 8
  %29 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point45({}* %27, i64 2, {}* %"closure->B=FUNKTIONSDEFINITION", {}* %28, {}* null, {}* null)
          to label %normal-dest48 unwind label %cleanup-lpad

normal-dest48:                                    ; preds = %normal-dest41
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %31 = invoke {}* @cc_safe_fdefinition({}* %30)
          to label %normal-dest54 unwind label %cleanup-lpad

normal-dest54:                                    ; preds = %normal-dest48
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 986), align 16
  %ptrtoint55 = ptrtoint {}* %31 to i64
  %entry-point-addr-uint56 = add i64 %ptrtoint55, 7
  %entry-point-addr57 = inttoptr i64 %entry-point-addr-uint56 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point58 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr57, align 8
  %33 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point58({}* %31, i64 2, {}* %"closure->B=FUNKTIONSDEFINITION", {}* %32, {}* null, {}* null)
          to label %normal-dest61 unwind label %cleanup-lpad

normal-dest61:                                    ; preds = %normal-dest54
  %34 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %35 = invoke {}* @cc_safe_fdefinition({}* %34)
          to label %normal-dest67 unwind label %cleanup-lpad

normal-dest67:                                    ; preds = %normal-dest61
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 209), align 8
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 987), align 8
  %ptrtoint68 = ptrtoint {}* %35 to i64
  %entry-point-addr-uint69 = add i64 %ptrtoint68, 7
  %entry-point-addr70 = inttoptr i64 %entry-point-addr-uint69 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point71 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr70, align 8
  %39 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point71({}* %35, i64 3, {}* %36, {}* %37, {}* %38, {}* null)
          to label %normal-dest74 unwind label %cleanup-lpad

normal-dest74:                                    ; preds = %normal-dest67
  %40 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %40, {}* inttoptr (i64 2756 to {}*))
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 209), align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %42 = insertvalue { {}*, i64 } undef, {}* %41, 0
  %43 = insertvalue { {}*, i64 } %42, i64 1, 1
  ret { {}*, i64 } %43

normal-dest82:                                    ; preds = %tag4
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 979), align 8
  %ptrtoint83 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %14, i64 5, {}* %44, {}* %45, {}* %18, {}* %46, {}* %47)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt = extractvalue { {}*, i64 } %48, 0
  %.elt97 = extractvalue { {}*, i64 } %48, 1
  %cond = icmp eq i64 %.elt97, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290742.2 = select i1 %cond, {}* %49, {}* %.elt
  br label %tag3
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !127 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %enough-args = icmp slt i64 %nargs, 1
  br i1 %enough-args, label %error, label %continue

tag4:                                             ; preds = %normal-dest194
  %9 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 971), align 8
  %10 = invoke {}* @cc_safe_fdefinition({}* %9)
          to label %normal-dest121 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag6:                                             ; preds = %tag40
  %11 = ptrtoint {}* %.in631 to i64
  %12 = icmp eq {}* %leere-funktion-zurueck-p.0, %.in631
  br i1 %12, label %tag23, label %tag17

tag9:                                             ; preds = %tag21
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest129 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag12:                                            ; preds = %tag95
  %15 = icmp eq {}* %x233.0, %.val614
  %G290889.0 = select i1 %15, {}* %.val599, {}* %.val614
  %16 = icmp eq {}* %G290889.0, %.val614
  br i1 %16, label %tag28, label %tag89

tag14:                                            ; preds = %normal-dest121
  %.elt503 = extractvalue { {}*, i64 } %113, 0
  %.elt505 = extractvalue { {}*, i64 } %113, 1
  %cond479 = icmp eq i64 %.elt505, 0
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290941.1 = select i1 %cond479, {}* %17, {}* %.elt503
  %18 = icmp eq {}* %G290941.1, %17
  br i1 %18, label %tag40, label %tag35

tag16:                                            ; preds = %header-check-br306, %header-check-br306, %header-check-br306, %header-check-br306
  %19 = ptrtoint {}* %.in to i64
  %single-float-tag-only155 = and i64 %19, 7
  %20 = icmp eq i64 %single-float-tag-only155, 6
  br i1 %20, label %tag97, label %tag96

tag17:                                            ; preds = %tag6
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest157 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag20:                                            ; preds = %tag76
  %23 = icmp eq {}* %x.0, %74
  %.val605 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290794.0 = select i1 %23, {}* %.val605, {}* %74
  %24 = icmp eq {}* %G290794.0, %74
  br i1 %24, label %tag46, label %tag90

tag21:                                            ; preds = %tag90
  %25 = icmp eq {}* %x230.0, %.val610
  %G290774.0 = select i1 %25, {}* %.val607, {}* %.val610
  %26 = icmp eq {}* %G290774.0, %.val610
  br i1 %26, label %tag9, label %tag98

tag23:                                            ; preds = %tag6, %normal-dest476, %tag37, %normal-dest164
  %return-value.sroa.36.0 = phi i64 [ %.elt533, %normal-dest476 ], [ 1, %tag37 ], [ %.elt513, %normal-dest164 ], [ 1, %tag6 ]
  %return-value.sroa.0.0 = phi i64 [ %187, %normal-dest476 ], [ %49, %tag37 ], [ %123, %normal-dest164 ], [ %11, %tag6 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %27 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %28 = insertvalue { {}*, i64 } undef, {}* %27, 0
  %29 = insertvalue { {}*, i64 } %28, i64 %return-value.sroa.36.0, 1
  ret { {}*, i64 } %29

tag24:                                            ; preds = %tag55
  %30 = add i64 %65, 5
  %31 = inttoptr i64 %30 to {}**
  %32 = load {}*, {}** %31, align 8
  br label %tag76

tag26:                                            ; preds = %normal-dest339, %normal-dest392
  %G290710.0 = phi {}* [ %G290710.1, %normal-dest392 ], [ %160, %normal-dest339 ]
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 969), align 8
  %34 = invoke {}* @cc_safe_fdefinition({}* %33)
          to label %normal-dest187 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag27:                                            ; preds = %tag40
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 969), align 8
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest201 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag28:                                            ; preds = %tag12
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %38 = invoke {}* @cc_safe_fdefinition({}* %37)
          to label %normal-dest215 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag30:                                            ; preds = %tag76
  %39 = add i64 %75, 5
  %40 = inttoptr i64 %39 to {}**
  %41 = load {}*, {}** %40, align 8
  br label %tag90

tag34:                                            ; preds = %normal-dest287
  %42 = add i64 %147, 5
  %43 = inttoptr i64 %42 to {}**
  %44 = load {}*, {}** %43, align 8
  %.val600.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag95

tag35:                                            ; preds = %tag14
  %45 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 971), align 8
  %46 = invoke {}* @cc_safe_fdefinition({}* %45)
          to label %normal-dest235 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag36:                                            ; preds = %header-check-br, %header-check-br, %header-check-br, %header-check-br
  %47 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 217), align 8
  %48 = invoke {}* @cc_safe_fdefinition({}* %47)
          to label %normal-dest249 unwind label %cleanup-lpad.loopexit

tag37:                                            ; preds = %normal-dest208
  %49 = load i64, i64* bitcast ({}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 211) to i64*), align 8
  br label %tag23

tag40:                                            ; preds = %normal-dest194, %normal-dest242, %tag14
  %.in631 = phi {}* [ %17, %tag14 ], [ %137, %normal-dest242 ], [ %125, %normal-dest194 ]
  %FUNCTIONDEF.0 = phi {}* [ %G290710.0, %tag14 ], [ %FUNCTIONDEF.1, %normal-dest242 ], [ %G290710.0, %normal-dest194 ]
  %50 = icmp eq {}* %FUNCTIONDEF.0, %.in631
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290932.0 = select i1 %50, {}* %.val, {}* %.in631
  %51 = icmp eq {}* %G290932.0, %.in631
  br i1 %51, label %tag27, label %tag6

tag43:                                            ; preds = %tag52
  %52 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %53 = invoke {}* @cc_safe_fdefinition({}* %52)
          to label %normal-dest273 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag45:                                            ; preds = %normal-dest208
  %54 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %55 = invoke {}* @cc_safe_fdefinition({}* %54)
          to label %normal-dest287 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag46:                                            ; preds = %tag20
  %56 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %57 = invoke {}* @cc_safe_fdefinition({}* %56)
          to label %normal-dest293 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag52:                                            ; preds = %normal-dest287
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %59 = icmp eq {}* %FUNCTIONDEF.0, %58
  %.val597 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290909.0 = select i1 %59, {}* %.val597, {}* %58
  %60 = icmp eq {}* %G290909.0, %58
  br i1 %60, label %tag43, label %tag95

tag54:                                            ; preds = %tag90
  %61 = add i64 %84, -3
  %62 = inttoptr i64 %61 to {}**
  %63 = load {}*, {}** %62, align 8
  br label %tag98

tag55:                                            ; preds = %tag74, %normal-dest464, %normal-dest440
  %64 = phi {}* [ %179, %normal-dest440 ], [ %72, %tag74 ], [ %184, %normal-dest464 ]
  %x271.0 = phi {}* [ %179, %normal-dest440 ], [ %G290719.0, %tag74 ], [ %184, %normal-dest464 ]
  %65 = ptrtoint {}* %x271.0 to i64
  %tag-only321527 = and i64 %65, 7
  %consp-test322 = icmp eq i64 %tag-only321527, 3
  br i1 %consp-test322, label %tag24, label %tag65

tag61:                                            ; preds = %normal-dest373
  br i1 %or.cond594, label %header-check-br306, label %tag97

tag65:                                            ; preds = %tag55
  %66 = icmp eq {}* %x271.0, %64
  %.val603 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290810.0 = select i1 %66, {}* %.val603, {}* %64
  %67 = icmp eq {}* %G290810.0, %64
  br i1 %67, label %tag86, label %tag76

tag66:                                            ; preds = %tag66.lr.ph, %normal-dest464
  %"%ITERATOR290715.2625" = phi {}* [ %"%ITERATOR290715.2622", %tag66.lr.ph ], [ %"%ITERATOR290715.2", %normal-dest464 ]
  %68 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 597), align 8
  %69 = invoke {}* @cc_safe_fdefinition({}* %68)
          to label %normal-dest352 unwind label %cleanup-lpad.loopexit

tag67:                                            ; preds = %normal-dest339
  %70 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %71 = invoke {}* @cc_safe_fdefinition({}* %70)
          to label %normal-dest385 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag74:                                            ; preds = %normal-dest373, %normal-dest257
  %72 = phi {}* [ %139, %normal-dest257 ], [ %166, %normal-dest373 ]
  %G290822.0 = phi {}* [ %G290822.1, %normal-dest257 ], [ %.val611, %normal-dest373 ]
  %73 = icmp eq {}* %G290822.0, %72
  br i1 %73, label %tag97, label %tag55

tag76:                                            ; preds = %tag65, %normal-dest426, %tag24
  %74 = phi {}* [ %64, %tag24 ], [ %177, %normal-dest426 ], [ %64, %tag65 ]
  %x.0 = phi {}* [ %32, %tag24 ], [ %x.1, %normal-dest426 ], [ %64, %tag65 ]
  %75 = ptrtoint {}* %x.0 to i64
  %tag-only407528 = and i64 %75, 7
  %consp-test408 = icmp eq i64 %tag-only407528, 3
  br i1 %consp-test408, label %tag30, label %tag20

tag79:                                            ; preds = %tag95
  %76 = add i64 %86, -3
  %77 = inttoptr i64 %76 to {}**
  %78 = load {}*, {}** %77, align 8
  br label %tag89

tag86:                                            ; preds = %tag65
  %79 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %80 = invoke {}* @cc_safe_fdefinition({}* %79)
          to label %normal-dest419 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag89:                                            ; preds = %tag12, %normal-dest222, %tag79
  %G290763.0 = phi {}* [ %78, %tag79 ], [ %G290763.1, %normal-dest222 ], [ %.val614, %tag12 ]
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 975), align 8
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 592), align 16
  %83 = invoke {}* @cc_safe_fdefinition({}* %82)
          to label %normal-dest433 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

tag90:                                            ; preds = %tag20, %normal-dest300, %tag30
  %.val610 = phi {}* [ %74, %tag30 ], [ %153, %normal-dest300 ], [ %74, %tag20 ]
  %x230.0 = phi {}* [ %41, %tag30 ], [ %x230.1, %normal-dest300 ], [ %74, %tag20 ]
  %84 = ptrtoint {}* %x230.0 to i64
  %tag-only448529 = and i64 %84, 7
  %consp-test449 = icmp eq i64 %tag-only448529, 3
  %.val607 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290781.0 = select i1 %consp-test449, {}* %.val607, {}* %.val610
  %85 = icmp eq {}* %G290781.0, %.val610
  br i1 %85, label %tag21, label %tag54

tag95:                                            ; preds = %tag52, %normal-dest280, %tag34
  %.val614 = phi {}* [ %.val600.pre, %tag34 ], [ %145, %normal-dest280 ], [ %58, %tag52 ]
  %x233.0 = phi {}* [ %44, %tag34 ], [ %x233.1, %normal-dest280 ], [ %58, %tag52 ]
  %86 = ptrtoint {}* %x233.0 to i64
  %tag-only452522 = and i64 %86, 7
  %consp-test453 = icmp eq i64 %tag-only452522, 3
  %.val599 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290896.0 = select i1 %consp-test453, {}* %.val599, {}* %.val614
  %87 = icmp eq {}* %G290896.0, %.val614
  br i1 %87, label %tag12, label %tag79

tag96:                                            ; preds = %tag16
  %fixnum-tag-only454560 = and i64 %19, 3
  %fixnump-test455 = icmp ne i64 %fixnum-tag-only454560, 0
  %test = icmp eq i64 %single-float-tag-only155, 1
  %or.cond = and i1 %fixnump-test455, %test
  br i1 %or.cond, label %header-check-br, label %tag97

tag97:                                            ; preds = %header-check-br306, %header-check-br, %tag61, %tag16, %tag96, %tag74
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 599), align 8
  %89 = invoke {}* @cc_safe_fdefinition({}* %88)
          to label %normal-dest457 unwind label %cleanup-lpad.loopexit

tag98:                                            ; preds = %tag21, %normal-dest136, %tag54
  %G290764.0 = phi {}* [ %63, %tag54 ], [ %G290764.1, %normal-dest136 ], [ %.val610, %tag21 ]
  %ptrtoint470 = ptrtoint {}* %55 to i64
  %entry-point-addr-uint471 = add i64 %ptrtoint470, 7
  %entry-point-addr472 = inttoptr i64 %entry-point-addr-uint471 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point473 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr472, align 8
  %90 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point473({}* %55, i64 4, {}* %146, {}* %vaarg, {}* %G290763.0, {}* %G290764.0)
          to label %normal-dest476 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

cleanup-lpad.loopexit:                            ; preds = %tag36, %normal-dest249, %tag66, %normal-dest352, %normal-dest359, %normal-dest366, %tag97, %normal-dest457
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit:          ; preds = %loop-kw-args
  %lpad.loopexit615 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad.loopexit.split-lp.loopexit.split-lp: ; preds = %tag98, %normal-dest433, %tag89, %normal-dest419, %tag86, %normal-dest385, %tag67, %normal-dest332, %kw-exit-block, %normal-dest293, %tag46, %tag45, %normal-dest273, %tag43, %normal-dest235, %tag35, %normal-dest215, %tag28, %normal-dest201, %tag27, %normal-dest187, %tag26, %normal-dest157, %tag17, %normal-dest129, %tag9, %normal-dest121, %tag4, %loop-cont, %error
  %lpad.loopexit.split-lp616 = landingpad { i8*, i32 }
          cleanup
  br label %cleanup-lpad

cleanup-lpad:                                     ; preds = %cleanup-lpad.loopexit.split-lp.loopexit, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp, %cleanup-lpad.loopexit
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %cleanup-lpad.loopexit ], [ %lpad.loopexit615, %cleanup-lpad.loopexit.split-lp.loopexit ], [ %lpad.loopexit.split-lp616, %cleanup-lpad.loopexit.split-lp.loopexit.split-lp ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %lpad.phi

error:                                            ; preds = %entry
  invoke void @va_notEnoughArgumentsException(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @":::global-str-B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^", i64 0, i64 0), i64 %nargs, i64 1)
          to label %normal-dest unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

continue:                                         ; preds = %entry
  %rem-nargs = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1 = add i64 %rem-nargs, -1
  store i64 %rem-nargs-1, i64* %"remaining-nargs*", align 8
  %vaarg = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %91 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %92 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 433), align 8
  %94 = icmp eq i64 %nargs, 1
  br i1 %94, label %kw-exit-block, label %loop-kw-args.preheader

loop-kw-args.preheader:                           ; preds = %continue
  br label %loop-kw-args

normal-dest:                                      ; preds = %error
  call void @unreachableError()
  unreachable

loop-kw-args:                                     ; preds = %loop-kw-args.preheader, %advance-arg-idx-block
  %G290721.0 = phi {}* [ %G290721.2, %advance-arg-idx-block ], [ %92, %loop-kw-args.preheader ]
  %leere-funktion-zurueck-p.1 = phi {}* [ %leere-funktion-zurueck-p.3, %advance-arg-idx-block ], [ undef, %loop-kw-args.preheader ]
  %phi-saw-aok = phi i64 [ %phi-this-was-aok, %advance-arg-idx-block ], [ 0, %loop-kw-args.preheader ]
  %phi-reg-arg-idx = phi i64 [ %101, %advance-arg-idx-block ], [ 1, %loop-kw-args.preheader ]
  %phi-bad-kw-idx = phi i64 [ %phi.aok-bad-good.bad-kw-idx, %advance-arg-idx-block ], [ 65536, %loop-kw-args.preheader ]
  %rem-nargs104 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1105 = add i64 %rem-nargs104, -1
  store i64 %rem-nargs-1105, i64* %"remaining-nargs*", align 8
  %vaarg106 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  %rem-nargs107 = load i64, i64* %"remaining-nargs*", align 8
  %rem-nargs-1108 = add i64 %rem-nargs107, -1
  store i64 %rem-nargs-1108, i64* %"remaining-nargs*", align 8
  %vaarg109 = va_arg { i32, i32, i8*, i8* }* %"va-list*", {}*
  invoke void @cc_ifNotKeywordException({}* %vaarg106, i64 %phi-reg-arg-idx, { i32, i32, i8*, i8* }* nonnull %"va-list*", { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^^DESC")
          to label %normal-dest110 unwind label %cleanup-lpad.loopexit.split-lp.loopexit

kw-exit-block:                                    ; preds = %loop-cont.kw-exit-block_crit_edge, %continue
  %95 = phi {}* [ %92, %continue ], [ %.pre, %loop-cont.kw-exit-block_crit_edge ]
  %G290721.1 = phi {}* [ %92, %continue ], [ %G290721.2, %loop-cont.kw-exit-block_crit_edge ]
  %leere-funktion-zurueck-p.2 = phi {}* [ undef, %continue ], [ %leere-funktion-zurueck-p.3, %loop-cont.kw-exit-block_crit_edge ]
  %96 = icmp eq {}* %G290721.1, %95
  %leere-funktion-zurueck-p.0 = select i1 %96, {}* %95, {}* %leere-funktion-zurueck-p.2
  %97 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 207), align 8
  %98 = invoke {}* @cc_safe_fdefinition({}* %97)
          to label %normal-dest332 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont:                                        ; preds = %advance-arg-idx-block
  invoke void @cc_ifBadKeywordArgumentException(i64 %phi-this-was-aok, i64 %phi.aok-bad-good.bad-kw-idx, {}* %vaarg106, { { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* nonnull @"B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^^DESC")
          to label %loop-cont.kw-exit-block_crit_edge unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

loop-cont.kw-exit-block_crit_edge:                ; preds = %loop-cont
  %.pre = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %kw-exit-block

normal-dest110:                                   ; preds = %loop-kw-args
  %99 = icmp eq {}* %93, %vaarg106
  br i1 %99, label %aok-block, label %"kw-:LEERE-FUNKTION-ZURUECK-P-test"

aok-block:                                        ; preds = %normal-dest110
  %100 = call i64 @cc_allowOtherKeywords(i64 %phi-saw-aok, {}* %vaarg109)
  br label %advance-arg-idx-block

advance-arg-idx-block:                            ; preds = %matched-kw-block, %next-kw-block, %aok-block
  %G290721.2 = phi {}* [ %G290721.0, %aok-block ], [ %G290721.0, %next-kw-block ], [ %G290721.3, %matched-kw-block ]
  %leere-funktion-zurueck-p.3 = phi {}* [ %leere-funktion-zurueck-p.1, %aok-block ], [ %leere-funktion-zurueck-p.1, %next-kw-block ], [ %leere-funktion-zurueck-p.4, %matched-kw-block ]
  %phi-this-was-aok = phi i64 [ %100, %aok-block ], [ %phi-saw-aok, %next-kw-block ], [ %phi-saw-aok, %matched-kw-block ]
  %phi.aok-bad-good.bad-kw-idx = phi i64 [ %phi-bad-kw-idx, %aok-block ], [ %107, %next-kw-block ], [ %phi-bad-kw-idx, %matched-kw-block ]
  %101 = add i64 %phi-reg-arg-idx, 2
  %102 = icmp slt i64 %101, %nargs
  br i1 %102, label %loop-kw-args, label %loop-cont

"kw-:LEERE-FUNKTION-ZURUECK-P-test":              ; preds = %normal-dest110
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 990), align 16
  %104 = call i64 @cc_matchKeywordOnce({}* %103, {}* %vaarg106, {}* %G290721.0)
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %next-kw-block, label %matched-kw-block

matched-kw-block:                                 ; preds = %"kw-:LEERE-FUNKTION-ZURUECK-P-test"
  %106 = icmp eq i64 %104, 2
  %G290721.3 = select i1 %106, {}* %G290721.0, {}* %91
  %leere-funktion-zurueck-p.4 = select i1 %106, {}* %leere-funktion-zurueck-p.1, {}* %vaarg109
  br label %advance-arg-idx-block

next-kw-block:                                    ; preds = %"kw-:LEERE-FUNKTION-ZURUECK-P-test"
  %107 = call i64 @cc_trackFirstUnexpectedKeyword(i64 %phi-bad-kw-idx, i64 %phi-reg-arg-idx)
  br label %advance-arg-idx-block

header-check-br:                                  ; preds = %tag96
  %gep = getelementptr inbounds i8, i8* %167, i64 -9
  %irc-bit-cast113 = bitcast i8* %gep to i64*
  %108 = load i64, i64* %irc-bit-cast113, align 8
  %109 = add i64 %108, -1309
  %110 = lshr i64 %109, 3
  %111 = shl i64 %109, 61
  %112 = or i64 %110, %111
  switch i64 %112, label %tag97 [
    i64 2, label %tag36
    i64 4, label %tag36
    i64 5, label %tag36
    i64 0, label %tag36
  ]

normal-dest121:                                   ; preds = %tag4
  %ptrtoint122 = ptrtoint {}* %10 to i64
  %entry-point-addr-uint = add i64 %ptrtoint122, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %113 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %10, i64 1, {}* %G290710.0, {}* null, {}* null, {}* null)
          to label %tag14 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest129:                                   ; preds = %tag9
  %114 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %117 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint130 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint131 = add i64 %ptrtoint130, 7
  %entry-point-addr132 = inttoptr i64 %entry-point-addr-uint131 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point133 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr132, align 8
  %118 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point133({}* %14, i64 5, {}* %114, {}* %115, {}* %x230.0, {}* %116, {}* %117)
          to label %normal-dest136 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest136:                                   ; preds = %normal-dest129
  %.elt535 = extractvalue { {}*, i64 } %118, 0
  %.elt537 = extractvalue { {}*, i64 } %118, 1
  %cond483 = icmp eq i64 %.elt537, 0
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290764.1 = select i1 %cond483, {}* %119, {}* %.elt535
  br label %tag98

normal-dest157:                                   ; preds = %tag17
  %120 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 973), align 8
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %ptrtoint158 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint159 = add i64 %ptrtoint158, 7
  %entry-point-addr160 = inttoptr i64 %entry-point-addr-uint159 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point161 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr160, align 8
  %122 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point161({}* %22, i64 4, {}* %120, {}* %vaarg, {}* %121, {}* %121)
          to label %normal-dest164 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest164:                                   ; preds = %normal-dest157
  %.elt511 = extractvalue { {}*, i64 } %122, 0
  %123 = ptrtoint {}* %.elt511 to i64
  %.elt513 = extractvalue { {}*, i64 } %122, 1
  br label %tag23

normal-dest187:                                   ; preds = %tag26
  %ptrtoint188 = ptrtoint {}* %34 to i64
  %entry-point-addr-uint189 = add i64 %ptrtoint188, 7
  %entry-point-addr190 = inttoptr i64 %entry-point-addr-uint189 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point191 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr190, align 8
  %124 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point191({}* %34, i64 1, {}* %G290710.0, {}* null, {}* null, {}* null)
          to label %normal-dest194 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest194:                                   ; preds = %normal-dest187
  %.elt499 = extractvalue { {}*, i64 } %124, 0
  %.elt501 = extractvalue { {}*, i64 } %124, 1
  %cond478 = icmp eq i64 %.elt501, 0
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290946.0 = select i1 %cond478, {}* %125, {}* %.elt499
  %126 = icmp eq {}* %G290946.0, %125
  br i1 %126, label %tag40, label %tag4

normal-dest201:                                   ; preds = %tag27
  %ptrtoint202 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint203 = add i64 %ptrtoint202, 7
  %entry-point-addr204 = inttoptr i64 %entry-point-addr-uint203 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point205 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr204, align 8
  %127 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point205({}* %36, i64 1, {}* %FUNCTIONDEF.0, {}* null, {}* null, {}* null)
          to label %normal-dest208 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest208:                                   ; preds = %normal-dest201
  %.elt518 = extractvalue { {}*, i64 } %127, 0
  %.elt520 = extractvalue { {}*, i64 } %127, 1
  %cond481 = icmp eq i64 %.elt520, 0
  %128 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290918.0 = select i1 %cond481, {}* %128, {}* %.elt518
  %129 = icmp eq {}* %G290918.0, %128
  br i1 %129, label %tag45, label %tag37

normal-dest215:                                   ; preds = %tag28
  %130 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %131 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %132 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %133 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint216 = ptrtoint {}* %38 to i64
  %entry-point-addr-uint217 = add i64 %ptrtoint216, 7
  %entry-point-addr218 = inttoptr i64 %entry-point-addr-uint217 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point219 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr218, align 8
  %134 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point219({}* %38, i64 5, {}* %130, {}* %131, {}* %x233.0, {}* %132, {}* %133)
          to label %normal-dest222 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest222:                                   ; preds = %normal-dest215
  %.elt567 = extractvalue { {}*, i64 } %134, 0
  %.elt569 = extractvalue { {}*, i64 } %134, 1
  %cond490 = icmp eq i64 %.elt569, 0
  %135 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290763.1 = select i1 %cond490, {}* %135, {}* %.elt567
  br label %tag89

normal-dest235:                                   ; preds = %tag35
  %ptrtoint236 = ptrtoint {}* %46 to i64
  %entry-point-addr-uint237 = add i64 %ptrtoint236, 7
  %entry-point-addr238 = inttoptr i64 %entry-point-addr-uint237 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point239 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr238, align 8
  %136 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point239({}* %46, i64 1, {}* %G290710.0, {}* null, {}* null, {}* null)
          to label %normal-dest242 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest242:                                   ; preds = %normal-dest235
  %.elt507 = extractvalue { {}*, i64 } %136, 0
  %.elt509 = extractvalue { {}*, i64 } %136, 1
  %cond480 = icmp eq i64 %.elt509, 0
  %137 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %FUNCTIONDEF.1 = select i1 %cond480, {}* %137, {}* %.elt507
  br label %tag40

normal-dest249:                                   ; preds = %tag36
  %ptrtoint251 = ptrtoint {}* %48 to i64
  %entry-point-addr-uint252 = add i64 %ptrtoint251, 7
  %entry-point-addr253 = inttoptr i64 %entry-point-addr-uint252 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point254 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr253, align 8
  %138 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point254({}* %48, i64 2, {}* nonnull %81, {}* nonnull %.in, {}* null, {}* null)
          to label %normal-dest257 unwind label %cleanup-lpad.loopexit

normal-dest257:                                   ; preds = %normal-dest249
  %.elt563 = extractvalue { {}*, i64 } %138, 0
  %.elt565 = extractvalue { {}*, i64 } %138, 1
  %cond489 = icmp eq i64 %.elt565, 0
  %139 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290822.1 = select i1 %cond489, {}* %139, {}* %.elt563
  br label %tag74

normal-dest273:                                   ; preds = %tag43
  %140 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %141 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %142 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %143 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint274 = ptrtoint {}* %53 to i64
  %entry-point-addr-uint275 = add i64 %ptrtoint274, 7
  %entry-point-addr276 = inttoptr i64 %entry-point-addr-uint275 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point277 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr276, align 8
  %144 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point277({}* %53, i64 5, {}* %140, {}* %141, {}* %FUNCTIONDEF.0, {}* %142, {}* %143)
          to label %normal-dest280 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest280:                                   ; preds = %normal-dest273
  %.elt571 = extractvalue { {}*, i64 } %144, 0
  %.elt573 = extractvalue { {}*, i64 } %144, 1
  %cond491 = icmp eq i64 %.elt573, 0
  %145 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x233.1 = select i1 %cond491, {}* %145, {}* %.elt571
  br label %tag95

normal-dest287:                                   ; preds = %tag45
  %146 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 973), align 8
  %147 = ptrtoint {}* %FUNCTIONDEF.0 to i64
  %tag-only291521 = and i64 %147, 7
  %consp-test = icmp eq i64 %tag-only291521, 3
  br i1 %consp-test, label %tag34, label %tag52

normal-dest293:                                   ; preds = %tag46
  %148 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %149 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %150 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %151 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint294 = ptrtoint {}* %57 to i64
  %entry-point-addr-uint295 = add i64 %ptrtoint294, 7
  %entry-point-addr296 = inttoptr i64 %entry-point-addr-uint295 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point297 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr296, align 8
  %152 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point297({}* %57, i64 5, {}* %148, {}* %149, {}* %x.0, {}* %150, {}* %151)
          to label %normal-dest300 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest300:                                   ; preds = %normal-dest293
  %.elt539 = extractvalue { {}*, i64 } %152, 0
  %.elt541 = extractvalue { {}*, i64 } %152, 1
  %cond484 = icmp eq i64 %.elt541, 0
  %153 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x230.1 = select i1 %cond484, {}* %153, {}* %.elt539
  br label %tag90

header-check-br306:                               ; preds = %tag61
  %154 = load i64, i64* %irc-bit-cast312, align 8
  %155 = add i64 %154, -1309
  %156 = lshr i64 %155, 3
  %157 = shl i64 %155, 61
  %158 = or i64 %156, %157
  switch i64 %158, label %tag97 [
    i64 2, label %tag16
    i64 4, label %tag16
    i64 5, label %tag16
    i64 0, label %tag16
  ]

normal-dest332:                                   ; preds = %kw-exit-block
  %ptrtoint333 = ptrtoint {}* %98 to i64
  %entry-point-addr-uint334 = add i64 %ptrtoint333, 7
  %entry-point-addr335 = inttoptr i64 %entry-point-addr-uint334 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point336 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr335, align 8
  %159 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point336({}* %98, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest339 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest339:                                   ; preds = %normal-dest332
  %.elt = extractvalue { {}*, i64 } %159, 0
  %.elt493 = extractvalue { {}*, i64 } %159, 1
  %cond = icmp eq i64 %.elt493, 0
  %160 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290954.0 = select i1 %cond, {}* %160, {}* %.elt
  %161 = icmp eq {}* %G290954.0, %160
  br i1 %161, label %tag26, label %tag67

normal-dest352:                                   ; preds = %tag66
  %ptrtoint353 = ptrtoint {}* %69 to i64
  %entry-point-addr-uint354 = add i64 %ptrtoint353, 7
  %entry-point-addr355 = inttoptr i64 %entry-point-addr-uint354 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point356 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr355, align 8
  %162 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point356({}* %69, i64 2, {}* %FUNCTIONDEF.0, {}* %"%ITERATOR290715.2625", {}* null, {}* null)
          to label %normal-dest359 unwind label %cleanup-lpad.loopexit

normal-dest359:                                   ; preds = %normal-dest352
  %.elt547 = extractvalue { {}*, i64 } %162, 0
  %.elt549 = extractvalue { {}*, i64 } %162, 1
  %cond486 = icmp eq i64 %.elt549, 0
  %163 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290719.0 = select i1 %cond486, {}* %163, {}* %.elt547
  %164 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 90), align 16
  %"closure->LAMBDA" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %164, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"LAMBDA^COMMON-LISP^FN^^.17", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.17^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 23091, i64 689, i64 0, i64 0)
          to label %normal-dest366 unwind label %cleanup-lpad.loopexit

normal-dest366:                                   ; preds = %normal-dest359
  %ptrtoint367 = ptrtoint {}* %"closure->LAMBDA" to i64
  %entry-point-addr-uint368 = add i64 %ptrtoint367, 7
  %entry-point-addr369 = inttoptr i64 %entry-point-addr-uint368 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point370 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr369, align 8
  %165 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point370({}* %"closure->LAMBDA", i64 1, {}* %G290719.0, {}* null, {}* null, {}* null)
          to label %normal-dest373 unwind label %cleanup-lpad.loopexit

normal-dest373:                                   ; preds = %normal-dest366
  %.elt551 = extractvalue { {}*, i64 } %165, 0
  %.elt553 = extractvalue { {}*, i64 } %165, 1
  %cond487 = icmp eq i64 %.elt553, 0
  %166 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond487, {}* %166, {}* %.elt551
  %167 = bitcast {}* %.in to i8*
  %168 = icmp eq {}* %81, %.in
  %.val611 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290831.0 = select i1 %168, {}* %.val611, {}* %166
  %169 = icmp eq {}* %G290831.0, %166
  br i1 %169, label %tag61, label %tag74

normal-dest385:                                   ; preds = %tag67
  %ptrtoint386 = ptrtoint {}* %71 to i64
  %entry-point-addr-uint387 = add i64 %ptrtoint386, 7
  %entry-point-addr388 = inttoptr i64 %entry-point-addr-uint387 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point389 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr388, align 8
  %170 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point389({}* %71, i64 1, {}* %vaarg, {}* null, {}* null, {}* null)
          to label %normal-dest392 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest392:                                   ; preds = %normal-dest385
  %.elt495 = extractvalue { {}*, i64 } %170, 0
  %.elt497 = extractvalue { {}*, i64 } %170, 1
  %cond477 = icmp eq i64 %.elt497, 0
  %171 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290710.1 = select i1 %cond477, {}* %171, {}* %.elt495
  br label %tag26

normal-dest419:                                   ; preds = %tag86
  %172 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %173 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %174 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %175 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint420 = ptrtoint {}* %80 to i64
  %entry-point-addr-uint421 = add i64 %ptrtoint420, 7
  %entry-point-addr422 = inttoptr i64 %entry-point-addr-uint421 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point423 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr422, align 8
  %176 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point423({}* %80, i64 5, {}* %172, {}* %173, {}* %x271.0, {}* %174, {}* %175)
          to label %normal-dest426 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest426:                                   ; preds = %normal-dest419
  %.elt543 = extractvalue { {}*, i64 } %176, 0
  %.elt545 = extractvalue { {}*, i64 } %176, 1
  %cond485 = icmp eq i64 %.elt545, 0
  %177 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %x.1 = select i1 %cond485, {}* %177, {}* %.elt543
  br label %tag76

normal-dest433:                                   ; preds = %tag89
  %ptrtoint434 = ptrtoint {}* %83 to i64
  %entry-point-addr-uint435 = add i64 %ptrtoint434, 7
  %entry-point-addr436 = inttoptr i64 %entry-point-addr-uint435 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point437 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr436, align 8
  %178 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point437({}* %83, i64 2, {}* %FUNCTIONDEF.0, {}* null, {}* null, {}* null)
          to label %normal-dest440 unwind label %cleanup-lpad.loopexit.split-lp.loopexit.split-lp

normal-dest440:                                   ; preds = %normal-dest433
  %.elt555619 = extractvalue { {}*, i64 } %178, 0
  %.elt557620 = extractvalue { {}*, i64 } %178, 1
  %cond488621 = icmp eq i64 %.elt557620, 0
  %179 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %"%ITERATOR290715.2622" = select i1 %cond488621, {}* %179, {}* %.elt555619
  %180 = icmp eq {}* %"%ITERATOR290715.2622", %179
  %.val601623 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290871.0624 = select i1 %180, {}* %.val601623, {}* %179
  %181 = icmp eq {}* %G290871.0624, %179
  br i1 %181, label %tag66.lr.ph, label %tag55

tag66.lr.ph:                                      ; preds = %normal-dest440
  %182 = ptrtoint {}* %81 to i64
  %single-float-tag-only323 = and i64 %182, 7
  %fixnum-tag-only558 = and i64 %182, 3
  %fixnump-test = icmp ne i64 %fixnum-tag-only558, 0
  %test309 = icmp eq i64 %single-float-tag-only323, 1
  %or.cond594 = and i1 %fixnump-test, %test309
  %irc-bit-cast310 = bitcast {}* %81 to i8*
  %gep311 = getelementptr inbounds i8, i8* %irc-bit-cast310, i64 -9
  %irc-bit-cast312 = bitcast i8* %gep311 to i64*
  br label %tag66

normal-dest457:                                   ; preds = %tag97
  %ptrtoint458 = ptrtoint {}* %89 to i64
  %entry-point-addr-uint459 = add i64 %ptrtoint458, 7
  %entry-point-addr460 = inttoptr i64 %entry-point-addr-uint459 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point461 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr460, align 8
  %183 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point461({}* %89, i64 2, {}* %FUNCTIONDEF.0, {}* %"%ITERATOR290715.2625", {}* null, {}* null)
          to label %normal-dest464 unwind label %cleanup-lpad.loopexit

normal-dest464:                                   ; preds = %normal-dest457
  %.elt555 = extractvalue { {}*, i64 } %183, 0
  %.elt557 = extractvalue { {}*, i64 } %183, 1
  %cond488 = icmp eq i64 %.elt557, 0
  %184 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %"%ITERATOR290715.2" = select i1 %cond488, {}* %184, {}* %.elt555
  %185 = icmp eq {}* %"%ITERATOR290715.2", %184
  %.val601 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290871.0 = select i1 %185, {}* %.val601, {}* %184
  %186 = icmp eq {}* %G290871.0, %184
  br i1 %186, label %tag66, label %tag55

normal-dest476:                                   ; preds = %tag98
  %.elt531 = extractvalue { {}*, i64 } %90, 0
  %187 = ptrtoint {}* %.elt531 to i64
  %.elt533 = extractvalue { {}*, i64 } %90, 1
  br label %tag23
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"LAMBDA^COMMON-LISP^FN^^.17"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !128 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  switch i64 %nargs, label %10 [
    i64 0, label %9
    i64 1, label %normal-dest
  ]

; <label>:9:                                      ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.17^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %9
  unreachable

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"LAMBDA^COMMON-LISP^FN^^.17^DESC" to %0*)) #7
          to label %.noexc56 unwind label %cleanup-lpad

.noexc56:                                         ; preds = %10
  unreachable

tag1:                                             ; preds = %tag5
  %11 = add i64 %28, -3
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 8
  br label %tag8

tag5:                                             ; preds = %normal-dest20
  %tag-only48 = and i64 %28, 7
  %consp-test = icmp eq i64 %tag-only48, 3
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G290858.0 = select i1 %consp-test, {}* %.val, {}* %26
  %14 = icmp eq {}* %G290858.0, %26
  br i1 %14, label %tag6, label %tag1

tag6:                                             ; preds = %tag5
  %15 = icmp eq {}* %26, %farg0
  %G290850.0 = select i1 %15, {}* %.val, {}* %26
  %16 = icmp eq {}* %G290850.0, %26
  br i1 %16, label %tag11, label %tag8

tag8:                                             ; preds = %tag6, %normal-dest20, %normal-dest45, %tag1
  %return-value.sroa.7.0 = phi i64 [ %.elt55, %normal-dest45 ], [ 1, %tag1 ], [ 1, %normal-dest20 ], [ 1, %tag6 ]
  %return-value.sroa.0.0 = phi i64 [ %35, %normal-dest45 ], [ %13, %tag1 ], [ %28, %normal-dest20 ], [ %29, %tag6 ]
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %17 = inttoptr i64 %return-value.sroa.0.0 to {}*
  %18 = insertvalue { {}*, i64 } undef, {}* %17, 0
  %19 = insertvalue { {}*, i64 } %18, i64 %return-value.sroa.7.0, 1
  ret { {}*, i64 } %19

tag11:                                            ; preds = %tag6
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %21 = invoke {}* @cc_safe_fdefinition({}* %20)
          to label %normal-dest38 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %9, %normal-dest38, %tag11, %normal-dest17, %normal-dest
  %22 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %22

normal-dest:                                      ; preds = %entry
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 977), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest
  %ptrtoint = ptrtoint {}* %24 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %24, i64 1, {}* %farg0, {}* null, {}* null, {}* null)
          to label %normal-dest20 unwind label %cleanup-lpad

normal-dest20:                                    ; preds = %normal-dest17
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt47 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt47, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290862.0 = select i1 %cond, {}* %26, {}* %.elt
  %27 = icmp eq {}* %G290862.0, %26
  %28 = ptrtoint {}* %farg0 to i64
  %29 = ptrtoint {}* %26 to i64
  br i1 %27, label %tag8, label %tag5

normal-dest38:                                    ; preds = %tag11
  %30 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %32 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %ptrtoint39 = ptrtoint {}* %21 to i64
  %entry-point-addr-uint40 = add i64 %ptrtoint39, 7
  %entry-point-addr41 = inttoptr i64 %entry-point-addr-uint40 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point42 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr41, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point42({}* %21, i64 5, {}* %30, {}* %31, {}* %farg0, {}* %32, {}* %33)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest38
  %.elt53 = extractvalue { {}*, i64 } %34, 0
  %35 = ptrtoint {}* %.elt53 to i64
  %.elt55 = extractvalue { {}*, i64 } %34, 1
  br label %tag8
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"funktionenclisp.lisp^716^TOP-COMPILE-FILE"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !129 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %nargs)
  %9 = icmp eq i64 %nargs, 0
  br i1 %9, label %normal-dest, label %10

; <label>:10:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 0, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"funktionenclisp.lisp^716^TOP-COMPILE-FILE^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %10
  unreachable

tag:                                              ; preds = %normal-dest10, %header-check-br72
  %11 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %12 = invoke {}* @cc_safe_fdefinition({}* %11)
          to label %normal-dest13 unwind label %cleanup-lpad

tag1:                                             ; preds = %normal-dest89, %normal-dest17, %header-check-br
  %G290983.0 = phi {}* [ %18, %header-check-br ], [ %G290983.1, %normal-dest17 ], [ %G290983.2, %normal-dest89 ]
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 998), align 16
  %ptrtoint20 = ptrtoint {}* %G290983.0 to i64
  %entry-point-addr-uint21 = add i64 %ptrtoint20, 7
  %entry-point-addr22 = inttoptr i64 %entry-point-addr-uint21 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point23 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr22, align 8
  %14 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point23({}* %G290983.0, i64 2, {}* %"closure->B=LESE-ERSTES-WORT-AUS-STRING", {}* %13, {}* null, {}* null)
          to label %normal-dest26 unwind label %cleanup-lpad

cleanup-lpad:                                     ; preds = %10, %normal-dest82, %maybe-more-tests80, %normal-dest58, %normal-dest52, %normal-dest45, %normal-dest39, %normal-dest32, %normal-dest26, %tag1, %normal-dest13, %tag, %normal-dest9, %normal-dest
  %15 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %15

normal-dest:                                      ; preds = %entry
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 998), align 16
  %"closure->B=LESE-ERSTES-WORT-AUS-STRING" = invoke {}* ({}*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*, i32*, i64, i64, i64, i64, ...) @cc_enclose({}* %16, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^", i8* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^^DESC" to i8*), i32* nonnull @source-file-info-handle, i64 24228, i64 716, i64 0, i64 0)
          to label %normal-dest9 unwind label %cleanup-lpad

normal-dest9:                                     ; preds = %normal-dest
  %17 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 9), align 8
  %18 = invoke {}* @cc_safe_setfdefinition({}* %17)
          to label %normal-dest10 unwind label %cleanup-lpad

normal-dest10:                                    ; preds = %normal-dest9
  %ptrtoint = ptrtoint {}* %18 to i64
  %tag-only = and i64 %ptrtoint, 7
  %test = icmp eq i64 %tag-only, 1
  br i1 %test, label %header-check-br, label %tag

header-check-br:                                  ; preds = %normal-dest10
  %irc-bit-cast11 = bitcast {}* %18 to i8*
  %gep = getelementptr inbounds i8, i8* %irc-bit-cast11, i64 -9
  %irc-bit-cast12 = bitcast i8* %gep to i64*
  %19 = load i64, i64* %irc-bit-cast12, align 8
  %.off = add i64 %19, -913
  %20 = icmp ult i64 %.off, 85
  br i1 %20, label %tag1, label %header-check-br72

normal-dest13:                                    ; preds = %tag
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 19), align 8
  %22 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 21), align 8
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 25), align 8
  %24 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 997), align 8
  %ptrtoint14 = ptrtoint {}* %12 to i64
  %entry-point-addr-uint = add i64 %ptrtoint14, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %25 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %12, i64 5, {}* %21, {}* %22, {}* %18, {}* %23, {}* %24)
          to label %normal-dest17 unwind label %cleanup-lpad

normal-dest17:                                    ; preds = %normal-dest13
  %.elt = extractvalue { {}*, i64 } %25, 0
  %.elt97 = extractvalue { {}*, i64 } %25, 1
  %cond = icmp eq i64 %.elt97, 0
  %26 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290983.1 = select i1 %cond, {}* %26, {}* %.elt
  br label %tag1

normal-dest26:                                    ; preds = %tag1
  %27 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 32), align 16
  %28 = invoke {}* @cc_safe_fdefinition({}* %27)
          to label %normal-dest32 unwind label %cleanup-lpad

normal-dest32:                                    ; preds = %normal-dest26
  %29 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 1000), align 16
  %ptrtoint33 = ptrtoint {}* %28 to i64
  %entry-point-addr-uint34 = add i64 %ptrtoint33, 7
  %entry-point-addr35 = inttoptr i64 %entry-point-addr-uint34 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point36 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr35, align 8
  %30 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point36({}* %28, i64 2, {}* %"closure->B=LESE-ERSTES-WORT-AUS-STRING", {}* %29, {}* null, {}* null)
          to label %normal-dest39 unwind label %cleanup-lpad

normal-dest39:                                    ; preds = %normal-dest32
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 39), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest45 unwind label %cleanup-lpad

normal-dest45:                                    ; preds = %normal-dest39
  %33 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 1001), align 8
  %ptrtoint46 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint47 = add i64 %ptrtoint46, 7
  %entry-point-addr48 = inttoptr i64 %entry-point-addr-uint47 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point49 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr48, align 8
  %34 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point49({}* %32, i64 2, {}* %"closure->B=LESE-ERSTES-WORT-AUS-STRING", {}* %33, {}* null, {}* null)
          to label %normal-dest52 unwind label %cleanup-lpad

normal-dest52:                                    ; preds = %normal-dest45
  %35 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 156), align 16
  %36 = invoke {}* @cc_safe_fdefinition({}* %35)
          to label %normal-dest58 unwind label %cleanup-lpad

normal-dest58:                                    ; preds = %normal-dest52
  %37 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 998), align 16
  %38 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %39 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 1002), align 16
  %ptrtoint59 = ptrtoint {}* %36 to i64
  %entry-point-addr-uint60 = add i64 %ptrtoint59, 7
  %entry-point-addr61 = inttoptr i64 %entry-point-addr-uint60 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point62 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr61, align 8
  %40 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point62({}* %36, i64 3, {}* %37, {}* %38, {}* %39, {}* null)
          to label %normal-dest65 unwind label %cleanup-lpad

normal-dest65:                                    ; preds = %normal-dest58
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 44), align 16
  call void @cc_setSymbolValue({}* %41, {}* inttoptr (i64 2880 to {}*))
  %42 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 998), align 16
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %43 = insertvalue { {}*, i64 } undef, {}* %42, 0
  %44 = insertvalue { {}*, i64 } %43, i64 1, 1
  ret { {}*, i64 } %44

header-check-br72:                                ; preds = %header-check-br
  %.off123 = add i64 %19, -1001
  %45 = icmp ult i64 %.off123, 5
  br i1 %45, label %maybe-more-tests80, label %tag

maybe-more-tests80:                               ; preds = %header-check-br72
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 15), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest82 unwind label %cleanup-lpad

normal-dest82:                                    ; preds = %maybe-more-tests80
  %ptrtoint83 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint84 = add i64 %ptrtoint83, 7
  %entry-point-addr85 = inttoptr i64 %entry-point-addr-uint84 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point86 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr85, align 8
  %48 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point86({}* %47, i64 1, {}* nonnull %18, {}* null, {}* null, {}* null)
          to label %normal-dest89 unwind label %cleanup-lpad

normal-dest89:                                    ; preds = %normal-dest82
  %.elt118 = extractvalue { {}*, i64 } %48, 0
  %.elt120 = extractvalue { {}*, i64 } %48, 1
  %cond95 = icmp eq i64 %.elt120, 0
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G290983.2 = select i1 %cond95, {}* %49, {}* %.elt118
  br label %tag1
}

; Function Attrs: ssp uwtable
define internal { {}*, i64 } @"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^"({}* %closure-ptr, i64 %nargs, {}* %farg0, {}* %farg1, {}* %farg2, {}* %farg3, ...) #2 personality i32 (...)* @__gxx_personality_v0 !dbg !130 {
entry:
  %vaslist = alloca { { i32, i32, i8*, i8* }, i64 }, align 8
  %register-save-area = alloca [6 x i8*], align 8
  %invocation-history-frame = alloca <{ i8*, { i32, i32, i8*, i8* }, i64 }>, align 8
  %vaslist-tagged-uint = ptrtoint { { i32, i32, i8*, i8* }, i64 }* %vaslist to i64
  %"va-list*" = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0
  %"remaining-nargs*-uint" = add i64 %vaslist-tagged-uint, 24
  %"remaining-nargs*" = inttoptr i64 %"remaining-nargs*-uint" to i64*
  %0 = bitcast [6 x i8*]* %register-save-area to {}**
  store {}* %closure-ptr, {}** %0, align 8
  %inttoptr = inttoptr i64 %nargs to i8*
  %addr1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 1
  store i8* %inttoptr, i8** %addr1, align 8
  %addr2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 2
  %1 = bitcast i8** %addr2 to {}**
  store {}* %farg0, {}** %1, align 8
  %addr3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 3
  %2 = bitcast i8** %addr3 to {}**
  store {}* %farg1, {}** %2, align 8
  %addr4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 4
  %3 = bitcast i8** %addr4 to {}**
  store {}* %farg2, {}** %3, align 8
  %addr5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 5
  %4 = bitcast i8** %addr5 to {}**
  store {}* %farg3, {}** %4, align 8
  %irc-bit-cast = bitcast { { i32, i32, i8*, i8* }, i64 }* %vaslist to i8*
  call void @llvm.va_start(i8* nonnull %irc-bit-cast)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %register-save-area, i64 0, i64 0
  %6 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 3
  %7 = bitcast i8** %6 to i8***
  store i8** %5, i8*** %7, align 8, !tbaa !14
  %8 = getelementptr inbounds { { i32, i32, i8*, i8* }, i64 }, { { i32, i32, i8*, i8* }, i64 }* %vaslist, i64 0, i32 0, i32 0
  store i32 16, i32* %8, align 8, !tbaa !20
  store i64 %nargs, i64* %"remaining-nargs*", align 8, !tbaa !21
  %9 = call [0 x {}*]* @cc_multipleValuesArrayAddress()
  %10 = load i64, i64* %"remaining-nargs*", align 8
  call void @cc_push_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame, { i32, i32, i8*, i8* }* nonnull %"va-list*", i64 %10)
  switch i64 %nargs, label %12 [
    i64 0, label %11
    i64 1, label %normal-dest
  ]

; <label>:11:                                     ; preds = %entry
  invoke void @cc_error_too_few_arguments(i64 0, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc unwind label %cleanup-lpad

.noexc:                                           ; preds = %11
  unreachable

; <label>:12:                                     ; preds = %entry
  invoke void @cc_error_too_many_arguments(i64 %nargs, i64 1, %0* bitcast ({ { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { i8*, i8*, i64 }*, i32*, i64, i64, i64, i64, i64, i64 }* @"B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^^DESC" to %0*)) #7
          to label %.noexc492 unwind label %cleanup-lpad

.noexc492:                                        ; preds = %12
  unreachable

tag4:                                             ; preds = %tag31
  %13 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %14 = invoke {}* @cc_safe_fdefinition({}* %13)
          to label %normal-dest97 unwind label %cleanup-lpad

tag5:                                             ; preds = %normal-dest386
  %15 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag54

tag6:                                             ; preds = %normal-dest157
  %16 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %17 = invoke {}* @cc_safe_fdefinition({}* %16)
          to label %normal-dest113 unwind label %cleanup-lpad

tag15:                                            ; preds = %tag38
  %18 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %19 = invoke {}* @cc_safe_fdefinition({}* %18)
          to label %normal-dest143 unwind label %cleanup-lpad

tag16:                                            ; preds = %normal-dest386
  %20 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag54

tag17:                                            ; preds = %tag30, %header-check-br338, %tag52, %tag48, %header-check-br229, %tag21
  %21 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 662), align 16
  %22 = invoke {}* @cc_safe_fdefinition({}* %21)
          to label %normal-dest163 unwind label %cleanup-lpad

tag18:                                            ; preds = %normal-dest111
  %23 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %24 = invoke {}* @cc_safe_fdefinition({}* %23)
          to label %normal-dest179 unwind label %cleanup-lpad

tag19:                                            ; preds = %normal-dest206
  %25 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  br label %tag54

tag21:                                            ; preds = %tag27
  %26 = ptrtoint {}* %.in452 to i64
  %fixnum-tag-only193453 = and i64 %26, 3
  %fixnump-test194 = icmp eq i64 %fixnum-tag-only193453, 0
  br i1 %fixnump-test194, label %tag55, label %tag17

tag25:                                            ; preds = %tag48
  %27 = invoke float @from_object_float({}* %.in)
          to label %normal-dest205 unwind label %cleanup-lpad

tag27:                                            ; preds = %normal-dest87
  %28 = ptrtoint {}* %.in to i64
  %fixnum-tag-only210427 = and i64 %28, 3
  %fixnump-test211 = icmp eq i64 %fixnum-tag-only210427, 0
  br i1 %fixnump-test211, label %tag21, label %tag30

tag30:                                            ; preds = %tag27
  %trunc = trunc i64 %28 to i3
  switch i3 %trunc, label %tag17 [
    i3 -2, label %tag48
    i3 1, label %header-check-br229
  ]

tag31:                                            ; preds = %normal-dest87
  br i1 %78, label %tag38, label %tag4

tag34:                                            ; preds = %normal-dest286, %normal-dest361, %normal-dest325, %normal-dest298
  %FOLGEZEICHEN.0 = phi {}* [ inttoptr (i64 82 to {}*), %normal-dest298 ], [ inttoptr (i64 258 to {}*), %normal-dest325 ], [ %FOLGEZEICHEN.1, %normal-dest361 ], [ %63, %normal-dest286 ]
  %WORT.0 = phi {}* [ %WORT.2, %normal-dest298 ], [ %WORT.1, %normal-dest325 ], [ %WORT.3, %normal-dest361 ], [ %.farg0, %normal-dest286 ]
  %STR.0 = phi {}* [ %STR.1, %normal-dest298 ], [ %STR.2, %normal-dest325 ], [ %STR.3, %normal-dest361 ], [ %farg0., %normal-dest286 ]
  %gep227 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 1
  store {}* %STR.0, {}** %gep227, align 8
  %gep228 = getelementptr inbounds [0 x {}*], [0 x {}*]* %9, i64 0, i64 2
  store {}* %FOLGEZEICHEN.0, {}** %gep228, align 8
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  %29 = insertvalue { {}*, i64 } undef, {}* %WORT.0, 0
  %30 = insertvalue { {}*, i64 } %29, i64 3, 1
  ret { {}*, i64 } %30

tag37:                                            ; preds = %tag41
  %31 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %32 = invoke {}* @cc_safe_fdefinition({}* %31)
          to label %normal-dest237 unwind label %cleanup-lpad

tag38:                                            ; preds = %tag31
  %33 = icmp eq {}* %.in452, %.in
  br i1 %33, label %tag45, label %tag15

tag41:                                            ; preds = %normal-dest273
  %34 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %106, i64 4)
  %result = extractvalue { i64, i1 } %34, 0
  %overflow = extractvalue { i64, i1 } %34, 1
  %35 = inttoptr i64 %result to {}*
  br i1 %overflow, label %tag37, label %tag59

tag45:                                            ; preds = %tag38
  %36 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %37 = invoke {}* @cc_safe_fdefinition({}* %36)
          to label %normal-dest279 unwind label %cleanup-lpad

tag46:                                            ; preds = %normal-dest399, %normal-dest122, %tag65
  %G291015.0 = phi {}* [ %57, %tag65 ], [ %G291015.1, %normal-dest122 ], [ %G291015.2, %normal-dest399 ]
  %ptrtoint292 = ptrtoint {}* %90 to i64
  %entry-point-addr-uint293 = add i64 %ptrtoint292, 7
  %entry-point-addr294 = inttoptr i64 %entry-point-addr-uint293 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point295 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr294, align 8
  %38 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point295({}* %90, i64 2, {}* %farg0, {}* %G291015.0, {}* null, {}* null)
          to label %normal-dest298 unwind label %cleanup-lpad

tag48:                                            ; preds = %tag30
  %39 = ptrtoint {}* %.in452 to i64
  %single-float-tag-only304 = and i64 %39, 7
  %40 = icmp eq i64 %single-float-tag-only304, 6
  br i1 %40, label %tag25, label %tag17

tag49:                                            ; preds = %normal-dest273
  %41 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 379), align 8
  %42 = invoke {}* @cc_safe_fdefinition({}* %41)
          to label %normal-dest306 unwind label %cleanup-lpad

tag50:                                            ; preds = %normal-dest378, %normal-dest186, %tag64
  %G291052.0 = phi {}* [ %55, %tag64 ], [ %G291052.1, %normal-dest186 ], [ %G291052.2, %normal-dest378 ]
  %ptrtoint319 = ptrtoint {}* %83 to i64
  %entry-point-addr-uint320 = add i64 %ptrtoint319, 7
  %entry-point-addr321 = inttoptr i64 %entry-point-addr-uint320 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point322 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr321, align 8
  %43 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point322({}* %83, i64 2, {}* %farg0, {}* %G291052.0, {}* null, {}* null)
          to label %normal-dest325 unwind label %cleanup-lpad

tag52:                                            ; preds = %header-check-br229
  %ptrtoint339 = ptrtoint {}* %.in452 to i64
  %tag-only340 = and i64 %ptrtoint339, 7
  %test341 = icmp eq i64 %tag-only340, 1
  br i1 %test341, label %header-check-br338, label %tag17

tag54:                                            ; preds = %tag55, %normal-dest172, %tag67, %tag19, %tag16, %tag5
  %G291122.0 = phi {}* [ %60, %tag67 ], [ %25, %tag19 ], [ %15, %tag5 ], [ %20, %tag16 ], [ %G291122.1, %normal-dest172 ], [ %., %tag55 ]
  %44 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %45 = icmp eq {}* %G291122.0, %44
  %POS.0 = select i1 %45, {}* %.in452, {}* %.in
  %FOLGEZEICHEN.1 = select i1 %45, {}* inttoptr (i64 82 to {}*), {}* inttoptr (i64 258 to {}*)
  %46 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %47 = invoke {}* @cc_safe_fdefinition({}* %46)
          to label %normal-dest259 unwind label %cleanup-lpad

tag55:                                            ; preds = %tag21
  %48 = icmp slt {}* %.in, %.in452
  %49 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %. = select i1 %48, {}* %49, {}* %76
  br label %tag54

tag59:                                            ; preds = %normal-dest313, %normal-dest245, %tag41
  %G291089.0 = phi {}* [ %35, %tag41 ], [ %G291089.1, %normal-dest245 ], [ %G291089.2, %normal-dest313 ]
  %ptrtoint355 = ptrtoint {}* %105 to i64
  %entry-point-addr-uint356 = add i64 %ptrtoint355, 7
  %entry-point-addr357 = inttoptr i64 %entry-point-addr-uint356 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point358 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr357, align 8
  %50 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point358({}* %105, i64 2, {}* %farg0, {}* %G291089.0, {}* null, {}* null)
          to label %normal-dest361 unwind label %cleanup-lpad

tag61:                                            ; preds = %tag64
  %51 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %52 = invoke {}* @cc_safe_fdefinition({}* %51)
          to label %normal-dest371 unwind label %cleanup-lpad

tag63:                                            ; preds = %header-check-br338
  %53 = invoke double @from_object_double({}* nonnull %.in)
          to label %normal-dest385 unwind label %cleanup-lpad

tag64:                                            ; preds = %normal-dest111
  %54 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %84, i64 4)
  %result387 = extractvalue { i64, i1 } %54, 0
  %overflow388 = extractvalue { i64, i1 } %54, 1
  %55 = inttoptr i64 %result387 to {}*
  br i1 %overflow388, label %tag61, label %tag50

tag65:                                            ; preds = %normal-dest157
  %56 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %91, i64 4)
  %result389 = extractvalue { i64, i1 } %56, 0
  %overflow390 = extractvalue { i64, i1 } %56, 1
  %57 = inttoptr i64 %result389 to {}*
  br i1 %overflow390, label %tag66, label %tag46

tag66:                                            ; preds = %tag65
  %58 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 377), align 8
  %59 = invoke {}* @cc_safe_fdefinition({}* %58)
          to label %normal-dest392 unwind label %cleanup-lpad

tag67:                                            ; preds = %normal-dest206
  %60 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  br label %tag54

cleanup-lpad:                                     ; preds = %12, %11, %normal-dest392, %tag66, %normal-dest385, %tag63, %normal-dest371, %tag61, %tag59, %tag50, %normal-dest306, %tag49, %tag46, %normal-dest279, %tag45, %normal-dest266, %normal-dest259, %tag54, %normal-dest237, %tag37, %normal-dest205, %tag25, %normal-dest179, %tag18, %normal-dest163, %tag17, %normal-dest150, %normal-dest143, %tag15, %normal-dest113, %tag6, %normal-dest104, %normal-dest97, %tag4, %normal-dest80, %normal-dest76, %normal-dest73, %normal-dest
  %61 = landingpad { i8*, i32 }
          cleanup
  call void @cc_pop_InvocationHistoryFrame({}* %closure-ptr, <{ i8*, { i32, i32, i8*, i8* }, i64 }>* nonnull %invocation-history-frame)
  resume { i8*, i32 } %61

normal-dest:                                      ; preds = %entry
  %62 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 994), align 16
  %63 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %64 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 563), align 8
  %65 = invoke {}* @cc_safe_fdefinition({}* %64)
          to label %normal-dest73 unwind label %cleanup-lpad

normal-dest73:                                    ; preds = %normal-dest
  %66 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %67 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %ptrtoint = ptrtoint {}* %65 to i64
  %entry-point-addr-uint = add i64 %ptrtoint, 7
  %entry-point-addr = inttoptr i64 %entry-point-addr-uint to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr, align 8
  %68 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point({}* %65, i64 4, {}* inttoptr (i64 258 to {}*), {}* %farg0, {}* %66, {}* %67)
          to label %normal-dest76 unwind label %cleanup-lpad

normal-dest76:                                    ; preds = %normal-dest73
  %.elt = extractvalue { {}*, i64 } %68, 0
  %.elt422 = extractvalue { {}*, i64 } %68, 1
  %cond = icmp eq i64 %.elt422, 0
  %69 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in = select i1 %cond, {}* %69, {}* %.elt
  %70 = bitcast {}* %.in to i8*
  %71 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 563), align 8
  %72 = invoke {}* @cc_safe_fdefinition({}* %71)
          to label %normal-dest80 unwind label %cleanup-lpad

normal-dest80:                                    ; preds = %normal-dest76
  %73 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 515), align 8
  %74 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 483), align 8
  %ptrtoint81 = ptrtoint {}* %72 to i64
  %entry-point-addr-uint82 = add i64 %ptrtoint81, 7
  %entry-point-addr83 = inttoptr i64 %entry-point-addr-uint82 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point84 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr83, align 8
  %75 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point84({}* %72, i64 4, {}* inttoptr (i64 82 to {}*), {}* %farg0, {}* %73, {}* %74)
          to label %normal-dest87 unwind label %cleanup-lpad

normal-dest87:                                    ; preds = %normal-dest80
  %.elt424 = extractvalue { {}*, i64 } %75, 0
  %.elt426 = extractvalue { {}*, i64 } %75, 1
  %cond406 = icmp eq i64 %.elt426, 0
  %76 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %.in452 = select i1 %cond406, {}* %76, {}* %.elt424
  %77 = bitcast {}* %.in452 to i8*
  %78 = icmp eq {}* %.in, %76
  %G291145.0 = select i1 %78, {}* %76, {}* %.in452
  %79 = icmp eq {}* %G291145.0, %76
  br i1 %79, label %tag31, label %tag27

normal-dest97:                                    ; preds = %tag4
  %ptrtoint98 = ptrtoint {}* %14 to i64
  %entry-point-addr-uint99 = add i64 %ptrtoint98, 7
  %entry-point-addr100 = inttoptr i64 %entry-point-addr-uint99 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point101 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr100, align 8
  %80 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point101({}* %14, i64 3, {}* %farg0, {}* null, {}* %.in, {}* null)
          to label %normal-dest104 unwind label %cleanup-lpad

normal-dest104:                                   ; preds = %normal-dest97
  %.elt455 = extractvalue { {}*, i64 } %80, 0
  %.elt457 = extractvalue { {}*, i64 } %80, 1
  %cond412 = icmp eq i64 %.elt457, 0
  %81 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %WORT.1 = select i1 %cond412, {}* %81, {}* %.elt455
  %82 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %83 = invoke {}* @cc_safe_fdefinition({}* %82)
          to label %normal-dest111 unwind label %cleanup-lpad

normal-dest111:                                   ; preds = %normal-dest104
  %84 = ptrtoint {}* %.in to i64
  %fixnum-tag-only253458 = and i64 %84, 3
  %fixnump-test254 = icmp eq i64 %fixnum-tag-only253458, 0
  br i1 %fixnump-test254, label %tag64, label %tag18

normal-dest113:                                   ; preds = %tag6
  %ptrtoint116 = ptrtoint {}* %17 to i64
  %entry-point-addr-uint117 = add i64 %ptrtoint116, 7
  %entry-point-addr118 = inttoptr i64 %entry-point-addr-uint117 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point119 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr118, align 8
  %85 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point119({}* %17, i64 2, {}* inttoptr (i64 4 to {}*), {}* %.in452, {}* null, {}* null)
          to label %normal-dest122 unwind label %cleanup-lpad

normal-dest122:                                   ; preds = %normal-dest113
  %.elt477 = extractvalue { {}*, i64 } %85, 0
  %.elt479 = extractvalue { {}*, i64 } %85, 1
  %cond417 = icmp eq i64 %.elt479, 0
  %86 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291015.1 = select i1 %cond417, {}* %86, {}* %.elt477
  br label %tag46

normal-dest143:                                   ; preds = %tag15
  %ptrtoint144 = ptrtoint {}* %19 to i64
  %entry-point-addr-uint145 = add i64 %ptrtoint144, 7
  %entry-point-addr146 = inttoptr i64 %entry-point-addr-uint145 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point147 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr146, align 8
  %87 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point147({}* %19, i64 3, {}* %farg0, {}* null, {}* %.in452, {}* null)
          to label %normal-dest150 unwind label %cleanup-lpad

normal-dest150:                                   ; preds = %normal-dest143
  %.elt472 = extractvalue { {}*, i64 } %87, 0
  %.elt474 = extractvalue { {}*, i64 } %87, 1
  %cond416 = icmp eq i64 %.elt474, 0
  %88 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %WORT.2 = select i1 %cond416, {}* %88, {}* %.elt472
  %89 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %90 = invoke {}* @cc_safe_fdefinition({}* %89)
          to label %normal-dest157 unwind label %cleanup-lpad

normal-dest157:                                   ; preds = %normal-dest150
  %91 = ptrtoint {}* %.in452 to i64
  %fixnum-tag-only251475 = and i64 %91, 3
  %fixnump-test252 = icmp eq i64 %fixnum-tag-only251475, 0
  br i1 %fixnump-test252, label %tag65, label %tag6

normal-dest163:                                   ; preds = %tag17
  %ptrtoint166 = ptrtoint {}* %22 to i64
  %entry-point-addr-uint167 = add i64 %ptrtoint166, 7
  %entry-point-addr168 = inttoptr i64 %entry-point-addr-uint167 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point169 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr168, align 8
  %92 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point169({}* %22, i64 2, {}* %.in, {}* %.in452, {}* null, {}* null)
          to label %normal-dest172 unwind label %cleanup-lpad

normal-dest172:                                   ; preds = %normal-dest163
  %.elt429 = extractvalue { {}*, i64 } %92, 0
  %.elt431 = extractvalue { {}*, i64 } %92, 1
  %cond407 = icmp eq i64 %.elt431, 0
  %93 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291122.1 = select i1 %cond407, {}* %93, {}* %.elt429
  br label %tag54

normal-dest179:                                   ; preds = %tag18
  %ptrtoint180 = ptrtoint {}* %24 to i64
  %entry-point-addr-uint181 = add i64 %ptrtoint180, 7
  %entry-point-addr182 = inttoptr i64 %entry-point-addr-uint181 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point183 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr182, align 8
  %94 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point183({}* %24, i64 2, {}* inttoptr (i64 4 to {}*), {}* %.in, {}* null, {}* null)
          to label %normal-dest186 unwind label %cleanup-lpad

normal-dest186:                                   ; preds = %normal-dest179
  %.elt460 = extractvalue { {}*, i64 } %94, 0
  %.elt462 = extractvalue { {}*, i64 } %94, 1
  %cond413 = icmp eq i64 %.elt462, 0
  %95 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291052.1 = select i1 %cond413, {}* %95, {}* %.elt460
  br label %tag50

normal-dest205:                                   ; preds = %tag25
  %96 = invoke float @from_object_float({}* %.in452)
          to label %normal-dest206 unwind label %cleanup-lpad

normal-dest206:                                   ; preds = %normal-dest205
  %97 = fcmp olt float %27, %96
  br i1 %97, label %tag67, label %tag19

header-check-br229:                               ; preds = %tag30
  %gep234 = getelementptr inbounds i8, i8* %70, i64 -9
  %irc-bit-cast235 = bitcast i8* %gep234 to i64*
  %98 = load i64, i64* %irc-bit-cast235, align 8
  %99 = icmp eq i64 %98, 1325
  br i1 %99, label %tag52, label %tag17

normal-dest237:                                   ; preds = %tag37
  %ptrtoint239 = ptrtoint {}* %32 to i64
  %entry-point-addr-uint240 = add i64 %ptrtoint239, 7
  %entry-point-addr241 = inttoptr i64 %entry-point-addr-uint240 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point242 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr241, align 8
  %100 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point242({}* %32, i64 1, {}* %35, {}* null, {}* null, {}* null)
          to label %normal-dest245 unwind label %cleanup-lpad

normal-dest245:                                   ; preds = %normal-dest237
  %.elt449 = extractvalue { {}*, i64 } %100, 0
  %.elt451 = extractvalue { {}*, i64 } %100, 1
  %cond411 = icmp eq i64 %.elt451, 0
  %101 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291089.1 = select i1 %cond411, {}* %101, {}* %.elt449
  br label %tag59

normal-dest259:                                   ; preds = %tag54
  %ptrtoint260 = ptrtoint {}* %47 to i64
  %entry-point-addr-uint261 = add i64 %ptrtoint260, 7
  %entry-point-addr262 = inttoptr i64 %entry-point-addr-uint261 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point263 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr262, align 8
  %102 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point263({}* %47, i64 3, {}* %farg0, {}* null, {}* %POS.0, {}* null)
          to label %normal-dest266 unwind label %cleanup-lpad

normal-dest266:                                   ; preds = %normal-dest259
  %.elt433 = extractvalue { {}*, i64 } %102, 0
  %.elt435 = extractvalue { {}*, i64 } %102, 1
  %cond408 = icmp eq i64 %.elt435, 0
  %103 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %WORT.3 = select i1 %cond408, {}* %103, {}* %.elt433
  %104 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 361), align 8
  %105 = invoke {}* @cc_safe_fdefinition({}* %104)
          to label %normal-dest273 unwind label %cleanup-lpad

normal-dest273:                                   ; preds = %normal-dest266
  %106 = ptrtoint {}* %POS.0 to i64
  %fixnum-tag-only212436 = and i64 %106, 3
  %fixnump-test213 = icmp eq i64 %fixnum-tag-only212436, 0
  br i1 %fixnump-test213, label %tag41, label %tag49

normal-dest279:                                   ; preds = %tag45
  %107 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 995), align 8
  %ptrtoint280 = ptrtoint {}* %37 to i64
  %entry-point-addr-uint281 = add i64 %ptrtoint280, 7
  %entry-point-addr282 = inttoptr i64 %entry-point-addr-uint281 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point283 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr282, align 8
  %108 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point283({}* %37, i64 2, {}* %farg0, {}* %107, {}* null, {}* null)
          to label %normal-dest286 unwind label %cleanup-lpad

normal-dest286:                                   ; preds = %normal-dest279
  %.elt489 = extractvalue { {}*, i64 } %108, 0
  %.elt491 = extractvalue { {}*, i64 } %108, 1
  %cond420 = icmp eq i64 %.elt491, 0
  %109 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %object.0 = select i1 %cond420, {}* %109, {}* %.elt489
  %110 = icmp eq {}* %object.0, %109
  %.val = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %G291004.0 = select i1 %110, {}* %.val, {}* %109
  %111 = icmp eq {}* %G291004.0, %109
  %112 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 996), align 16
  %.farg0 = select i1 %111, {}* %62, {}* %farg0
  %farg0. = select i1 %111, {}* %farg0, {}* %112
  br label %tag34

normal-dest298:                                   ; preds = %tag46
  %.elt481 = extractvalue { {}*, i64 } %38, 0
  %.elt483 = extractvalue { {}*, i64 } %38, 1
  %cond418 = icmp eq i64 %.elt483, 0
  %113 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %STR.1 = select i1 %cond418, {}* %113, {}* %.elt481
  br label %tag34

normal-dest306:                                   ; preds = %tag49
  %ptrtoint307 = ptrtoint {}* %42 to i64
  %entry-point-addr-uint308 = add i64 %ptrtoint307, 7
  %entry-point-addr309 = inttoptr i64 %entry-point-addr-uint308 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point310 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr309, align 8
  %114 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point310({}* %42, i64 2, {}* inttoptr (i64 4 to {}*), {}* %POS.0, {}* null, {}* null)
          to label %normal-dest313 unwind label %cleanup-lpad

normal-dest313:                                   ; preds = %normal-dest306
  %.elt438 = extractvalue { {}*, i64 } %114, 0
  %.elt440 = extractvalue { {}*, i64 } %114, 1
  %cond409 = icmp eq i64 %.elt440, 0
  %115 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291089.2 = select i1 %cond409, {}* %115, {}* %.elt438
  br label %tag59

normal-dest325:                                   ; preds = %tag50
  %.elt464 = extractvalue { {}*, i64 } %43, 0
  %.elt466 = extractvalue { {}*, i64 } %43, 1
  %cond414 = icmp eq i64 %.elt466, 0
  %116 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %STR.2 = select i1 %cond414, {}* %116, {}* %.elt464
  br label %tag34

header-check-br338:                               ; preds = %tag52
  %gep343 = getelementptr inbounds i8, i8* %77, i64 -9
  %irc-bit-cast344 = bitcast i8* %gep343 to i64*
  %117 = load i64, i64* %irc-bit-cast344, align 8
  %118 = icmp eq i64 %117, 1325
  br i1 %118, label %tag63, label %tag17

normal-dest361:                                   ; preds = %tag59
  %.elt442 = extractvalue { {}*, i64 } %50, 0
  %.elt444 = extractvalue { {}*, i64 } %50, 1
  %cond410 = icmp eq i64 %.elt444, 0
  %119 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %STR.3 = select i1 %cond410, {}* %119, {}* %.elt442
  br label %tag34

normal-dest371:                                   ; preds = %tag61
  %ptrtoint372 = ptrtoint {}* %52 to i64
  %entry-point-addr-uint373 = add i64 %ptrtoint372, 7
  %entry-point-addr374 = inttoptr i64 %entry-point-addr-uint373 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point375 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr374, align 8
  %120 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point375({}* %52, i64 1, {}* %55, {}* null, {}* null, {}* null)
          to label %normal-dest378 unwind label %cleanup-lpad

normal-dest378:                                   ; preds = %normal-dest371
  %.elt468 = extractvalue { {}*, i64 } %120, 0
  %.elt470 = extractvalue { {}*, i64 } %120, 1
  %cond415 = icmp eq i64 %.elt470, 0
  %121 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291052.2 = select i1 %cond415, {}* %121, {}* %.elt468
  br label %tag50

normal-dest385:                                   ; preds = %tag63
  %122 = invoke double @from_object_double({}* nonnull %.in452)
          to label %normal-dest386 unwind label %cleanup-lpad

normal-dest386:                                   ; preds = %normal-dest385
  %123 = fcmp olt double %53, %122
  br i1 %123, label %tag5, label %tag16

normal-dest392:                                   ; preds = %tag66
  %ptrtoint393 = ptrtoint {}* %59 to i64
  %entry-point-addr-uint394 = add i64 %ptrtoint393, 7
  %entry-point-addr395 = inttoptr i64 %entry-point-addr-uint394 to { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)**
  %entry-point396 = load { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)** %entry-point-addr395, align 8
  %124 = invoke { {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...) %entry-point396({}* %59, i64 1, {}* %57, {}* null, {}* null, {}* null)
          to label %normal-dest399 unwind label %cleanup-lpad

normal-dest399:                                   ; preds = %normal-dest392
  %.elt485 = extractvalue { {}*, i64 } %124, 0
  %.elt487 = extractvalue { {}*, i64 } %124, 1
  %cond419 = icmp eq i64 %.elt487, 0
  %125 = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  %G291015.2 = select i1 %cond419, {}* %125, {}* %.elt485
  br label %tag46
}

; Function Attrs: uwtable
define internal void @RUN-ALL.18() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !131 {
entry:
  tail call void @ltvc_make_nil({ i8*, i8*, i64 }* nonnull @constants-table, i64 0)
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-PROBE-FILE, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-COMMON-LISP, i64 0, i64 0))
  %"CONTAB[4]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 4), align 16
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 3, {}* %"CONTAB[4]*")
  %"CONTAB[2]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 2), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 1, {}* %"CONTAB[2]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-DIRECTORYP, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-COMMON-LISP-USER, i64 0, i64 0))
  %"CONTAB[8]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 8), align 16
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 7, {}* %"CONTAB[8]*")
  %"CONTAB[6]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 6), align 16
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 5, {}* %"CONTAB[6]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-FDEFINITION, i64 0, i64 0))
  %"CONTAB[10]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 10), align 16
  %"CONTAB[3]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 9, {}* %"CONTAB[10]*", {}* %"CONTAB[3]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-FUNCTION, i64 0, i64 0))
  %"CONTAB[12]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 12), align 16
  %"CONTAB[3]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 11, {}* %"CONTAB[12]*", {}* %"CONTAB[3]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-SYMBOL, i64 0, i64 0))
  %"CONTAB[14]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 14), align 16
  %"CONTAB[3]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 13, {}* %"CONTAB[14]*", {}* %"CONTAB[3]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-SYMBOL-FUNCTION, i64 0, i64 0))
  %"CONTAB[16]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 16), align 16
  %"CONTAB[3]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 15, {}* %"CONTAB[16]*", {}* %"CONTAB[3]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-ERROR, i64 0, i64 0))
  %"CONTAB[18]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 18), align 16
  %"CONTAB[3]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 17, {}* %"CONTAB[18]*", {}* %"CONTAB[3]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 20, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-TYPE-ERROR, i64 0, i64 0))
  %"CONTAB[20]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 20), align 16
  %"CONTAB[3]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 19, {}* %"CONTAB[20]*", {}* %"CONTAB[3]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 22, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-DATUM, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-KEYWORD, i64 0, i64 0))
  %"CONTAB[24]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 24), align 16
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 23, {}* %"CONTAB[24]*")
  %"CONTAB[22]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 22), align 16
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 21, {}* %"CONTAB[22]*", {}* %"CONTAB[23]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 26, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-EXPECTED-TYPE, i64 0, i64 0))
  %"CONTAB[26]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 26), align 16
  %"CONTAB[23]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 25, {}* %"CONTAB[26]*", {}* %"CONTAB[23]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str-OR, i64 0, i64 0))
  %"CONTAB[29]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 29), align 8
  %"CONTAB[3]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 28, {}* %"CONTAB[29]*", {}* %"CONTAB[3]*8")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 27, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-B=ORDNER-P", i64 0, i64 0))
  %"CONTAB[31]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 31), align 8
  %"CONTAB[7]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 30, {}* %"CONTAB[31]*", {}* %"CONTAB[7]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 33, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-SETF-LAMBDA-LIST, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CORE, i64 0, i64 0))
  %"CONTAB[35]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 35), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 34, {}* %"CONTAB[35]*")
  %"CONTAB[33]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 33), align 8
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 32, {}* %"CONTAB[33]*", {}* %"CONTAB[34]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-ORDNER, i64 0, i64 0))
  %"CONTAB[38]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 38), align 16
  %"CONTAB[7]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 37, {}* %"CONTAB[38]*", {}* %"CONTAB[7]*10")
  %"CONTAB[37]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 37), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 36, i64 1, {}* %"CONTAB[37]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-SET-SOURCE-INFO, i64 0, i64 0))
  %"CONTAB[40]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 40), align 16
  %"CONTAB[34]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 39, {}* %"CONTAB[40]*", {}* %"CONTAB[34]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 43, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-CURRENT-SOURCE-FILE, i64 0, i64 0))
  %"CONTAB[43]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 43), align 8
  %"CONTAB[34]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 42, {}* %"CONTAB[43]*", {}* %"CONTAB[34]*12")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 41, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 1016 to {}*), {}* inttoptr (i64 40 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 45, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-*CURRENT-FORM-LINENO*", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 47, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-COMPILER, i64 0, i64 0))
  %"CONTAB[47]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 47), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 46, {}* %"CONTAB[47]*")
  %"CONTAB[45]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 45), align 8
  %"CONTAB[46]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 46), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 44, {}* %"CONTAB[45]*", {}* %"CONTAB[46]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 49, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-TOP-LEVEL, i64 0, i64 0))
  %"CONTAB[49]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 49), align 8
  %"CONTAB[34]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 48, {}* %"CONTAB[49]*", {}* %"CONTAB[34]*13")
  %"CONTAB[37]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 37), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 50, i64 1, {}* %"CONTAB[37]*14")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^1^TOP-COMPILE-FILE", i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str-funktionenclisp.lisp^1^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 52, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-DELETE-FILE, i64 0, i64 0))
  %"CONTAB[52]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 52), align 16
  %"CONTAB[3]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 51, {}* %"CONTAB[52]*", {}* %"CONTAB[3]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-OPEN, i64 0, i64 0))
  %"CONTAB[54]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 54), align 16
  %"CONTAB[3]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 53, {}* %"CONTAB[54]*", {}* %"CONTAB[3]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 56, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-DIRECTION, i64 0, i64 0))
  %"CONTAB[56]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 56), align 16
  %"CONTAB[23]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 55, {}* %"CONTAB[56]*", {}* %"CONTAB[23]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-OUTPUT, i64 0, i64 0))
  %"CONTAB[58]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 58), align 16
  %"CONTAB[23]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 57, {}* %"CONTAB[58]*", {}* %"CONTAB[23]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 60, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-IF-DOES-NOT-EXIST, i64 0, i64 0))
  %"CONTAB[60]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 60), align 16
  %"CONTAB[23]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 59, {}* %"CONTAB[60]*", {}* %"CONTAB[23]*19")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-CREATE, i64 0, i64 0))
  %"CONTAB[62]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 62), align 16
  %"CONTAB[23]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 61, {}* %"CONTAB[62]*", {}* %"CONTAB[23]*20")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 64, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-FUNWIND-PROTECT, i64 0, i64 0))
  %"CONTAB[64]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 64), align 16
  %"CONTAB[34]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 63, {}* %"CONTAB[64]*", {}* %"CONTAB[34]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 66, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str-MULTIPLE-VALUE-PROG1-FUNCTION, i64 0, i64 0))
  %"CONTAB[66]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 66), align 16
  %"CONTAB[34]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 65, {}* %"CONTAB[66]*", {}* %"CONTAB[34]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 68, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CONS, i64 0, i64 0))
  %"CONTAB[68]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 68), align 16
  %"CONTAB[3]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 67, {}* %"CONTAB[68]*", {}* %"CONTAB[3]*23")
  tail call void @ltvc_make_t({ i8*, i8*, i64 }* nonnull @constants-table, i64 69)
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-LIST, i64 0, i64 0))
  %"CONTAB[71]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 71), align 8
  %"CONTAB[3]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 70, {}* %"CONTAB[71]*", {}* %"CONTAB[3]*24")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 73, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str-B-KONKATENIERE-EINE-DATEI, i64 0, i64 0))
  %"CONTAB[73]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 73), align 8
  %"CONTAB[7]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 72, {}* %"CONTAB[73]*", {}* %"CONTAB[7]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 75, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-CLOSE, i64 0, i64 0))
  %"CONTAB[75]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 75), align 8
  %"CONTAB[3]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 74, {}* %"CONTAB[75]*", {}* %"CONTAB[3]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 77, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-ABORT, i64 0, i64 0))
  %"CONTAB[77]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 77), align 8
  %"CONTAB[23]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 76, {}* %"CONTAB[77]*", {}* %"CONTAB[23]*27")
  %"CONTAB[28]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 78, i64 3, {}* %"CONTAB[28]*28", {}* %"CONTAB[13]*29", {}* %"CONTAB[11]*30")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 80, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-B=KONKATENIERE-DATEIEN", i64 0, i64 0))
  %"CONTAB[80]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 80), align 16
  %"CONTAB[7]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 79, {}* %"CONTAB[80]*", {}* %"CONTAB[7]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 83, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-ZIELPFADNAME, i64 0, i64 0))
  %"CONTAB[83]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 83), align 8
  %"CONTAB[7]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 82, {}* %"CONTAB[83]*", {}* %"CONTAB[7]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 85, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str-&REST", i64 0, i64 0))
  %"CONTAB[85]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 85), align 8
  %"CONTAB[3]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 84, {}* %"CONTAB[85]*", {}* %"CONTAB[3]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 87, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-PFADNAMEN, i64 0, i64 0))
  %"CONTAB[87]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 87), align 8
  %"CONTAB[7]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 86, {}* %"CONTAB[87]*", {}* %"CONTAB[7]*34")
  %"CONTAB[82]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 82), align 16
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[86]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 86), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 81, i64 3, {}* %"CONTAB[82]*", {}* %"CONTAB[84]*", {}* %"CONTAB[86]*")
  %"CONTAB[42]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 88, i64 4, {}* %"CONTAB[42]*35", {}* inttoptr (i64 1376 to {}*), {}* inttoptr (i64 60 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[82]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 82), align 16
  %"CONTAB[84]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[86]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 86), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 89, i64 3, {}* %"CONTAB[82]*36", {}* %"CONTAB[84]*37", {}* %"CONTAB[86]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 91, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-LAMBDA, i64 0, i64 0))
  %"CONTAB[91]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 91), align 8
  %"CONTAB[3]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 90, {}* %"CONTAB[91]*", {}* %"CONTAB[3]*39")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^15^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^15^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 93, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-INPUT, i64 0, i64 0))
  %"CONTAB[93]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 93), align 8
  %"CONTAB[23]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 92, {}* %"CONTAB[93]*", {}* %"CONTAB[23]*40")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 95, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-ERROR, i64 0, i64 0))
  %"CONTAB[95]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 95), align 8
  %"CONTAB[23]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 94, {}* %"CONTAB[95]*", {}* %"CONTAB[23]*41")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 97, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-READ-LINE, i64 0, i64 0))
  %"CONTAB[97]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 97), align 8
  %"CONTAB[3]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 96, {}* %"CONTAB[97]*", {}* %"CONTAB[3]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 99, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-FEHLER, i64 0, i64 0))
  %"CONTAB[99]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 99), align 8
  %"CONTAB[7]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 98, {}* %"CONTAB[99]*", {}* %"CONTAB[7]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 101, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-EQUAL, i64 0, i64 0))
  %"CONTAB[101]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 101), align 8
  %"CONTAB[3]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 100, {}* %"CONTAB[101]*", {}* %"CONTAB[3]*44")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 103, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-WRITE-LINE, i64 0, i64 0))
  %"CONTAB[103]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 103), align 8
  %"CONTAB[3]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 102, {}* %"CONTAB[103]*", {}* %"CONTAB[3]*45")
  %"CONTAB[28]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 104, i64 3, {}* %"CONTAB[28]*46", {}* %"CONTAB[13]*47", {}* %"CONTAB[11]*48")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 107, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-NAME, i64 0, i64 0))
  %"CONTAB[107]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 107), align 8
  %"CONTAB[7]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 106, {}* %"CONTAB[107]*", {}* %"CONTAB[7]*49")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 109, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-&OPTIONAL", i64 0, i64 0))
  %"CONTAB[109]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 109), align 8
  %"CONTAB[3]*50" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 108, {}* %"CONTAB[109]*", {}* %"CONTAB[3]*50")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 111, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-STREAM, i64 0, i64 0))
  %"CONTAB[111]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 111), align 8
  %"CONTAB[3]*51" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 110, {}* %"CONTAB[111]*", {}* %"CONTAB[3]*51")
  %"CONTAB[106]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 106), align 16
  %"CONTAB[108]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[110]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 105, i64 3, {}* %"CONTAB[106]*", {}* %"CONTAB[108]*", {}* %"CONTAB[110]*")
  %"CONTAB[42]*52" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 112, i64 4, {}* %"CONTAB[42]*52", {}* inttoptr (i64 3452 to {}*), {}* inttoptr (i64 108 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[106]*53" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 106), align 16
  %"CONTAB[108]*54" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[110]*55" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 113, i64 3, {}* %"CONTAB[106]*53", {}* %"CONTAB[108]*54", {}* %"CONTAB[110]*55")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^27^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^27^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 115, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-SYMBOL-PLIST, i64 0, i64 0))
  %"CONTAB[115]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 115), align 8
  %"CONTAB[3]*56" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 114, {}* %"CONTAB[115]*", {}* %"CONTAB[3]*56")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 117, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-FORMAT-ERROR, i64 0, i64 0))
  %"CONTAB[117]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 117), align 8
  %"CONTAB[34]*57" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 116, {}* %"CONTAB[117]*", {}* %"CONTAB[34]*57")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 119, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-COMPLAINT, i64 0, i64 0))
  %"CONTAB[119]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 119), align 8
  %"CONTAB[23]*58" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 118, {}* %"CONTAB[119]*", {}* %"CONTAB[23]*58")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 120, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-Required argument missing", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 122, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-CONTROL-STRING, i64 0, i64 0))
  %"CONTAB[122]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 122), align 16
  %"CONTAB[23]*59" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 121, {}* %"CONTAB[122]*", {}* %"CONTAB[23]*59")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 123, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-(b=setplist '~S '~S)~%", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 125, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-OFFSET, i64 0, i64 0))
  %"CONTAB[125]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 125), align 8
  %"CONTAB[23]*60" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 124, {}* %"CONTAB[125]*", {}* %"CONTAB[23]*60")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 127, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-WRITE-STRING, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind
declare void @ltvc_make_nil({ i8*, i8*, i64 }*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_base_string({ i8*, i8*, i64 }*, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_package({ i8*, i8*, i64 }*, i64, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_symbol({ i8*, i8*, i64 }*, i64, {}*, {}*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @ltvc_make_list({ i8*, i8*, i64 }*, i64, i64, ...) local_unnamed_addr #1

declare void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @ltvc_make_t({ i8*, i8*, i64 }*, i64) local_unnamed_addr #1

; Function Attrs: uwtable
define internal void @RUN-ALL.19() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !132 {
entry:
  %"CONTAB[127]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 127), align 8
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 126, {}* %"CONTAB[127]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 128, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str-(b=setplist '", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 130, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-PRIN1, i64 0, i64 0))
  %"CONTAB[130]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 130), align 16
  %"CONTAB[3]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 129, {}* %"CONTAB[130]*", {}* %"CONTAB[3]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 131, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str- '", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-)", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 134, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-TERPRI, i64 0, i64 0))
  %"CONTAB[134]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 134), align 16
  %"CONTAB[3]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 133, {}* %"CONTAB[134]*", {}* %"CONTAB[3]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 136, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-STRINGP, i64 0, i64 0))
  %"CONTAB[136]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 136), align 16
  %"CONTAB[3]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 135, {}* %"CONTAB[136]*", {}* %"CONTAB[3]*3")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 137, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 139, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @str-MAKE-STRING-OUTPUT-STREAM-FROM-STRING, i64 0, i64 0))
  %"CONTAB[139]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 139), align 8
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 138, {}* %"CONTAB[139]*", {}* %"CONTAB[34]*")
  %"CONTAB[28]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 140, i64 3, {}* %"CONTAB[28]*4", {}* %"CONTAB[13]*5", {}* %"CONTAB[11]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 142, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str-MAKE-STRING-OUTPUT-STREAM, i64 0, i64 0))
  %"CONTAB[142]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 142), align 16
  %"CONTAB[3]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 141, {}* %"CONTAB[142]*", {}* %"CONTAB[3]*7")
  %"CONTAB[28]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 143, i64 3, {}* %"CONTAB[28]*8", {}* %"CONTAB[13]*9", {}* %"CONTAB[11]*10")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 145, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str-GET-OUTPUT-STREAM-STRING, i64 0, i64 0))
  %"CONTAB[145]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 145), align 8
  %"CONTAB[3]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 144, {}* %"CONTAB[145]*", {}* %"CONTAB[3]*11")
  %"CONTAB[28]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 146, i64 3, {}* %"CONTAB[28]*12", {}* %"CONTAB[13]*13", {}* %"CONTAB[11]*14")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 148, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-*STANDARD-OUTPUT*", i64 0, i64 0))
  %"CONTAB[148]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 148), align 16
  %"CONTAB[3]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 147, {}* %"CONTAB[148]*", {}* %"CONTAB[3]*15")
  %"CONTAB[28]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 149, i64 3, {}* %"CONTAB[28]*16", {}* %"CONTAB[13]*17", {}* %"CONTAB[11]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 151, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"str-B=PROPERTYLISTEBINDUNG-SICHERN", i64 0, i64 0))
  %"CONTAB[151]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 151), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 150, {}* %"CONTAB[151]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 154, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-OBJEKTSYMBOL, i64 0, i64 0))
  %"CONTAB[154]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 154), align 16
  %"CONTAB[7]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 153, {}* %"CONTAB[154]*", {}* %"CONTAB[7]*19")
  %"CONTAB[110]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[153]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 153), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 152, i64 2, {}* %"CONTAB[110]*", {}* %"CONTAB[153]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 155, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 5816 to {}*), {}* inttoptr (i64 180 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 157, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-SET-DOCUMENTATION, i64 0, i64 0))
  %"CONTAB[157]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 157), align 8
  %"CONTAB[34]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 156, {}* %"CONTAB[157]*", {}* %"CONTAB[34]*20")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 158, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"str-Abspeichern der Propoertyliste von objektsymbol auf stream", i64 0, i64 0))
  %"CONTAB[110]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[153]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 153), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 159, i64 2, {}* %"CONTAB[110]*21", {}* %"CONTAB[153]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 163, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284090, i64 0, i64 0))
  %"CONTAB[163]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 163), align 8
  %"CONTAB[0]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 162, {}* %"CONTAB[163]*", {}* %"CONTAB[0]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 167, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-QUOTE, i64 0, i64 0))
  %"CONTAB[167]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 167), align 8
  %"CONTAB[3]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 166, {}* %"CONTAB[167]*", {}* %"CONTAB[3]*23")
  %"CONTAB[166]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 165, i64 2, {}* %"CONTAB[166]*", {}* %"CONTAB[116]*")
  %"CONTAB[17]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[165]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 165), align 8
  %"CONTAB[118]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[123]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 123), align 8
  %"CONTAB[124]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 164, i64 8, {}* %"CONTAB[17]*", {}* %"CONTAB[165]*", {}* %"CONTAB[118]*", {}* %"CONTAB[120]*", {}* %"CONTAB[121]*", {}* %"CONTAB[123]*", {}* %"CONTAB[124]*", {}* inttoptr (i64 56 to {}*))
  %"CONTAB[162]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 162), align 16
  %"CONTAB[164]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 164), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 161, i64 2, {}* %"CONTAB[162]*", {}* %"CONTAB[164]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 170, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284091, i64 0, i64 0))
  %"CONTAB[170]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 170), align 16
  %"CONTAB[0]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 169, {}* %"CONTAB[170]*", {}* %"CONTAB[0]*24")
  %"CONTAB[166]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 172, i64 2, {}* %"CONTAB[166]*25", {}* %"CONTAB[116]*26")
  %"CONTAB[17]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[172]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 172), align 16
  %"CONTAB[118]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[123]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 123), align 8
  %"CONTAB[124]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 171, i64 8, {}* %"CONTAB[17]*27", {}* %"CONTAB[172]*", {}* %"CONTAB[118]*28", {}* %"CONTAB[120]*29", {}* %"CONTAB[121]*30", {}* %"CONTAB[123]*31", {}* %"CONTAB[124]*32", {}* inttoptr (i64 72 to {}*))
  %"CONTAB[169]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 169), align 8
  %"CONTAB[171]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 171), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 168, i64 2, {}* %"CONTAB[169]*", {}* %"CONTAB[171]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 174, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ARGS, i64 0, i64 0))
  %"CONTAB[174]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 174), align 16
  %"CONTAB[34]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 173, {}* %"CONTAB[174]*", {}* %"CONTAB[34]*33")
  %"CONTAB[110]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[108]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[161]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 161), align 8
  %"CONTAB[168]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 168), align 16
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[173]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 173), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 160, i64 6, {}* %"CONTAB[110]*34", {}* %"CONTAB[108]*", {}* %"CONTAB[161]*", {}* %"CONTAB[168]*", {}* %"CONTAB[84]*", {}* %"CONTAB[173]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^38^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^38^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 176, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-BOUNDP, i64 0, i64 0))
  %"CONTAB[176]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 176), align 16
  %"CONTAB[3]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 175, {}* %"CONTAB[176]*", {}* %"CONTAB[3]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 177, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str-(setq ~S '~S)~%", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 178, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str-(setq ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 179, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str- '", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 180, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-)", i64 0, i64 0))
  %"CONTAB[28]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 181, i64 3, {}* %"CONTAB[28]*36", {}* %"CONTAB[13]*37", {}* %"CONTAB[11]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 183, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-EVAL, i64 0, i64 0))
  %"CONTAB[183]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 183), align 8
  %"CONTAB[3]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 182, {}* %"CONTAB[183]*", {}* %"CONTAB[3]*39")
  %"CONTAB[28]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 184, i64 3, {}* %"CONTAB[28]*40", {}* %"CONTAB[13]*41", {}* %"CONTAB[11]*42")
  %"CONTAB[28]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 185, i64 3, {}* %"CONTAB[28]*43", {}* %"CONTAB[13]*44", {}* %"CONTAB[11]*45")
  %"CONTAB[28]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 186, i64 3, {}* %"CONTAB[28]*46", {}* %"CONTAB[13]*47", {}* %"CONTAB[11]*48")
  %"CONTAB[28]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*50" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*51" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 187, i64 3, {}* %"CONTAB[28]*49", {}* %"CONTAB[13]*50", {}* %"CONTAB[11]*51")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 189, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-B=WERTBINDUNG-SICHERN", i64 0, i64 0))
  %"CONTAB[189]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 189), align 8
  %"CONTAB[7]*52" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 188, {}* %"CONTAB[189]*", {}* %"CONTAB[7]*52")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 192, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-VARIABLENSYMBOL, i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.20() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !133 {
entry:
  %"CONTAB[192]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 192), align 16
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 191, {}* %"CONTAB[192]*", {}* %"CONTAB[7]*")
  %"CONTAB[110]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[191]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 191), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 190, i64 2, {}* %"CONTAB[110]*", {}* %"CONTAB[191]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 193, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 6892 to {}*), {}* inttoptr (i64 208 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 194, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @"str-Abspeichern der Variablenbindung von variablensymbol auf stream", i64 0, i64 0))
  %"CONTAB[110]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[191]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 191), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 195, i64 2, {}* %"CONTAB[110]*1", {}* %"CONTAB[191]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 199, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284307, i64 0, i64 0))
  %"CONTAB[199]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 199), align 8
  %"CONTAB[0]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 198, {}* %"CONTAB[199]*", {}* %"CONTAB[0]*")
  %"CONTAB[166]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 201, i64 2, {}* %"CONTAB[166]*", {}* %"CONTAB[116]*")
  %"CONTAB[17]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[201]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 201), align 8
  %"CONTAB[118]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[177]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 177), align 8
  %"CONTAB[124]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 200, i64 8, {}* %"CONTAB[17]*", {}* %"CONTAB[201]*", {}* %"CONTAB[118]*", {}* %"CONTAB[120]*", {}* %"CONTAB[121]*", {}* %"CONTAB[177]*", {}* %"CONTAB[124]*", {}* inttoptr (i64 28 to {}*))
  %"CONTAB[198]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 198), align 16
  %"CONTAB[200]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 200), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 197, i64 2, {}* %"CONTAB[198]*", {}* %"CONTAB[200]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 204, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284308, i64 0, i64 0))
  %"CONTAB[204]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 204), align 16
  %"CONTAB[0]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 203, {}* %"CONTAB[204]*", {}* %"CONTAB[0]*3")
  %"CONTAB[166]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 206, i64 2, {}* %"CONTAB[166]*4", {}* %"CONTAB[116]*5")
  %"CONTAB[17]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[206]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 206), align 16
  %"CONTAB[118]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[177]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 177), align 8
  %"CONTAB[124]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 205, i64 8, {}* %"CONTAB[17]*6", {}* %"CONTAB[206]*", {}* %"CONTAB[118]*7", {}* %"CONTAB[120]*8", {}* %"CONTAB[121]*9", {}* %"CONTAB[177]*10", {}* %"CONTAB[124]*11", {}* inttoptr (i64 44 to {}*))
  %"CONTAB[203]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 203), align 8
  %"CONTAB[205]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 205), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 202, i64 2, {}* %"CONTAB[203]*", {}* %"CONTAB[205]*")
  %"CONTAB[110]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[108]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[197]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 197), align 8
  %"CONTAB[202]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 202), align 16
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[173]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 173), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 196, i64 6, {}* %"CONTAB[110]*12", {}* %"CONTAB[108]*", {}* %"CONTAB[197]*", {}* %"CONTAB[202]*", {}* %"CONTAB[84]*", {}* %"CONTAB[173]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^52^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^52^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 208, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-FBOUNDP, i64 0, i64 0))
  %"CONTAB[208]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 208), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 207, {}* %"CONTAB[208]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 210, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str-B=FUNKTIONSDEFINITION", i64 0, i64 0))
  %"CONTAB[210]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 210), align 16
  %"CONTAB[7]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 209, {}* %"CONTAB[210]*", {}* %"CONTAB[7]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 212, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-KOMPILIERT, i64 0, i64 0))
  %"CONTAB[212]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 212), align 16
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 211, {}* %"CONTAB[212]*", {}* %"CONTAB[23]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 214, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-EQ-INCOMPARABLE, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 216, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-CLASP-CLEAVIR, i64 0, i64 0))
  %"CONTAB[216]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 216), align 16
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 215, {}* %"CONTAB[216]*")
  %"CONTAB[214]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 214), align 16
  %"CONTAB[215]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 215), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 213, {}* %"CONTAB[214]*", {}* %"CONTAB[215]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 218, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-EQL-UNDERLYING, i64 0, i64 0))
  %"CONTAB[218]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 218), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 217, {}* %"CONTAB[218]*", {}* %"CONTAB[34]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 219, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"str-~S~%", i64 0, i64 0))
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 220, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  %"CONTAB[28]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 221, i64 3, {}* %"CONTAB[28]*14", {}* %"CONTAB[13]*15", {}* %"CONTAB[11]*16")
  %"CONTAB[28]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 222, i64 3, {}* %"CONTAB[28]*17", {}* %"CONTAB[13]*18", {}* %"CONTAB[11]*19")
  %"CONTAB[28]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 223, i64 3, {}* %"CONTAB[28]*20", {}* %"CONTAB[13]*21", {}* %"CONTAB[11]*22")
  %"CONTAB[28]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 224, i64 3, {}* %"CONTAB[28]*23", {}* %"CONTAB[13]*24", {}* %"CONTAB[11]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 226, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-B=FUNKTIONSBINDUNG-SICHERN", i64 0, i64 0))
  %"CONTAB[226]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 226), align 16
  %"CONTAB[7]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 225, {}* %"CONTAB[226]*", {}* %"CONTAB[7]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 229, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-FUNKTIONSSYMBOL, i64 0, i64 0))
  %"CONTAB[229]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 229), align 8
  %"CONTAB[7]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 228, {}* %"CONTAB[229]*", {}* %"CONTAB[7]*27")
  %"CONTAB[110]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[228]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 228), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 227, i64 2, {}* %"CONTAB[110]*28", {}* %"CONTAB[228]*")
  %"CONTAB[42]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 230, i64 4, {}* %"CONTAB[42]*29", {}* inttoptr (i64 7904 to {}*), {}* inttoptr (i64 232 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 231, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @"str-Abspeichern der Funktionsdefinition von funktionssymbol auf stream", i64 0, i64 0))
  %"CONTAB[110]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[228]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 228), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 232, i64 2, {}* %"CONTAB[110]*30", {}* %"CONTAB[228]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 236, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284525, i64 0, i64 0))
  %"CONTAB[236]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 236), align 16
  %"CONTAB[0]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 235, {}* %"CONTAB[236]*", {}* %"CONTAB[0]*32")
  %"CONTAB[166]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 238, i64 2, {}* %"CONTAB[166]*33", {}* %"CONTAB[116]*34")
  %"CONTAB[17]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[238]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 238), align 16
  %"CONTAB[118]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[219]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 219), align 8
  %"CONTAB[124]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 237, i64 8, {}* %"CONTAB[17]*35", {}* %"CONTAB[238]*", {}* %"CONTAB[118]*36", {}* %"CONTAB[120]*37", {}* %"CONTAB[121]*38", {}* %"CONTAB[219]*", {}* %"CONTAB[124]*39", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[235]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 235), align 8
  %"CONTAB[237]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 237), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 234, i64 2, {}* %"CONTAB[235]*", {}* %"CONTAB[237]*")
  %"CONTAB[110]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[108]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[234]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 234), align 16
  %"CONTAB[84]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[173]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 173), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 233, i64 5, {}* %"CONTAB[110]*40", {}* %"CONTAB[108]*41", {}* %"CONTAB[234]*", {}* %"CONTAB[84]*42", {}* %"CONTAB[173]*43")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^58^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^58^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 240, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-WERTBINDUNG, i64 0, i64 0))
  %"CONTAB[240]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 240), align 16
  %"CONTAB[23]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 239, {}* %"CONTAB[240]*", {}* %"CONTAB[23]*44")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 242, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-PROPERTYBINDUNG, i64 0, i64 0))
  %"CONTAB[242]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 242), align 16
  %"CONTAB[23]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 241, {}* %"CONTAB[242]*", {}* %"CONTAB[23]*45")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 244, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-FUNKTIONSBINDUNG, i64 0, i64 0))
  %"CONTAB[244]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 244), align 16
  %"CONTAB[23]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 243, {}* %"CONTAB[244]*", {}* %"CONTAB[23]*46")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 246, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-CERROR, i64 0, i64 0))
  %"CONTAB[246]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 246), align 16
  %"CONTAB[3]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 245, {}* %"CONTAB[246]*", {}* %"CONTAB[3]*47")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 247, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"str-Keine funktion wird ausgefuehrt", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 248, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @"str-typ ~S ist nicht aus :wertbindung :propertybindung :Funktionsbindung", i64 0, i64 0))
  %"CONTAB[28]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*50" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 249, i64 3, {}* %"CONTAB[28]*48", {}* %"CONTAB[13]*49", {}* %"CONTAB[11]*50")
  %"CONTAB[28]*51" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*52" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*53" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 250, i64 3, {}* %"CONTAB[28]*51", {}* %"CONTAB[13]*52", {}* %"CONTAB[11]*53")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 252, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-B=LISPBINDUNGEN-SICHERN", i64 0, i64 0))
  %"CONTAB[252]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 252), align 16
  %"CONTAB[7]*54" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 251, {}* %"CONTAB[252]*", {}* %"CONTAB[7]*54")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 255, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-SYMBOLLISTE, i64 0, i64 0))
  %"CONTAB[255]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 255), align 8
  %"CONTAB[7]*55" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 254, {}* %"CONTAB[255]*", {}* %"CONTAB[7]*55")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.21() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !134 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.19)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.20)
  ret void
}

declare void @cc_invoke_sub_run_all_function(void ()*) local_unnamed_addr #3

; Function Attrs: uwtable
define internal void @RUN-ALL.22() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !135 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.18)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.21)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.23() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !136 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 257, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-TYP, i64 0, i64 0))
  %"CONTAB[257]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 257), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 256, {}* %"CONTAB[257]*", {}* %"CONTAB[7]*")
  %"CONTAB[110]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[254]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 254), align 16
  %"CONTAB[256]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 256), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 253, i64 3, {}* %"CONTAB[110]*", {}* %"CONTAB[254]*", {}* %"CONTAB[256]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 258, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 9312 to {}*), {}* inttoptr (i64 260 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 259, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @"str-Falls typ\0D\0A:wertbindung -> Fuer alle symbole aus symbolliste (b=Wertbindung-sichern stream sybol\0D\0Aanalog bei :propertybindung und :Funktionsbindung", i64 0, i64 0))
  %"CONTAB[110]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[254]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 254), align 16
  %"CONTAB[256]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 256), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 260, i64 3, {}* %"CONTAB[110]*1", {}* %"CONTAB[254]*2", {}* %"CONTAB[256]*3")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^65^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^65^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 262, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-KEYWORDP, i64 0, i64 0))
  %"CONTAB[262]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 262), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 261, {}* %"CONTAB[262]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 264, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-SYMBOLP, i64 0, i64 0))
  %"CONTAB[264]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 264), align 16
  %"CONTAB[3]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 263, {}* %"CONTAB[264]*", {}* %"CONTAB[3]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 266, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-CHARACTER, i64 0, i64 0))
  %"CONTAB[266]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 266), align 16
  %"CONTAB[3]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 265, {}* %"CONTAB[266]*", {}* %"CONTAB[3]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 267, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str-~a", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 269, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-PRINC, i64 0, i64 0))
  %"CONTAB[269]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 269), align 8
  %"CONTAB[3]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 268, {}* %"CONTAB[269]*", {}* %"CONTAB[3]*6")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 270, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  %"CONTAB[28]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 271, i64 3, {}* %"CONTAB[28]*7", {}* %"CONTAB[13]*8", {}* %"CONTAB[11]*9")
  %"CONTAB[28]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 272, i64 3, {}* %"CONTAB[28]*10", {}* %"CONTAB[13]*11", {}* %"CONTAB[11]*12")
  %"CONTAB[28]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 273, i64 3, {}* %"CONTAB[28]*13", {}* %"CONTAB[13]*14", {}* %"CONTAB[11]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 275, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-STRING, i64 0, i64 0))
  %"CONTAB[275]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 275), align 8
  %"CONTAB[3]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 274, {}* %"CONTAB[275]*", {}* %"CONTAB[3]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 276, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 277, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str-~s", i64 0, i64 0))
  %"CONTAB[28]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 278, i64 3, {}* %"CONTAB[28]*17", {}* %"CONTAB[13]*18", {}* %"CONTAB[11]*19")
  %"CONTAB[28]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 279, i64 3, {}* %"CONTAB[28]*20", {}* %"CONTAB[13]*21", {}* %"CONTAB[11]*22")
  %"CONTAB[28]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 280, i64 3, {}* %"CONTAB[28]*23", {}* %"CONTAB[13]*24", {}* %"CONTAB[11]*25")
  %"CONTAB[28]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 281, i64 3, {}* %"CONTAB[28]*26", {}* %"CONTAB[13]*27", {}* %"CONTAB[11]*28")
  %"CONTAB[28]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 282, i64 3, {}* %"CONTAB[28]*29", {}* %"CONTAB[13]*30", {}* %"CONTAB[11]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 284, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-B=ERZEUGE-STRING", i64 0, i64 0))
  %"CONTAB[284]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 284), align 16
  %"CONTAB[7]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 283, {}* %"CONTAB[284]*", {}* %"CONTAB[7]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 287, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-IRGENDETWAS, i64 0, i64 0))
  %"CONTAB[287]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 287), align 8
  %"CONTAB[7]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 286, {}* %"CONTAB[287]*", {}* %"CONTAB[7]*33")
  %"CONTAB[286]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 286), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 285, i64 1, {}* %"CONTAB[286]*")
  %"CONTAB[42]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 288, i64 4, {}* %"CONTAB[42]*34", {}* inttoptr (i64 13732 to {}*), {}* inttoptr (i64 400 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 289, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"str-Ausgabe: macht aus irgendwas einen String, nil wird zu \22\22", i64 0, i64 0))
  %"CONTAB[286]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 286), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 290, i64 1, {}* %"CONTAB[286]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 294, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284887, i64 0, i64 0))
  %"CONTAB[294]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 294), align 16
  %"CONTAB[0]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 293, {}* %"CONTAB[294]*", {}* %"CONTAB[0]*")
  %"CONTAB[166]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 296, i64 2, {}* %"CONTAB[166]*", {}* %"CONTAB[116]*")
  %"CONTAB[17]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[296]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 296), align 16
  %"CONTAB[118]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[267]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 267), align 8
  %"CONTAB[124]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 295, i64 8, {}* %"CONTAB[17]*", {}* %"CONTAB[296]*", {}* %"CONTAB[118]*", {}* %"CONTAB[120]*", {}* %"CONTAB[121]*", {}* %"CONTAB[267]*", {}* %"CONTAB[124]*", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[293]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 293), align 8
  %"CONTAB[295]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 295), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 292, i64 2, {}* %"CONTAB[293]*", {}* %"CONTAB[295]*")
  %"CONTAB[110]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[108]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[292]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 292), align 16
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[173]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 173), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 291, i64 5, {}* %"CONTAB[110]*36", {}* %"CONTAB[108]*", {}* %"CONTAB[292]*", {}* %"CONTAB[84]*", {}* %"CONTAB[173]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 300, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-FORMAT-ARG-284870, i64 0, i64 0))
  %"CONTAB[300]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 300), align 16
  %"CONTAB[0]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 299, {}* %"CONTAB[300]*", {}* %"CONTAB[0]*37")
  %"CONTAB[166]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 166), align 16
  %"CONTAB[116]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 116), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 302, i64 2, {}* %"CONTAB[166]*38", {}* %"CONTAB[116]*39")
  %"CONTAB[17]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 17), align 8
  %"CONTAB[302]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 302), align 16
  %"CONTAB[118]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 118), align 16
  %"CONTAB[120]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 120), align 16
  %"CONTAB[121]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 121), align 8
  %"CONTAB[277]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 277), align 8
  %"CONTAB[124]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 124), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 301, i64 8, {}* %"CONTAB[17]*40", {}* %"CONTAB[302]*", {}* %"CONTAB[118]*41", {}* %"CONTAB[120]*42", {}* %"CONTAB[121]*43", {}* %"CONTAB[277]*", {}* %"CONTAB[124]*44", {}* inttoptr (i64 4 to {}*))
  %"CONTAB[299]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 299), align 8
  %"CONTAB[301]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 301), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 298, i64 2, {}* %"CONTAB[299]*", {}* %"CONTAB[301]*")
  %"CONTAB[110]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 110), align 16
  %"CONTAB[108]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 108), align 16
  %"CONTAB[298]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 298), align 16
  %"CONTAB[84]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[173]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 173), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 297, i64 5, {}* %"CONTAB[110]*45", {}* %"CONTAB[108]*46", {}* %"CONTAB[298]*", {}* %"CONTAB[84]*47", {}* %"CONTAB[173]*48")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^80^TOP-COMPILE-FILE", i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-funktionenclisp.lisp^80^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 304, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-STRING-EQUAL, i64 0, i64 0))
  %"CONTAB[304]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 304), align 16
  %"CONTAB[3]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 303, {}* %"CONTAB[304]*", {}* %"CONTAB[3]*49")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 305, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-:", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 307, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-B=LEERSTRING-P", i64 0, i64 0))
  %"CONTAB[307]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 307), align 8
  %"CONTAB[7]*50" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 306, {}* %"CONTAB[307]*", {}* %"CONTAB[7]*50")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 309, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-READ-FROM-STRING, i64 0, i64 0))
  %"CONTAB[309]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 309), align 8
  %"CONTAB[3]*51" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 308, {}* %"CONTAB[309]*", {}* %"CONTAB[3]*51")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-:", i64 0, i64 0))
  %"CONTAB[311]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 311), align 8
  %"CONTAB[7]*52" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 310, {}* %"CONTAB[311]*", {}* %"CONTAB[7]*52")
  %"CONTAB[28]*53" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*54" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*55" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 312, i64 3, {}* %"CONTAB[28]*53", {}* %"CONTAB[13]*54", {}* %"CONTAB[11]*55")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 314, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-B=LESE-VON-STRING", i64 0, i64 0))
  %"CONTAB[314]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 314), align 16
  %"CONTAB[7]*56" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 313, {}* %"CONTAB[314]*", {}* %"CONTAB[7]*56")
  %"CONTAB[274]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 315, i64 1, {}* %"CONTAB[274]*")
  %"CONTAB[42]*57" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 316, i64 4, {}* %"CONTAB[42]*57", {}* inttoptr (i64 16424 to {}*), {}* inttoptr (i64 500 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 317, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @"str-Ausgabe: liest ersten Lispausdruck von String string und wandelt ihn um\0D\0A           wenn string kein String ist, wird string zurueckgegeben", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.24() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !137 {
entry:
  %"CONTAB[274]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 318, i64 1, {}* %"CONTAB[274]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^110^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^110^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 320, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-REDUCE, i64 0, i64 0))
  %"CONTAB[320]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 320), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 319, {}* %"CONTAB[320]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 322, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-CONCATENATE, i64 0, i64 0))
  %"CONTAB[322]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 322), align 16
  %"CONTAB[3]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 321, {}* %"CONTAB[322]*", {}* %"CONTAB[3]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 324, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-MAPCAR, i64 0, i64 0))
  %"CONTAB[324]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 324), align 16
  %"CONTAB[3]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 323, {}* %"CONTAB[324]*", {}* %"CONTAB[3]*2")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 325, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 327, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"str-B=KONKATENIERE-NACH-STRING", i64 0, i64 0))
  %"CONTAB[327]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 327), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 326, {}* %"CONTAB[327]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 330, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-PARAMETER, i64 0, i64 0))
  %"CONTAB[330]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 330), align 16
  %"CONTAB[7]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 329, {}* %"CONTAB[330]*", {}* %"CONTAB[7]*3")
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[329]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 329), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 328, i64 2, {}* %"CONTAB[84]*", {}* %"CONTAB[329]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 331, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 18868 to {}*), {}* inttoptr (i64 604 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 332, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @"str-Eingabe: Beliebig viele Parameter vom beliebigen Typ\0D\0A  Ausgabe: Konkatenierter String", i64 0, i64 0))
  %"CONTAB[84]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[329]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 329), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 333, i64 2, {}* %"CONTAB[84]*4", {}* %"CONTAB[329]*5")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 336, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-A, i64 0, i64 0))
  %"CONTAB[336]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 336), align 16
  %"CONTAB[7]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 335, {}* %"CONTAB[336]*", {}* %"CONTAB[7]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 338, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-B, i64 0, i64 0))
  %"CONTAB[338]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 338), align 16
  %"CONTAB[7]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 337, {}* %"CONTAB[338]*", {}* %"CONTAB[7]*7")
  %"CONTAB[335]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 335), align 8
  %"CONTAB[337]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 337), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 334, i64 2, {}* %"CONTAB[335]*", {}* %"CONTAB[337]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 341, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-WAS, i64 0, i64 0))
  %"CONTAB[341]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 341), align 8
  %"CONTAB[7]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 340, {}* %"CONTAB[341]*", {}* %"CONTAB[7]*8")
  %"CONTAB[340]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 340), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 339, i64 1, {}* %"CONTAB[340]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^134^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^134^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 343, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-APPLY, i64 0, i64 0))
  %"CONTAB[343]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 343), align 8
  %"CONTAB[3]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 342, {}* %"CONTAB[343]*", {}* %"CONTAB[3]*9")
  %"CONTAB[28]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 344, i64 3, {}* %"CONTAB[28]*10", {}* %"CONTAB[13]*11", {}* %"CONTAB[11]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 346, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-B=KONKATENIERE-NACH-ATOM", i64 0, i64 0))
  %"CONTAB[346]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 346), align 16
  %"CONTAB[7]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 345, {}* %"CONTAB[346]*", {}* %"CONTAB[7]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 349, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-ATOME-ODER-STRINGS, i64 0, i64 0))
  %"CONTAB[349]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 349), align 8
  %"CONTAB[7]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 348, {}* %"CONTAB[349]*", {}* %"CONTAB[7]*14")
  %"CONTAB[84]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[348]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 348), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 347, i64 2, {}* %"CONTAB[84]*15", {}* %"CONTAB[348]*")
  %"CONTAB[42]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 350, i64 4, {}* %"CONTAB[42]*16", {}* inttoptr (i64 20572 to {}*), {}* inttoptr (i64 656 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 351, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @"str-Erzeugt aus beliebig vielen Eingabewerten ein Atom", i64 0, i64 0))
  %"CONTAB[84]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[348]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 348), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 352, i64 2, {}* %"CONTAB[84]*17", {}* %"CONTAB[348]*18")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^164^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^164^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[28]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 353, i64 3, {}* %"CONTAB[28]*19", {}* %"CONTAB[13]*20", {}* %"CONTAB[11]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 355, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-B=STRING-NACH-LISTE", i64 0, i64 0))
  %"CONTAB[355]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 355), align 8
  %"CONTAB[7]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 354, {}* %"CONTAB[355]*", {}* %"CONTAB[7]*22")
  %"CONTAB[274]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 356, i64 1, {}* %"CONTAB[274]*23")
  %"CONTAB[42]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 357, i64 4, {}* %"CONTAB[42]*24", {}* inttoptr (i64 21444 to {}*), {}* inttoptr (i64 680 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 358, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @"str-Ausgabe: Eine Liste aus den durch Leerzeichen getrennten Lispausdruecken des Strings String", i64 0, i64 0))
  %"CONTAB[274]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 359, i64 1, {}* %"CONTAB[274]*25")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^170^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^170^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 360, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 362, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-SUBSEQ, i64 0, i64 0))
  %"CONTAB[362]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 362), align 16
  %"CONTAB[3]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 361, {}* %"CONTAB[362]*", {}* %"CONTAB[3]*26")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 364, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-VECTOR, i64 0, i64 0))
  %"CONTAB[364]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 364), align 16
  %"CONTAB[3]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 363, {}* %"CONTAB[364]*", {}* %"CONTAB[3]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 366, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-NULL, i64 0, i64 0))
  %"CONTAB[366]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 366), align 16
  %"CONTAB[3]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 365, {}* %"CONTAB[366]*", {}* %"CONTAB[3]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 368, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-ETYPECASE-ERROR, i64 0, i64 0))
  %"CONTAB[368]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 368), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 367, {}* %"CONTAB[368]*", {}* %"CONTAB[34]*")
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 369, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 370, i64 2, {}* %"CONTAB[67]*29", {}* %"CONTAB[365]*30")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 372, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-FIXNUM, i64 0, i64 0))
  %"CONTAB[372]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 372), align 16
  %"CONTAB[3]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 371, {}* %"CONTAB[372]*", {}* %"CONTAB[3]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 374, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-SINGLE-FLOAT, i64 0, i64 0))
  %"CONTAB[374]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 374), align 16
  %"CONTAB[3]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 373, {}* %"CONTAB[374]*", {}* %"CONTAB[3]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 376, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-DOUBLE-FLOAT, i64 0, i64 0))
  %"CONTAB[376]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 376), align 16
  %"CONTAB[3]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 375, {}* %"CONTAB[376]*", {}* %"CONTAB[3]*33")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 378, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str-CONVERT-OVERFLOW-RESULT-TO-BIGNUM, i64 0, i64 0))
  %"CONTAB[378]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 378), align 16
  %"CONTAB[34]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 377, {}* %"CONTAB[378]*", {}* %"CONTAB[34]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 380, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-TWO-ARG-+", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.25() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !138 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.23)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.24)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.26() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !139 {
entry:
  %"CONTAB[380]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 380), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 379, {}* %"CONTAB[380]*", {}* %"CONTAB[34]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 382, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-TWO-ARG--, i64 0, i64 0))
  %"CONTAB[382]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 382), align 16
  %"CONTAB[34]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 381, {}* %"CONTAB[382]*", {}* %"CONTAB[34]*1")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 383, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 385, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-B=LISTE-NACH-STRING", i64 0, i64 0))
  %"CONTAB[385]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 385), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 384, {}* %"CONTAB[385]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 388, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-LISTE, i64 0, i64 0))
  %"CONTAB[388]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 388), align 16
  %"CONTAB[7]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 387, {}* %"CONTAB[388]*", {}* %"CONTAB[7]*2")
  %"CONTAB[387]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 386, i64 1, {}* %"CONTAB[387]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 389, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 22872 to {}*), {}* inttoptr (i64 712 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 390, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @"str-Ausgabe: Ein string, zusammengsetzt aus den Listenelelementen", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 392, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-NUMBER, i64 0, i64 0))
  %"CONTAB[392]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 392), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 391, {}* %"CONTAB[392]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 394, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str-ARRAY-RANK, i64 0, i64 0))
  %"CONTAB[394]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 394), align 16
  %"CONTAB[3]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 393, {}* %"CONTAB[394]*", {}* %"CONTAB[3]*3")
  %"CONTAB[387]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 395, i64 1, {}* %"CONTAB[387]*4")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^178^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^178^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 397, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-LINKS, i64 0, i64 0))
  %"CONTAB[397]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 397), align 8
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 396, {}* %"CONTAB[397]*", {}* %"CONTAB[23]*")
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 398, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 399, i64 2, {}* %"CONTAB[67]*5", {}* %"CONTAB[365]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 401, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-TWO-ARG->", i64 0, i64 0))
  %"CONTAB[401]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 401), align 8
  %"CONTAB[34]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 400, {}* %"CONTAB[401]*", {}* %"CONTAB[34]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 403, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-FLOOR, i64 0, i64 0))
  %"CONTAB[403]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 403), align 8
  %"CONTAB[3]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 402, {}* %"CONTAB[403]*", {}* %"CONTAB[3]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 405, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-MAKE-VECTOR, i64 0, i64 0))
  %"CONTAB[405]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 405), align 8
  %"CONTAB[34]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 404, {}* %"CONTAB[405]*", {}* %"CONTAB[34]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 407, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-FILL-ARRAY-WITH-ELT, i64 0, i64 0))
  %"CONTAB[407]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 407), align 8
  %"CONTAB[34]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 406, {}* %"CONTAB[407]*", {}* %"CONTAB[34]*10")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 409, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ODDP, i64 0, i64 0))
  %"CONTAB[409]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 409), align 8
  %"CONTAB[3]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 408, {}* %"CONTAB[409]*", {}* %"CONTAB[3]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 411, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str-B=STRING-ABSCHNEIDEN", i64 0, i64 0))
  %"CONTAB[411]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 411), align 8
  %"CONTAB[7]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 410, {}* %"CONTAB[411]*", {}* %"CONTAB[7]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 413, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-AUFFUELLZEICHEN, i64 0, i64 0))
  %"CONTAB[413]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 413), align 8
  %"CONTAB[23]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 412, {}* %"CONTAB[413]*", {}* %"CONTAB[23]*13")
  %"CONTAB[28]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 414, i64 3, {}* %"CONTAB[28]*14", {}* %"CONTAB[13]*15", {}* %"CONTAB[11]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 416, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"str-B=ZENTRIERE-LISPAUSDRUCK", i64 0, i64 0))
  %"CONTAB[416]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 416), align 16
  %"CONTAB[7]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 415, {}* %"CONTAB[416]*", {}* %"CONTAB[7]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 419, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-LAENGE, i64 0, i64 0))
  %"CONTAB[419]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 419), align 8
  %"CONTAB[7]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 418, {}* %"CONTAB[419]*", {}* %"CONTAB[7]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 421, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"str-&KEY", i64 0, i64 0))
  %"CONTAB[421]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 421), align 8
  %"CONTAB[3]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 420, {}* %"CONTAB[421]*", {}* %"CONTAB[3]*19")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 424, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-AUFFUELLZEICHEN, i64 0, i64 0))
  %"CONTAB[424]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 424), align 16
  %"CONTAB[7]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 423, {}* %"CONTAB[424]*", {}* %"CONTAB[7]*20")
  %"CONTAB[423]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 423), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 422, i64 2, {}* %"CONTAB[423]*", {}* inttoptr (i64 258 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 427, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-RUNDUNGSRICHTUNG, i64 0, i64 0))
  %"CONTAB[427]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 427), align 8
  %"CONTAB[7]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 426, {}* %"CONTAB[427]*", {}* %"CONTAB[7]*21")
  %"CONTAB[426]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 426), align 16
  %"CONTAB[396]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 396), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 425, i64 2, {}* %"CONTAB[426]*", {}* %"CONTAB[396]*")
  %"CONTAB[340]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 340), align 16
  %"CONTAB[418]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 418), align 16
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[422]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 422), align 16
  %"CONTAB[425]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 425), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 417, i64 5, {}* %"CONTAB[340]*", {}* %"CONTAB[418]*", {}* %"CONTAB[420]*", {}* %"CONTAB[422]*", {}* %"CONTAB[425]*")
  %"CONTAB[42]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 428, i64 4, {}* %"CONTAB[42]*22", {}* inttoptr (i64 24348 to {}*), {}* inttoptr (i64 764 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 429, i8* getelementptr inbounds ([275 x i8], [275 x i8]* @"str-Eingabe: Lispausdruck was, \0D\0A           laenge, auf die der Lispausdruck was zentriert werden soll\0D\0A           Auffuellzeichen, mit denen links und rechts des Strings aufgefuellt werden soll\0D\0A           Rundungsrichtung = :rechts oder :links\0D\0A  Ausgabe: String was zentriert", i64 0, i64 0))
  %"CONTAB[423]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 423), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 431, i64 2, {}* %"CONTAB[423]*23", {}* inttoptr (i64 258 to {}*))
  %"CONTAB[426]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 426), align 16
  %"CONTAB[396]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 396), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 432, i64 2, {}* %"CONTAB[426]*24", {}* %"CONTAB[396]*25")
  %"CONTAB[340]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 340), align 16
  %"CONTAB[418]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 418), align 16
  %"CONTAB[420]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[431]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 431), align 8
  %"CONTAB[432]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 432), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 430, i64 5, {}* %"CONTAB[340]*26", {}* %"CONTAB[418]*27", {}* %"CONTAB[420]*28", {}* %"CONTAB[431]*", {}* %"CONTAB[432]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 434, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-ALLOW-OTHER-KEYS, i64 0, i64 0))
  %"CONTAB[434]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 434), align 16
  %"CONTAB[23]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 433, {}* %"CONTAB[434]*", {}* %"CONTAB[23]*29")
  %"CONTAB[427]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 427), align 8
  %"CONTAB[23]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 435, {}* %"CONTAB[427]*30", {}* %"CONTAB[23]*31")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^191^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^191^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[67]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 436, i64 3, {}* %"CONTAB[67]*32", {}* %"CONTAB[363]*33", {}* %"CONTAB[365]*34")
  %"CONTAB[67]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 437, i64 2, {}* %"CONTAB[67]*35", {}* %"CONTAB[365]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 439, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-TWO-ARG-<=", i64 0, i64 0))
  %"CONTAB[439]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 439), align 8
  %"CONTAB[34]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 438, {}* %"CONTAB[439]*", {}* %"CONTAB[34]*37")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 441, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-MAKE-SEQUENCE, i64 0, i64 0))
  %"CONTAB[441]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 441), align 8
  %"CONTAB[3]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 440, {}* %"CONTAB[441]*", {}* %"CONTAB[3]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 443, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str-INITIAL-ELEMENT, i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.27() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !140 {
entry:
  %"CONTAB[443]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 443), align 8
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 442, {}* %"CONTAB[443]*", {}* %"CONTAB[23]*")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 444, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 447, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-MAXIMALLAENGE, i64 0, i64 0))
  %"CONTAB[447]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 447), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 446, {}* %"CONTAB[447]*", {}* %"CONTAB[7]*")
  %"CONTAB[423]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 423), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 448, i64 2, {}* %"CONTAB[423]*", {}* inttoptr (i64 370 to {}*))
  %"CONTAB[274]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %"CONTAB[446]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 446), align 16
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[448]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 448), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 445, i64 4, {}* %"CONTAB[274]*", {}* %"CONTAB[446]*", {}* %"CONTAB[420]*", {}* %"CONTAB[448]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 449, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 33148 to {}*), {}* inttoptr (i64 960 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 450, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"str-schneidet einen String auf die angegebene Maximallaenge = Anzahl von Buchstaben ab", i64 0, i64 0))
  %"CONTAB[423]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 423), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 452, i64 2, {}* %"CONTAB[423]*1", {}* inttoptr (i64 370 to {}*))
  %"CONTAB[274]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  %"CONTAB[446]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 446), align 16
  %"CONTAB[420]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[452]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 452), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 451, i64 4, {}* %"CONTAB[274]*2", {}* %"CONTAB[446]*3", {}* %"CONTAB[420]*4", {}* %"CONTAB[452]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^219^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^219^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 454, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-B-N-POSITION, i64 0, i64 0))
  %"CONTAB[454]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 454), align 16
  %"CONTAB[7]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 453, {}* %"CONTAB[454]*", {}* %"CONTAB[7]*5")
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 455, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 456, i64 2, {}* %"CONTAB[67]*6", {}* %"CONTAB[365]*7")
  %"CONTAB[28]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 457, i64 3, {}* %"CONTAB[28]*8", {}* %"CONTAB[13]*9", {}* %"CONTAB[11]*10")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 459, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str-B-DREI-PUNKTE-EINFUEGEN, i64 0, i64 0))
  %"CONTAB[459]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 459), align 8
  %"CONTAB[7]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 458, {}* %"CONTAB[459]*", {}* %"CONTAB[7]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 462, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-TEXT, i64 0, i64 0))
  %"CONTAB[462]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 462), align 16
  %"CONTAB[7]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 461, {}* %"CONTAB[462]*", {}* %"CONTAB[7]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 464, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-MAXHOEHE, i64 0, i64 0))
  %"CONTAB[464]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 464), align 16
  %"CONTAB[7]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 463, {}* %"CONTAB[464]*", {}* %"CONTAB[7]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 466, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-ZEILENHOEHE, i64 0, i64 0))
  %"CONTAB[466]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 466), align 16
  %"CONTAB[7]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 465, {}* %"CONTAB[466]*", {}* %"CONTAB[7]*14")
  %"CONTAB[461]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 461), align 8
  %"CONTAB[463]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 463), align 8
  %"CONTAB[465]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 465), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 460, i64 3, {}* %"CONTAB[461]*", {}* %"CONTAB[463]*", {}* %"CONTAB[465]*")
  %"CONTAB[42]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 467, i64 4, {}* %"CONTAB[42]*15", {}* inttoptr (i64 37804 to {}*), {}* inttoptr (i64 1048 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 468, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"str-Text ist groesser als maximale hoehe", i64 0, i64 0))
  %"CONTAB[461]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 461), align 8
  %"CONTAB[463]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 463), align 8
  %"CONTAB[465]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 465), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 469, i64 3, {}* %"CONTAB[461]*16", {}* %"CONTAB[463]*17", {}* %"CONTAB[465]*18")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^262^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^262^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 471, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-INTERN, i64 0, i64 0))
  %"CONTAB[471]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 471), align 8
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 470, {}* %"CONTAB[471]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 473, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-CHAR-UPCASE, i64 0, i64 0))
  %"CONTAB[473]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 473), align 8
  %"CONTAB[3]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 472, {}* %"CONTAB[473]*", {}* %"CONTAB[3]*19")
  %"CONTAB[28]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 474, i64 3, {}* %"CONTAB[28]*20", {}* %"CONTAB[13]*21", {}* %"CONTAB[11]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 476, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-B=ASCII", i64 0, i64 0))
  %"CONTAB[476]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 476), align 16
  %"CONTAB[7]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 475, {}* %"CONTAB[476]*", {}* %"CONTAB[7]*23")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 479, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-ARG, i64 0, i64 0))
  %"CONTAB[479]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 479), align 8
  %"CONTAB[7]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 478, {}* %"CONTAB[479]*", {}* %"CONTAB[7]*24")
  %"CONTAB[478]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 478), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 477, i64 1, {}* %"CONTAB[478]*")
  %"CONTAB[42]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 480, i64 4, {}* %"CONTAB[42]*25", {}* inttoptr (i64 39524 to {}*), {}* inttoptr (i64 1088 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 481, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"str-Wandelt ein Zeichen in ein Atom um", i64 0, i64 0))
  %"CONTAB[478]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 478), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 482, i64 1, {}* %"CONTAB[478]*26")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^272^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^272^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 484, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-STRING=", i64 0, i64 0))
  %"CONTAB[484]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 484), align 16
  %"CONTAB[3]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 483, {}* %"CONTAB[484]*", {}* %"CONTAB[3]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 485, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str- ", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 488, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-CHAR, i64 0, i64 0))
  %"CONTAB[488]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 488), align 16
  %"CONTAB[3]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 487, {}* %"CONTAB[488]*", {}* %"CONTAB[3]*28")
  %"CONTAB[28]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 489, i64 3, {}* %"CONTAB[28]*29", {}* %"CONTAB[13]*30", {}* %"CONTAB[11]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 491, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str-B=ERSTES-ZEICHEN", i64 0, i64 0))
  %"CONTAB[491]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 491), align 8
  %"CONTAB[7]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 490, {}* %"CONTAB[491]*", {}* %"CONTAB[7]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 494, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-ATOM-ODER-STRING, i64 0, i64 0))
  %"CONTAB[494]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 494), align 16
  %"CONTAB[7]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 493, {}* %"CONTAB[494]*", {}* %"CONTAB[7]*33")
  %"CONTAB[493]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 493), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 492, i64 1, {}* %"CONTAB[493]*")
  %"CONTAB[42]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 495, i64 4, {}* %"CONTAB[42]*34", {}* inttoptr (i64 39980 to {}*), {}* inttoptr (i64 1104 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 496, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @"str-liefert erstes Zeichen von Atom-oder-String als Character;\0D\0A  nil, wenn Atom-oder-String ein String ohne Inhalt ist", i64 0, i64 0))
  %"CONTAB[493]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 493), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 497, i64 1, {}* %"CONTAB[493]*35")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^276^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^276^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[67]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 498, i64 3, {}* %"CONTAB[67]*36", {}* %"CONTAB[363]*37", {}* %"CONTAB[365]*38")
  %"CONTAB[67]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 499, i64 2, {}* %"CONTAB[67]*39", {}* %"CONTAB[365]*40")
  %"CONTAB[28]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 500, i64 3, {}* %"CONTAB[28]*41", {}* %"CONTAB[13]*42", {}* %"CONTAB[11]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 502, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"str-B=LAENGE", i64 0, i64 0))
  %"CONTAB[502]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 502), align 16
  %"CONTAB[7]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 501, {}* %"CONTAB[502]*", {}* %"CONTAB[7]*44")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 505, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ATOM, i64 0, i64 0))
  %"CONTAB[505]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 505), align 8
  %"CONTAB[3]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 504, {}* %"CONTAB[505]*", {}* %"CONTAB[3]*45")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.28() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !141 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.26)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.27)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.29() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !142 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.25)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.28)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.30() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !143 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.22)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.29)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.31() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !144 {
entry:
  %"CONTAB[504]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 504), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 503, i64 1, {}* %"CONTAB[504]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 506, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 43676 to {}*), {}* inttoptr (i64 1204 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 507, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @"str-liefert die Anzahl der Zeichen (Buchstaben oder Ziffern) eines Atoms", i64 0, i64 0))
  %"CONTAB[504]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 504), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 508, i64 1, {}* %"CONTAB[504]*1")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^291^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^291^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 509, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 510, i64 2, {}* %"CONTAB[67]*2", {}* %"CONTAB[365]*3")
  %"CONTAB[67]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 511, i64 3, {}* %"CONTAB[67]*4", {}* %"CONTAB[363]*5", {}* %"CONTAB[365]*6")
  %"CONTAB[67]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 512, i64 2, {}* %"CONTAB[67]*7", {}* %"CONTAB[365]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 514, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-SEARCH, i64 0, i64 0))
  %"CONTAB[514]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 514), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 513, {}* %"CONTAB[514]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 516, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-TEST, i64 0, i64 0))
  %"CONTAB[516]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 516), align 16
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 515, {}* %"CONTAB[516]*", {}* %"CONTAB[23]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 517, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 518, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 520, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-B=ERSETZE-ZEICHENKETTE", i64 0, i64 0))
  %"CONTAB[520]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 520), align 16
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 519, {}* %"CONTAB[520]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 523, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-NEUE-ZEICHENKETTE, i64 0, i64 0))
  %"CONTAB[523]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 523), align 8
  %"CONTAB[7]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 522, {}* %"CONTAB[523]*", {}* %"CONTAB[7]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 525, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-ALTE-ZEICHENKETTE, i64 0, i64 0))
  %"CONTAB[525]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 525), align 8
  %"CONTAB[7]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 524, {}* %"CONTAB[525]*", {}* %"CONTAB[7]*10")
  %"CONTAB[522]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 522), align 16
  %"CONTAB[524]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 524), align 16
  %"CONTAB[274]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 521, i64 3, {}* %"CONTAB[522]*", {}* %"CONTAB[524]*", {}* %"CONTAB[274]*")
  %"CONTAB[42]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 526, i64 4, {}* %"CONTAB[42]*11", {}* inttoptr (i64 44356 to {}*), {}* inttoptr (i64 1228 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 527, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @"str-ersetzt in einem String alte-Zeichenkette durch neue-Zeichenkette", i64 0, i64 0))
  %"CONTAB[522]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 522), align 16
  %"CONTAB[524]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 524), align 16
  %"CONTAB[274]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 528, i64 3, {}* %"CONTAB[522]*12", {}* %"CONTAB[524]*13", {}* %"CONTAB[274]*14")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^307^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^307^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 530, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-STRING<", i64 0, i64 0))
  %"CONTAB[530]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 530), align 16
  %"CONTAB[3]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 529, {}* %"CONTAB[530]*", {}* %"CONTAB[3]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 532, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-STRING-UPCASE, i64 0, i64 0))
  %"CONTAB[532]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 532), align 16
  %"CONTAB[3]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 531, {}* %"CONTAB[532]*", {}* %"CONTAB[3]*16")
  %"CONTAB[28]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 533, i64 3, {}* %"CONTAB[28]*17", {}* %"CONTAB[13]*18", {}* %"CONTAB[11]*19")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 535, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-B=ALPHABETISCH<-P", i64 0, i64 0))
  %"CONTAB[535]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 535), align 8
  %"CONTAB[7]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 534, {}* %"CONTAB[535]*", {}* %"CONTAB[7]*20")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 538, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-ATOM-ODER-STRING1, i64 0, i64 0))
  %"CONTAB[538]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 538), align 16
  %"CONTAB[7]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 537, {}* %"CONTAB[538]*", {}* %"CONTAB[7]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 540, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-ATOM-ODER-STRING2, i64 0, i64 0))
  %"CONTAB[540]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 540), align 16
  %"CONTAB[7]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 539, {}* %"CONTAB[540]*", {}* %"CONTAB[7]*22")
  %"CONTAB[537]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 537), align 8
  %"CONTAB[539]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 539), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 536, i64 2, {}* %"CONTAB[537]*", {}* %"CONTAB[539]*")
  %"CONTAB[42]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 541, i64 4, {}* %"CONTAB[42]*23", {}* inttoptr (i64 49820 to {}*), {}* inttoptr (i64 1360 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 542, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @"str-liefert t, wenn Atom-oder-String1 alphabetisch vor Atom-oder-String2 kommt,\0D\0A   nil, sonst", i64 0, i64 0))
  %"CONTAB[537]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 537), align 8
  %"CONTAB[539]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 539), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 543, i64 2, {}* %"CONTAB[537]*24", {}* %"CONTAB[539]*25")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^324^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^324^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 545, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-STRING>", i64 0, i64 0))
  %"CONTAB[545]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 545), align 8
  %"CONTAB[3]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 544, {}* %"CONTAB[545]*", {}* %"CONTAB[3]*26")
  %"CONTAB[28]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 546, i64 3, {}* %"CONTAB[28]*27", {}* %"CONTAB[13]*28", {}* %"CONTAB[11]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 548, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-B=ALPHABETISCH>-P", i64 0, i64 0))
  %"CONTAB[548]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 548), align 16
  %"CONTAB[7]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 547, {}* %"CONTAB[548]*", {}* %"CONTAB[7]*30")
  %"CONTAB[537]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 537), align 8
  %"CONTAB[539]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 539), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 549, i64 2, {}* %"CONTAB[537]*31", {}* %"CONTAB[539]*32")
  %"CONTAB[42]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 550, i64 4, {}* %"CONTAB[42]*33", {}* inttoptr (i64 51392 to {}*), {}* inttoptr (i64 1392 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 551, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @"str-liefert t, wenn Atom-oder-String1 alphabetisch nach Atom-oder-String2 kommt,\0D\0A   nil, sonst", i64 0, i64 0))
  %"CONTAB[537]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 537), align 8
  %"CONTAB[539]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 539), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 552, i64 2, {}* %"CONTAB[537]*34", {}* %"CONTAB[539]*35")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^348^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^348^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 554, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-FIND-IF, i64 0, i64 0))
  %"CONTAB[554]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 554), align 16
  %"CONTAB[3]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 553, {}* %"CONTAB[554]*", {}* %"CONTAB[3]*36")
  %"CONTAB[28]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 555, i64 3, {}* %"CONTAB[28]*37", {}* %"CONTAB[13]*38", {}* %"CONTAB[11]*39")
  %"CONTAB[274]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 556, i64 1, {}* %"CONTAB[274]*40")
  %"CONTAB[42]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 557, i64 4, {}* %"CONTAB[42]*41", {}* inttoptr (i64 52888 to {}*), {}* inttoptr (i64 1424 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 558, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @"str-liefert t, wenn der String String nur Leerzeichen enthaelt bzw \22\22 ist\0D\0A   nil sonst", i64 0, i64 0))
  %"CONTAB[274]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 559, i64 1, {}* %"CONTAB[274]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 562, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ITEM, i64 0, i64 0))
  %"CONTAB[562]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 562), align 16
  %"CONTAB[7]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 561, {}* %"CONTAB[562]*", {}* %"CONTAB[7]*43")
  %"CONTAB[561]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 561), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 560, i64 1, {}* %"CONTAB[561]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^356^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^356^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 564, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-POSITION, i64 0, i64 0))
  %"CONTAB[564]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 564), align 16
  %"CONTAB[3]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 563, {}* %"CONTAB[564]*", {}* %"CONTAB[3]*44")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.32() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !145 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 566, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-START, i64 0, i64 0))
  %"CONTAB[566]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 566), align 16
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 565, {}* %"CONTAB[566]*", {}* %"CONTAB[23]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 568, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-TWO-ARG-=", i64 0, i64 0))
  %"CONTAB[568]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 568), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 567, {}* %"CONTAB[568]*", {}* %"CONTAB[34]*")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 569, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 572, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-WORIN, i64 0, i64 0))
  %"CONTAB[572]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 572), align 16
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 571, {}* %"CONTAB[572]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-N, i64 0, i64 0))
  %"CONTAB[574]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 574), align 16
  %"CONTAB[7]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 573, {}* %"CONTAB[574]*", {}* %"CONTAB[7]*1")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 577, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-START, i64 0, i64 0))
  %"CONTAB[577]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 577), align 8
  %"CONTAB[7]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 576, {}* %"CONTAB[577]*", {}* %"CONTAB[7]*2")
  %"CONTAB[576]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 576), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 575, i64 2, {}* %"CONTAB[576]*", {}* null)
  %"CONTAB[340]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 340), align 16
  %"CONTAB[571]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 571), align 8
  %"CONTAB[573]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 573), align 8
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[575]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 575), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 570, i64 5, {}* %"CONTAB[340]*", {}* %"CONTAB[571]*", {}* %"CONTAB[573]*", {}* %"CONTAB[420]*", {}* %"CONTAB[575]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 578, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 55836 to {}*), {}* inttoptr (i64 1540 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 579, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"str-Liefert die Position des n'ten Auftrtens von was in worin", i64 0, i64 0))
  %"CONTAB[576]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 576), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 581, i64 2, {}* %"CONTAB[576]*3", {}* null)
  %"CONTAB[340]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 340), align 16
  %"CONTAB[571]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 571), align 8
  %"CONTAB[573]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 573), align 8
  %"CONTAB[420]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[581]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 581), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 580, i64 5, {}* %"CONTAB[340]*4", {}* %"CONTAB[571]*5", {}* %"CONTAB[573]*6", {}* %"CONTAB[420]*7", {}* %"CONTAB[581]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^365^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^365^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 583, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-<", i64 0, i64 0))
  %"CONTAB[583]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 583), align 8
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 582, {}* %"CONTAB[583]*", {}* %"CONTAB[3]*")
  %"CONTAB[28]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 584, i64 3, {}* %"CONTAB[28]*8", {}* %"CONTAB[13]*9", {}* %"CONTAB[11]*10")
  %"CONTAB[11]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %"CONTAB[13]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 585, i64 2, {}* %"CONTAB[11]*11", {}* %"CONTAB[13]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 587, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-MAKE-LIST, i64 0, i64 0))
  %"CONTAB[587]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 587), align 8
  %"CONTAB[3]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 586, {}* %"CONTAB[587]*", {}* %"CONTAB[3]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 589, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-MIN, i64 0, i64 0))
  %"CONTAB[589]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 589), align 8
  %"CONTAB[3]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 588, {}* %"CONTAB[589]*", {}* %"CONTAB[3]*14")
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 590, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 591, i64 2, {}* %"CONTAB[67]*15", {}* %"CONTAB[365]*16")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 593, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-MAKE-SEQ-ITERATOR, i64 0, i64 0))
  %"CONTAB[593]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 593), align 8
  %"CONTAB[34]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 592, {}* %"CONTAB[593]*", {}* %"CONTAB[34]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 595, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-SEQ-ITERATOR-SET, i64 0, i64 0))
  %"CONTAB[595]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 595), align 8
  %"CONTAB[34]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 594, {}* %"CONTAB[595]*", {}* %"CONTAB[34]*18")
  %"CONTAB[28]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 596, i64 3, {}* %"CONTAB[28]*19", {}* %"CONTAB[13]*20", {}* %"CONTAB[11]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 598, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-SEQ-ITERATOR-REF, i64 0, i64 0))
  %"CONTAB[598]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 598), align 16
  %"CONTAB[34]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 597, {}* %"CONTAB[598]*", {}* %"CONTAB[34]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 600, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-SEQ-ITERATOR-NEXT, i64 0, i64 0))
  %"CONTAB[600]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 600), align 16
  %"CONTAB[34]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 599, {}* %"CONTAB[600]*", {}* %"CONTAB[34]*23")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 602, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str-SEQ-ITERATOR-ENDP, i64 0, i64 0))
  %"CONTAB[602]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 602), align 16
  %"CONTAB[34]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 601, {}* %"CONTAB[602]*", {}* %"CONTAB[34]*24")
  %"CONTAB[28]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 603, i64 3, {}* %"CONTAB[28]*25", {}* %"CONTAB[13]*26", {}* %"CONTAB[11]*27")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 605, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str-B=MIN", i64 0, i64 0))
  %"CONTAB[605]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 605), align 8
  %"CONTAB[7]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 604, {}* %"CONTAB[605]*", {}* %"CONTAB[7]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 608, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-SEQUENZ, i64 0, i64 0))
  %"CONTAB[608]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 608), align 16
  %"CONTAB[7]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 607, {}* %"CONTAB[608]*", {}* %"CONTAB[7]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 611, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-VERGLEICHSFUNKTION, i64 0, i64 0))
  %"CONTAB[611]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 611), align 8
  %"CONTAB[7]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 610, {}* %"CONTAB[611]*", {}* %"CONTAB[7]*30")
  %"CONTAB[11]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %"CONTAB[582]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 582), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 612, i64 2, {}* %"CONTAB[11]*31", {}* %"CONTAB[582]*")
  %"CONTAB[610]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 610), align 16
  %"CONTAB[612]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 612), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 609, i64 2, {}* %"CONTAB[610]*", {}* %"CONTAB[612]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 615, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-TESTFUNKTION, i64 0, i64 0))
  %"CONTAB[615]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 615), align 8
  %"CONTAB[7]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 614, {}* %"CONTAB[615]*", {}* %"CONTAB[7]*32")
  %"CONTAB[614]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 614), align 16
  %"CONTAB[0]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 613, i64 2, {}* %"CONTAB[614]*", {}* %"CONTAB[0]*")
  %"CONTAB[607]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 607), align 8
  %"CONTAB[420]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[609]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 609), align 8
  %"CONTAB[613]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 613), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 606, i64 4, {}* %"CONTAB[607]*", {}* %"CONTAB[420]*33", {}* %"CONTAB[609]*", {}* %"CONTAB[613]*")
  %"CONTAB[42]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 616, i64 4, {}* %"CONTAB[42]*34", {}* inttoptr (i64 57144 to {}*), {}* inttoptr (i64 1580 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 617, i8* getelementptr inbounds ([213 x i8], [213 x i8]* @"str-Eingabe Sequenz, Ausgabe minimum der Sequenz\0D\0A   &key testfunktion wird erst auf element der Sequenz angewendet bevor \0D\0A         verglichen wird (wie :key bei find)\0D\0A   &key vergleichsfunktion (wie :test be find)", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 621, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-MEMBER, i64 0, i64 0))
  %"CONTAB[621]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 621), align 8
  %"CONTAB[3]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 620, {}* %"CONTAB[621]*", {}* %"CONTAB[3]*35")
  %"CONTAB[620]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 620), align 16
  %"CONTAB[0]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 619, i64 2, {}* %"CONTAB[620]*", {}* %"CONTAB[0]*36")
  %"CONTAB[28]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[67]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[619]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 619), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 618, i64 3, {}* %"CONTAB[28]*37", {}* %"CONTAB[67]*38", {}* %"CONTAB[619]*")
  %"CONTAB[11]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %"CONTAB[582]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 582), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 624, i64 2, {}* %"CONTAB[11]*39", {}* %"CONTAB[582]*40")
  %"CONTAB[610]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 610), align 16
  %"CONTAB[624]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 624), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 623, i64 2, {}* %"CONTAB[610]*41", {}* %"CONTAB[624]*")
  %"CONTAB[614]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 614), align 16
  %"CONTAB[0]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 625, i64 2, {}* %"CONTAB[614]*42", {}* %"CONTAB[0]*43")
  %"CONTAB[607]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 607), align 8
  %"CONTAB[420]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[623]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 623), align 8
  %"CONTAB[625]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 625), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 622, i64 4, {}* %"CONTAB[607]*44", {}* %"CONTAB[420]*45", {}* %"CONTAB[623]*", {}* %"CONTAB[625]*")
  %"CONTAB[611]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 611), align 8
  %"CONTAB[23]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 626, {}* %"CONTAB[611]*46", {}* %"CONTAB[23]*47")
  %"CONTAB[615]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 615), align 8
  %"CONTAB[23]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 627, {}* %"CONTAB[615]*48", {}* %"CONTAB[23]*49")
  %"CONTAB[335]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 335), align 8
  %"CONTAB[337]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 337), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 628, i64 2, {}* %"CONTAB[335]*", {}* %"CONTAB[337]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^395^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^395^TOP-COMPILE-FILE", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.33() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !146 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.31)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.32)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.34() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !147 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 630, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-APPEND, i64 0, i64 0))
  %"CONTAB[630]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 630), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 629, {}* %"CONTAB[630]*", {}* %"CONTAB[3]*")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 631, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 633, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str-B=POSITIONEN-IF", i64 0, i64 0))
  %"CONTAB[633]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 633), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 632, {}* %"CONTAB[633]*", {}* %"CONTAB[7]*")
  %"CONTAB[614]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 614), align 16
  %"CONTAB[387]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 634, i64 2, {}* %"CONTAB[614]*", {}* %"CONTAB[387]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 635, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 61276 to {}*), {}* inttoptr (i64 1720 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[614]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 614), align 16
  %"CONTAB[387]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 636, i64 2, {}* %"CONTAB[614]*1", {}* %"CONTAB[387]*2")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^413^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^413^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 637, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 638, i64 2, {}* %"CONTAB[67]*3", {}* %"CONTAB[365]*4")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 639, i64 1, {}* %"CONTAB[69]*")
  %"CONTAB[69]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 641, i64 1, {}* %"CONTAB[69]*5")
  %"CONTAB[70]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %"CONTAB[363]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[641]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 641), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 640, i64 3, {}* %"CONTAB[70]*", {}* %"CONTAB[363]*6", {}* %"CONTAB[641]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 643, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-SEQUENCE, i64 0, i64 0))
  %"CONTAB[643]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 643), align 8
  %"CONTAB[3]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 642, {}* %"CONTAB[643]*", {}* %"CONTAB[3]*7")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 646, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-SIMPLE-ARRAY, i64 0, i64 0))
  %"CONTAB[646]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 646), align 16
  %"CONTAB[3]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 645, {}* %"CONTAB[646]*", {}* %"CONTAB[3]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 648, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-*", i64 0, i64 0))
  %"CONTAB[648]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 648), align 16
  %"CONTAB[3]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 647, {}* %"CONTAB[648]*", {}* %"CONTAB[3]*9")
  %"CONTAB[647]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 649, i64 1, {}* %"CONTAB[647]*")
  %"CONTAB[645]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[649]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 649), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 644, i64 3, {}* %"CONTAB[645]*", {}* %"CONTAB[647]*10", {}* %"CONTAB[649]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 651, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-ARRAY, i64 0, i64 0))
  %"CONTAB[651]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 651), align 8
  %"CONTAB[3]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 650, {}* %"CONTAB[651]*", {}* %"CONTAB[3]*11")
  %"CONTAB[647]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 654, i64 1, {}* %"CONTAB[647]*12")
  %"CONTAB[645]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[654]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 654), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 653, i64 3, {}* %"CONTAB[645]*13", {}* %"CONTAB[647]*14", {}* %"CONTAB[654]*")
  %"CONTAB[653]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 653), align 8
  %"CONTAB[645]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[650]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 650), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 652, i64 3, {}* %"CONTAB[653]*", {}* %"CONTAB[645]*15", {}* %"CONTAB[650]*")
  %"CONTAB[647]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 656, i64 1, {}* %"CONTAB[647]*16")
  %"CONTAB[645]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[656]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 656), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 655, i64 3, {}* %"CONTAB[645]*17", {}* %"CONTAB[647]*18", {}* %"CONTAB[656]*")
  %"CONTAB[647]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 658, i64 1, {}* %"CONTAB[647]*19")
  %"CONTAB[645]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[658]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 658), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 657, i64 3, {}* %"CONTAB[645]*20", {}* %"CONTAB[647]*21", {}* %"CONTAB[658]*")
  %"CONTAB[647]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 661, i64 1, {}* %"CONTAB[647]*22")
  %"CONTAB[645]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[661]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 661), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 660, i64 3, {}* %"CONTAB[645]*23", {}* %"CONTAB[647]*24", {}* %"CONTAB[661]*")
  %"CONTAB[660]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 660), align 16
  %"CONTAB[650]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 650), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 659, i64 2, {}* %"CONTAB[660]*", {}* %"CONTAB[650]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 663, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-TWO-ARG-<", i64 0, i64 0))
  %"CONTAB[663]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 663), align 8
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 662, {}* %"CONTAB[663]*", {}* %"CONTAB[34]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 664, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-~d is not a valid row-major index for ~a", i64 0, i64 0))
  %"CONTAB[647]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 666, i64 1, {}* %"CONTAB[647]*26")
  %"CONTAB[645]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[69]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %"CONTAB[666]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 666), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 665, i64 3, {}* %"CONTAB[645]*27", {}* %"CONTAB[69]*28", {}* %"CONTAB[666]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 669, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-BASE-CHAR, i64 0, i64 0))
  %"CONTAB[669]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 669), align 8
  %"CONTAB[3]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 668, {}* %"CONTAB[669]*", {}* %"CONTAB[3]*29")
  %"CONTAB[647]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 670, i64 1, {}* %"CONTAB[647]*30")
  %"CONTAB[645]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[668]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 668), align 16
  %"CONTAB[670]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 670), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 667, i64 3, {}* %"CONTAB[645]*31", {}* %"CONTAB[668]*", {}* %"CONTAB[670]*")
  %"CONTAB[647]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 672, i64 1, {}* %"CONTAB[647]*32")
  %"CONTAB[645]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[265]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 265), align 8
  %"CONTAB[672]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 672), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 671, i64 3, {}* %"CONTAB[645]*33", {}* %"CONTAB[265]*", {}* %"CONTAB[672]*")
  %"CONTAB[647]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 674, i64 1, {}* %"CONTAB[647]*34")
  %"CONTAB[645]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[375]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 375), align 8
  %"CONTAB[674]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 674), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 673, i64 3, {}* %"CONTAB[645]*35", {}* %"CONTAB[375]*", {}* %"CONTAB[674]*")
  %"CONTAB[647]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 676, i64 1, {}* %"CONTAB[647]*36")
  %"CONTAB[645]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[373]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 373), align 8
  %"CONTAB[676]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 676), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 675, i64 3, {}* %"CONTAB[645]*37", {}* %"CONTAB[373]*", {}* %"CONTAB[676]*")
  %"CONTAB[647]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 678, i64 1, {}* %"CONTAB[647]*38")
  %"CONTAB[645]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[371]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 371), align 8
  %"CONTAB[678]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 678), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 677, i64 3, {}* %"CONTAB[645]*39", {}* %"CONTAB[371]*", {}* %"CONTAB[678]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 681, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INTEGER64, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 683, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-EXT, i64 0, i64 0))
  %"CONTAB[683]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 683), align 8
  tail call void @ltvc_make_package({ i8*, i8*, i64 }* nonnull @constants-table, i64 682, {}* %"CONTAB[683]*")
  %"CONTAB[681]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 681), align 8
  %"CONTAB[682]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 680, {}* %"CONTAB[681]*", {}* %"CONTAB[682]*")
  %"CONTAB[647]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 684, i64 1, {}* %"CONTAB[647]*40")
  %"CONTAB[645]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[680]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 680), align 16
  %"CONTAB[684]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 684), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 679, i64 3, {}* %"CONTAB[645]*41", {}* %"CONTAB[680]*", {}* %"CONTAB[684]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 687, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INTEGER32, i64 0, i64 0))
  %"CONTAB[687]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 687), align 8
  %"CONTAB[682]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 686, {}* %"CONTAB[687]*", {}* %"CONTAB[682]*42")
  %"CONTAB[647]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 688, i64 1, {}* %"CONTAB[647]*43")
  %"CONTAB[645]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[686]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 686), align 16
  %"CONTAB[688]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 688), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 685, i64 3, {}* %"CONTAB[645]*44", {}* %"CONTAB[686]*", {}* %"CONTAB[688]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 691, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-INTEGER16, i64 0, i64 0))
  %"CONTAB[691]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 691), align 8
  %"CONTAB[682]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 690, {}* %"CONTAB[691]*", {}* %"CONTAB[682]*45")
  %"CONTAB[647]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 692, i64 1, {}* %"CONTAB[647]*46")
  %"CONTAB[645]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[690]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 690), align 16
  %"CONTAB[692]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 692), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 689, i64 3, {}* %"CONTAB[645]*47", {}* %"CONTAB[690]*", {}* %"CONTAB[692]*")
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @RUN-ALL.35() #5 personality i32 (...)* @__gxx_personality_v0 !dbg !148 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 695, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str-INTEGER8, i64 0, i64 0))
  %"CONTAB[695]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 695), align 8
  %"CONTAB[682]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 694, {}* %"CONTAB[695]*", {}* %"CONTAB[682]*")
  %"CONTAB[647]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 696, i64 1, {}* %"CONTAB[647]*")
  %"CONTAB[645]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[694]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 694), align 16
  %"CONTAB[696]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 696), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 693, i64 3, {}* %"CONTAB[645]*", {}* %"CONTAB[694]*", {}* %"CONTAB[696]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 699, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-BYTE64, i64 0, i64 0))
  %"CONTAB[699]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 699), align 8
  %"CONTAB[682]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 698, {}* %"CONTAB[699]*", {}* %"CONTAB[682]*1")
  %"CONTAB[647]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 700, i64 1, {}* %"CONTAB[647]*2")
  %"CONTAB[645]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[698]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 698), align 16
  %"CONTAB[700]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 700), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 697, i64 3, {}* %"CONTAB[645]*3", {}* %"CONTAB[698]*", {}* %"CONTAB[700]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 703, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-BYTE32, i64 0, i64 0))
  %"CONTAB[703]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 703), align 8
  %"CONTAB[682]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 702, {}* %"CONTAB[703]*", {}* %"CONTAB[682]*4")
  %"CONTAB[647]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 704, i64 1, {}* %"CONTAB[647]*5")
  %"CONTAB[645]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[702]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 702), align 16
  %"CONTAB[704]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 704), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 701, i64 3, {}* %"CONTAB[645]*6", {}* %"CONTAB[702]*", {}* %"CONTAB[704]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 707, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-BYTE16, i64 0, i64 0))
  %"CONTAB[707]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 707), align 8
  %"CONTAB[682]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 706, {}* %"CONTAB[707]*", {}* %"CONTAB[682]*7")
  %"CONTAB[647]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 708, i64 1, {}* %"CONTAB[647]*8")
  %"CONTAB[645]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[706]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 706), align 16
  %"CONTAB[708]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 708), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 705, i64 3, {}* %"CONTAB[645]*9", {}* %"CONTAB[706]*", {}* %"CONTAB[708]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 711, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-BYTE8, i64 0, i64 0))
  %"CONTAB[711]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 711), align 8
  %"CONTAB[682]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 682), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 710, {}* %"CONTAB[711]*", {}* %"CONTAB[682]*10")
  %"CONTAB[647]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 712, i64 1, {}* %"CONTAB[647]*11")
  %"CONTAB[645]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[710]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 710), align 16
  %"CONTAB[712]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 712), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 709, i64 3, {}* %"CONTAB[645]*12", {}* %"CONTAB[710]*", {}* %"CONTAB[712]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 715, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-BIT, i64 0, i64 0))
  %"CONTAB[715]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 715), align 8
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 714, {}* %"CONTAB[715]*", {}* %"CONTAB[3]*")
  %"CONTAB[647]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 716, i64 1, {}* %"CONTAB[647]*13")
  %"CONTAB[645]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[714]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 714), align 16
  %"CONTAB[716]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 716), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 713, i64 3, {}* %"CONTAB[645]*14", {}* %"CONTAB[714]*", {}* %"CONTAB[716]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 718, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-BFORMAT, i64 0, i64 0))
  %"CONTAB[718]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 718), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 717, {}* %"CONTAB[718]*", {}* %"CONTAB[34]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 719, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @"str-unsafe-vector-ref array-element-type: %s%N", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 721, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-ARRAY-ELEMENT-TYPE, i64 0, i64 0))
  %"CONTAB[721]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 721), align 8
  %"CONTAB[3]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 720, {}* %"CONTAB[721]*", {}* %"CONTAB[3]*15")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 722, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-BUG: unsafe-vector-ref unknown vector ~a", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 724, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-NTHCDR, i64 0, i64 0))
  %"CONTAB[724]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 724), align 16
  %"CONTAB[3]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 723, {}* %"CONTAB[724]*", {}* %"CONTAB[3]*16")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 725, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 726, i64 1, {}* %"CONTAB[69]*")
  %"CONTAB[69]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 728, i64 1, {}* %"CONTAB[69]*17")
  %"CONTAB[70]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 70), align 16
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[728]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 728), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 727, i64 3, {}* %"CONTAB[70]*", {}* %"CONTAB[363]*", {}* %"CONTAB[728]*")
  %"CONTAB[647]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 730, i64 1, {}* %"CONTAB[647]*18")
  %"CONTAB[645]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[730]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 730), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 729, i64 3, {}* %"CONTAB[645]*19", {}* %"CONTAB[647]*20", {}* %"CONTAB[730]*")
  %"CONTAB[647]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 733, i64 1, {}* %"CONTAB[647]*21")
  %"CONTAB[645]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[733]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 733), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 732, i64 3, {}* %"CONTAB[645]*22", {}* %"CONTAB[647]*23", {}* %"CONTAB[733]*")
  %"CONTAB[732]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 732), align 16
  %"CONTAB[645]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[650]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 650), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 731, i64 3, {}* %"CONTAB[732]*", {}* %"CONTAB[645]*24", {}* %"CONTAB[650]*")
  %"CONTAB[647]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 735, i64 1, {}* %"CONTAB[647]*25")
  %"CONTAB[645]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[735]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 735), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 734, i64 3, {}* %"CONTAB[645]*26", {}* %"CONTAB[647]*27", {}* %"CONTAB[735]*")
  %"CONTAB[647]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 737, i64 1, {}* %"CONTAB[647]*28")
  %"CONTAB[645]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[737]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 737), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 736, i64 3, {}* %"CONTAB[645]*29", {}* %"CONTAB[647]*30", {}* %"CONTAB[737]*")
  %"CONTAB[647]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 740, i64 1, {}* %"CONTAB[647]*31")
  %"CONTAB[645]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[647]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  %"CONTAB[740]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 740), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 739, i64 3, {}* %"CONTAB[645]*32", {}* %"CONTAB[647]*33", {}* %"CONTAB[740]*")
  %"CONTAB[739]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 739), align 8
  %"CONTAB[650]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 650), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 738, i64 2, {}* %"CONTAB[739]*", {}* %"CONTAB[650]*34")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 741, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str-~d is not a valid row-major index for ~a", i64 0, i64 0))
  %"CONTAB[647]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 743, i64 1, {}* %"CONTAB[647]*35")
  %"CONTAB[645]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[69]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  %"CONTAB[743]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 743), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 742, i64 3, {}* %"CONTAB[645]*36", {}* %"CONTAB[69]*37", {}* %"CONTAB[743]*")
  %"CONTAB[647]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 745, i64 1, {}* %"CONTAB[647]*38")
  %"CONTAB[645]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[668]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 668), align 16
  %"CONTAB[745]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 745), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 744, i64 3, {}* %"CONTAB[645]*39", {}* %"CONTAB[668]*", {}* %"CONTAB[745]*")
  %"CONTAB[647]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 747, i64 1, {}* %"CONTAB[647]*40")
  %"CONTAB[645]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[265]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 265), align 8
  %"CONTAB[747]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 747), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 746, i64 3, {}* %"CONTAB[645]*41", {}* %"CONTAB[265]*", {}* %"CONTAB[747]*")
  %"CONTAB[647]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 749, i64 1, {}* %"CONTAB[647]*42")
  %"CONTAB[645]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[375]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 375), align 8
  %"CONTAB[749]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 749), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 748, i64 3, {}* %"CONTAB[645]*43", {}* %"CONTAB[375]*", {}* %"CONTAB[749]*")
  %"CONTAB[647]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 751, i64 1, {}* %"CONTAB[647]*44")
  %"CONTAB[645]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[373]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 373), align 8
  %"CONTAB[751]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 751), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 750, i64 3, {}* %"CONTAB[645]*45", {}* %"CONTAB[373]*", {}* %"CONTAB[751]*")
  %"CONTAB[647]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 753, i64 1, {}* %"CONTAB[647]*46")
  %"CONTAB[645]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[371]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 371), align 8
  %"CONTAB[753]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 753), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 752, i64 3, {}* %"CONTAB[645]*47", {}* %"CONTAB[371]*", {}* %"CONTAB[753]*")
  %"CONTAB[647]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 755, i64 1, {}* %"CONTAB[647]*48")
  %"CONTAB[645]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[680]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 680), align 16
  %"CONTAB[755]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 755), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 754, i64 3, {}* %"CONTAB[645]*49", {}* %"CONTAB[680]*", {}* %"CONTAB[755]*")
  %"CONTAB[647]*50" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 757, i64 1, {}* %"CONTAB[647]*50")
  %"CONTAB[645]*51" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[686]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 686), align 16
  %"CONTAB[757]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 757), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 756, i64 3, {}* %"CONTAB[645]*51", {}* %"CONTAB[686]*", {}* %"CONTAB[757]*")
  %"CONTAB[647]*52" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 759, i64 1, {}* %"CONTAB[647]*52")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.36() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !149 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.34)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.35)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.37() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !150 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.33)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.36)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.38() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !151 {
entry:
  %"CONTAB[645]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[690]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 690), align 16
  %"CONTAB[759]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 759), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 758, i64 3, {}* %"CONTAB[645]*", {}* %"CONTAB[690]*", {}* %"CONTAB[759]*")
  %"CONTAB[647]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 761, i64 1, {}* %"CONTAB[647]*")
  %"CONTAB[645]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[694]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 694), align 16
  %"CONTAB[761]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 761), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 760, i64 3, {}* %"CONTAB[645]*1", {}* %"CONTAB[694]*", {}* %"CONTAB[761]*")
  %"CONTAB[647]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 763, i64 1, {}* %"CONTAB[647]*2")
  %"CONTAB[645]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[698]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 698), align 16
  %"CONTAB[763]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 763), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 762, i64 3, {}* %"CONTAB[645]*3", {}* %"CONTAB[698]*", {}* %"CONTAB[763]*")
  %"CONTAB[647]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 765, i64 1, {}* %"CONTAB[647]*4")
  %"CONTAB[645]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[702]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 702), align 16
  %"CONTAB[765]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 765), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 764, i64 3, {}* %"CONTAB[645]*5", {}* %"CONTAB[702]*", {}* %"CONTAB[765]*")
  %"CONTAB[647]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 767, i64 1, {}* %"CONTAB[647]*6")
  %"CONTAB[645]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[706]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 706), align 16
  %"CONTAB[767]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 767), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 766, i64 3, {}* %"CONTAB[645]*7", {}* %"CONTAB[706]*", {}* %"CONTAB[767]*")
  %"CONTAB[647]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 769, i64 1, {}* %"CONTAB[647]*8")
  %"CONTAB[645]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[710]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 710), align 16
  %"CONTAB[769]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 769), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 768, i64 3, {}* %"CONTAB[645]*9", {}* %"CONTAB[710]*", {}* %"CONTAB[769]*")
  %"CONTAB[647]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 647), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 771, i64 1, {}* %"CONTAB[647]*10")
  %"CONTAB[645]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 645), align 8
  %"CONTAB[714]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 714), align 16
  %"CONTAB[771]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 771), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 770, i64 3, {}* %"CONTAB[645]*11", {}* %"CONTAB[714]*", {}* %"CONTAB[771]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 772, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-BUG: Unknown vector ~a", i64 0, i64 0))
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 773, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 775, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-B=IN-SEQUENCE-ERSETZEN", i64 0, i64 0))
  %"CONTAB[775]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 775), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 774, {}* %"CONTAB[775]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 778, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-PAARE, i64 0, i64 0))
  %"CONTAB[778]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 778), align 16
  %"CONTAB[7]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 777, {}* %"CONTAB[778]*", {}* %"CONTAB[7]*12")
  %"CONTAB[642]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 642), align 16
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[777]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 777), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 776, i64 3, {}* %"CONTAB[642]*", {}* %"CONTAB[84]*", {}* %"CONTAB[777]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 779, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 63636 to {}*), {}* inttoptr (i64 1788 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 780, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @"str-Ersetz in einer Sequence elemente durch neue analog substitute,\0D\0A   aber auch fuer meherere Werte", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 782, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str-BASE-CHAR-P, i64 0, i64 0))
  %"CONTAB[782]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 782), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 781, {}* %"CONTAB[782]*", {}* %"CONTAB[34]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 784, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str--9223372036854775808, i64 0, i64 0))
  %"CONTAB[784]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 784), align 16
  tail call void @ltvc_make_bignum({ i8*, i8*, i64 }* nonnull @constants-table, i64 783, {}* %"CONTAB[784]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 786, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str->=", i64 0, i64 0))
  %"CONTAB[786]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 786), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 785, {}* %"CONTAB[786]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 788, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-9223372036854775807, i64 0, i64 0))
  %"CONTAB[788]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 788), align 16
  tail call void @ltvc_make_bignum({ i8*, i8*, i64 }* nonnull @constants-table, i64 787, {}* %"CONTAB[788]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 790, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str-<=", i64 0, i64 0))
  %"CONTAB[790]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 790), align 16
  %"CONTAB[3]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 789, {}* %"CONTAB[790]*", {}* %"CONTAB[3]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 792, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str-18446744073709551615, i64 0, i64 0))
  %"CONTAB[792]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 792), align 16
  tail call void @ltvc_make_bignum({ i8*, i8*, i64 }* nonnull @constants-table, i64 791, {}* %"CONTAB[792]*")
  %"CONTAB[642]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 642), align 16
  %"CONTAB[84]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[777]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 777), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 793, i64 3, {}* %"CONTAB[642]*14", {}* %"CONTAB[84]*15", {}* %"CONTAB[777]*16")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^437^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^437^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 795, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-NEQ, i64 0, i64 0))
  %"CONTAB[795]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 795), align 8
  %"CONTAB[7]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 794, {}* %"CONTAB[795]*", {}* %"CONTAB[7]*17")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 797, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-PSEUDO, i64 0, i64 0))
  %"CONTAB[797]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 797), align 8
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 796, {}* %"CONTAB[797]*", {}* %"CONTAB[23]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 799, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"str-B=PSEUDO-PROPERTIES-LOESCHEN", i64 0, i64 0))
  %"CONTAB[799]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 799), align 8
  %"CONTAB[7]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 798, {}* %"CONTAB[799]*", {}* %"CONTAB[7]*18")
  %"CONTAB[28]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 800, i64 3, {}* %"CONTAB[28]*19", {}* %"CONTAB[13]*20", {}* %"CONTAB[11]*21")
  %"CONTAB[387]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 801, i64 1, {}* %"CONTAB[387]*")
  %"CONTAB[42]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 802, i64 4, {}* %"CONTAB[42]*22", {}* inttoptr (i64 66300 to {}*), {}* inttoptr (i64 1896 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[387]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 803, i64 1, {}* %"CONTAB[387]*23")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^460^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^460^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[28]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 804, i64 3, {}* %"CONTAB[28]*24", {}* %"CONTAB[13]*25", {}* %"CONTAB[11]*26")
  %"CONTAB[28]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 805, i64 3, {}* %"CONTAB[28]*27", {}* %"CONTAB[13]*28", {}* %"CONTAB[11]*29")
  %"CONTAB[28]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 806, i64 3, {}* %"CONTAB[28]*30", {}* %"CONTAB[13]*31", {}* %"CONTAB[11]*32")
  %"CONTAB[28]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 807, i64 3, {}* %"CONTAB[28]*33", {}* %"CONTAB[13]*34", {}* %"CONTAB[11]*35")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 809, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"str-B=IN-SORTIERTE-LISTE-EINFUEGEN", i64 0, i64 0))
  %"CONTAB[809]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 809), align 8
  %"CONTAB[7]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 808, {}* %"CONTAB[809]*", {}* %"CONTAB[7]*36")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 812, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-ELEMENT, i64 0, i64 0))
  %"CONTAB[812]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 812), align 16
  %"CONTAB[7]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 811, {}* %"CONTAB[812]*", {}* %"CONTAB[7]*37")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 814, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-PRAEDIKAT, i64 0, i64 0))
  %"CONTAB[814]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 814), align 16
  %"CONTAB[7]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 813, {}* %"CONTAB[814]*", {}* %"CONTAB[7]*38")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 817, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-KEY, i64 0, i64 0))
  %"CONTAB[817]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 817), align 8
  %"CONTAB[7]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 816, {}* %"CONTAB[817]*", {}* %"CONTAB[7]*39")
  %"CONTAB[816]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 816), align 16
  %"CONTAB[0]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 815, i64 2, {}* %"CONTAB[816]*", {}* %"CONTAB[0]*")
  %"CONTAB[811]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 811), align 8
  %"CONTAB[387]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  %"CONTAB[813]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 813), align 8
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[815]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 815), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 810, i64 5, {}* %"CONTAB[811]*", {}* %"CONTAB[387]*40", {}* %"CONTAB[813]*", {}* %"CONTAB[420]*", {}* %"CONTAB[815]*")
  %"CONTAB[42]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 818, i64 4, {}* %"CONTAB[42]*41", {}* inttoptr (i64 67480 to {}*), {}* inttoptr (i64 1932 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 819, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @"str-fuegt das Element Element in eine mit Praedikat sortierte Liste Liste ein\0D\0A   aufpassen: key wird auch auf Element angewendet", i64 0, i64 0))
  %"CONTAB[816]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 816), align 16
  %"CONTAB[0]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 821, i64 2, {}* %"CONTAB[816]*42", {}* %"CONTAB[0]*43")
  %"CONTAB[811]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 811), align 8
  %"CONTAB[387]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  %"CONTAB[813]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 813), align 8
  %"CONTAB[420]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[821]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 821), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 820, i64 5, {}* %"CONTAB[811]*44", {}* %"CONTAB[387]*45", {}* %"CONTAB[813]*46", {}* %"CONTAB[420]*47", {}* %"CONTAB[821]*")
  ret void
}

; Function Attrs: nounwind
declare void @ltvc_make_bignum({ i8*, i8*, i64 }*, i64, {}*) local_unnamed_addr #1

; Function Attrs: uwtable
define internal void @RUN-ALL.39() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !152 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 823, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-KEY, i64 0, i64 0))
  %"CONTAB[823]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 823), align 8
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 822, {}* %"CONTAB[823]*", {}* %"CONTAB[23]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^483^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^483^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 825, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-REVERSE, i64 0, i64 0))
  %"CONTAB[825]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 825), align 8
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 824, {}* %"CONTAB[825]*", {}* %"CONTAB[3]*")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 826, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 828, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"str-B=SCHLUESSELWOERTER", i64 0, i64 0))
  %"CONTAB[828]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 828), align 16
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 827, {}* %"CONTAB[828]*", {}* %"CONTAB[7]*")
  %"CONTAB[387]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 829, i64 1, {}* %"CONTAB[387]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 830, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 71436 to {}*), {}* inttoptr (i64 2028 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 831, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @"str-liefert die jeweils Elemente der Liste Liste, die an 1., 3., etc. Position stehen", i64 0, i64 0))
  %"CONTAB[387]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 832, i64 1, {}* %"CONTAB[387]*1")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^501^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^501^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 834, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-SORT, i64 0, i64 0))
  %"CONTAB[834]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 834), align 16
  %"CONTAB[3]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 833, {}* %"CONTAB[834]*", {}* %"CONTAB[3]*2")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 836, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-COPY-LIST, i64 0, i64 0))
  %"CONTAB[836]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 836), align 16
  %"CONTAB[3]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 835, {}* %"CONTAB[836]*", {}* %"CONTAB[3]*3")
  %"CONTAB[28]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 837, i64 3, {}* %"CONTAB[28]*4", {}* %"CONTAB[13]*5", {}* %"CONTAB[11]*6")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 839, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-B=SORTIERE-ALPHABETISCH", i64 0, i64 0))
  %"CONTAB[839]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 839), align 8
  %"CONTAB[7]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 838, {}* %"CONTAB[839]*", {}* %"CONTAB[7]*7")
  %"CONTAB[387]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 840, i64 1, {}* %"CONTAB[387]*8")
  %"CONTAB[42]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 841, i64 4, {}* %"CONTAB[42]*9", {}* inttoptr (i64 73372 to {}*), {}* inttoptr (i64 2068 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 842, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @"str-liefert die alphabetisch sortierte Liste Liste", i64 0, i64 0))
  %"CONTAB[387]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 843, i64 1, {}* %"CONTAB[387]*10")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^517^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^517^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 845, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-LAST, i64 0, i64 0))
  %"CONTAB[845]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 845), align 8
  %"CONTAB[3]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 844, {}* %"CONTAB[845]*", {}* %"CONTAB[3]*11")
  %"CONTAB[28]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 846, i64 3, {}* %"CONTAB[28]*12", {}* %"CONTAB[13]*13", {}* %"CONTAB[11]*14")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 848, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-B=LETZTES-LISTENELEMENT", i64 0, i64 0))
  %"CONTAB[848]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 848), align 16
  %"CONTAB[7]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 847, {}* %"CONTAB[848]*", {}* %"CONTAB[7]*15")
  %"CONTAB[387]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 849, i64 1, {}* %"CONTAB[387]*16")
  %"CONTAB[42]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 850, i64 4, {}* %"CONTAB[42]*17", {}* inttoptr (i64 74072 to {}*), {}* inttoptr (i64 2092 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 851, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @"str-liefert das letzte Element der Liste Liste", i64 0, i64 0))
  %"CONTAB[387]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 852, i64 1, {}* %"CONTAB[387]*18")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^523^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^523^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[67]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 853, i64 3, {}* %"CONTAB[67]*", {}* %"CONTAB[363]*", {}* %"CONTAB[365]*")
  %"CONTAB[67]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 854, i64 2, {}* %"CONTAB[67]*19", {}* %"CONTAB[365]*20")
  %"CONTAB[67]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 855, i64 3, {}* %"CONTAB[67]*21", {}* %"CONTAB[363]*22", {}* %"CONTAB[365]*23")
  %"CONTAB[67]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 856, i64 2, {}* %"CONTAB[67]*24", {}* %"CONTAB[365]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 858, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str-TWO-ARG->=", i64 0, i64 0))
  %"CONTAB[858]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 858), align 16
  %"CONTAB[34]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 34), align 16
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 857, {}* %"CONTAB[858]*", {}* %"CONTAB[34]*")
  %"CONTAB[28]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 859, i64 3, {}* %"CONTAB[28]*26", {}* %"CONTAB[13]*27", {}* %"CONTAB[11]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 861, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-B=LOESCHE-NTES-ELEMENT", i64 0, i64 0))
  %"CONTAB[861]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 861), align 8
  %"CONTAB[7]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 860, {}* %"CONTAB[861]*", {}* %"CONTAB[7]*29")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 865, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-BEGINN-BEI-0, i64 0, i64 0))
  %"CONTAB[865]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 865), align 8
  %"CONTAB[7]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 864, {}* %"CONTAB[865]*", {}* %"CONTAB[7]*30")
  %"CONTAB[864]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 864), align 16
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 863, i64 2, {}* %"CONTAB[864]*", {}* %"CONTAB[69]*")
  %"CONTAB[563]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 563), align 8
  %"CONTAB[387]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[863]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 863), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 862, i64 4, {}* %"CONTAB[563]*", {}* %"CONTAB[387]*31", {}* %"CONTAB[420]*", {}* %"CONTAB[863]*")
  %"CONTAB[42]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 866, i64 4, {}* %"CONTAB[42]*32", {}* inttoptr (i64 74664 to {}*), {}* inttoptr (i64 2116 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 867, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @"str-loescht das Element an Position Position aus der Liste", i64 0, i64 0))
  %"CONTAB[864]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 864), align 16
  %"CONTAB[69]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 869, i64 2, {}* %"CONTAB[864]*33", {}* %"CONTAB[69]*34")
  %"CONTAB[563]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 563), align 8
  %"CONTAB[387]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 387), align 8
  %"CONTAB[420]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[869]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 869), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 868, i64 4, {}* %"CONTAB[563]*35", {}* %"CONTAB[387]*36", {}* %"CONTAB[420]*37", {}* %"CONTAB[869]*")
  %"CONTAB[865]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 865), align 8
  %"CONTAB[23]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 870, {}* %"CONTAB[865]*38", {}* %"CONTAB[23]*39")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^529^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^529^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 872, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str-INTERSECTION, i64 0, i64 0))
  %"CONTAB[872]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 872), align 16
  %"CONTAB[3]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 871, {}* %"CONTAB[872]*", {}* %"CONTAB[3]*40")
  %"CONTAB[28]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 873, i64 3, {}* %"CONTAB[28]*41", {}* %"CONTAB[13]*42", {}* %"CONTAB[11]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 875, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str-B=INTERSECTION", i64 0, i64 0))
  %"CONTAB[875]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 875), align 8
  %"CONTAB[7]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 874, {}* %"CONTAB[875]*", {}* %"CONTAB[7]*44")
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[329]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 329), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 876, i64 2, {}* %"CONTAB[84]*", {}* %"CONTAB[329]*")
  %"CONTAB[42]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 877, i64 4, {}* %"CONTAB[42]*45", {}* inttoptr (i64 79872 to {}*), {}* inttoptr (i64 2264 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 878, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"str-intersection von n Listen", i64 0, i64 0))
  %"CONTAB[84]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[329]*47" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 329), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 879, i64 2, {}* %"CONTAB[84]*46", {}* %"CONTAB[329]*47")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^549^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^549^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[67]*48" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[363]*49" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 363), align 8
  %"CONTAB[365]*50" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 880, i64 3, {}* %"CONTAB[67]*48", {}* %"CONTAB[363]*49", {}* %"CONTAB[365]*50")
  %"CONTAB[67]*51" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 67), align 8
  %"CONTAB[365]*52" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 365), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 881, i64 2, {}* %"CONTAB[67]*51", {}* %"CONTAB[365]*52")
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.40() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !153 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.38)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.39)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.41() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !154 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 883, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-UNION, i64 0, i64 0))
  %"CONTAB[883]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 883), align 8
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 882, {}* %"CONTAB[883]*", {}* %"CONTAB[3]*")
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 884, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 886, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-B=UNION", i64 0, i64 0))
  %"CONTAB[886]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 886), align 16
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 885, {}* %"CONTAB[886]*", {}* %"CONTAB[7]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 889, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-LISTEN, i64 0, i64 0))
  %"CONTAB[889]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 889), align 8
  %"CONTAB[3]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 888, {}* %"CONTAB[889]*", {}* %"CONTAB[3]*1")
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[888]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 888), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 887, i64 2, {}* %"CONTAB[84]*", {}* %"CONTAB[888]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 890, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 80408 to {}*), {}* inttoptr (i64 2288 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 891, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"str-Wie union, aber auch fuer n Listen", i64 0, i64 0))
  %"CONTAB[84]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[888]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 888), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 892, i64 2, {}* %"CONTAB[84]*2", {}* %"CONTAB[888]*3")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^572^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^572^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 894, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-EQL, i64 0, i64 0))
  %"CONTAB[894]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 894), align 16
  %"CONTAB[3]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 893, {}* %"CONTAB[894]*", {}* %"CONTAB[3]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 896, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str-SET-DIFFERENCE, i64 0, i64 0))
  %"CONTAB[896]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 896), align 16
  %"CONTAB[3]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 895, {}* %"CONTAB[896]*", {}* %"CONTAB[3]*5")
  %"CONTAB[28]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 897, i64 3, {}* %"CONTAB[28]*6", {}* %"CONTAB[13]*7", {}* %"CONTAB[11]*8")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 899, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str-B=MENGEN-GLEICH-P", i64 0, i64 0))
  %"CONTAB[899]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 899), align 8
  %"CONTAB[7]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 898, {}* %"CONTAB[899]*", {}* %"CONTAB[7]*9")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 902, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-MENGE1, i64 0, i64 0))
  %"CONTAB[902]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 902), align 16
  %"CONTAB[7]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 901, {}* %"CONTAB[902]*", {}* %"CONTAB[7]*10")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 904, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str-MENGE2, i64 0, i64 0))
  %"CONTAB[904]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 904), align 16
  %"CONTAB[7]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 903, {}* %"CONTAB[904]*", {}* %"CONTAB[7]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 907, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-TEST, i64 0, i64 0))
  %"CONTAB[907]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 907), align 8
  %"CONTAB[7]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 906, {}* %"CONTAB[907]*", {}* %"CONTAB[7]*12")
  %"CONTAB[11]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %"CONTAB[893]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 893), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 908, i64 2, {}* %"CONTAB[11]*13", {}* %"CONTAB[893]*")
  %"CONTAB[906]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 906), align 16
  %"CONTAB[908]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 908), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 905, i64 2, {}* %"CONTAB[906]*", {}* %"CONTAB[908]*")
  %"CONTAB[901]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 901), align 8
  %"CONTAB[903]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 903), align 8
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[905]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 905), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 900, i64 4, {}* %"CONTAB[901]*", {}* %"CONTAB[903]*", {}* %"CONTAB[420]*", {}* %"CONTAB[905]*")
  %"CONTAB[42]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 909, i64 4, {}* %"CONTAB[42]*14", {}* inttoptr (i64 81756 to {}*), {}* inttoptr (i64 2356 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 910, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @"str-t, wenn Menge1 = Menge 2 ist. Duplikate in Mengen werden wie 1 Element behandelt.", i64 0, i64 0))
  %"CONTAB[11]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  %"CONTAB[893]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 893), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 913, i64 2, {}* %"CONTAB[11]*15", {}* %"CONTAB[893]*16")
  %"CONTAB[906]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 906), align 16
  %"CONTAB[913]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 913), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 912, i64 2, {}* %"CONTAB[906]*17", {}* %"CONTAB[913]*")
  %"CONTAB[901]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 901), align 8
  %"CONTAB[903]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 903), align 8
  %"CONTAB[420]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[912]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 912), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 911, i64 4, {}* %"CONTAB[901]*18", {}* %"CONTAB[903]*19", {}* %"CONTAB[420]*20", {}* %"CONTAB[912]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^580^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^580^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 915, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str-GET, i64 0, i64 0))
  %"CONTAB[915]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 915), align 8
  %"CONTAB[3]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 914, {}* %"CONTAB[915]*", {}* %"CONTAB[3]*21")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 917, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-B_STRINGS, i64 0, i64 0))
  %"CONTAB[917]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 917), align 8
  %"CONTAB[7]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 916, {}* %"CONTAB[917]*", {}* %"CONTAB[7]*22")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 919, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-KEIN-TEXT, i64 0, i64 0))
  %"CONTAB[919]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 919), align 8
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 918, {}* %"CONTAB[919]*", {}* %"CONTAB[23]*")
  %"CONTAB[28]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 920, i64 3, {}* %"CONTAB[28]*23", {}* %"CONTAB[13]*24", {}* %"CONTAB[11]*25")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 922, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"str-B=S", i64 0, i64 0))
  %"CONTAB[922]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 922), align 16
  %"CONTAB[7]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 921, {}* %"CONTAB[922]*", {}* %"CONTAB[7]*26")
  %"CONTAB[816]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 816), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 923, i64 1, {}* %"CONTAB[816]*")
  %"CONTAB[42]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 924, i64 4, {}* %"CONTAB[42]*27", {}* inttoptr (i64 84304 to {}*), {}* inttoptr (i64 2452 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 925, i8* getelementptr inbounds ([132 x i8], [132 x i8]* @"str-liefert den unter key in b_strings abgespeicherten String, bzw.\0D\0A   das Aequivalent zu <<kein Text>>, wenn kein Text gefunden wurde", i64 0, i64 0))
  %"CONTAB[816]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 816), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 926, i64 1, {}* %"CONTAB[816]*28")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^595^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^595^TOP-COMPILE-FILE", i64 0, i64 0))
  %"CONTAB[28]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 927, i64 3, {}* %"CONTAB[28]*29", {}* %"CONTAB[13]*30", {}* %"CONTAB[11]*31")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 929, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"str-B=S1", i64 0, i64 0))
  %"CONTAB[929]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 929), align 8
  %"CONTAB[7]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 928, {}* %"CONTAB[929]*", {}* %"CONTAB[7]*32")
  %"CONTAB[816]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 816), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 930, i64 1, {}* %"CONTAB[816]*33")
  %"CONTAB[42]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 931, i64 4, {}* %"CONTAB[42]*34", {}* inttoptr (i64 86288 to {}*), {}* inttoptr (i64 2492 to {}*), {}* inttoptr (i64 4 to {}*))
  %"CONTAB[816]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 816), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 932, i64 1, {}* %"CONTAB[816]*35")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^623^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^623^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 934, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str-REMPROP, i64 0, i64 0))
  %"CONTAB[934]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 934), align 16
  %"CONTAB[3]*36" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 933, {}* %"CONTAB[934]*", {}* %"CONTAB[3]*36")
  %"CONTAB[28]*37" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*38" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*39" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 935, i64 3, {}* %"CONTAB[28]*37", {}* %"CONTAB[13]*38", {}* %"CONTAB[11]*39")
  %"CONTAB[28]*40" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*41" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*42" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 936, i64 3, {}* %"CONTAB[28]*40", {}* %"CONTAB[13]*41", {}* %"CONTAB[11]*42")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 938, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str-B=NEUE-SPRACHTEXTE", i64 0, i64 0))
  %"CONTAB[938]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 938), align 16
  %"CONTAB[7]*43" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 937, {}* %"CONTAB[938]*", {}* %"CONTAB[7]*43")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 941, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-SPRACHPROPERTIES, i64 0, i64 0))
  %"CONTAB[941]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 941), align 8
  %"CONTAB[7]*44" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 940, {}* %"CONTAB[941]*", {}* %"CONTAB[7]*44")
  %"CONTAB[84]*45" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[940]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 940), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 939, i64 2, {}* %"CONTAB[84]*45", {}* %"CONTAB[940]*")
  %"CONTAB[42]*46" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 942, i64 4, {}* %"CONTAB[42]*46", {}* inttoptr (i64 87068 to {}*), {}* inttoptr (i64 2536 to {}*), {}* inttoptr (i64 4 to {}*))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.42() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !155 {
entry:
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 943, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @"str-Erweitert die Bibliothekstexte um die sprachproperties", i64 0, i64 0))
  %"CONTAB[84]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 84), align 16
  %"CONTAB[940]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 940), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 944, i64 2, {}* %"CONTAB[84]*", {}* %"CONTAB[940]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^627^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^627^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 946, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str-GET-DECODED-TIME, i64 0, i64 0))
  %"CONTAB[946]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 946), align 16
  %"CONTAB[3]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 945, {}* %"CONTAB[946]*", {}* %"CONTAB[3]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-., i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 948, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str-., i64 0, i64 0))
  %"CONTAB[28]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 949, i64 3, {}* %"CONTAB[28]*", {}* %"CONTAB[13]*", {}* %"CONTAB[11]*")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 951, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str-B=DATUM", i64 0, i64 0))
  %"CONTAB[951]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 951), align 8
  %"CONTAB[7]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 950, {}* %"CONTAB[951]*", {}* %"CONTAB[7]*")
  %"CONTAB[42]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 952, i64 4, {}* %"CONTAB[42]*", {}* inttoptr (i64 89868 to {}*), {}* inttoptr (i64 2692 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 953, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str-Liefert den Datumstext", i64 0, i64 0))
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^642^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^642^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 954, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str-:", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 955, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 956, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"str- Uhr", i64 0, i64 0))
  %"CONTAB[28]*1" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*2" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*3" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 957, i64 3, {}* %"CONTAB[28]*1", {}* %"CONTAB[13]*2", {}* %"CONTAB[11]*3")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 959, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str-B=UHRZEIT", i64 0, i64 0))
  %"CONTAB[959]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 959), align 8
  %"CONTAB[7]*4" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 958, {}* %"CONTAB[959]*", {}* %"CONTAB[7]*4")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 963, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str-UHRTEXT-P, i64 0, i64 0))
  %"CONTAB[963]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 963), align 8
  %"CONTAB[7]*5" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 962, {}* %"CONTAB[963]*", {}* %"CONTAB[7]*5")
  %"CONTAB[962]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 962), align 16
  %"CONTAB[69]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 961, i64 2, {}* %"CONTAB[962]*", {}* %"CONTAB[69]*")
  %"CONTAB[420]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[961]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 961), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 960, i64 2, {}* %"CONTAB[420]*", {}* %"CONTAB[961]*")
  %"CONTAB[42]*6" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 964, i64 4, {}* %"CONTAB[42]*6", {}* inttoptr (i64 91032 to {}*), {}* inttoptr (i64 2724 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 965, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str-Liefert den Uhrzeittext", i64 0, i64 0))
  %"CONTAB[962]*7" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 962), align 16
  %"CONTAB[69]*8" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 69), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 967, i64 2, {}* %"CONTAB[962]*7", {}* %"CONTAB[69]*8")
  %"CONTAB[420]*9" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[967]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 967), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 966, i64 2, {}* %"CONTAB[420]*9", {}* %"CONTAB[967]*")
  %"CONTAB[963]*10" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 963), align 8
  %"CONTAB[23]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 968, {}* %"CONTAB[963]*10", {}* %"CONTAB[23]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^681^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^681^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 970, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str-COMPILED-FUNCTION-P, i64 0, i64 0))
  %"CONTAB[970]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 970), align 16
  %"CONTAB[3]*11" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 969, {}* %"CONTAB[970]*", {}* %"CONTAB[3]*11")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 972, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str-UNCOMPILE-FUNCTION, i64 0, i64 0))
  %"CONTAB[972]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 972), align 16
  %"CONTAB[7]*12" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 971, {}* %"CONTAB[972]*", {}* %"CONTAB[7]*12")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 974, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-DEFUN, i64 0, i64 0))
  %"CONTAB[974]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 974), align 16
  %"CONTAB[3]*13" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 973, {}* %"CONTAB[974]*", {}* %"CONTAB[3]*13")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 976, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-BLOCK, i64 0, i64 0))
  %"CONTAB[976]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 976), align 16
  %"CONTAB[3]*14" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 975, {}* %"CONTAB[976]*", {}* %"CONTAB[3]*14")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 978, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str-LISTP, i64 0, i64 0))
  %"CONTAB[978]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 978), align 16
  %"CONTAB[3]*15" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 3), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 977, {}* %"CONTAB[978]*", {}* %"CONTAB[3]*15")
  %"CONTAB[28]*16" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*17" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*18" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 979, i64 3, {}* %"CONTAB[28]*16", {}* %"CONTAB[13]*17", {}* %"CONTAB[11]*18")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 982, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str-FUNKTIONSNAME, i64 0, i64 0))
  %"CONTAB[982]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 982), align 16
  %"CONTAB[7]*19" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 981, {}* %"CONTAB[982]*", {}* %"CONTAB[7]*19")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 985, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str-LEERE-FUNKTION-ZURUECK-P, i64 0, i64 0))
  %"CONTAB[985]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 985), align 8
  %"CONTAB[7]*20" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 984, {}* %"CONTAB[985]*", {}* %"CONTAB[7]*20")
  %"CONTAB[984]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 984), align 16
  %"CONTAB[0]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 983, i64 2, {}* %"CONTAB[984]*", {}* %"CONTAB[0]*")
  %"CONTAB[981]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 981), align 8
  %"CONTAB[420]*21" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[983]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 983), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 980, i64 3, {}* %"CONTAB[981]*", {}* %"CONTAB[420]*21", {}* %"CONTAB[983]*")
  %"CONTAB[42]*22" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 986, i64 4, {}* %"CONTAB[42]*22", {}* inttoptr (i64 92368 to {}*), {}* inttoptr (i64 2756 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 987, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @"str-Versucht den Quellcode von funktionsname zu rekostruieren", i64 0, i64 0))
  %"CONTAB[984]*23" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 984), align 16
  %"CONTAB[0]*24" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 0), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 989, i64 2, {}* %"CONTAB[984]*23", {}* %"CONTAB[0]*24")
  %"CONTAB[981]*25" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 981), align 8
  %"CONTAB[420]*26" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 420), align 16
  %"CONTAB[989]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 989), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 988, i64 3, {}* %"CONTAB[981]*25", {}* %"CONTAB[420]*26", {}* %"CONTAB[989]*")
  %"CONTAB[985]*27" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 985), align 8
  %"CONTAB[23]*28" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 23), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 990, {}* %"CONTAB[985]*27", {}* %"CONTAB[23]*28")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 993, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str-ELEM, i64 0, i64 0))
  %"CONTAB[993]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 993), align 8
  %"CONTAB[7]*29" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 992, {}* %"CONTAB[993]*", {}* %"CONTAB[7]*29")
  %"CONTAB[992]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 992), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 991, i64 1, {}* %"CONTAB[992]*")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^689^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^689^TOP-COMPILE-FILE", i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 994, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 995, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 996, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str-, i64 0, i64 0))
  %"CONTAB[28]*30" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 28), align 16
  %"CONTAB[13]*31" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 13), align 8
  %"CONTAB[11]*32" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 11), align 8
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 997, i64 3, {}* %"CONTAB[28]*30", {}* %"CONTAB[13]*31", {}* %"CONTAB[11]*32")
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 999, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str-B=LESE-ERSTES-WORT-AUS-STRING", i64 0, i64 0))
  %"CONTAB[999]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 999), align 8
  %"CONTAB[7]*33" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 7), align 8
  tail call void @ltvc_make_symbol({ i8*, i8*, i64 }* nonnull @constants-table, i64 998, {}* %"CONTAB[999]*", {}* %"CONTAB[7]*33")
  %"CONTAB[274]*" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1000, i64 1, {}* %"CONTAB[274]*")
  %"CONTAB[42]*34" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 42), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1001, i64 4, {}* %"CONTAB[42]*34", {}* inttoptr (i64 97392 to {}*), {}* inttoptr (i64 2880 to {}*), {}* inttoptr (i64 4 to {}*))
  tail call void @ltvc_make_base_string({ i8*, i8*, i64 }* nonnull @constants-table, i64 1002, i8* getelementptr inbounds ([242 x i8], [242 x i8]* @"str-Funktion sucht erstes Wort eines Strings; Spaces und Newlines werden ueberlesen.\0D\0ADie Funktion liefert drei Werte, das gefundene Wort, den string ohne das Wort und\0D\0Adas trennende Space- bzw. Newline-Zeichen und das entsprechende Trennzeichen", i64 0, i64 0))
  %"CONTAB[274]*35" = load {}*, {}** getelementptr inbounds ([1004 x {}*], [1004 x {}*]* @CONTAB5362, i64 0, i64 274), align 16
  tail call void ({ i8*, i8*, i64 }*, i64, i64, ...) @ltvc_make_list({ i8*, i8*, i64 }* nonnull @constants-table, i64 1003, i64 1, {}* %"CONTAB[274]*35")
  tail call void @ltvc_toplevel_funcall({ {}*, i64 } ({}*, i64, {}*, {}*, {}*, {}*, ...)* nonnull @"funktionenclisp.lisp^716^TOP-COMPILE-FILE", i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str-funktionenclisp.lisp^716^TOP-COMPILE-FILE", i64 0, i64 0))
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.43() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !156 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.41)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.42)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.44() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !157 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.40)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.43)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.45() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !158 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.37)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.44)
  ret void
}

; Function Attrs: uwtable
define internal void @RUN-ALL.46() #0 personality i32 (...)* @__gxx_personality_v0 !dbg !159 {
entry:
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.30)
  tail call void @cc_invoke_sub_run_all_function(void ()* nonnull @RUN-ALL.45)
  ret void
}

; Function Attrs: nounwind
declare void @cc_initialize_gcroots_in_module({ i8*, i8*, i64 }*, {}**, i64, {}*) local_unnamed_addr #1

; Function Attrs: uwtable
define internal void @CLASP-CTOR() #0 personality i32 (...)* @__gxx_personality_v0 {
entry:
  tail call void @cc_register_startup_function(void ()* nonnull @RUN-ALL)
  ret void
}

declare void @cc_register_startup_function(void ()*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @cc_error_too_few_arguments(i64, i64, %0*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @cc_error_too_many_arguments(i64, i64, %0*) local_unnamed_addr #6

attributes #0 = { uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #1 = { nounwind "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #2 = { ssp uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #3 = { "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #4 = { nounwind readnone speculatable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #5 = { nounwind uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn }

!llvm.ident = !{!0, !1}
!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!5, !6, !7, !8}

!0 = !{!"Clasp"}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_501/final)"}
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clasp Common Lisp compiler", isOptimized: false, flags: "-v", runtimeVersion: 1, splitDebugFilename: "the-split-name.log", emissionKind: LineTablesOnly, enums: !4)
!3 = !DIFile(filename: "funktionenclisp.lisp", directory: "/Users/karstenpoeck/lisp/coke/library")
!4 = !{}
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"PIC Level", i32 2}
!9 = distinct !DISubprogram(name: "RUN-ALL", linkageName: "RUN-ALL", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed_fixed)
!13 = distinct !DISubprogram(name: "funktionenclisp.lisp^1^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^1^TOP-COMPILE-FILE", scope: !3, file: !3, line: 1, type: !10, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: false, unit: !2, variables: !4)
!14 = !{!15, !19, i64 16}
!15 = !{!"_ZTS13__va_list_tag", !16, i64 0, !16, i64 4, !19, i64 8, !19, i64 16}
!16 = !{!"int", !17, i64 0}
!17 = !{!"omnipotent char", !18, i64 0}
!18 = !{!"Simple C++ TBAA"}
!19 = !{!"any pointer", !17, i64 0}
!20 = !{!15, !16, i64 0}
!21 = !{!22, !22, i64 0}
!22 = !{!"long", !17, i64 0}
!23 = distinct !DISubprogram(name: "B=ORDNER-P^COMMON-LISP-USER^FN^^", linkageName: "B=ORDNER-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 1, type: !10, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: false, unit: !2, variables: !4)
!24 = distinct !DISubprogram(name: "funktionenclisp.lisp^15^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^15^TOP-COMPILE-FILE", scope: !3, file: !3, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, isOptimized: false, unit: !2, variables: !4)
!25 = distinct !DISubprogram(name: "B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^", linkageName: "B=KONKATENIERE-DATEIEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, isOptimized: false, unit: !2, variables: !4)
!26 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, isOptimized: false, unit: !2, variables: !4)
!27 = !{!28, !19, i64 0}
!28 = !{!"_ZTSN7gctools9smart_ptrIN4core3T_OEEE", !19, i64 0}
!29 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, isOptimized: false, unit: !2, variables: !4)
!30 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, isOptimized: false, unit: !2, variables: !4)
!31 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, isOptimized: false, unit: !2, variables: !4)
!32 = distinct !DISubprogram(name: "funktionenclisp.lisp^27^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^27^TOP-COMPILE-FILE", scope: !3, file: !3, line: 27, type: !10, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !2, variables: !4)
!33 = distinct !DISubprogram(name: "B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^", linkageName: "B-KONKATENIERE-EINE-DATEI^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 27, type: !10, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !2, variables: !4)
!34 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 27, type: !10, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !2, variables: !4)
!35 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 27, type: !10, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !2, variables: !4)
!36 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 27, type: !10, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !2, variables: !4)
!37 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 27, type: !10, isLocal: false, isDefinition: true, scopeLine: 27, isOptimized: false, unit: !2, variables: !4)
!38 = distinct !DISubprogram(name: "funktionenclisp.lisp^38^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^38^TOP-COMPILE-FILE", scope: !3, file: !3, line: 38, type: !10, isLocal: false, isDefinition: true, scopeLine: 38, isOptimized: false, unit: !2, variables: !4)
!39 = distinct !DISubprogram(name: "B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", linkageName: "B=PROPERTYLISTEBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 38, type: !10, isLocal: false, isDefinition: true, scopeLine: 38, isOptimized: false, unit: !2, variables: !4)
!40 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 38, type: !10, isLocal: false, isDefinition: true, scopeLine: 38, isOptimized: false, unit: !2, variables: !4)
!41 = distinct !DISubprogram(name: "funktionenclisp.lisp^52^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^52^TOP-COMPILE-FILE", scope: !3, file: !3, line: 52, type: !10, isLocal: false, isDefinition: true, scopeLine: 52, isOptimized: false, unit: !2, variables: !4)
!42 = distinct !DISubprogram(name: "B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", linkageName: "B=WERTBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 52, type: !10, isLocal: false, isDefinition: true, scopeLine: 52, isOptimized: false, unit: !2, variables: !4)
!43 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 52, type: !10, isLocal: false, isDefinition: true, scopeLine: 52, isOptimized: false, unit: !2, variables: !4)
!44 = distinct !DISubprogram(name: "funktionenclisp.lisp^58^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^58^TOP-COMPILE-FILE", scope: !3, file: !3, line: 58, type: !10, isLocal: false, isDefinition: true, scopeLine: 58, isOptimized: false, unit: !2, variables: !4)
!45 = distinct !DISubprogram(name: "B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", linkageName: "B=FUNKTIONSBINDUNG-SICHERN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 58, type: !10, isLocal: false, isDefinition: true, scopeLine: 58, isOptimized: false, unit: !2, variables: !4)
!46 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 58, type: !10, isLocal: false, isDefinition: true, scopeLine: 58, isOptimized: false, unit: !2, variables: !4)
!47 = distinct !DISubprogram(name: "funktionenclisp.lisp^65^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^65^TOP-COMPILE-FILE", scope: !3, file: !3, line: 65, type: !10, isLocal: false, isDefinition: true, scopeLine: 65, isOptimized: false, unit: !2, variables: !4)
!48 = distinct !DISubprogram(name: "B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^", linkageName: "B=LISPBINDUNGEN-SICHERN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 65, type: !10, isLocal: false, isDefinition: true, scopeLine: 65, isOptimized: false, unit: !2, variables: !4)
!49 = distinct !DISubprogram(name: "funktionenclisp.lisp^80^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^80^TOP-COMPILE-FILE", scope: !3, file: !3, line: 80, type: !10, isLocal: false, isDefinition: true, scopeLine: 80, isOptimized: false, unit: !2, variables: !4)
!50 = distinct !DISubprogram(name: "B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^", linkageName: "B=ERZEUGE-STRING^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 80, type: !10, isLocal: false, isDefinition: true, scopeLine: 80, isOptimized: false, unit: !2, variables: !4)
!51 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 80, type: !10, isLocal: false, isDefinition: true, scopeLine: 80, isOptimized: false, unit: !2, variables: !4)
!52 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 80, type: !10, isLocal: false, isDefinition: true, scopeLine: 80, isOptimized: false, unit: !2, variables: !4)
!53 = distinct !DISubprogram(name: "funktionenclisp.lisp^110^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^110^TOP-COMPILE-FILE", scope: !3, file: !3, line: 110, type: !10, isLocal: false, isDefinition: true, scopeLine: 110, isOptimized: false, unit: !2, variables: !4)
!54 = distinct !DISubprogram(name: "B=LESE-VON-STRING^COMMON-LISP-USER^FN^^", linkageName: "B=LESE-VON-STRING^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 110, type: !10, isLocal: false, isDefinition: true, scopeLine: 110, isOptimized: false, unit: !2, variables: !4)
!55 = distinct !DISubprogram(name: "funktionenclisp.lisp^134^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^134^TOP-COMPILE-FILE", scope: !3, file: !3, line: 134, type: !10, isLocal: false, isDefinition: true, scopeLine: 134, isOptimized: false, unit: !2, variables: !4)
!56 = distinct !DISubprogram(name: "B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^", linkageName: "B=KONKATENIERE-NACH-STRING^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 134, type: !10, isLocal: false, isDefinition: true, scopeLine: 134, isOptimized: false, unit: !2, variables: !4)
!57 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 134, type: !10, isLocal: false, isDefinition: true, scopeLine: 134, isOptimized: false, unit: !2, variables: !4)
!58 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 134, type: !10, isLocal: false, isDefinition: true, scopeLine: 134, isOptimized: false, unit: !2, variables: !4)
!59 = distinct !DISubprogram(name: "funktionenclisp.lisp^164^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^164^TOP-COMPILE-FILE", scope: !3, file: !3, line: 164, type: !10, isLocal: false, isDefinition: true, scopeLine: 164, isOptimized: false, unit: !2, variables: !4)
!60 = distinct !DISubprogram(name: "B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^", linkageName: "B=KONKATENIERE-NACH-ATOM^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 164, type: !10, isLocal: false, isDefinition: true, scopeLine: 164, isOptimized: false, unit: !2, variables: !4)
!61 = distinct !DISubprogram(name: "funktionenclisp.lisp^170^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^170^TOP-COMPILE-FILE", scope: !3, file: !3, line: 170, type: !10, isLocal: false, isDefinition: true, scopeLine: 170, isOptimized: false, unit: !2, variables: !4)
!62 = distinct !DISubprogram(name: "B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^", linkageName: "B=STRING-NACH-LISTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 170, type: !10, isLocal: false, isDefinition: true, scopeLine: 170, isOptimized: false, unit: !2, variables: !4)
!63 = distinct !DISubprogram(name: "funktionenclisp.lisp^178^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^178^TOP-COMPILE-FILE", scope: !3, file: !3, line: 178, type: !10, isLocal: false, isDefinition: true, scopeLine: 178, isOptimized: false, unit: !2, variables: !4)
!64 = distinct !DISubprogram(name: "B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^", linkageName: "B=LISTE-NACH-STRING^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 178, type: !10, isLocal: false, isDefinition: true, scopeLine: 178, isOptimized: false, unit: !2, variables: !4)
!65 = distinct !DISubprogram(name: "funktionenclisp.lisp^191^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^191^TOP-COMPILE-FILE", scope: !3, file: !3, line: 191, type: !10, isLocal: false, isDefinition: true, scopeLine: 191, isOptimized: false, unit: !2, variables: !4)
!66 = distinct !DISubprogram(name: "B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^", linkageName: "B=ZENTRIERE-LISPAUSDRUCK^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 191, type: !10, isLocal: false, isDefinition: true, scopeLine: 191, isOptimized: false, unit: !2, variables: !4)
!67 = distinct !DISubprogram(name: "funktionenclisp.lisp^219^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^219^TOP-COMPILE-FILE", scope: !3, file: !3, line: 219, type: !10, isLocal: false, isDefinition: true, scopeLine: 219, isOptimized: false, unit: !2, variables: !4)
!68 = distinct !DISubprogram(name: "B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^", linkageName: "B=STRING-ABSCHNEIDEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 219, type: !10, isLocal: false, isDefinition: true, scopeLine: 219, isOptimized: false, unit: !2, variables: !4)
!69 = distinct !DISubprogram(name: "funktionenclisp.lisp^262^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^262^TOP-COMPILE-FILE", scope: !3, file: !3, line: 262, type: !10, isLocal: false, isDefinition: true, scopeLine: 262, isOptimized: false, unit: !2, variables: !4)
!70 = distinct !DISubprogram(name: "B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^", linkageName: "B-DREI-PUNKTE-EINFUEGEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 262, type: !10, isLocal: false, isDefinition: true, scopeLine: 262, isOptimized: false, unit: !2, variables: !4)
!71 = distinct !DISubprogram(name: "funktionenclisp.lisp^272^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^272^TOP-COMPILE-FILE", scope: !3, file: !3, line: 272, type: !10, isLocal: false, isDefinition: true, scopeLine: 272, isOptimized: false, unit: !2, variables: !4)
!72 = distinct !DISubprogram(name: "B=ASCII^COMMON-LISP-USER^FN^^", linkageName: "B=ASCII^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 272, type: !10, isLocal: false, isDefinition: true, scopeLine: 272, isOptimized: false, unit: !2, variables: !4)
!73 = distinct !DISubprogram(name: "funktionenclisp.lisp^276^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^276^TOP-COMPILE-FILE", scope: !3, file: !3, line: 276, type: !10, isLocal: false, isDefinition: true, scopeLine: 276, isOptimized: false, unit: !2, variables: !4)
!74 = distinct !DISubprogram(name: "B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^", linkageName: "B=ERSTES-ZEICHEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 276, type: !10, isLocal: false, isDefinition: true, scopeLine: 276, isOptimized: false, unit: !2, variables: !4)
!75 = distinct !DISubprogram(name: "funktionenclisp.lisp^291^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^291^TOP-COMPILE-FILE", scope: !3, file: !3, line: 291, type: !10, isLocal: false, isDefinition: true, scopeLine: 291, isOptimized: false, unit: !2, variables: !4)
!76 = distinct !DISubprogram(name: "B=LAENGE^COMMON-LISP-USER^FN^^", linkageName: "B=LAENGE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 291, type: !10, isLocal: false, isDefinition: true, scopeLine: 291, isOptimized: false, unit: !2, variables: !4)
!77 = distinct !DISubprogram(name: "funktionenclisp.lisp^307^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^307^TOP-COMPILE-FILE", scope: !3, file: !3, line: 307, type: !10, isLocal: false, isDefinition: true, scopeLine: 307, isOptimized: false, unit: !2, variables: !4)
!78 = distinct !DISubprogram(name: "B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^", linkageName: "B=ERSETZE-ZEICHENKETTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 307, type: !10, isLocal: false, isDefinition: true, scopeLine: 307, isOptimized: false, unit: !2, variables: !4)
!79 = distinct !DISubprogram(name: "funktionenclisp.lisp^324^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^324^TOP-COMPILE-FILE", scope: !3, file: !3, line: 324, type: !10, isLocal: false, isDefinition: true, scopeLine: 324, isOptimized: false, unit: !2, variables: !4)
!80 = distinct !DISubprogram(name: "B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^", linkageName: "B=ALPHABETISCH<-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 324, type: !10, isLocal: false, isDefinition: true, scopeLine: 324, isOptimized: false, unit: !2, variables: !4)
!81 = distinct !DISubprogram(name: "funktionenclisp.lisp^348^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^348^TOP-COMPILE-FILE", scope: !3, file: !3, line: 348, type: !10, isLocal: false, isDefinition: true, scopeLine: 348, isOptimized: false, unit: !2, variables: !4)
!82 = distinct !DISubprogram(name: "B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^", linkageName: "B=ALPHABETISCH>-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 348, type: !10, isLocal: false, isDefinition: true, scopeLine: 348, isOptimized: false, unit: !2, variables: !4)
!83 = distinct !DISubprogram(name: "funktionenclisp.lisp^356^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^356^TOP-COMPILE-FILE", scope: !3, file: !3, line: 356, type: !10, isLocal: false, isDefinition: true, scopeLine: 356, isOptimized: false, unit: !2, variables: !4)
!84 = distinct !DISubprogram(name: "B=LEERSTRING-P^COMMON-LISP-USER^FN^^", linkageName: "B=LEERSTRING-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 356, type: !10, isLocal: false, isDefinition: true, scopeLine: 356, isOptimized: false, unit: !2, variables: !4)
!85 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 356, type: !10, isLocal: false, isDefinition: true, scopeLine: 356, isOptimized: false, unit: !2, variables: !4)
!86 = distinct !DISubprogram(name: "funktionenclisp.lisp^365^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^365^TOP-COMPILE-FILE", scope: !3, file: !3, line: 365, type: !10, isLocal: false, isDefinition: true, scopeLine: 365, isOptimized: false, unit: !2, variables: !4)
!87 = distinct !DISubprogram(name: "B-N-POSITION^COMMON-LISP-USER^FN^^", linkageName: "B-N-POSITION^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 365, type: !10, isLocal: false, isDefinition: true, scopeLine: 365, isOptimized: false, unit: !2, variables: !4)
!88 = distinct !DISubprogram(name: "funktionenclisp.lisp^395^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^395^TOP-COMPILE-FILE", scope: !3, file: !3, line: 395, type: !10, isLocal: false, isDefinition: true, scopeLine: 395, isOptimized: false, unit: !2, variables: !4)
!89 = distinct !DISubprogram(name: "B=MIN^COMMON-LISP-USER^FN^^", linkageName: "B=MIN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 395, type: !10, isLocal: false, isDefinition: true, scopeLine: 395, isOptimized: false, unit: !2, variables: !4)
!90 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 395, type: !10, isLocal: false, isDefinition: true, scopeLine: 395, isOptimized: false, unit: !2, variables: !4)
!91 = distinct !DISubprogram(name: "funktionenclisp.lisp^413^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^413^TOP-COMPILE-FILE", scope: !3, file: !3, line: 413, type: !10, isLocal: false, isDefinition: true, scopeLine: 413, isOptimized: false, unit: !2, variables: !4)
!92 = distinct !DISubprogram(name: "B=POSITIONEN-IF^COMMON-LISP-USER^FN^^", linkageName: "B=POSITIONEN-IF^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 413, type: !10, isLocal: false, isDefinition: true, scopeLine: 413, isOptimized: false, unit: !2, variables: !4)
!93 = distinct !DISubprogram(name: "funktionenclisp.lisp^437^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^437^TOP-COMPILE-FILE", scope: !3, file: !3, line: 437, type: !10, isLocal: false, isDefinition: true, scopeLine: 437, isOptimized: false, unit: !2, variables: !4)
!94 = distinct !DISubprogram(name: "B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^", linkageName: "B=IN-SEQUENCE-ERSETZEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 437, type: !10, isLocal: false, isDefinition: true, scopeLine: 437, isOptimized: false, unit: !2, variables: !4)
!95 = !{!96, !96, i64 0}
!96 = !{!"vtable pointer", !18, i64 0}
!97 = !{!16, !16, i64 0}
!98 = distinct !DISubprogram(name: "funktionenclisp.lisp^460^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^460^TOP-COMPILE-FILE", scope: !3, file: !3, line: 460, type: !10, isLocal: false, isDefinition: true, scopeLine: 460, isOptimized: false, unit: !2, variables: !4)
!99 = distinct !DISubprogram(name: "B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^", linkageName: "B=PSEUDO-PROPERTIES-LOESCHEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 460, type: !10, isLocal: false, isDefinition: true, scopeLine: 460, isOptimized: false, unit: !2, variables: !4)
!100 = distinct !DISubprogram(name: "funktionenclisp.lisp^483^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^483^TOP-COMPILE-FILE", scope: !3, file: !3, line: 483, type: !10, isLocal: false, isDefinition: true, scopeLine: 483, isOptimized: false, unit: !2, variables: !4)
!101 = distinct !DISubprogram(name: "B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^", linkageName: "B=IN-SORTIERTE-LISTE-EINFUEGEN^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 483, type: !10, isLocal: false, isDefinition: true, scopeLine: 483, isOptimized: false, unit: !2, variables: !4)
!102 = distinct !DISubprogram(name: "funktionenclisp.lisp^501^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^501^TOP-COMPILE-FILE", scope: !3, file: !3, line: 501, type: !10, isLocal: false, isDefinition: true, scopeLine: 501, isOptimized: false, unit: !2, variables: !4)
!103 = distinct !DISubprogram(name: "B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^", linkageName: "B=SCHLUESSELWOERTER^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 501, type: !10, isLocal: false, isDefinition: true, scopeLine: 501, isOptimized: false, unit: !2, variables: !4)
!104 = distinct !DISubprogram(name: "funktionenclisp.lisp^517^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^517^TOP-COMPILE-FILE", scope: !3, file: !3, line: 517, type: !10, isLocal: false, isDefinition: true, scopeLine: 517, isOptimized: false, unit: !2, variables: !4)
!105 = distinct !DISubprogram(name: "B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^", linkageName: "B=SORTIERE-ALPHABETISCH^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 517, type: !10, isLocal: false, isDefinition: true, scopeLine: 517, isOptimized: false, unit: !2, variables: !4)
!106 = distinct !DISubprogram(name: "funktionenclisp.lisp^523^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^523^TOP-COMPILE-FILE", scope: !3, file: !3, line: 523, type: !10, isLocal: false, isDefinition: true, scopeLine: 523, isOptimized: false, unit: !2, variables: !4)
!107 = distinct !DISubprogram(name: "B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^", linkageName: "B=LETZTES-LISTENELEMENT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 523, type: !10, isLocal: false, isDefinition: true, scopeLine: 523, isOptimized: false, unit: !2, variables: !4)
!108 = distinct !DISubprogram(name: "funktionenclisp.lisp^529^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^529^TOP-COMPILE-FILE", scope: !3, file: !3, line: 529, type: !10, isLocal: false, isDefinition: true, scopeLine: 529, isOptimized: false, unit: !2, variables: !4)
!109 = distinct !DISubprogram(name: "B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^", linkageName: "B=LOESCHE-NTES-ELEMENT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 529, type: !10, isLocal: false, isDefinition: true, scopeLine: 529, isOptimized: false, unit: !2, variables: !4)
!110 = distinct !DISubprogram(name: "funktionenclisp.lisp^549^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^549^TOP-COMPILE-FILE", scope: !3, file: !3, line: 549, type: !10, isLocal: false, isDefinition: true, scopeLine: 549, isOptimized: false, unit: !2, variables: !4)
!111 = distinct !DISubprogram(name: "B=INTERSECTION^COMMON-LISP-USER^FN^^", linkageName: "B=INTERSECTION^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 549, type: !10, isLocal: false, isDefinition: true, scopeLine: 549, isOptimized: false, unit: !2, variables: !4)
!112 = distinct !DISubprogram(name: "funktionenclisp.lisp^572^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^572^TOP-COMPILE-FILE", scope: !3, file: !3, line: 572, type: !10, isLocal: false, isDefinition: true, scopeLine: 572, isOptimized: false, unit: !2, variables: !4)
!113 = distinct !DISubprogram(name: "B=UNION^COMMON-LISP-USER^FN^^", linkageName: "B=UNION^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 572, type: !10, isLocal: false, isDefinition: true, scopeLine: 572, isOptimized: false, unit: !2, variables: !4)
!114 = distinct !DISubprogram(name: "funktionenclisp.lisp^580^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^580^TOP-COMPILE-FILE", scope: !3, file: !3, line: 580, type: !10, isLocal: false, isDefinition: true, scopeLine: 580, isOptimized: false, unit: !2, variables: !4)
!115 = distinct !DISubprogram(name: "B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^", linkageName: "B=MENGEN-GLEICH-P^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 580, type: !10, isLocal: false, isDefinition: true, scopeLine: 580, isOptimized: false, unit: !2, variables: !4)
!116 = distinct !DISubprogram(name: "funktionenclisp.lisp^595^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^595^TOP-COMPILE-FILE", scope: !3, file: !3, line: 595, type: !10, isLocal: false, isDefinition: true, scopeLine: 595, isOptimized: false, unit: !2, variables: !4)
!117 = distinct !DISubprogram(name: "B=S^COMMON-LISP-USER^FN^^", linkageName: "B=S^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 595, type: !10, isLocal: false, isDefinition: true, scopeLine: 595, isOptimized: false, unit: !2, variables: !4)
!118 = distinct !DISubprogram(name: "funktionenclisp.lisp^623^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^623^TOP-COMPILE-FILE", scope: !3, file: !3, line: 623, type: !10, isLocal: false, isDefinition: true, scopeLine: 623, isOptimized: false, unit: !2, variables: !4)
!119 = distinct !DISubprogram(name: "B=S1^COMMON-LISP-USER^FN^^", linkageName: "B=S1^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 623, type: !10, isLocal: false, isDefinition: true, scopeLine: 623, isOptimized: false, unit: !2, variables: !4)
!120 = distinct !DISubprogram(name: "funktionenclisp.lisp^627^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^627^TOP-COMPILE-FILE", scope: !3, file: !3, line: 627, type: !10, isLocal: false, isDefinition: true, scopeLine: 627, isOptimized: false, unit: !2, variables: !4)
!121 = distinct !DISubprogram(name: "B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^", linkageName: "B=NEUE-SPRACHTEXTE^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 627, type: !10, isLocal: false, isDefinition: true, scopeLine: 627, isOptimized: false, unit: !2, variables: !4)
!122 = distinct !DISubprogram(name: "funktionenclisp.lisp^642^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^642^TOP-COMPILE-FILE", scope: !3, file: !3, line: 642, type: !10, isLocal: false, isDefinition: true, scopeLine: 642, isOptimized: false, unit: !2, variables: !4)
!123 = distinct !DISubprogram(name: "B=DATUM^COMMON-LISP-USER^FN^^", linkageName: "B=DATUM^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 642, type: !10, isLocal: false, isDefinition: true, scopeLine: 642, isOptimized: false, unit: !2, variables: !4)
!124 = distinct !DISubprogram(name: "funktionenclisp.lisp^681^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^681^TOP-COMPILE-FILE", scope: !3, file: !3, line: 681, type: !10, isLocal: false, isDefinition: true, scopeLine: 681, isOptimized: false, unit: !2, variables: !4)
!125 = distinct !DISubprogram(name: "B=UHRZEIT^COMMON-LISP-USER^FN^^", linkageName: "B=UHRZEIT^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 681, type: !10, isLocal: false, isDefinition: true, scopeLine: 681, isOptimized: false, unit: !2, variables: !4)
!126 = distinct !DISubprogram(name: "funktionenclisp.lisp^689^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^689^TOP-COMPILE-FILE", scope: !3, file: !3, line: 689, type: !10, isLocal: false, isDefinition: true, scopeLine: 689, isOptimized: false, unit: !2, variables: !4)
!127 = distinct !DISubprogram(name: "B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^", linkageName: "B=FUNKTIONSDEFINITION^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 689, type: !10, isLocal: false, isDefinition: true, scopeLine: 689, isOptimized: false, unit: !2, variables: !4)
!128 = distinct !DISubprogram(name: "LAMBDA^COMMON-LISP^FN^^", linkageName: "LAMBDA^COMMON-LISP^FN^^", scope: !3, file: !3, line: 689, type: !10, isLocal: false, isDefinition: true, scopeLine: 689, isOptimized: false, unit: !2, variables: !4)
!129 = distinct !DISubprogram(name: "funktionenclisp.lisp^716^TOP-COMPILE-FILE", linkageName: "funktionenclisp.lisp^716^TOP-COMPILE-FILE", scope: !3, file: !3, line: 716, type: !10, isLocal: false, isDefinition: true, scopeLine: 716, isOptimized: false, unit: !2, variables: !4)
!130 = distinct !DISubprogram(name: "B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^", linkageName: "B=LESE-ERSTES-WORT-AUS-STRING^COMMON-LISP-USER^FN^^", scope: !3, file: !3, line: 716, type: !10, isLocal: false, isDefinition: true, scopeLine: 716, isOptimized: false, unit: !2, variables: !4)
!131 = distinct !DISubprogram(name: "RUN-ALL.18", linkageName: "RUN-ALL.18", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!132 = distinct !DISubprogram(name: "RUN-ALL.19", linkageName: "RUN-ALL.19", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!133 = distinct !DISubprogram(name: "RUN-ALL.20", linkageName: "RUN-ALL.20", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!134 = distinct !DISubprogram(name: "RUN-ALL.21", linkageName: "RUN-ALL.21", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!135 = distinct !DISubprogram(name: "RUN-ALL.22", linkageName: "RUN-ALL.22", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!136 = distinct !DISubprogram(name: "RUN-ALL.23", linkageName: "RUN-ALL.23", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!137 = distinct !DISubprogram(name: "RUN-ALL.24", linkageName: "RUN-ALL.24", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!138 = distinct !DISubprogram(name: "RUN-ALL.25", linkageName: "RUN-ALL.25", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!139 = distinct !DISubprogram(name: "RUN-ALL.26", linkageName: "RUN-ALL.26", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!140 = distinct !DISubprogram(name: "RUN-ALL.27", linkageName: "RUN-ALL.27", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!141 = distinct !DISubprogram(name: "RUN-ALL.28", linkageName: "RUN-ALL.28", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!142 = distinct !DISubprogram(name: "RUN-ALL.29", linkageName: "RUN-ALL.29", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!143 = distinct !DISubprogram(name: "RUN-ALL.30", linkageName: "RUN-ALL.30", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!144 = distinct !DISubprogram(name: "RUN-ALL.31", linkageName: "RUN-ALL.31", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!145 = distinct !DISubprogram(name: "RUN-ALL.32", linkageName: "RUN-ALL.32", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!146 = distinct !DISubprogram(name: "RUN-ALL.33", linkageName: "RUN-ALL.33", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!147 = distinct !DISubprogram(name: "RUN-ALL.34", linkageName: "RUN-ALL.34", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!148 = distinct !DISubprogram(name: "RUN-ALL.35", linkageName: "RUN-ALL.35", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!149 = distinct !DISubprogram(name: "RUN-ALL.36", linkageName: "RUN-ALL.36", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!150 = distinct !DISubprogram(name: "RUN-ALL.37", linkageName: "RUN-ALL.37", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!151 = distinct !DISubprogram(name: "RUN-ALL.38", linkageName: "RUN-ALL.38", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!152 = distinct !DISubprogram(name: "RUN-ALL.39", linkageName: "RUN-ALL.39", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!153 = distinct !DISubprogram(name: "RUN-ALL.40", linkageName: "RUN-ALL.40", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!154 = distinct !DISubprogram(name: "RUN-ALL.41", linkageName: "RUN-ALL.41", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!155 = distinct !DISubprogram(name: "RUN-ALL.42", linkageName: "RUN-ALL.42", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!156 = distinct !DISubprogram(name: "RUN-ALL.43", linkageName: "RUN-ALL.43", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!157 = distinct !DISubprogram(name: "RUN-ALL.44", linkageName: "RUN-ALL.44", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!158 = distinct !DISubprogram(name: "RUN-ALL.45", linkageName: "RUN-ALL.45", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
!159 = distinct !DISubprogram(name: "RUN-ALL.46", linkageName: "RUN-ALL.46", scope: !3, file: !3, type: !10, isLocal: false, isDefinition: true, isOptimized: false, unit: !2, variables: !4)
