#0Y_ #0Y |CHARSET|::|UTF-8|
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=LISPFEHLER-ABFANGEN|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=LISPFEHLER-ABFANGEN|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=LISPFEHLER-ABFANGEN|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|COMMON-LISP-USER|::|BODY|
       (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=LISPFEHLER-ABFANGEN|
      `(|COMMON-LISP|::|PROGN| ,@|COMMON-LISP-USER|::|BODY|)))))
  '(|COMMON-LISP|::|&BODY| |COMMON-LISP-USER|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|+=|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|+=|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|+=|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzform fuer (Setq variable (+ variable wert))"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|VARIABLE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|+=|
       `(|COMMON-LISP|::|SETQ| ,|COMMON-LISP|::|VARIABLE|
         (|COMMON-LISP|::|+| ,|COMMON-LISP|::|VARIABLE|
          ,|COMMON-LISP-USER|::|WERT|)))))))
  '(|COMMON-LISP|::|VARIABLE| |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|*=|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|*=|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|*=|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzform fuer (Setq variable (* variable wert))"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|VARIABLE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|*=|
       `(|COMMON-LISP|::|SETQ| ,|COMMON-LISP|::|VARIABLE|
         (|COMMON-LISP|::|*| ,|COMMON-LISP|::|VARIABLE|
          ,|COMMON-LISP-USER|::|WERT|)))))))
  '(|COMMON-LISP|::|VARIABLE| |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|//=|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|//=|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|//=|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzform fuer (Setq variable (/ variable wert))"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|VARIABLE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|//=|
       `(|COMMON-LISP|::|SETQ| ,|COMMON-LISP|::|VARIABLE|
         (|COMMON-LISP|::|/| ,|COMMON-LISP|::|VARIABLE|
          ,|COMMON-LISP-USER|::|WERT|)))))))
  '(|COMMON-LISP|::|VARIABLE| |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|-=|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|-=|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|-=|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzform fuer (Setq variable (- variable wert))"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|VARIABLE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|-=|
       `(|COMMON-LISP|::|SETQ| ,|COMMON-LISP|::|VARIABLE|
         (|COMMON-LISP|::|-| ,|COMMON-LISP|::|VARIABLE|
          ,|COMMON-LISP-USER|::|WERT|)))))))
  '(|COMMON-LISP|::|VARIABLE| |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=EINERLISTE-P|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=EINERLISTE-P|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=EINERLISTE-P|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "prueft, ob irgentwas eine Liste aus einem Element ist"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|IRGENTWAS|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=EINERLISTE-P|
       `(|COMMON-LISP|::|AND|
         (|COMMON-LISP|::|LISTP| ,|COMMON-LISP-USER|::|IRGENTWAS|)
         (|COMMON-LISP|::|=|
          (|COMMON-LISP|::|LENGTH| ,|COMMON-LISP-USER|::|IRGENTWAS|) 1.)))))))
  '(|COMMON-LISP-USER|::|IRGENTWAS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=ERZEUGE-LISTE|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=ERZEUGE-LISTE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=ERZEUGE-LISTE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "macht aus irgentwas eine Liste, falls es keine ist"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|IRGENTWAS|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=ERZEUGE-LISTE|
       `(|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|LISTP| ,|COMMON-LISP-USER|::|IRGENTWAS|)
         ,|COMMON-LISP-USER|::|IRGENTWAS|
         (|COMMON-LISP|::|LIST| ,|COMMON-LISP-USER|::|IRGENTWAS|)))))))
  '(|COMMON-LISP-USER|::|IRGENTWAS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=ERSTES-ZEICHEN=-P|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=ERSTES-ZEICHEN=-P|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=ERSTES-ZEICHEN=-P|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "prueft, ob das erste Zeichen von Atom-oder-String1\n
   gleich dem von Atom-oder-String2 ist"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|ATOM-ODER-STRING1|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|ATOM-ODER-STRING2|
        (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=ERSTES-ZEICHEN=-P|
       `(|COMMON-LISP|::|STRING=|
         (|COMMON-LISP-USER|::|B=ERSTES-ZEICHEN|
          ,|COMMON-LISP-USER|::|ATOM-ODER-STRING1|)
         (|COMMON-LISP-USER|::|B=ERSTES-ZEICHEN|
          ,|COMMON-LISP-USER|::|ATOM-ODER-STRING2|)))))))
  '(|COMMON-LISP-USER|::|ATOM-ODER-STRING1|
    |COMMON-LISP-USER|::|ATOM-ODER-STRING2|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=PROPERTYLISTE|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=PROPERTYLISTE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=PROPERTYLISTE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Liefert die Propertyliste des symbols"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=PROPERTYLISTE|
       `(|COMMON-LISP|::|SYMBOL-PLIST| ,|COMMON-LISP|::|SYMBOL|))))))
  '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=SETZE-PROPERTYLISTE|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=SETZE-PROPERTYLISTE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=SETZE-PROPERTYLISTE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Setzt destruktiv die Propertyliste von Symbol auf neue-propertyliste"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|NEUE-PROPERTYLISTE|
        (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=SETZE-PROPERTYLISTE|
       `(|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|SYMBOL-PLIST| ,|COMMON-LISP|::|SYMBOL|)
         ,|COMMON-LISP-USER|::|NEUE-PROPERTYLISTE|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|NEUE-PROPERTYLISTE|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=PROPERTYWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=PROPERTYWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=PROPERTYWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "= (get symbol schluessel)"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|DEFAULT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=PROPERTYWERT|
       `(|COMMON-LISP|::|GET| ,|COMMON-LISP|::|SYMBOL|
         ,|COMMON-LISP-USER|::|SCHLUESSEL| ,|COMMON-LISP-USER|::|DEFAULT|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP|::|&OPTIONAL| |COMMON-LISP-USER|::|DEFAULT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=SETZE-PROPERTYWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=SETZE-PROPERTYWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=SETZE-PROPERTYWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Setzt den Propertywert bei symbol unter schluessel auf wert"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=SETZE-PROPERTYWERT|
       `(|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|GET| ,|COMMON-LISP|::|SYMBOL|
          ,|COMMON-LISP-USER|::|SCHLUESSEL|)
         ,|COMMON-LISP-USER|::|WERT|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=LOESCHE-PROPERTY|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=LOESCHE-PROPERTY|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=LOESCHE-PROPERTY|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "loescht den schluessel aus der Propertyliste)"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=LOESCHE-PROPERTY|
       `(|COMMON-LISP|::|REMPROP| ,|COMMON-LISP|::|SYMBOL|
         ,|COMMON-LISP-USER|::|SCHLUESSEL|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-PROPERTYWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-PROPERTYWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION|
   |COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-PROPERTYWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "fuegt den Wert in die Liste unter symbol.schluessel ein"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK|
       |COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-PROPERTYWERT|
       `(|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|GET| ,|COMMON-LISP|::|SYMBOL|
          ,|COMMON-LISP-USER|::|SCHLUESSEL|)
         (|COMMON-LISP|::|ADJOIN| ,|COMMON-LISP-USER|::|WERT|
          (|COMMON-LISP|::|GET| ,|COMMON-LISP|::|SYMBOL|
           ,|COMMON-LISP-USER|::|SCHLUESSEL|))))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=LOESCHE-EINEN-PROPERTYWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=LOESCHE-EINEN-PROPERTYWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=LOESCHE-EINEN-PROPERTYWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "loescht den Wert aus der Liste unter symbol.schluessel"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK|
       |COMMON-LISP-USER|::|B=LOESCHE-EINEN-PROPERTYWERT|
       `(|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|GET| ,|COMMON-LISP|::|SYMBOL|
          ,|COMMON-LISP-USER|::|SCHLUESSEL|)
         (|COMMON-LISP|::|REMOVE| ,|COMMON-LISP-USER|::|WERT|
          (|COMMON-LISP|::|GET| ,|COMMON-LISP|::|SYMBOL|
           ,|COMMON-LISP-USER|::|SCHLUESSEL|))))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=PLIST|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=PLIST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=PLIST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzwort fuer b=Propertyliste"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=PLIST|
       `(|COMMON-LISP-USER|::|B=PROPERTYLISTE| ,|COMMON-LISP|::|SYMBOL|))))))
  '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=SETPLIST|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=SETPLIST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=SETPLIST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzwort fuer b=setze-Propertyliste"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|NEUE-PROPERTYLISTE|
        (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=SETPLIST|
       `(|COMMON-LISP-USER|::|B=SETZE-PROPERTYLISTE| ,|COMMON-LISP|::|SYMBOL|
         ,|COMMON-LISP-USER|::|NEUE-PROPERTYLISTE|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|NEUE-PROPERTYLISTE|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=GET|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=GET|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=GET|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzwort fuer b=Propertywert"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|DEFAULT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=GET|
       `(|COMMON-LISP-USER|::|B=PROPERTYWERT| ,|COMMON-LISP|::|SYMBOL|
         ,|COMMON-LISP-USER|::|SCHLUESSEL| ,|COMMON-LISP-USER|::|DEFAULT|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP|::|&OPTIONAL| |COMMON-LISP-USER|::|DEFAULT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=PUT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=PUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=PUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzwort fuer b=setze-Propertywert"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|WERT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=PUT|
       `(|COMMON-LISP-USER|::|B=SETZE-PROPERTYWERT| ,|COMMON-LISP|::|SYMBOL|
         ,|COMMON-LISP-USER|::|SCHLUESSEL| ,|COMMON-LISP-USER|::|WERT|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP-USER|::|WERT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=REM|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=REM|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=REM|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Kurzwort fuer b=loesche-Property"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=REM|
       `(|COMMON-LISP-USER|::|B=LOESCHE-PROPERTY| ,|COMMON-LISP|::|SYMBOL|
         ,|COMMON-LISP-USER|::|SCHLUESSEL|))))))
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP-USER|::|SCHLUESSEL|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=DO-PLIST|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=DO-PLIST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=DO-PLIST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Ueber eine Propertyliste iterieren"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|PLIST|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (#2=#:|G31463| (|COMMON-LISP|::|CADDR| . #1#))
       (#3=#:|G31464|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #2# 2. 3. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #2#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|COMMON-LISP-USER|::|B=DO-PLIST| #2#
          '#4=(|COMMON-LISP-USER|::|KEY| |COMMON-LISP-USER|::|VALUE|
               |COMMON-LISP|::|&OPTIONAL| |COMMON-LISP-USER|::|RESULT|))
         #2#))
       (|COMMON-LISP-USER|::|KEY| (|COMMON-LISP|::|CAR| #3#))
       (|COMMON-LISP-USER|::|VALUE| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|COMMON-LISP-USER|::|RESULT| (|COMMON-LISP|::|CADDR| . #5#))
       (|COMMON-LISP-USER|::|FORMS| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=DO-PLIST|
       (|COMMON-LISP|::|LET|
        ((|COMMON-LISP-USER|::|ITERATOR| (|COMMON-LISP|::|GENSYM|)))
        `(|COMMON-LISP|::|DO*|
          ((,|COMMON-LISP-USER|::|ITERATOR| ,|COMMON-LISP-USER|::|PLIST|
            (|COMMON-LISP|::|CDDR| ,|COMMON-LISP-USER|::|ITERATOR|))
           (,|COMMON-LISP-USER|::|KEY|
            (|COMMON-LISP|::|FIRST| ,|COMMON-LISP-USER|::|ITERATOR|)
            (|COMMON-LISP|::|FIRST| ,|COMMON-LISP-USER|::|ITERATOR|))
           (,|COMMON-LISP-USER|::|VALUE|
            (|COMMON-LISP|::|SECOND| ,|COMMON-LISP-USER|::|ITERATOR|)
            (|COMMON-LISP|::|SECOND| ,|COMMON-LISP-USER|::|ITERATOR|)))
          ((|COMMON-LISP|::|NULL| ,|COMMON-LISP-USER|::|ITERATOR|)
           ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP-USER|::|RESULT|
              (|COMMON-LISP|::|LIST| |COMMON-LISP-USER|::|RESULT|)))
          ,@|COMMON-LISP-USER|::|FORMS|)))))))
  '(|COMMON-LISP-USER|::|PLIST| #4# |COMMON-LISP|::|&BODY|
    |COMMON-LISP-USER|::|FORMS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=ASSOZIATIVWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=ASSOZIATIVWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=ASSOZIATIVWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Eingabewerte wie bei assoc\n
   Liste ({(schluessel wert)}* )\n
   Ausgabe = Wert, falls Schluessel vorhanden\n
             Nil sonst\n
   Achtung funktioniert nicht bei dotted-pairs"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|SCHLUESSEL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|LISTE| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|SONSTIGES| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=ASSOZIATIVWERT|
       `(|COMMON-LISP|::|SECOND|
         (|COMMON-LISP|::|ASSOC| ,|COMMON-LISP-USER|::|SCHLUESSEL|
          ,|COMMON-LISP-USER|::|LISTE| ,@|COMMON-LISP-USER|::|SONSTIGES|)))))))
  '(|COMMON-LISP-USER|::|SCHLUESSEL| |COMMON-LISP-USER|::|LISTE|
    |COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|SONSTIGES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=RASSOZIATIVWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=RASSOZIATIVWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=RASSOZIATIVWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Eingabewerte wie bei assoc\n
   Liste ({(wert schluessel)}* )\n
   Ausgabe = Wert, falls Schluessel vorhanden\n
             Nil sonst\n
   Achtung funktioniert nicht bei dotted-pairs\n
   :test sollte nicht angegeben werden"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|SCHLUESSEL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|LISTE| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|SONSTIGES| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=RASSOZIATIVWERT|
       `(|COMMON-LISP|::|FIRST|
         (|COMMON-LISP|::|RASSOC|
          (|COMMON-LISP|::|LIST| ,|COMMON-LISP-USER|::|SCHLUESSEL|)
          ,|COMMON-LISP-USER|::|LISTE| ,@|COMMON-LISP-USER|::|SONSTIGES|
          :|TEST| `|COMMON-LISP|::|EQUAL|)))))))
  '(|COMMON-LISP-USER|::|SCHLUESSEL| |COMMON-LISP-USER|::|LISTE|
    |COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|SONSTIGES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=SETZE-ASSOZIATIVWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=SETZE-ASSOZIATIVWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=SETZE-ASSOZIATIVWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Traegt Eintrag unter Schluessel in die Assoziativliste liste ein.\n
   Die Optionen :test :test-not :key verhalten sich wie bei assoc"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|LISTE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|EINTRAG| (|COMMON-LISP|::|CADDDR| . #1#))
       (|COMMON-LISP-USER|::|OPTIONEN| (|COMMON-LISP|::|CDDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=SETZE-ASSOZIATIVWERT|
       `(|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NULL|
          (|COMMON-LISP|::|ASSOC| ,|COMMON-LISP-USER|::|SCHLUESSEL|
           ,|COMMON-LISP-USER|::|LISTE| ,@|COMMON-LISP-USER|::|OPTIONEN|))
         (|COMMON-LISP|::|SETQ| ,|COMMON-LISP-USER|::|LISTE|
          (|COMMON-LISP|::|CONS|
           (|COMMON-LISP|::|LIST| ,|COMMON-LISP-USER|::|SCHLUESSEL|
            ,|COMMON-LISP-USER|::|EINTRAG|)
           ,|COMMON-LISP-USER|::|LISTE|))
         (|COMMON-LISP|::|RPLACD|
          (|COMMON-LISP|::|ASSOC| ,|COMMON-LISP-USER|::|SCHLUESSEL|
           ,|COMMON-LISP-USER|::|LISTE| ,@|COMMON-LISP-USER|::|OPTIONEN|)
          (|COMMON-LISP|::|LIST| ,|COMMON-LISP-USER|::|EINTRAG|))))))))
  '(|COMMON-LISP-USER|::|LISTE| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP-USER|::|EINTRAG| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|OPTIONEN|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-ASSOZIATIVWERT|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-ASSOZIATIVWERT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION|
   |COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-ASSOZIATIVWERT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Traegt Eintrag zusaetzlich unter Schluessel in die Assoziativliste liste ein.\n
   Die Optionen :test :test-not :key verhalten sich wie bei assoc"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|LISTE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SCHLUESSEL| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|EINTRAG| (|COMMON-LISP|::|CADDDR| . #1#))
       (|COMMON-LISP-USER|::|OPTIONEN| (|COMMON-LISP|::|CDDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK|
       |COMMON-LISP-USER|::|B=SETZE-ZUSAETZLICHEN-ASSOZIATIVWERT|
       `(|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NULL|
          (|COMMON-LISP|::|ASSOC| ,|COMMON-LISP-USER|::|SCHLUESSEL|
           ,|COMMON-LISP-USER|::|LISTE| ,@|COMMON-LISP-USER|::|OPTIONEN|))
         (|COMMON-LISP|::|SETQ| ,|COMMON-LISP-USER|::|LISTE|
          (|COMMON-LISP|::|CONS|
           (|COMMON-LISP|::|LIST| ,|COMMON-LISP-USER|::|SCHLUESSEL|
            ,|COMMON-LISP-USER|::|EINTRAG|)
           ,|COMMON-LISP-USER|::|LISTE|))
         (|COMMON-LISP|::|RPLACD|
          (|COMMON-LISP|::|ASSOC| ,|COMMON-LISP-USER|::|SCHLUESSEL|
           ,|COMMON-LISP-USER|::|LISTE| ,@|COMMON-LISP-USER|::|OPTIONEN|)
          (|COMMON-LISP|::|ADJOIN| ,|COMMON-LISP-USER|::|EINTRAG|
           (|COMMON-LISP|::|CDR|
            (|COMMON-LISP|::|ASSOC| ,|COMMON-LISP-USER|::|SCHLUESSEL|
             ,|COMMON-LISP-USER|::|LISTE|
             ,@|COMMON-LISP-USER|::|OPTIONEN|))))))))))
  '(|COMMON-LISP-USER|::|LISTE| |COMMON-LISP-USER|::|SCHLUESSEL|
    |COMMON-LISP-USER|::|EINTRAG| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|OPTIONEN|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|B=IFN|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=IFN|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|B=IFN|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Gleiche Funktionalitaet wie bei if, nur dass die Bedingung negiert wird"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4. 4.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|TEST|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|FALLS_DOCH| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|FALLS_NICHT| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|B=IFN|
       `(|COMMON-LISP|::|IF| (|COMMON-LISP|::|NOT| ,|COMMON-LISP-USER|::|TEST|)
         ,|COMMON-LISP-USER|::|FALLS_DOCH|
         ,|COMMON-LISP-USER|::|FALLS_NICHT|))))))
  '(|COMMON-LISP-USER|::|TEST| |COMMON-LISP-USER|::|FALLS_DOCH|
    |COMMON-LISP-USER|::|FALLS_NICHT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=MIT-AUSGESCHRIEBEN-AUSDRUECKEN|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=MIT-AUSGESCHRIEBEN-AUSDRUECKEN|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION|
   |COMMON-LISP-USER|::|B=MIT-AUSGESCHRIEBEN-AUSDRUECKEN|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|COMMON-LISP-USER|::|LISPFORMEN|
       (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK|
      |COMMON-LISP-USER|::|B=MIT-AUSGESCHRIEBEN-AUSDRUECKEN|
      `(|COMMON-LISP|::|LET|
        ((|COMMON-LISP|::|*PRINT-LENGTH*| |COMMON-LISP|::|NIL|)
         (|COMMON-LISP|::|*PRINT-LEVEL*| |COMMON-LISP|::|NIL|))
        ,@|COMMON-LISP-USER|::|LISPFORMEN|)))))
  '(|COMMON-LISP|::|&BODY| |COMMON-LISP-USER|::|LISPFORMEN|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|COMMON-LISP-USER|::|B=FUNKTION-FALLS-VORHANDEN-AUFRUFEN|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|B=FUNKTION-FALLS-VORHANDEN-AUFRUFEN|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION|
   |COMMON-LISP-USER|::|B=FUNKTION-FALLS-VORHANDEN-AUFRUFEN|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Ruft die funktion, die unter dem slot slot im objekt eingetragen ist, falls sie gebunden ist\n
mit den angegebene Parametern auf"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|OBJEKT|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SLOT| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|ARGUMENTE| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK|
       |COMMON-LISP-USER|::|B=FUNKTION-FALLS-VORHANDEN-AUFRUFEN|
       (|COMMON-LISP|::|LET|
        ((|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|
          (|COMMON-LISP|::|GENSYM|)))
        `(|COMMON-LISP|::|LET|
          ((,|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|
            (|CLOS|::|SLOT-VALUE| ,|COMMON-LISP-USER|::|OBJEKT|
             ,|COMMON-LISP-USER|::|SLOT|)))
          (|COMMON-LISP|::|WHEN|
           (|COMMON-LISP|::|AND| ,|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|
            (|COMMON-LISP|::|OR|
             (|COMMON-LISP|::|AND|
              (|COMMON-LISP|::|SYMBOLP|
               ,|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|)
              (|COMMON-LISP|::|FBOUNDP|
               ,|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|))
             (|COMMON-LISP|::|FUNCTIONP|
              ,|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|)))
           (|COMMON-LISP|::|FUNCALL|
            ,|COMMON-LISP-USER|::|TEMPORAERER-BEZEICHNER|
            ,@|COMMON-LISP-USER|::|ARGUMENTE|)))))))))
  '(|COMMON-LISP-USER|::|OBJEKT| |COMMON-LISP-USER|::|SLOT|
    |COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGUMENTE|)))
